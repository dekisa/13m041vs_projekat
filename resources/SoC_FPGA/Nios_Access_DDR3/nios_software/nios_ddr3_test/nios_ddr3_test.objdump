
nios_ddr3_test.elf:     file format elf32-littlenios2
nios_ddr3_test.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000244

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0000ff14 memsz 0x0000ff14 flags r-x
    LOAD off    0x00010f34 vaddr 0x0000ff34 paddr 0x00011a20 align 2**12
         filesz 0x00001aec memsz 0x00001aec flags rw-
    LOAD off    0x0001350c vaddr 0x0001350c paddr 0x0001350c align 2**12
         filesz 0x00000000 memsz 0x00000160 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000f92c  00000244  00000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000003c4  0000fb70  0000fb70  00010b70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001aec  0000ff34  00011a20  00010f34  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  0001350c  0001350c  0001350c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  0001366c  0001366c  00012a20  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00012a20  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000f28  00000000  00000000  00012a48  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002492b  00000000  00000000  00013970  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000094d4  00000000  00000000  0003829b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000b8ae  00000000  00000000  0004176f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000215c  00000000  00000000  0004d020  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000393e  00000000  00000000  0004f17c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00017deb  00000000  00000000  00052aba  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  0006a8a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001920  00000000  00000000  0006a8d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0006f2fe  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0006f301  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0006f30d  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0006f30e  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  0006f30f  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  0006f318  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  0006f321  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000a  00000000  00000000  0006f32a  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000003b  00000000  00000000  0006f334  2**0
                  CONTENTS, READONLY
 26 .jdi          000051b5  00000000  00000000  0006f36f  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     002be184  00000000  00000000  00074524  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000244 l    d  .text	00000000 .text
0000fb70 l    d  .rodata	00000000 .rodata
0000ff34 l    d  .rwdata	00000000 .rwdata
0001350c l    d  .bss	00000000 .bss
0001366c l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../nios_ddr3_test_bsp//obj/HAL/src/crt0.o
0000028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 mem_verify.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0000fc82 l     O .rodata	00000010 zeroes.4404
00002ef4 l     F .text	000000bc __sbprintf
0000fc92 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00003104 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00004c34 l     F .text	00000008 __fp_unlock
00004c48 l     F .text	0000019c __sinit.part.1
00004de4 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0000ff34 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
00010378 l     O .rwdata	00000020 lc_ctype_charset
00010358 l     O .rwdata	00000020 lc_message_charset
00010398 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0000fcc4 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00008200 l     F .text	000000fc __sprint_r.part.0
0000fdf8 l     O .rodata	00000010 blanks.4348
0000fde8 l     O .rodata	00000010 zeroes.4349
0000978c l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0000d294 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0000d3fc l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000d428 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000d528 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000d61c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000d708 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000d8f0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00011a10 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0000db50 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000dc98 l     F .text	00000038 alt_dev_reg
00010980 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000df94 l     F .text	0000020c altera_avalon_jtag_uart_irq
0000e1a0 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000e7e0 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000ea24 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000eedc l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0000f01c l     F .text	00000050 alt_get_errno
0000f06c l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00013540 g     O .bss	00000004 alt_instruction_exception_handler
00000b5c g     F .text	00000018 putchar
000076dc g     F .text	00000074 _mprec_log10
000077c8 g     F .text	0000008c __any_on
00009e80 g     F .text	00000054 _isatty_r
0000fcd0 g     O .rodata	00000028 __mprec_tinytens
0000d82c g     F .text	0000007c alt_main
00000b74 g     F .text	000000c0 _puts_r
0001356c g     O .bss	00000100 alt_irq
00009ed4 g     F .text	00000060 _lseek_r
00011a20 g       *ABS*	00000000 __flash_rwdata_start
0000bdc0 g     F .text	00000088 .hidden __eqdf2
0001366c g       *ABS*	00000000 __alt_heap_start
00000b18 g     F .text	0000003c printf
00009f94 g     F .text	0000009c _wcrtomb_r
000080c0 g     F .text	0000005c __sseek
00004f84 g     F .text	00000010 __sinit
00009848 g     F .text	00000140 __swbuf_r
00005a4c g     F .text	0000007c _setlocale_r
00004dec g     F .text	00000068 __sfmoreglue
0000d8cc g     F .text	00000024 __malloc_unlock
000065d4 g     F .text	0000015c memmove
00004f6c g     F .text	00000018 _cleanup
00006858 g     F .text	000000a8 _Balloc
0000be48 g     F .text	000000dc .hidden __gtdf2
0000f434 g     F .text	00000024 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00009e24 g     F .text	0000005c _fstat_r
00013524 g     O .bss	00000004 errno
0000803c g     F .text	00000008 __seofread
0001352c g     O .bss	00000004 alt_argv
000199e0 g       *ABS*	00000000 _gp
00010800 g     O .rwdata	00000180 alt_fd_list
00000b54 g     F .text	00000008 _putchar_r
0000f458 g     F .text	00000090 alt_find_dev
000009a0 g     F .text	00000148 memcpy
0000030c g     F .text	000004e0 TMEM_Verify
00004c3c g     F .text	0000000c _cleanup_r
0000d0ac g     F .text	000000dc .hidden __floatsidf
0000efa0 g     F .text	0000007c alt_io_redirect
0000bf24 g     F .text	000000f4 .hidden __ltdf2
0000fb70 g       *ABS*	00000000 __DTOR_END__
00000c34 g     F .text	00000014 puts
0000f740 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00007f20 g     F .text	00000074 __fpclassifyd
00007638 g     F .text	000000a4 __ratio
00009770 g     F .text	0000001c __vfiprintf_internal
0000e3a0 g     F .text	0000021c altera_avalon_jtag_uart_read
00000ae8 g     F .text	00000030 _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
000008e4 g     F .text	00000064 .hidden __udivsi3
0000d578 g     F .text	000000a4 isatty
0000fd20 g     O .rodata	000000c8 __mprec_tens
00005ac8 g     F .text	0000000c __locale_charset
0000f6b0 g     F .text	00000090 alt_icache_flush
00013520 g     O .bss	00000004 __malloc_top_pad
000119e8 g     O .rwdata	00000004 __mb_cur_max
00005af8 g     F .text	0000000c _localeconv_r
00006c64 g     F .text	0000003c __i2b
00005408 g     F .text	000004bc __sfvwrite_r
00007f94 g     F .text	00000054 _sbrk_r
00009f34 g     F .text	00000060 _read_r
00011a08 g     O .rwdata	00000004 alt_max_fd
00009b18 g     F .text	000000f0 _fclose_r
00004c04 g     F .text	00000030 fflush
0001351c g     O .bss	00000004 __malloc_max_sbrked_mem
0000ac2c g     F .text	000008ac .hidden __adddf3
000073e0 g     F .text	0000010c __b2d
0000a6f4 g     F .text	00000538 .hidden __umoddi3
0000d758 g     F .text	000000d4 lseek
000119e0 g     O .rwdata	00000004 _global_impure_ptr
000079bc g     F .text	00000564 _realloc_r
0001366c g       *ABS*	00000000 __bss_end
0000edec g     F .text	000000f0 alt_iic_isr_register
0000f32c g     F .text	00000108 alt_tick
0000a17c g     F .text	00000578 .hidden __udivdi3
00009d80 g     F .text	00000024 _fputwc_r
0000fcf8 g     O .rodata	00000028 __mprec_bigtens
00006a48 g     F .text	00000104 __s2b
0000d188 g     F .text	000000a8 .hidden __floatunsidf
00007120 g     F .text	00000060 __mcmp
00004fa4 g     F .text	00000018 __fp_lock_all
0000eda0 g     F .text	0000004c alt_ic_irq_enabled
0000f290 g     F .text	0000009c alt_alarm_stop
00013534 g     O .bss	00000004 alt_irq_active
000000fc g     F .exceptions	000000d4 alt_irq_handler
000107d8 g     O .rwdata	00000028 alt_dev_null
0000d3b4 g     F .text	00000048 alt_dcache_flush_all
00006b4c g     F .text	00000068 __hi0bits
0000d02c g     F .text	00000080 .hidden __fixdfsi
00011a20 g       *ABS*	00000000 __ram_rwdata_end
00011a00 g     O .rwdata	00000008 alt_dev_list
0000dba0 g     F .text	000000f8 write
00007854 g     F .text	000000a0 _putc_r
0000ff34 g       *ABS*	00000000 __ram_rodata_end
0000d478 g     F .text	000000b0 fstat
0000bf24 g     F .text	000000f4 .hidden __ledf2
00006e98 g     F .text	00000140 __pow5mult
00008314 g     F .text	0000145c ___vfiprintf_internal_r
00013514 g     O .bss	00000004 __nlocale_changed
00000948 g     F .text	00000058 .hidden __umodsi3
0001366c g       *ABS*	00000000 end
0000decc g     F .text	000000c8 altera_avalon_jtag_uart_init
000001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
0000fb70 g       *ABS*	00000000 __CTOR_LIST__
000186a0 g       *ABS*	00000000 __alt_stack_pointer
0000e858 g     F .text	0000008c alt_avalon_timer_sc_init
0000d230 g     F .text	00000064 .hidden __clzsi2
0000e5bc g     F .text	00000224 altera_avalon_jtag_uart_write
00004f94 g     F .text	00000004 __sfp_lock_acquire
000064f0 g     F .text	000000e4 memchr
00000ce0 g     F .text	000021f8 ___vfprintf_internal_r
000050f8 g     F .text	00000310 _free_r
00005ad4 g     F .text	00000010 __locale_mb_cur_max
0000f9bc g     F .text	00000180 __call_exitprocs
00013510 g     O .bss	00000004 __mlocale_changed
000119ec g     O .rwdata	00000004 __malloc_sbrk_base
00000244 g     F .text	0000004c _start
00013538 g     O .bss	00000004 _alt_tick_rate
00006fd8 g     F .text	00000148 __lshift
0001353c g     O .bss	00000004 _alt_nticks
0000d940 g     F .text	000000fc read
0000dd08 g     F .text	00000060 alt_sys_init
0000f8a4 g     F .text	00000118 __register_exitproc
00006ca0 g     F .text	000001f8 __multiply
0000e248 g     F .text	00000068 altera_avalon_jtag_uart_close
0000ff34 g       *ABS*	00000000 __ram_rwdata_start
0000fb70 g       *ABS*	00000000 __ram_rodata_start
00013544 g     O .bss	00000028 __malloc_current_mallinfo
000074ec g     F .text	0000014c __d2b
0000dd68 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0000f5fc g     F .text	000000b4 alt_get_fd
00009a00 g     F .text	00000054 _close_r
0000f828 g     F .text	0000007c memcmp
0000de28 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0001366c g       *ABS*	00000000 __alt_stack_base
0000de78 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00002fb0 g     F .text	00000154 __swsetup_r
0000b4d8 g     F .text	000008e8 .hidden __divdf3
00004e54 g     F .text	00000118 __sfp
00007750 g     F .text	00000078 __copybits
000103d0 g     O .rwdata	00000408 __malloc_av_
00004fa0 g     F .text	00000004 __sinit_lock_release
0000c018 g     F .text	00000718 .hidden __muldf3
00007fe8 g     F .text	00000054 __sread
0000f4e8 g     F .text	00000114 alt_find_file
0000ea74 g     F .text	000000a4 alt_dev_llist_insert
0000d8a8 g     F .text	00000024 __malloc_lock
0000daa0 g     F .text	000000b0 sbrk
00004ba8 g     F .text	0000005c _fflush_r
00009a54 g     F .text	000000c4 _calloc_r
0001350c g       *ABS*	00000000 __bss_start
00006730 g     F .text	00000128 memset
00000290 g     F .text	0000007c main
00013530 g     O .bss	00000004 alt_envp
00013518 g     O .bss	00000004 __malloc_max_total_mem
0000ddc8 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00009988 g     F .text	00000018 __swbuf
0000811c g     F .text	00000008 __sclose
000186a0 g       *ABS*	00000000 __alt_heap_limit
00009c08 g     F .text	00000014 fclose
00003304 g     F .text	00001688 _dtoa_r
00005ce4 g     F .text	0000080c _malloc_r
0000a0f0 g     F .text	00000030 __ascii_wctomb
00011a0c g     O .rwdata	00000004 alt_errno
000058c4 g     F .text	000000c4 _fwalk
000078f4 g     F .text	000000c8 putc
000007ec g     F .text	00000084 .hidden __divsi3
00004fd4 g     F .text	00000124 _malloc_trim_r
0000fb70 g       *ABS*	00000000 __CTOR_END__
00008124 g     F .text	000000dc strcmp
0000fb70 g       *ABS*	00000000 __flash_rodata_start
0000fb70 g       *ABS*	00000000 __DTOR_LIST__
0000bdc0 g     F .text	00000088 .hidden __nedf2
0000dcd0 g     F .text	00000038 alt_irq_init
0000da3c g     F .text	00000064 alt_release_fd
0000fe08 g     O .rodata	00000100 .hidden __clz_tab
0001350c g     O .bss	00000004 _PathLocale
0000f7dc g     F .text	00000014 atexit
000099a0 g     F .text	00000060 _write_r
00005b04 g     F .text	00000018 setlocale
000119e4 g     O .rwdata	00000004 _impure_ptr
00013528 g     O .bss	00000004 alt_argc
0000498c g     F .text	0000021c __sflush_r
0000eb78 g     F .text	00000060 _do_dtors
00005af0 g     F .text	00000008 __locale_cjk_lang
00000020 g       .exceptions	00000000 alt_irq_entry
0000737c g     F .text	00000064 __ulp
00004fbc g     F .text	00000018 __fp_unlock_all
000119f8 g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
00005b1c g     F .text	0000000c localeconv
0000ec0c g     F .text	00000050 alt_ic_isr_register
00011a20 g       *ABS*	00000000 _edata
0001366c g       *ABS*	00000000 _end
00009c1c g     F .text	00000164 __fputwc
00000244 g       *ABS*	00000000 __ram_exceptions_end
0000e2b0 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0000ecfc g     F .text	000000a4 alt_ic_irq_disable
00008044 g     F .text	0000007c __swrite
000119f0 g     O .rwdata	00000004 __malloc_trim_threshold
00005ae4 g     F .text	0000000c __locale_msgcharset
0000f7f0 g     F .text	00000038 exit
00005988 g     F .text	000000c4 _fwalk_reent
00007180 g     F .text	000001fc __mdiff
00000870 g     F .text	00000074 .hidden __modsi3
000186a0 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00004f98 g     F .text	00000004 __sfp_lock_release
0000fb3c g     F .text	00000034 _exit
0000e8e4 g     F .text	00000140 alt_alarm_start
00005b28 g     F .text	000001bc __smakebuf_r
00000c48 g     F .text	00000098 strlen
0000f138 g     F .text	00000158 open
0000be48 g     F .text	000000dc .hidden __gedf2
000119f4 g     O .rwdata	00000004 __wctomb
000082fc g     F .text	00000018 __sprint_r
0000ebd8 g     F .text	00000034 alt_icache_flush_all
00011a14 g     O .rwdata	00000004 alt_priority_mask
0000ec5c g     F .text	000000a0 alt_ic_irq_enable
00002ed8 g     F .text	0000001c __vfprintf_internal
0000a120 g     F .text	0000005c _wctomb_r
0000c730 g     F .text	000008fc .hidden __subdf3
00006bb4 g     F .text	000000b0 __lo0bits
00011a18 g     O .rwdata	00000008 alt_alarm_list
0000eb18 g     F .text	00000060 _do_ctors
0000a030 g     F .text	000000c0 wcrtomb
0000d2e4 g     F .text	000000d0 close
0000d684 g     F .text	00000084 alt_load
00009da4 g     F .text	00000080 fputwc
00004f9c g     F .text	00000004 __sinit_lock_acquire
00006928 g     F .text	00000120 __multadd
00006900 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <_gp+0xfffe6624>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08409114 	ori	at,at,580
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	00800074 	movhi	r2,1
 140:	108d5b04 	addi	r2,r2,13676
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	00800074 	movhi	r2,1
 158:	108d5b04 	addi	r2,r2,13676
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <_gp+0xfffe674c>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <_gp+0xfffe6740>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	0001883a 	nop
}
 1b8:	0001883a 	nop
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1e4:	000531fa 	rdctl	r2,exception
 1e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1ec:	e0bffd17 	ldw	r2,-12(fp)
 1f0:	10801f0c 	andi	r2,r2,124
 1f4:	1004d0ba 	srli	r2,r2,2
 1f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 1fc:	0005333a 	rdctl	r2,badaddr
 200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 204:	d0a6d817 	ldw	r2,-25760(gp)
 208:	10000726 	beq	r2,zero,228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 20c:	d0a6d817 	ldw	r2,-25760(gp)
 210:	e0fffd17 	ldw	r3,-12(fp)
 214:	e1bffe17 	ldw	r6,-8(fp)
 218:	e17fff17 	ldw	r5,-4(fp)
 21c:	1809883a 	mov	r4,r3
 220:	103ee83a 	callr	r2
 224:	00000206 	br	230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 22c:	0005883a 	mov	r2,zero
}
 230:	e037883a 	mov	sp,fp
 234:	dfc00117 	ldw	ra,4(sp)
 238:	df000017 	ldw	fp,0(sp)
 23c:	dec00204 	addi	sp,sp,8
 240:	f800283a 	ret

Disassembly of section .text:

00000244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
     244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
     248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
     24c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
     250:	00bffd16 	blt	zero,r2,248 <_gp+0xfffe6868>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     254:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
     258:	dee1a814 	ori	sp,sp,34464
    movhi gp, %hi(_gp)
     25c:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     260:	d6a67814 	ori	gp,gp,39392
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     264:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     268:	108d4314 	ori	r2,r2,13580

    movhi r3, %hi(__bss_end)
     26c:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     270:	18cd9b14 	ori	r3,r3,13932

    beq r2, r3, 1f
     274:	10c00326 	beq	r2,r3,284 <_start+0x40>

0:
    stw zero, (r2)
     278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     27c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     280:	10fffd36 	bltu	r2,r3,278 <_gp+0xfffe6898>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     284:	000d6840 	call	d684 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     288:	000d82c0 	call	d82c <alt_main>

0000028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     28c:	003fff06 	br	28c <_gp+0xfffe68ac>

00000290 <main>:
 */

#include "mem_verify.h"
#include "terasic_includes.h"
int main()
{
     290:	defffd04 	addi	sp,sp,-12
     294:	dfc00215 	stw	ra,8(sp)
     298:	df000115 	stw	fp,4(sp)
     29c:	df000104 	addi	fp,sp,4

  printf("Hello from Nios II!\n");
     2a0:	01000074 	movhi	r4,1
     2a4:	213edc04 	addi	r4,r4,-1168
     2a8:	0000c340 	call	c34 <puts>
  bool  bPass;
  printf("HPS DDR3 Memory test code\n");
     2ac:	01000074 	movhi	r4,1
     2b0:	213ee104 	addi	r4,r4,-1148
     2b4:	0000c340 	call	c34 <puts>
  bPass=TMEM_Verify(ADDRESS_SPAN_EXTENDER_0_WINDOWED_SLAVE_BASE, ADDRESS_SPAN_EXTENDER_0_WINDOWED_SLAVE_SPAN, 0x01, TRUE);
     2b8:	01c00044 	movi	r7,1
     2bc:	01800044 	movi	r6,1
     2c0:	01420034 	movhi	r5,2048
     2c4:	01020034 	movhi	r4,2048
     2c8:	000030c0 	call	30c <TMEM_Verify>
     2cc:	e0bfff15 	stw	r2,-4(fp)
  if(bPass)
     2d0:	e0bfff17 	ldw	r2,-4(fp)
     2d4:	10000426 	beq	r2,zero,2e8 <main+0x58>
	  printf("HPS DDR3 test success\n");
     2d8:	01000074 	movhi	r4,1
     2dc:	213ee804 	addi	r4,r4,-1120
     2e0:	0000c340 	call	c34 <puts>
     2e4:	00000306 	br	2f4 <main+0x64>
  else
	  printf("HPS DDR3 test failed\n");
     2e8:	01000074 	movhi	r4,1
     2ec:	213eee04 	addi	r4,r4,-1096
     2f0:	0000c340 	call	c34 <puts>
  return 0;
     2f4:	0005883a 	mov	r2,zero
}
     2f8:	e037883a 	mov	sp,fp
     2fc:	dfc00117 	ldw	ra,4(sp)
     300:	df000017 	ldw	fp,0(sp)
     304:	dec00204 	addi	sp,sp,8
     308:	f800283a 	ret

0000030c <TMEM_Verify>:
 *      Author: matthew
 */
#include "terasic_includes.h"
#include "mem_verify.h"

bool TMEM_Verify(alt_u32 BaseAddr, alt_u32 ByteLen, alt_u32 InitValue, bool bShowMessage){
     30c:	defee104 	addi	sp,sp,-1148
     310:	dfc11e15 	stw	ra,1144(sp)
     314:	df011d15 	stw	fp,1140(sp)
     318:	dc811c15 	stw	r18,1136(sp)
     31c:	dc411b15 	stw	r17,1132(sp)
     320:	dc011a15 	stw	r16,1128(sp)
     324:	df011d04 	addi	fp,sp,1140
     328:	e13ff915 	stw	r4,-28(fp)
     32c:	e17ffa15 	stw	r5,-24(fp)
     330:	e1bffb15 	stw	r6,-20(fp)
     334:	e1fffc15 	stw	r7,-16(fp)
    bool bPass = TRUE;
     338:	00800044 	movi	r2,1
     33c:	e0bee415 	stw	r2,-1136(fp)
    typedef alt_u32 my_data;
    my_data szData[257];
    int i, nRemainedLen, nAccessLen;
    my_data *pDes, *pSrc;
    int nItemNum, nPos;
    const int my_data_size = sizeof(my_data);
     340:	00800104 	movi	r2,4
     344:	e0beec15 	stw	r2,-1104(fp)
    int nProgressIndex=0;
     348:	e03eeb15 	stw	zero,-1108(fp)
    alt_u32 szProgress[10];

    if (bShowMessage){
     34c:	e0bffc17 	ldw	r2,-16(fp)
     350:	10001726 	beq	r2,zero,3b0 <TMEM_Verify+0xa4>
        for(i=0;i<10;i++){
     354:	e03ee515 	stw	zero,-1132(fp)
     358:	00001206 	br	3a4 <TMEM_Verify+0x98>
            szProgress[i] = ByteLen/10*(i+1);
     35c:	e0bffa17 	ldw	r2,-24(fp)
     360:	01400284 	movi	r5,10
     364:	1009883a 	mov	r4,r2
     368:	00008e40 	call	8e4 <__udivsi3>
     36c:	1007883a 	mov	r3,r2
     370:	e0bee517 	ldw	r2,-1132(fp)
     374:	10800044 	addi	r2,r2,1
     378:	1887383a 	mul	r3,r3,r2
     37c:	e0bee517 	ldw	r2,-1132(fp)
     380:	1085883a 	add	r2,r2,r2
     384:	1085883a 	add	r2,r2,r2
     388:	e13ee404 	addi	r4,fp,-1136
     38c:	2085883a 	add	r2,r4,r2
     390:	10810b04 	addi	r2,r2,1068
     394:	10c00015 	stw	r3,0(r2)
    const int my_data_size = sizeof(my_data);
    int nProgressIndex=0;
    alt_u32 szProgress[10];

    if (bShowMessage){
        for(i=0;i<10;i++){
     398:	e0bee517 	ldw	r2,-1132(fp)
     39c:	10800044 	addi	r2,r2,1
     3a0:	e0bee515 	stw	r2,-1132(fp)
     3a4:	e0bee517 	ldw	r2,-1132(fp)
     3a8:	10800290 	cmplti	r2,r2,10
     3ac:	103feb1e 	bne	r2,zero,35c <_gp+0xfffe697c>
            szProgress[i] = ByteLen/10*(i+1);
        }
    }

    nItemNum = sizeof(szData)/sizeof(szData[0]);
     3b0:	00804044 	movi	r2,257
     3b4:	e0bee915 	stw	r2,-1116(fp)
    for(i=0;i<nItemNum;i++){
     3b8:	e03ee515 	stw	zero,-1132(fp)
     3bc:	00001e06 	br	438 <TMEM_Verify+0x12c>
        if (i == 0)
     3c0:	e0bee517 	ldw	r2,-1132(fp)
     3c4:	1000091e 	bne	r2,zero,3ec <TMEM_Verify+0xe0>
            szData[i] = InitValue;
     3c8:	e0bee517 	ldw	r2,-1132(fp)
     3cc:	1085883a 	add	r2,r2,r2
     3d0:	1085883a 	add	r2,r2,r2
     3d4:	e0fee404 	addi	r3,fp,-1136
     3d8:	1885883a 	add	r2,r3,r2
     3dc:	10800a04 	addi	r2,r2,40
     3e0:	e0fffb17 	ldw	r3,-20(fp)
     3e4:	10c00015 	stw	r3,0(r2)
     3e8:	00001006 	br	42c <TMEM_Verify+0x120>
        else
            szData[i] = szData[i-1] * 13;
     3ec:	e0bee517 	ldw	r2,-1132(fp)
     3f0:	10bfffc4 	addi	r2,r2,-1
     3f4:	1085883a 	add	r2,r2,r2
     3f8:	1085883a 	add	r2,r2,r2
     3fc:	e13ee404 	addi	r4,fp,-1136
     400:	2085883a 	add	r2,r4,r2
     404:	10800a04 	addi	r2,r2,40
     408:	10800017 	ldw	r2,0(r2)
     40c:	10c00364 	muli	r3,r2,13
     410:	e0bee517 	ldw	r2,-1132(fp)
     414:	1085883a 	add	r2,r2,r2
     418:	1085883a 	add	r2,r2,r2
     41c:	e13ee404 	addi	r4,fp,-1136
     420:	2085883a 	add	r2,r4,r2
     424:	10800a04 	addi	r2,r2,40
     428:	10c00015 	stw	r3,0(r2)
            szProgress[i] = ByteLen/10*(i+1);
        }
    }

    nItemNum = sizeof(szData)/sizeof(szData[0]);
    for(i=0;i<nItemNum;i++){
     42c:	e0bee517 	ldw	r2,-1132(fp)
     430:	10800044 	addi	r2,r2,1
     434:	e0bee515 	stw	r2,-1132(fp)
     438:	e0fee517 	ldw	r3,-1132(fp)
     43c:	e0bee917 	ldw	r2,-1116(fp)
     440:	18bfdf16 	blt	r3,r2,3c0 <_gp+0xfffe69e0>
        if (i == 0)
            szData[i] = InitValue;
        else
            szData[i] = szData[i-1] * 13;
    }
    szData[nItemNum-1] = 0xAAAAAAAA;
     444:	e0bee917 	ldw	r2,-1116(fp)
     448:	10bfffc4 	addi	r2,r2,-1
     44c:	1085883a 	add	r2,r2,r2
     450:	1085883a 	add	r2,r2,r2
     454:	e0fee404 	addi	r3,fp,-1136
     458:	1885883a 	add	r2,r3,r2
     45c:	10c00a04 	addi	r3,r2,40
     460:	00aaaaf4 	movhi	r2,43691
     464:	10aaaa84 	addi	r2,r2,-21846
     468:	18800015 	stw	r2,0(r3)
    szData[nItemNum-2] = 0x55555555;
     46c:	e0bee917 	ldw	r2,-1116(fp)
     470:	10bfff84 	addi	r2,r2,-2
     474:	1085883a 	add	r2,r2,r2
     478:	1085883a 	add	r2,r2,r2
     47c:	e13ee404 	addi	r4,fp,-1136
     480:	2085883a 	add	r2,r4,r2
     484:	10c00a04 	addi	r3,r2,40
     488:	00955574 	movhi	r2,21845
     48c:	10955544 	addi	r2,r2,21845
     490:	18800015 	stw	r2,0(r3)
    szData[nItemNum-3] = 0x00000000;
     494:	e0bee917 	ldw	r2,-1116(fp)
     498:	10bfff44 	addi	r2,r2,-3
     49c:	1085883a 	add	r2,r2,r2
     4a0:	1085883a 	add	r2,r2,r2
     4a4:	e0fee404 	addi	r3,fp,-1136
     4a8:	1885883a 	add	r2,r3,r2
     4ac:	10800a04 	addi	r2,r2,40
     4b0:	10000015 	stw	zero,0(r2)
    szData[nItemNum-4] = 0xFFFFFFFF;
     4b4:	e0bee917 	ldw	r2,-1116(fp)
     4b8:	10bfff04 	addi	r2,r2,-4
     4bc:	1085883a 	add	r2,r2,r2
     4c0:	1085883a 	add	r2,r2,r2
     4c4:	e13ee404 	addi	r4,fp,-1136
     4c8:	2085883a 	add	r2,r4,r2
     4cc:	10800a04 	addi	r2,r2,40
     4d0:	00ffffc4 	movi	r3,-1
     4d4:	10c00015 	stw	r3,0(r2)

    if (bShowMessage)
     4d8:	e0bffc17 	ldw	r2,-16(fp)
     4dc:	10000326 	beq	r2,zero,4ec <TMEM_Verify+0x1e0>
        printf("write...\n");
     4e0:	01000074 	movhi	r4,1
     4e4:	213ef404 	addi	r4,r4,-1072
     4e8:	0000c340 	call	c34 <puts>
    // write
    pDes = (my_data *)BaseAddr;
     4ec:	e0bff917 	ldw	r2,-28(fp)
     4f0:	e0bee715 	stw	r2,-1124(fp)
    nAccessLen = sizeof(szData);
     4f4:	00810104 	movi	r2,1028
     4f8:	e0bee615 	stw	r2,-1128(fp)
    nItemNum = nAccessLen / my_data_size;
     4fc:	e17eec17 	ldw	r5,-1104(fp)
     500:	e13ee617 	ldw	r4,-1128(fp)
     504:	00007ec0 	call	7ec <__divsi3>
     508:	e0bee915 	stw	r2,-1116(fp)
    nPos = 0;
     50c:	e03eea15 	stw	zero,-1112(fp)
    while(nPos < ByteLen){
     510:	00003506 	br	5e8 <TMEM_Verify+0x2dc>
        nRemainedLen = ByteLen - nPos;
     514:	e0beea17 	ldw	r2,-1112(fp)
     518:	e0fffa17 	ldw	r3,-24(fp)
     51c:	1885c83a 	sub	r2,r3,r2
     520:	e0beed15 	stw	r2,-1100(fp)
        if (nAccessLen > nRemainedLen){
     524:	e0bee617 	ldw	r2,-1128(fp)
     528:	e0feed17 	ldw	r3,-1100(fp)
     52c:	1880060e 	bge	r3,r2,548 <TMEM_Verify+0x23c>
            nAccessLen = nRemainedLen;
     530:	e0beed17 	ldw	r2,-1100(fp)
     534:	e0bee615 	stw	r2,-1128(fp)
            nItemNum = nAccessLen / my_data_size;
     538:	e17eec17 	ldw	r5,-1104(fp)
     53c:	e13ee617 	ldw	r4,-1128(fp)
     540:	00007ec0 	call	7ec <__divsi3>
     544:	e0bee915 	stw	r2,-1116(fp)
        }
        memcpy(pDes, szData, nAccessLen);
     548:	e0fee617 	ldw	r3,-1128(fp)
     54c:	e0beee04 	addi	r2,fp,-1096
     550:	180d883a 	mov	r6,r3
     554:	100b883a 	mov	r5,r2
     558:	e13ee717 	ldw	r4,-1124(fp)
     55c:	00009a00 	call	9a0 <memcpy>
        pDes += nItemNum;
     560:	e0bee917 	ldw	r2,-1116(fp)
     564:	1085883a 	add	r2,r2,r2
     568:	1085883a 	add	r2,r2,r2
     56c:	1007883a 	mov	r3,r2
     570:	e0bee717 	ldw	r2,-1124(fp)
     574:	10c5883a 	add	r2,r2,r3
     578:	e0bee715 	stw	r2,-1124(fp)
        nPos += nAccessLen;
     57c:	e0feea17 	ldw	r3,-1112(fp)
     580:	e0bee617 	ldw	r2,-1128(fp)
     584:	1885883a 	add	r2,r3,r2
     588:	e0beea15 	stw	r2,-1112(fp)

        if (bShowMessage){
     58c:	e0bffc17 	ldw	r2,-16(fp)
     590:	10001526 	beq	r2,zero,5e8 <TMEM_Verify+0x2dc>
            if (nProgressIndex <= 9 && nPos >= szProgress[nProgressIndex]){
     594:	e0beeb17 	ldw	r2,-1108(fp)
     598:	10800288 	cmpgei	r2,r2,10
     59c:	1000121e 	bne	r2,zero,5e8 <TMEM_Verify+0x2dc>
     5a0:	e0beeb17 	ldw	r2,-1108(fp)
     5a4:	1085883a 	add	r2,r2,r2
     5a8:	1085883a 	add	r2,r2,r2
     5ac:	e0fee404 	addi	r3,fp,-1136
     5b0:	1885883a 	add	r2,r3,r2
     5b4:	10810b04 	addi	r2,r2,1068
     5b8:	10800017 	ldw	r2,0(r2)
     5bc:	e0feea17 	ldw	r3,-1112(fp)
     5c0:	18800936 	bltu	r3,r2,5e8 <TMEM_Verify+0x2dc>
                nProgressIndex++;
     5c4:	e0beeb17 	ldw	r2,-1108(fp)
     5c8:	10800044 	addi	r2,r2,1
     5cc:	e0beeb15 	stw	r2,-1108(fp)
                printf("%02d%% ", nProgressIndex*10);
     5d0:	e0beeb17 	ldw	r2,-1108(fp)
     5d4:	108002a4 	muli	r2,r2,10
     5d8:	100b883a 	mov	r5,r2
     5dc:	01000074 	movhi	r4,1
     5e0:	213ef704 	addi	r4,r4,-1060
     5e4:	0000b180 	call	b18 <printf>
    // write
    pDes = (my_data *)BaseAddr;
    nAccessLen = sizeof(szData);
    nItemNum = nAccessLen / my_data_size;
    nPos = 0;
    while(nPos < ByteLen){
     5e8:	e0feea17 	ldw	r3,-1112(fp)
     5ec:	e0bffa17 	ldw	r2,-24(fp)
     5f0:	18bfc836 	bltu	r3,r2,514 <_gp+0xfffe6b34>
                printf("%02d%% ", nProgressIndex*10);
            }
        }
    }

    alt_dcache_flush_all();
     5f4:	000d3b40 	call	d3b4 <alt_dcache_flush_all>

    if (bShowMessage){
     5f8:	e0bffc17 	ldw	r2,-16(fp)
     5fc:	10000426 	beq	r2,zero,610 <TMEM_Verify+0x304>
        nProgressIndex = 0;
     600:	e03eeb15 	stw	zero,-1108(fp)
        printf("\nread/verify...\n");
     604:	01000074 	movhi	r4,1
     608:	213ef904 	addi	r4,r4,-1052
     60c:	0000c340 	call	c34 <puts>
    }

    // read & verify
    pSrc = (my_data *)BaseAddr;
     610:	e0bff917 	ldw	r2,-28(fp)
     614:	e0bee815 	stw	r2,-1120(fp)
    nAccessLen = sizeof(szData);
     618:	00810104 	movi	r2,1028
     61c:	e0bee615 	stw	r2,-1128(fp)
    nItemNum = nAccessLen / my_data_size;
     620:	e17eec17 	ldw	r5,-1104(fp)
     624:	e13ee617 	ldw	r4,-1128(fp)
     628:	00007ec0 	call	7ec <__divsi3>
     62c:	e0bee915 	stw	r2,-1116(fp)
    nPos = 0;
     630:	e03eea15 	stw	zero,-1112(fp)
    while(bPass && nPos < ByteLen){
     634:	00005b06 	br	7a4 <TMEM_Verify+0x498>
        nRemainedLen = ByteLen - nPos;
     638:	e0beea17 	ldw	r2,-1112(fp)
     63c:	e0fffa17 	ldw	r3,-24(fp)
     640:	1885c83a 	sub	r2,r3,r2
     644:	e0beed15 	stw	r2,-1100(fp)
        if (nAccessLen > nRemainedLen){
     648:	e0bee617 	ldw	r2,-1128(fp)
     64c:	e0feed17 	ldw	r3,-1100(fp)
     650:	1880060e 	bge	r3,r2,66c <TMEM_Verify+0x360>
            nAccessLen = nRemainedLen;
     654:	e0beed17 	ldw	r2,-1100(fp)
     658:	e0bee615 	stw	r2,-1128(fp)
            nItemNum = nAccessLen / my_data_size;
     65c:	e17eec17 	ldw	r5,-1104(fp)
     660:	e13ee617 	ldw	r4,-1128(fp)
     664:	00007ec0 	call	7ec <__divsi3>
     668:	e0bee915 	stw	r2,-1116(fp)
        }
        pDes = szData;
     66c:	e0beee04 	addi	r2,fp,-1096
     670:	e0bee715 	stw	r2,-1124(fp)
        for(i=0;i<nItemNum && bPass;i++){
     674:	e03ee515 	stw	zero,-1132(fp)
     678:	00002a06 	br	724 <TMEM_Verify+0x418>
            if (*pSrc++ != *pDes++){
     67c:	e0bee817 	ldw	r2,-1120(fp)
     680:	10c00104 	addi	r3,r2,4
     684:	e0fee815 	stw	r3,-1120(fp)
     688:	10c00017 	ldw	r3,0(r2)
     68c:	e0bee717 	ldw	r2,-1124(fp)
     690:	11000104 	addi	r4,r2,4
     694:	e13ee715 	stw	r4,-1124(fp)
     698:	10800017 	ldw	r2,0(r2)
     69c:	18801e26 	beq	r3,r2,718 <TMEM_Verify+0x40c>
                if (bShowMessage)
     6a0:	e0bffc17 	ldw	r2,-16(fp)
     6a4:	10001b26 	beq	r2,zero,714 <TMEM_Verify+0x408>
                    printf("verify ng,address==%08Xh, read=%08Xh, expected=%08Xh, WordIndex=%Xh\n",pSrc-1, (int)*(pSrc-1), (int)szData[i], (nPos/my_data_size)+i);
     6a8:	e0bee817 	ldw	r2,-1120(fp)
     6ac:	143fff04 	addi	r16,r2,-4
     6b0:	e0bee817 	ldw	r2,-1120(fp)
     6b4:	10bfff04 	addi	r2,r2,-4
     6b8:	10800017 	ldw	r2,0(r2)
     6bc:	1023883a 	mov	r17,r2
     6c0:	e0bee517 	ldw	r2,-1132(fp)
     6c4:	1085883a 	add	r2,r2,r2
     6c8:	1085883a 	add	r2,r2,r2
     6cc:	e13ee404 	addi	r4,fp,-1136
     6d0:	2085883a 	add	r2,r4,r2
     6d4:	10800a04 	addi	r2,r2,40
     6d8:	10800017 	ldw	r2,0(r2)
     6dc:	1025883a 	mov	r18,r2
     6e0:	e17eec17 	ldw	r5,-1104(fp)
     6e4:	e13eea17 	ldw	r4,-1112(fp)
     6e8:	00007ec0 	call	7ec <__divsi3>
     6ec:	1007883a 	mov	r3,r2
     6f0:	e0bee517 	ldw	r2,-1132(fp)
     6f4:	1885883a 	add	r2,r3,r2
     6f8:	d8800015 	stw	r2,0(sp)
     6fc:	900f883a 	mov	r7,r18
     700:	880d883a 	mov	r6,r17
     704:	800b883a 	mov	r5,r16
     708:	01000074 	movhi	r4,1
     70c:	213efd04 	addi	r4,r4,-1036
     710:	0000b180 	call	b18 <printf>
                bPass = FALSE;
     714:	e03ee415 	stw	zero,-1136(fp)
        if (nAccessLen > nRemainedLen){
            nAccessLen = nRemainedLen;
            nItemNum = nAccessLen / my_data_size;
        }
        pDes = szData;
        for(i=0;i<nItemNum && bPass;i++){
     718:	e0bee517 	ldw	r2,-1132(fp)
     71c:	10800044 	addi	r2,r2,1
     720:	e0bee515 	stw	r2,-1132(fp)
     724:	e0fee517 	ldw	r3,-1132(fp)
     728:	e0bee917 	ldw	r2,-1116(fp)
     72c:	1880020e 	bge	r3,r2,738 <TMEM_Verify+0x42c>
     730:	e0bee417 	ldw	r2,-1136(fp)
     734:	103fd11e 	bne	r2,zero,67c <_gp+0xfffe6c9c>
                if (bShowMessage)
                    printf("verify ng,address==%08Xh, read=%08Xh, expected=%08Xh, WordIndex=%Xh\n",pSrc-1, (int)*(pSrc-1), (int)szData[i], (nPos/my_data_size)+i);
                bPass = FALSE;
            }
        }
        nPos += nAccessLen;
     738:	e0feea17 	ldw	r3,-1112(fp)
     73c:	e0bee617 	ldw	r2,-1128(fp)
     740:	1885883a 	add	r2,r3,r2
     744:	e0beea15 	stw	r2,-1112(fp)
        if (bShowMessage){
     748:	e0bffc17 	ldw	r2,-16(fp)
     74c:	10001526 	beq	r2,zero,7a4 <TMEM_Verify+0x498>
            if (nProgressIndex <= 9 && nPos >= szProgress[nProgressIndex]){
     750:	e0beeb17 	ldw	r2,-1108(fp)
     754:	10800288 	cmpgei	r2,r2,10
     758:	1000121e 	bne	r2,zero,7a4 <TMEM_Verify+0x498>
     75c:	e0beeb17 	ldw	r2,-1108(fp)
     760:	1085883a 	add	r2,r2,r2
     764:	1085883a 	add	r2,r2,r2
     768:	e0fee404 	addi	r3,fp,-1136
     76c:	1885883a 	add	r2,r3,r2
     770:	10810b04 	addi	r2,r2,1068
     774:	10800017 	ldw	r2,0(r2)
     778:	e0feea17 	ldw	r3,-1112(fp)
     77c:	18800936 	bltu	r3,r2,7a4 <TMEM_Verify+0x498>
                nProgressIndex++;
     780:	e0beeb17 	ldw	r2,-1108(fp)
     784:	10800044 	addi	r2,r2,1
     788:	e0beeb15 	stw	r2,-1108(fp)
                printf("%02d%% ", nProgressIndex*10);
     78c:	e0beeb17 	ldw	r2,-1108(fp)
     790:	108002a4 	muli	r2,r2,10
     794:	100b883a 	mov	r5,r2
     798:	01000074 	movhi	r4,1
     79c:	213ef704 	addi	r4,r4,-1060
     7a0:	0000b180 	call	b18 <printf>
    // read & verify
    pSrc = (my_data *)BaseAddr;
    nAccessLen = sizeof(szData);
    nItemNum = nAccessLen / my_data_size;
    nPos = 0;
    while(bPass && nPos < ByteLen){
     7a4:	e0bee417 	ldw	r2,-1136(fp)
     7a8:	10000326 	beq	r2,zero,7b8 <TMEM_Verify+0x4ac>
     7ac:	e0feea17 	ldw	r3,-1112(fp)
     7b0:	e0bffa17 	ldw	r2,-24(fp)
     7b4:	18bfa036 	bltu	r3,r2,638 <_gp+0xfffe6c58>
                printf("%02d%% ", nProgressIndex*10);
            }
        }
    }

    if (bShowMessage)
     7b8:	e0bffc17 	ldw	r2,-16(fp)
     7bc:	10000226 	beq	r2,zero,7c8 <TMEM_Verify+0x4bc>
        printf("\n");
     7c0:	01000284 	movi	r4,10
     7c4:	0000b5c0 	call	b5c <putchar>

    return bPass;
     7c8:	e0bee417 	ldw	r2,-1136(fp)
}
     7cc:	e6fffd04 	addi	sp,fp,-12
     7d0:	dfc00417 	ldw	ra,16(sp)
     7d4:	df000317 	ldw	fp,12(sp)
     7d8:	dc800217 	ldw	r18,8(sp)
     7dc:	dc400117 	ldw	r17,4(sp)
     7e0:	dc000017 	ldw	r16,0(sp)
     7e4:	dec00504 	addi	sp,sp,20
     7e8:	f800283a 	ret

000007ec <__divsi3>:
     7ec:	20001b16 	blt	r4,zero,85c <__divsi3+0x70>
     7f0:	000f883a 	mov	r7,zero
     7f4:	28001616 	blt	r5,zero,850 <__divsi3+0x64>
     7f8:	200d883a 	mov	r6,r4
     7fc:	29001a2e 	bgeu	r5,r4,868 <__divsi3+0x7c>
     800:	00800804 	movi	r2,32
     804:	00c00044 	movi	r3,1
     808:	00000106 	br	810 <__divsi3+0x24>
     80c:	10000d26 	beq	r2,zero,844 <__divsi3+0x58>
     810:	294b883a 	add	r5,r5,r5
     814:	10bfffc4 	addi	r2,r2,-1
     818:	18c7883a 	add	r3,r3,r3
     81c:	293ffb36 	bltu	r5,r4,80c <_gp+0xfffe6e2c>
     820:	0005883a 	mov	r2,zero
     824:	18000726 	beq	r3,zero,844 <__divsi3+0x58>
     828:	0005883a 	mov	r2,zero
     82c:	31400236 	bltu	r6,r5,838 <__divsi3+0x4c>
     830:	314dc83a 	sub	r6,r6,r5
     834:	10c4b03a 	or	r2,r2,r3
     838:	1806d07a 	srli	r3,r3,1
     83c:	280ad07a 	srli	r5,r5,1
     840:	183ffa1e 	bne	r3,zero,82c <_gp+0xfffe6e4c>
     844:	38000126 	beq	r7,zero,84c <__divsi3+0x60>
     848:	0085c83a 	sub	r2,zero,r2
     84c:	f800283a 	ret
     850:	014bc83a 	sub	r5,zero,r5
     854:	39c0005c 	xori	r7,r7,1
     858:	003fe706 	br	7f8 <_gp+0xfffe6e18>
     85c:	0109c83a 	sub	r4,zero,r4
     860:	01c00044 	movi	r7,1
     864:	003fe306 	br	7f4 <_gp+0xfffe6e14>
     868:	00c00044 	movi	r3,1
     86c:	003fee06 	br	828 <_gp+0xfffe6e48>

00000870 <__modsi3>:
     870:	20001716 	blt	r4,zero,8d0 <__modsi3+0x60>
     874:	000f883a 	mov	r7,zero
     878:	2005883a 	mov	r2,r4
     87c:	28001216 	blt	r5,zero,8c8 <__modsi3+0x58>
     880:	2900162e 	bgeu	r5,r4,8dc <__modsi3+0x6c>
     884:	01800804 	movi	r6,32
     888:	00c00044 	movi	r3,1
     88c:	00000106 	br	894 <__modsi3+0x24>
     890:	30000a26 	beq	r6,zero,8bc <__modsi3+0x4c>
     894:	294b883a 	add	r5,r5,r5
     898:	31bfffc4 	addi	r6,r6,-1
     89c:	18c7883a 	add	r3,r3,r3
     8a0:	293ffb36 	bltu	r5,r4,890 <_gp+0xfffe6eb0>
     8a4:	18000526 	beq	r3,zero,8bc <__modsi3+0x4c>
     8a8:	1806d07a 	srli	r3,r3,1
     8ac:	11400136 	bltu	r2,r5,8b4 <__modsi3+0x44>
     8b0:	1145c83a 	sub	r2,r2,r5
     8b4:	280ad07a 	srli	r5,r5,1
     8b8:	183ffb1e 	bne	r3,zero,8a8 <_gp+0xfffe6ec8>
     8bc:	38000126 	beq	r7,zero,8c4 <__modsi3+0x54>
     8c0:	0085c83a 	sub	r2,zero,r2
     8c4:	f800283a 	ret
     8c8:	014bc83a 	sub	r5,zero,r5
     8cc:	003fec06 	br	880 <_gp+0xfffe6ea0>
     8d0:	0109c83a 	sub	r4,zero,r4
     8d4:	01c00044 	movi	r7,1
     8d8:	003fe706 	br	878 <_gp+0xfffe6e98>
     8dc:	00c00044 	movi	r3,1
     8e0:	003ff106 	br	8a8 <_gp+0xfffe6ec8>

000008e4 <__udivsi3>:
     8e4:	200d883a 	mov	r6,r4
     8e8:	2900152e 	bgeu	r5,r4,940 <__udivsi3+0x5c>
     8ec:	28001416 	blt	r5,zero,940 <__udivsi3+0x5c>
     8f0:	00800804 	movi	r2,32
     8f4:	00c00044 	movi	r3,1
     8f8:	00000206 	br	904 <__udivsi3+0x20>
     8fc:	10000e26 	beq	r2,zero,938 <__udivsi3+0x54>
     900:	28000516 	blt	r5,zero,918 <__udivsi3+0x34>
     904:	294b883a 	add	r5,r5,r5
     908:	10bfffc4 	addi	r2,r2,-1
     90c:	18c7883a 	add	r3,r3,r3
     910:	293ffa36 	bltu	r5,r4,8fc <_gp+0xfffe6f1c>
     914:	18000826 	beq	r3,zero,938 <__udivsi3+0x54>
     918:	0005883a 	mov	r2,zero
     91c:	31400236 	bltu	r6,r5,928 <__udivsi3+0x44>
     920:	314dc83a 	sub	r6,r6,r5
     924:	10c4b03a 	or	r2,r2,r3
     928:	1806d07a 	srli	r3,r3,1
     92c:	280ad07a 	srli	r5,r5,1
     930:	183ffa1e 	bne	r3,zero,91c <_gp+0xfffe6f3c>
     934:	f800283a 	ret
     938:	0005883a 	mov	r2,zero
     93c:	f800283a 	ret
     940:	00c00044 	movi	r3,1
     944:	003ff406 	br	918 <_gp+0xfffe6f38>

00000948 <__umodsi3>:
     948:	2005883a 	mov	r2,r4
     94c:	2900122e 	bgeu	r5,r4,998 <__umodsi3+0x50>
     950:	28001116 	blt	r5,zero,998 <__umodsi3+0x50>
     954:	01800804 	movi	r6,32
     958:	00c00044 	movi	r3,1
     95c:	00000206 	br	968 <__umodsi3+0x20>
     960:	30000c26 	beq	r6,zero,994 <__umodsi3+0x4c>
     964:	28000516 	blt	r5,zero,97c <__umodsi3+0x34>
     968:	294b883a 	add	r5,r5,r5
     96c:	31bfffc4 	addi	r6,r6,-1
     970:	18c7883a 	add	r3,r3,r3
     974:	293ffa36 	bltu	r5,r4,960 <_gp+0xfffe6f80>
     978:	18000626 	beq	r3,zero,994 <__umodsi3+0x4c>
     97c:	1806d07a 	srli	r3,r3,1
     980:	11400136 	bltu	r2,r5,988 <__umodsi3+0x40>
     984:	1145c83a 	sub	r2,r2,r5
     988:	280ad07a 	srli	r5,r5,1
     98c:	183ffb1e 	bne	r3,zero,97c <_gp+0xfffe6f9c>
     990:	f800283a 	ret
     994:	f800283a 	ret
     998:	00c00044 	movi	r3,1
     99c:	003ff706 	br	97c <_gp+0xfffe6f9c>

000009a0 <memcpy>:
     9a0:	defffd04 	addi	sp,sp,-12
     9a4:	dfc00215 	stw	ra,8(sp)
     9a8:	dc400115 	stw	r17,4(sp)
     9ac:	dc000015 	stw	r16,0(sp)
     9b0:	00c003c4 	movi	r3,15
     9b4:	2005883a 	mov	r2,r4
     9b8:	1980452e 	bgeu	r3,r6,ad0 <memcpy+0x130>
     9bc:	2906b03a 	or	r3,r5,r4
     9c0:	18c000cc 	andi	r3,r3,3
     9c4:	1800441e 	bne	r3,zero,ad8 <memcpy+0x138>
     9c8:	347ffc04 	addi	r17,r6,-16
     9cc:	8822d13a 	srli	r17,r17,4
     9d0:	28c00104 	addi	r3,r5,4
     9d4:	23400104 	addi	r13,r4,4
     9d8:	8820913a 	slli	r16,r17,4
     9dc:	2b000204 	addi	r12,r5,8
     9e0:	22c00204 	addi	r11,r4,8
     9e4:	84000504 	addi	r16,r16,20
     9e8:	2a800304 	addi	r10,r5,12
     9ec:	22400304 	addi	r9,r4,12
     9f0:	2c21883a 	add	r16,r5,r16
     9f4:	2811883a 	mov	r8,r5
     9f8:	200f883a 	mov	r7,r4
     9fc:	41000017 	ldw	r4,0(r8)
     a00:	1fc00017 	ldw	ra,0(r3)
     a04:	63c00017 	ldw	r15,0(r12)
     a08:	39000015 	stw	r4,0(r7)
     a0c:	53800017 	ldw	r14,0(r10)
     a10:	6fc00015 	stw	ra,0(r13)
     a14:	5bc00015 	stw	r15,0(r11)
     a18:	4b800015 	stw	r14,0(r9)
     a1c:	18c00404 	addi	r3,r3,16
     a20:	39c00404 	addi	r7,r7,16
     a24:	42000404 	addi	r8,r8,16
     a28:	6b400404 	addi	r13,r13,16
     a2c:	63000404 	addi	r12,r12,16
     a30:	5ac00404 	addi	r11,r11,16
     a34:	52800404 	addi	r10,r10,16
     a38:	4a400404 	addi	r9,r9,16
     a3c:	1c3fef1e 	bne	r3,r16,9fc <_gp+0xfffe701c>
     a40:	89c00044 	addi	r7,r17,1
     a44:	380e913a 	slli	r7,r7,4
     a48:	310003cc 	andi	r4,r6,15
     a4c:	02c000c4 	movi	r11,3
     a50:	11c7883a 	add	r3,r2,r7
     a54:	29cb883a 	add	r5,r5,r7
     a58:	5900212e 	bgeu	r11,r4,ae0 <memcpy+0x140>
     a5c:	1813883a 	mov	r9,r3
     a60:	2811883a 	mov	r8,r5
     a64:	200f883a 	mov	r7,r4
     a68:	42800017 	ldw	r10,0(r8)
     a6c:	4a400104 	addi	r9,r9,4
     a70:	39ffff04 	addi	r7,r7,-4
     a74:	4abfff15 	stw	r10,-4(r9)
     a78:	42000104 	addi	r8,r8,4
     a7c:	59fffa36 	bltu	r11,r7,a68 <_gp+0xfffe7088>
     a80:	213fff04 	addi	r4,r4,-4
     a84:	2008d0ba 	srli	r4,r4,2
     a88:	318000cc 	andi	r6,r6,3
     a8c:	21000044 	addi	r4,r4,1
     a90:	2109883a 	add	r4,r4,r4
     a94:	2109883a 	add	r4,r4,r4
     a98:	1907883a 	add	r3,r3,r4
     a9c:	290b883a 	add	r5,r5,r4
     aa0:	30000626 	beq	r6,zero,abc <memcpy+0x11c>
     aa4:	198d883a 	add	r6,r3,r6
     aa8:	29c00003 	ldbu	r7,0(r5)
     aac:	18c00044 	addi	r3,r3,1
     ab0:	29400044 	addi	r5,r5,1
     ab4:	19ffffc5 	stb	r7,-1(r3)
     ab8:	19bffb1e 	bne	r3,r6,aa8 <_gp+0xfffe70c8>
     abc:	dfc00217 	ldw	ra,8(sp)
     ac0:	dc400117 	ldw	r17,4(sp)
     ac4:	dc000017 	ldw	r16,0(sp)
     ac8:	dec00304 	addi	sp,sp,12
     acc:	f800283a 	ret
     ad0:	2007883a 	mov	r3,r4
     ad4:	003ff206 	br	aa0 <_gp+0xfffe70c0>
     ad8:	2007883a 	mov	r3,r4
     adc:	003ff106 	br	aa4 <_gp+0xfffe70c4>
     ae0:	200d883a 	mov	r6,r4
     ae4:	003fee06 	br	aa0 <_gp+0xfffe70c0>

00000ae8 <_printf_r>:
     ae8:	defffd04 	addi	sp,sp,-12
     aec:	2805883a 	mov	r2,r5
     af0:	dfc00015 	stw	ra,0(sp)
     af4:	d9800115 	stw	r6,4(sp)
     af8:	d9c00215 	stw	r7,8(sp)
     afc:	21400217 	ldw	r5,8(r4)
     b00:	d9c00104 	addi	r7,sp,4
     b04:	100d883a 	mov	r6,r2
     b08:	0000ce00 	call	ce0 <___vfprintf_internal_r>
     b0c:	dfc00017 	ldw	ra,0(sp)
     b10:	dec00304 	addi	sp,sp,12
     b14:	f800283a 	ret

00000b18 <printf>:
     b18:	defffc04 	addi	sp,sp,-16
     b1c:	dfc00015 	stw	ra,0(sp)
     b20:	d9400115 	stw	r5,4(sp)
     b24:	d9800215 	stw	r6,8(sp)
     b28:	d9c00315 	stw	r7,12(sp)
     b2c:	00800074 	movhi	r2,1
     b30:	10867904 	addi	r2,r2,6628
     b34:	10800017 	ldw	r2,0(r2)
     b38:	200b883a 	mov	r5,r4
     b3c:	d9800104 	addi	r6,sp,4
     b40:	11000217 	ldw	r4,8(r2)
     b44:	0002ed80 	call	2ed8 <__vfprintf_internal>
     b48:	dfc00017 	ldw	ra,0(sp)
     b4c:	dec00404 	addi	sp,sp,16
     b50:	f800283a 	ret

00000b54 <_putchar_r>:
     b54:	21800217 	ldw	r6,8(r4)
     b58:	00078541 	jmpi	7854 <_putc_r>

00000b5c <putchar>:
     b5c:	00800074 	movhi	r2,1
     b60:	10867904 	addi	r2,r2,6628
     b64:	200b883a 	mov	r5,r4
     b68:	11000017 	ldw	r4,0(r2)
     b6c:	21800217 	ldw	r6,8(r4)
     b70:	00078541 	jmpi	7854 <_putc_r>

00000b74 <_puts_r>:
     b74:	defff604 	addi	sp,sp,-40
     b78:	dc000715 	stw	r16,28(sp)
     b7c:	2021883a 	mov	r16,r4
     b80:	2809883a 	mov	r4,r5
     b84:	dc400815 	stw	r17,32(sp)
     b88:	dfc00915 	stw	ra,36(sp)
     b8c:	2823883a 	mov	r17,r5
     b90:	0000c480 	call	c48 <strlen>
     b94:	10c00044 	addi	r3,r2,1
     b98:	d8800115 	stw	r2,4(sp)
     b9c:	00800074 	movhi	r2,1
     ba0:	10bf0f04 	addi	r2,r2,-964
     ba4:	d8800215 	stw	r2,8(sp)
     ba8:	00800044 	movi	r2,1
     bac:	d8800315 	stw	r2,12(sp)
     bb0:	00800084 	movi	r2,2
     bb4:	dc400015 	stw	r17,0(sp)
     bb8:	d8c00615 	stw	r3,24(sp)
     bbc:	dec00415 	stw	sp,16(sp)
     bc0:	d8800515 	stw	r2,20(sp)
     bc4:	80000226 	beq	r16,zero,bd0 <_puts_r+0x5c>
     bc8:	80800e17 	ldw	r2,56(r16)
     bcc:	10001426 	beq	r2,zero,c20 <_puts_r+0xac>
     bd0:	81400217 	ldw	r5,8(r16)
     bd4:	2880030b 	ldhu	r2,12(r5)
     bd8:	10c8000c 	andi	r3,r2,8192
     bdc:	1800061e 	bne	r3,zero,bf8 <_puts_r+0x84>
     be0:	29001917 	ldw	r4,100(r5)
     be4:	00f7ffc4 	movi	r3,-8193
     be8:	10880014 	ori	r2,r2,8192
     bec:	20c6703a 	and	r3,r4,r3
     bf0:	2880030d 	sth	r2,12(r5)
     bf4:	28c01915 	stw	r3,100(r5)
     bf8:	d9800404 	addi	r6,sp,16
     bfc:	8009883a 	mov	r4,r16
     c00:	00054080 	call	5408 <__sfvwrite_r>
     c04:	1000091e 	bne	r2,zero,c2c <_puts_r+0xb8>
     c08:	00800284 	movi	r2,10
     c0c:	dfc00917 	ldw	ra,36(sp)
     c10:	dc400817 	ldw	r17,32(sp)
     c14:	dc000717 	ldw	r16,28(sp)
     c18:	dec00a04 	addi	sp,sp,40
     c1c:	f800283a 	ret
     c20:	8009883a 	mov	r4,r16
     c24:	0004f840 	call	4f84 <__sinit>
     c28:	003fe906 	br	bd0 <_gp+0xfffe71f0>
     c2c:	00bfffc4 	movi	r2,-1
     c30:	003ff606 	br	c0c <_gp+0xfffe722c>

00000c34 <puts>:
     c34:	00800074 	movhi	r2,1
     c38:	10867904 	addi	r2,r2,6628
     c3c:	200b883a 	mov	r5,r4
     c40:	11000017 	ldw	r4,0(r2)
     c44:	0000b741 	jmpi	b74 <_puts_r>

00000c48 <strlen>:
     c48:	208000cc 	andi	r2,r4,3
     c4c:	10002026 	beq	r2,zero,cd0 <strlen+0x88>
     c50:	20800007 	ldb	r2,0(r4)
     c54:	10002026 	beq	r2,zero,cd8 <strlen+0x90>
     c58:	2005883a 	mov	r2,r4
     c5c:	00000206 	br	c68 <strlen+0x20>
     c60:	10c00007 	ldb	r3,0(r2)
     c64:	18001826 	beq	r3,zero,cc8 <strlen+0x80>
     c68:	10800044 	addi	r2,r2,1
     c6c:	10c000cc 	andi	r3,r2,3
     c70:	183ffb1e 	bne	r3,zero,c60 <_gp+0xfffe7280>
     c74:	10c00017 	ldw	r3,0(r2)
     c78:	01ffbff4 	movhi	r7,65279
     c7c:	39ffbfc4 	addi	r7,r7,-257
     c80:	00ca303a 	nor	r5,zero,r3
     c84:	01a02074 	movhi	r6,32897
     c88:	19c7883a 	add	r3,r3,r7
     c8c:	31a02004 	addi	r6,r6,-32640
     c90:	1946703a 	and	r3,r3,r5
     c94:	1986703a 	and	r3,r3,r6
     c98:	1800091e 	bne	r3,zero,cc0 <strlen+0x78>
     c9c:	10800104 	addi	r2,r2,4
     ca0:	10c00017 	ldw	r3,0(r2)
     ca4:	19cb883a 	add	r5,r3,r7
     ca8:	00c6303a 	nor	r3,zero,r3
     cac:	28c6703a 	and	r3,r5,r3
     cb0:	1986703a 	and	r3,r3,r6
     cb4:	183ff926 	beq	r3,zero,c9c <_gp+0xfffe72bc>
     cb8:	00000106 	br	cc0 <strlen+0x78>
     cbc:	10800044 	addi	r2,r2,1
     cc0:	10c00007 	ldb	r3,0(r2)
     cc4:	183ffd1e 	bne	r3,zero,cbc <_gp+0xfffe72dc>
     cc8:	1105c83a 	sub	r2,r2,r4
     ccc:	f800283a 	ret
     cd0:	2005883a 	mov	r2,r4
     cd4:	003fe706 	br	c74 <_gp+0xfffe7294>
     cd8:	0005883a 	mov	r2,zero
     cdc:	f800283a 	ret

00000ce0 <___vfprintf_internal_r>:
     ce0:	deffb804 	addi	sp,sp,-288
     ce4:	dfc04715 	stw	ra,284(sp)
     ce8:	ddc04515 	stw	r23,276(sp)
     cec:	dd404315 	stw	r21,268(sp)
     cf0:	d9002c15 	stw	r4,176(sp)
     cf4:	282f883a 	mov	r23,r5
     cf8:	302b883a 	mov	r21,r6
     cfc:	d9c02d15 	stw	r7,180(sp)
     d00:	df004615 	stw	fp,280(sp)
     d04:	dd804415 	stw	r22,272(sp)
     d08:	dd004215 	stw	r20,264(sp)
     d0c:	dcc04115 	stw	r19,260(sp)
     d10:	dc804015 	stw	r18,256(sp)
     d14:	dc403f15 	stw	r17,252(sp)
     d18:	dc003e15 	stw	r16,248(sp)
     d1c:	0005af80 	call	5af8 <_localeconv_r>
     d20:	10800017 	ldw	r2,0(r2)
     d24:	1009883a 	mov	r4,r2
     d28:	d8803415 	stw	r2,208(sp)
     d2c:	0000c480 	call	c48 <strlen>
     d30:	d8803715 	stw	r2,220(sp)
     d34:	d8802c17 	ldw	r2,176(sp)
     d38:	10000226 	beq	r2,zero,d44 <___vfprintf_internal_r+0x64>
     d3c:	10800e17 	ldw	r2,56(r2)
     d40:	1000f926 	beq	r2,zero,1128 <___vfprintf_internal_r+0x448>
     d44:	b880030b 	ldhu	r2,12(r23)
     d48:	10c8000c 	andi	r3,r2,8192
     d4c:	1800061e 	bne	r3,zero,d68 <___vfprintf_internal_r+0x88>
     d50:	b9001917 	ldw	r4,100(r23)
     d54:	00f7ffc4 	movi	r3,-8193
     d58:	10880014 	ori	r2,r2,8192
     d5c:	20c6703a 	and	r3,r4,r3
     d60:	b880030d 	sth	r2,12(r23)
     d64:	b8c01915 	stw	r3,100(r23)
     d68:	10c0020c 	andi	r3,r2,8
     d6c:	1800c126 	beq	r3,zero,1074 <___vfprintf_internal_r+0x394>
     d70:	b8c00417 	ldw	r3,16(r23)
     d74:	1800bf26 	beq	r3,zero,1074 <___vfprintf_internal_r+0x394>
     d78:	1080068c 	andi	r2,r2,26
     d7c:	00c00284 	movi	r3,10
     d80:	10c0c426 	beq	r2,r3,1094 <___vfprintf_internal_r+0x3b4>
     d84:	d8c00404 	addi	r3,sp,16
     d88:	05000074 	movhi	r20,1
     d8c:	d9001e04 	addi	r4,sp,120
     d90:	a53f2084 	addi	r20,r20,-894
     d94:	d8c01e15 	stw	r3,120(sp)
     d98:	d8002015 	stw	zero,128(sp)
     d9c:	d8001f15 	stw	zero,124(sp)
     da0:	d8003315 	stw	zero,204(sp)
     da4:	d8003615 	stw	zero,216(sp)
     da8:	d8003815 	stw	zero,224(sp)
     dac:	1811883a 	mov	r8,r3
     db0:	d8003915 	stw	zero,228(sp)
     db4:	d8003a15 	stw	zero,232(sp)
     db8:	d8002f15 	stw	zero,188(sp)
     dbc:	d9002815 	stw	r4,160(sp)
     dc0:	a8800007 	ldb	r2,0(r21)
     dc4:	10027b26 	beq	r2,zero,17b4 <___vfprintf_internal_r+0xad4>
     dc8:	00c00944 	movi	r3,37
     dcc:	a821883a 	mov	r16,r21
     dd0:	10c0021e 	bne	r2,r3,ddc <___vfprintf_internal_r+0xfc>
     dd4:	00001406 	br	e28 <___vfprintf_internal_r+0x148>
     dd8:	10c00326 	beq	r2,r3,de8 <___vfprintf_internal_r+0x108>
     ddc:	84000044 	addi	r16,r16,1
     de0:	80800007 	ldb	r2,0(r16)
     de4:	103ffc1e 	bne	r2,zero,dd8 <_gp+0xfffe73f8>
     de8:	8563c83a 	sub	r17,r16,r21
     dec:	88000e26 	beq	r17,zero,e28 <___vfprintf_internal_r+0x148>
     df0:	d8c02017 	ldw	r3,128(sp)
     df4:	d8801f17 	ldw	r2,124(sp)
     df8:	45400015 	stw	r21,0(r8)
     dfc:	1c47883a 	add	r3,r3,r17
     e00:	10800044 	addi	r2,r2,1
     e04:	d8c02015 	stw	r3,128(sp)
     e08:	44400115 	stw	r17,4(r8)
     e0c:	d8801f15 	stw	r2,124(sp)
     e10:	00c001c4 	movi	r3,7
     e14:	1880a716 	blt	r3,r2,10b4 <___vfprintf_internal_r+0x3d4>
     e18:	42000204 	addi	r8,r8,8
     e1c:	d9402f17 	ldw	r5,188(sp)
     e20:	2c4b883a 	add	r5,r5,r17
     e24:	d9402f15 	stw	r5,188(sp)
     e28:	80800007 	ldb	r2,0(r16)
     e2c:	1000a826 	beq	r2,zero,10d0 <___vfprintf_internal_r+0x3f0>
     e30:	84400047 	ldb	r17,1(r16)
     e34:	00bfffc4 	movi	r2,-1
     e38:	85400044 	addi	r21,r16,1
     e3c:	d8002785 	stb	zero,158(sp)
     e40:	0007883a 	mov	r3,zero
     e44:	000f883a 	mov	r7,zero
     e48:	d8802915 	stw	r2,164(sp)
     e4c:	d8003115 	stw	zero,196(sp)
     e50:	0025883a 	mov	r18,zero
     e54:	01401604 	movi	r5,88
     e58:	01800244 	movi	r6,9
     e5c:	02800a84 	movi	r10,42
     e60:	02401b04 	movi	r9,108
     e64:	ad400044 	addi	r21,r21,1
     e68:	88bff804 	addi	r2,r17,-32
     e6c:	28830436 	bltu	r5,r2,1a80 <___vfprintf_internal_r+0xda0>
     e70:	100490ba 	slli	r2,r2,2
     e74:	01000034 	movhi	r4,0
     e78:	2103a204 	addi	r4,r4,3720
     e7c:	1105883a 	add	r2,r2,r4
     e80:	10800017 	ldw	r2,0(r2)
     e84:	1000683a 	jmp	r2
     e88:	000019a0 	cmpeqi	zero,zero,102
     e8c:	00001a80 	call	1a8 <alt_irq_handler+0xac>
     e90:	00001a80 	call	1a8 <alt_irq_handler+0xac>
     e94:	000019c0 	call	19c <alt_irq_handler+0xa0>
     e98:	00001a80 	call	1a8 <alt_irq_handler+0xac>
     e9c:	00001a80 	call	1a8 <alt_irq_handler+0xac>
     ea0:	00001a80 	call	1a8 <alt_irq_handler+0xac>
     ea4:	00001a80 	call	1a8 <alt_irq_handler+0xac>
     ea8:	00001a80 	call	1a8 <alt_irq_handler+0xac>
     eac:	00001a80 	call	1a8 <alt_irq_handler+0xac>
     eb0:	00001134 	movhi	zero,68
     eb4:	000018dc 	xori	zero,zero,99
     eb8:	00001a80 	call	1a8 <alt_irq_handler+0xac>
     ebc:	00000ffc 	xorhi	zero,zero,63
     ec0:	0000115c 	xori	zero,zero,69
     ec4:	00001a80 	call	1a8 <alt_irq_handler+0xac>
     ec8:	0000119c 	xori	zero,zero,70
     ecc:	000011a8 	cmpgeui	zero,zero,70
     ed0:	000011a8 	cmpgeui	zero,zero,70
     ed4:	000011a8 	cmpgeui	zero,zero,70
     ed8:	000011a8 	cmpgeui	zero,zero,70
     edc:	000011a8 	cmpgeui	zero,zero,70
     ee0:	000011a8 	cmpgeui	zero,zero,70
     ee4:	000011a8 	cmpgeui	zero,zero,70
     ee8:	000011a8 	cmpgeui	zero,zero,70
     eec:	000011a8 	cmpgeui	zero,zero,70
     ef0:	00001a80 	call	1a8 <alt_irq_handler+0xac>
     ef4:	00001a80 	call	1a8 <alt_irq_handler+0xac>
     ef8:	00001a80 	call	1a8 <alt_irq_handler+0xac>
     efc:	00001a80 	call	1a8 <alt_irq_handler+0xac>
     f00:	00001a80 	call	1a8 <alt_irq_handler+0xac>
     f04:	00001a80 	call	1a8 <alt_irq_handler+0xac>
     f08:	00001a80 	call	1a8 <alt_irq_handler+0xac>
     f0c:	00001a80 	call	1a8 <alt_irq_handler+0xac>
     f10:	00001a80 	call	1a8 <alt_irq_handler+0xac>
     f14:	00001a80 	call	1a8 <alt_irq_handler+0xac>
     f18:	000011dc 	xori	zero,zero,71
     f1c:	00001298 	cmpnei	zero,zero,74
     f20:	00001a80 	call	1a8 <alt_irq_handler+0xac>
     f24:	00001298 	cmpnei	zero,zero,74
     f28:	00001a80 	call	1a8 <alt_irq_handler+0xac>
     f2c:	00001a80 	call	1a8 <alt_irq_handler+0xac>
     f30:	00001a80 	call	1a8 <alt_irq_handler+0xac>
     f34:	00001a80 	call	1a8 <alt_irq_handler+0xac>
     f38:	00001338 	rdprs	zero,zero,76
     f3c:	00001a80 	call	1a8 <alt_irq_handler+0xac>
     f40:	00001a80 	call	1a8 <alt_irq_handler+0xac>
     f44:	00001344 	movi	zero,77
     f48:	00001a80 	call	1a8 <alt_irq_handler+0xac>
     f4c:	00001a80 	call	1a8 <alt_irq_handler+0xac>
     f50:	00001a80 	call	1a8 <alt_irq_handler+0xac>
     f54:	00001a80 	call	1a8 <alt_irq_handler+0xac>
     f58:	00001a80 	call	1a8 <alt_irq_handler+0xac>
     f5c:	000017bc 	xorhi	zero,zero,94
     f60:	00001a80 	call	1a8 <alt_irq_handler+0xac>
     f64:	00001a80 	call	1a8 <alt_irq_handler+0xac>
     f68:	0000181c 	xori	zero,zero,96
     f6c:	00001a80 	call	1a8 <alt_irq_handler+0xac>
     f70:	00001a80 	call	1a8 <alt_irq_handler+0xac>
     f74:	00001a80 	call	1a8 <alt_irq_handler+0xac>
     f78:	00001a80 	call	1a8 <alt_irq_handler+0xac>
     f7c:	00001a80 	call	1a8 <alt_irq_handler+0xac>
     f80:	00001a80 	call	1a8 <alt_irq_handler+0xac>
     f84:	00001a80 	call	1a8 <alt_irq_handler+0xac>
     f88:	00001a80 	call	1a8 <alt_irq_handler+0xac>
     f8c:	00001a80 	call	1a8 <alt_irq_handler+0xac>
     f90:	00001a80 	call	1a8 <alt_irq_handler+0xac>
     f94:	00001a2c 	andhi	zero,zero,104
     f98:	000019cc 	andi	zero,zero,103
     f9c:	00001298 	cmpnei	zero,zero,74
     fa0:	00001298 	cmpnei	zero,zero,74
     fa4:	00001298 	cmpnei	zero,zero,74
     fa8:	000019dc 	xori	zero,zero,103
     fac:	000019cc 	andi	zero,zero,103
     fb0:	00001a80 	call	1a8 <alt_irq_handler+0xac>
     fb4:	00001a80 	call	1a8 <alt_irq_handler+0xac>
     fb8:	000019e8 	cmpgeui	zero,zero,103
     fbc:	00001a80 	call	1a8 <alt_irq_handler+0xac>
     fc0:	000019f8 	rdprs	zero,zero,103
     fc4:	000018cc 	andi	zero,zero,99
     fc8:	00001008 	cmpgei	zero,zero,64
     fcc:	000018ec 	andhi	zero,zero,99
     fd0:	00001a80 	call	1a8 <alt_irq_handler+0xac>
     fd4:	000018f8 	rdprs	zero,zero,99
     fd8:	00001a80 	call	1a8 <alt_irq_handler+0xac>
     fdc:	00001954 	movui	zero,101
     fe0:	00001a80 	call	1a8 <alt_irq_handler+0xac>
     fe4:	00001a80 	call	1a8 <alt_irq_handler+0xac>
     fe8:	00001964 	muli	zero,zero,101
     fec:	d9003117 	ldw	r4,196(sp)
     ff0:	d8802d15 	stw	r2,180(sp)
     ff4:	0109c83a 	sub	r4,zero,r4
     ff8:	d9003115 	stw	r4,196(sp)
     ffc:	94800114 	ori	r18,r18,4
    1000:	ac400007 	ldb	r17,0(r21)
    1004:	003f9706 	br	e64 <_gp+0xfffe7484>
    1008:	00800c04 	movi	r2,48
    100c:	d9002d17 	ldw	r4,180(sp)
    1010:	d9402917 	ldw	r5,164(sp)
    1014:	d8802705 	stb	r2,156(sp)
    1018:	00801e04 	movi	r2,120
    101c:	d8802745 	stb	r2,157(sp)
    1020:	d8002785 	stb	zero,158(sp)
    1024:	20c00104 	addi	r3,r4,4
    1028:	24c00017 	ldw	r19,0(r4)
    102c:	002d883a 	mov	r22,zero
    1030:	90800094 	ori	r2,r18,2
    1034:	28029a16 	blt	r5,zero,1aa0 <___vfprintf_internal_r+0xdc0>
    1038:	00bfdfc4 	movi	r2,-129
    103c:	90a4703a 	and	r18,r18,r2
    1040:	d8c02d15 	stw	r3,180(sp)
    1044:	94800094 	ori	r18,r18,2
    1048:	9802871e 	bne	r19,zero,1a68 <___vfprintf_internal_r+0xd88>
    104c:	00800074 	movhi	r2,1
    1050:	10bf1904 	addi	r2,r2,-924
    1054:	d8803915 	stw	r2,228(sp)
    1058:	04401e04 	movi	r17,120
    105c:	d8802917 	ldw	r2,164(sp)
    1060:	0039883a 	mov	fp,zero
    1064:	1001e926 	beq	r2,zero,180c <___vfprintf_internal_r+0xb2c>
    1068:	0027883a 	mov	r19,zero
    106c:	002d883a 	mov	r22,zero
    1070:	00020506 	br	1888 <___vfprintf_internal_r+0xba8>
    1074:	d9002c17 	ldw	r4,176(sp)
    1078:	b80b883a 	mov	r5,r23
    107c:	0002fb00 	call	2fb0 <__swsetup_r>
    1080:	1005ac1e 	bne	r2,zero,2734 <___vfprintf_internal_r+0x1a54>
    1084:	b880030b 	ldhu	r2,12(r23)
    1088:	00c00284 	movi	r3,10
    108c:	1080068c 	andi	r2,r2,26
    1090:	10ff3c1e 	bne	r2,r3,d84 <_gp+0xfffe73a4>
    1094:	b880038f 	ldh	r2,14(r23)
    1098:	103f3a16 	blt	r2,zero,d84 <_gp+0xfffe73a4>
    109c:	d9c02d17 	ldw	r7,180(sp)
    10a0:	d9002c17 	ldw	r4,176(sp)
    10a4:	a80d883a 	mov	r6,r21
    10a8:	b80b883a 	mov	r5,r23
    10ac:	0002ef40 	call	2ef4 <__sbprintf>
    10b0:	00001106 	br	10f8 <___vfprintf_internal_r+0x418>
    10b4:	d9002c17 	ldw	r4,176(sp)
    10b8:	d9801e04 	addi	r6,sp,120
    10bc:	b80b883a 	mov	r5,r23
    10c0:	00082fc0 	call	82fc <__sprint_r>
    10c4:	1000081e 	bne	r2,zero,10e8 <___vfprintf_internal_r+0x408>
    10c8:	da000404 	addi	r8,sp,16
    10cc:	003f5306 	br	e1c <_gp+0xfffe743c>
    10d0:	d8802017 	ldw	r2,128(sp)
    10d4:	10000426 	beq	r2,zero,10e8 <___vfprintf_internal_r+0x408>
    10d8:	d9002c17 	ldw	r4,176(sp)
    10dc:	d9801e04 	addi	r6,sp,120
    10e0:	b80b883a 	mov	r5,r23
    10e4:	00082fc0 	call	82fc <__sprint_r>
    10e8:	b880030b 	ldhu	r2,12(r23)
    10ec:	1080100c 	andi	r2,r2,64
    10f0:	1005901e 	bne	r2,zero,2734 <___vfprintf_internal_r+0x1a54>
    10f4:	d8802f17 	ldw	r2,188(sp)
    10f8:	dfc04717 	ldw	ra,284(sp)
    10fc:	df004617 	ldw	fp,280(sp)
    1100:	ddc04517 	ldw	r23,276(sp)
    1104:	dd804417 	ldw	r22,272(sp)
    1108:	dd404317 	ldw	r21,268(sp)
    110c:	dd004217 	ldw	r20,264(sp)
    1110:	dcc04117 	ldw	r19,260(sp)
    1114:	dc804017 	ldw	r18,256(sp)
    1118:	dc403f17 	ldw	r17,252(sp)
    111c:	dc003e17 	ldw	r16,248(sp)
    1120:	dec04804 	addi	sp,sp,288
    1124:	f800283a 	ret
    1128:	d9002c17 	ldw	r4,176(sp)
    112c:	0004f840 	call	4f84 <__sinit>
    1130:	003f0406 	br	d44 <_gp+0xfffe7364>
    1134:	d8802d17 	ldw	r2,180(sp)
    1138:	d9002d17 	ldw	r4,180(sp)
    113c:	10800017 	ldw	r2,0(r2)
    1140:	d8803115 	stw	r2,196(sp)
    1144:	20800104 	addi	r2,r4,4
    1148:	d9003117 	ldw	r4,196(sp)
    114c:	203fa716 	blt	r4,zero,fec <_gp+0xfffe760c>
    1150:	d8802d15 	stw	r2,180(sp)
    1154:	ac400007 	ldb	r17,0(r21)
    1158:	003f4206 	br	e64 <_gp+0xfffe7484>
    115c:	ac400007 	ldb	r17,0(r21)
    1160:	aac00044 	addi	r11,r21,1
    1164:	8a872826 	beq	r17,r10,2e08 <___vfprintf_internal_r+0x2128>
    1168:	88bff404 	addi	r2,r17,-48
    116c:	0009883a 	mov	r4,zero
    1170:	30867d36 	bltu	r6,r2,2b68 <___vfprintf_internal_r+0x1e88>
    1174:	5c400007 	ldb	r17,0(r11)
    1178:	210002a4 	muli	r4,r4,10
    117c:	5d400044 	addi	r21,r11,1
    1180:	a817883a 	mov	r11,r21
    1184:	2089883a 	add	r4,r4,r2
    1188:	88bff404 	addi	r2,r17,-48
    118c:	30bff92e 	bgeu	r6,r2,1174 <_gp+0xfffe7794>
    1190:	2005c916 	blt	r4,zero,28b8 <___vfprintf_internal_r+0x1bd8>
    1194:	d9002915 	stw	r4,164(sp)
    1198:	003f3306 	br	e68 <_gp+0xfffe7488>
    119c:	94802014 	ori	r18,r18,128
    11a0:	ac400007 	ldb	r17,0(r21)
    11a4:	003f2f06 	br	e64 <_gp+0xfffe7484>
    11a8:	a809883a 	mov	r4,r21
    11ac:	d8003115 	stw	zero,196(sp)
    11b0:	88bff404 	addi	r2,r17,-48
    11b4:	0017883a 	mov	r11,zero
    11b8:	24400007 	ldb	r17,0(r4)
    11bc:	5ac002a4 	muli	r11,r11,10
    11c0:	ad400044 	addi	r21,r21,1
    11c4:	a809883a 	mov	r4,r21
    11c8:	12d7883a 	add	r11,r2,r11
    11cc:	88bff404 	addi	r2,r17,-48
    11d0:	30bff92e 	bgeu	r6,r2,11b8 <_gp+0xfffe77d8>
    11d4:	dac03115 	stw	r11,196(sp)
    11d8:	003f2306 	br	e68 <_gp+0xfffe7488>
    11dc:	18c03fcc 	andi	r3,r3,255
    11e0:	18072b1e 	bne	r3,zero,2e90 <___vfprintf_internal_r+0x21b0>
    11e4:	94800414 	ori	r18,r18,16
    11e8:	9080080c 	andi	r2,r18,32
    11ec:	10037b26 	beq	r2,zero,1fdc <___vfprintf_internal_r+0x12fc>
    11f0:	d9402d17 	ldw	r5,180(sp)
    11f4:	28800117 	ldw	r2,4(r5)
    11f8:	2cc00017 	ldw	r19,0(r5)
    11fc:	29400204 	addi	r5,r5,8
    1200:	d9402d15 	stw	r5,180(sp)
    1204:	102d883a 	mov	r22,r2
    1208:	10044b16 	blt	r2,zero,2338 <___vfprintf_internal_r+0x1658>
    120c:	d9402917 	ldw	r5,164(sp)
    1210:	df002783 	ldbu	fp,158(sp)
    1214:	2803bc16 	blt	r5,zero,2108 <___vfprintf_internal_r+0x1428>
    1218:	00ffdfc4 	movi	r3,-129
    121c:	9d84b03a 	or	r2,r19,r22
    1220:	90e4703a 	and	r18,r18,r3
    1224:	10017726 	beq	r2,zero,1804 <___vfprintf_internal_r+0xb24>
    1228:	b0038326 	beq	r22,zero,2038 <___vfprintf_internal_r+0x1358>
    122c:	dc402a15 	stw	r17,168(sp)
    1230:	dc001e04 	addi	r16,sp,120
    1234:	b023883a 	mov	r17,r22
    1238:	402d883a 	mov	r22,r8
    123c:	9809883a 	mov	r4,r19
    1240:	880b883a 	mov	r5,r17
    1244:	01800284 	movi	r6,10
    1248:	000f883a 	mov	r7,zero
    124c:	000a6f40 	call	a6f4 <__umoddi3>
    1250:	10800c04 	addi	r2,r2,48
    1254:	843fffc4 	addi	r16,r16,-1
    1258:	9809883a 	mov	r4,r19
    125c:	880b883a 	mov	r5,r17
    1260:	80800005 	stb	r2,0(r16)
    1264:	01800284 	movi	r6,10
    1268:	000f883a 	mov	r7,zero
    126c:	000a17c0 	call	a17c <__udivdi3>
    1270:	1027883a 	mov	r19,r2
    1274:	10c4b03a 	or	r2,r2,r3
    1278:	1823883a 	mov	r17,r3
    127c:	103fef1e 	bne	r2,zero,123c <_gp+0xfffe785c>
    1280:	d8c02817 	ldw	r3,160(sp)
    1284:	dc402a17 	ldw	r17,168(sp)
    1288:	b011883a 	mov	r8,r22
    128c:	1c07c83a 	sub	r3,r3,r16
    1290:	d8c02e15 	stw	r3,184(sp)
    1294:	00005906 	br	13fc <___vfprintf_internal_r+0x71c>
    1298:	18c03fcc 	andi	r3,r3,255
    129c:	1806fa1e 	bne	r3,zero,2e88 <___vfprintf_internal_r+0x21a8>
    12a0:	9080020c 	andi	r2,r18,8
    12a4:	10048a26 	beq	r2,zero,24d0 <___vfprintf_internal_r+0x17f0>
    12a8:	d8c02d17 	ldw	r3,180(sp)
    12ac:	d9002d17 	ldw	r4,180(sp)
    12b0:	d9402d17 	ldw	r5,180(sp)
    12b4:	18c00017 	ldw	r3,0(r3)
    12b8:	21000117 	ldw	r4,4(r4)
    12bc:	29400204 	addi	r5,r5,8
    12c0:	d8c03615 	stw	r3,216(sp)
    12c4:	d9003815 	stw	r4,224(sp)
    12c8:	d9402d15 	stw	r5,180(sp)
    12cc:	d9003617 	ldw	r4,216(sp)
    12d0:	d9403817 	ldw	r5,224(sp)
    12d4:	da003d15 	stw	r8,244(sp)
    12d8:	04000044 	movi	r16,1
    12dc:	0007f200 	call	7f20 <__fpclassifyd>
    12e0:	da003d17 	ldw	r8,244(sp)
    12e4:	14041f1e 	bne	r2,r16,2364 <___vfprintf_internal_r+0x1684>
    12e8:	d9003617 	ldw	r4,216(sp)
    12ec:	d9403817 	ldw	r5,224(sp)
    12f0:	000d883a 	mov	r6,zero
    12f4:	000f883a 	mov	r7,zero
    12f8:	000bf240 	call	bf24 <__ledf2>
    12fc:	da003d17 	ldw	r8,244(sp)
    1300:	1005be16 	blt	r2,zero,29fc <___vfprintf_internal_r+0x1d1c>
    1304:	df002783 	ldbu	fp,158(sp)
    1308:	008011c4 	movi	r2,71
    130c:	1445330e 	bge	r2,r17,27dc <___vfprintf_internal_r+0x1afc>
    1310:	04000074 	movhi	r16,1
    1314:	843f1104 	addi	r16,r16,-956
    1318:	00c000c4 	movi	r3,3
    131c:	00bfdfc4 	movi	r2,-129
    1320:	d8c02a15 	stw	r3,168(sp)
    1324:	90a4703a 	and	r18,r18,r2
    1328:	d8c02e15 	stw	r3,184(sp)
    132c:	d8002915 	stw	zero,164(sp)
    1330:	d8003215 	stw	zero,200(sp)
    1334:	00003706 	br	1414 <___vfprintf_internal_r+0x734>
    1338:	94800214 	ori	r18,r18,8
    133c:	ac400007 	ldb	r17,0(r21)
    1340:	003ec806 	br	e64 <_gp+0xfffe7484>
    1344:	18c03fcc 	andi	r3,r3,255
    1348:	1806db1e 	bne	r3,zero,2eb8 <___vfprintf_internal_r+0x21d8>
    134c:	94800414 	ori	r18,r18,16
    1350:	9080080c 	andi	r2,r18,32
    1354:	1002d826 	beq	r2,zero,1eb8 <___vfprintf_internal_r+0x11d8>
    1358:	d9402d17 	ldw	r5,180(sp)
    135c:	d8c02917 	ldw	r3,164(sp)
    1360:	d8002785 	stb	zero,158(sp)
    1364:	28800204 	addi	r2,r5,8
    1368:	2cc00017 	ldw	r19,0(r5)
    136c:	2d800117 	ldw	r22,4(r5)
    1370:	18048f16 	blt	r3,zero,25b0 <___vfprintf_internal_r+0x18d0>
    1374:	013fdfc4 	movi	r4,-129
    1378:	9d86b03a 	or	r3,r19,r22
    137c:	d8802d15 	stw	r2,180(sp)
    1380:	9124703a 	and	r18,r18,r4
    1384:	1802d91e 	bne	r3,zero,1eec <___vfprintf_internal_r+0x120c>
    1388:	d8c02917 	ldw	r3,164(sp)
    138c:	0039883a 	mov	fp,zero
    1390:	1805c326 	beq	r3,zero,2aa0 <___vfprintf_internal_r+0x1dc0>
    1394:	0027883a 	mov	r19,zero
    1398:	002d883a 	mov	r22,zero
    139c:	dc001e04 	addi	r16,sp,120
    13a0:	9806d0fa 	srli	r3,r19,3
    13a4:	b008977a 	slli	r4,r22,29
    13a8:	b02cd0fa 	srli	r22,r22,3
    13ac:	9cc001cc 	andi	r19,r19,7
    13b0:	98800c04 	addi	r2,r19,48
    13b4:	843fffc4 	addi	r16,r16,-1
    13b8:	20e6b03a 	or	r19,r4,r3
    13bc:	80800005 	stb	r2,0(r16)
    13c0:	9d86b03a 	or	r3,r19,r22
    13c4:	183ff61e 	bne	r3,zero,13a0 <_gp+0xfffe79c0>
    13c8:	90c0004c 	andi	r3,r18,1
    13cc:	18013b26 	beq	r3,zero,18bc <___vfprintf_internal_r+0xbdc>
    13d0:	10803fcc 	andi	r2,r2,255
    13d4:	1080201c 	xori	r2,r2,128
    13d8:	10bfe004 	addi	r2,r2,-128
    13dc:	00c00c04 	movi	r3,48
    13e0:	10c13626 	beq	r2,r3,18bc <___vfprintf_internal_r+0xbdc>
    13e4:	80ffffc5 	stb	r3,-1(r16)
    13e8:	d8c02817 	ldw	r3,160(sp)
    13ec:	80bfffc4 	addi	r2,r16,-1
    13f0:	1021883a 	mov	r16,r2
    13f4:	1887c83a 	sub	r3,r3,r2
    13f8:	d8c02e15 	stw	r3,184(sp)
    13fc:	d8802e17 	ldw	r2,184(sp)
    1400:	d9002917 	ldw	r4,164(sp)
    1404:	1100010e 	bge	r2,r4,140c <___vfprintf_internal_r+0x72c>
    1408:	2005883a 	mov	r2,r4
    140c:	d8802a15 	stw	r2,168(sp)
    1410:	d8003215 	stw	zero,200(sp)
    1414:	e7003fcc 	andi	fp,fp,255
    1418:	e700201c 	xori	fp,fp,128
    141c:	e73fe004 	addi	fp,fp,-128
    1420:	e0000326 	beq	fp,zero,1430 <___vfprintf_internal_r+0x750>
    1424:	d8c02a17 	ldw	r3,168(sp)
    1428:	18c00044 	addi	r3,r3,1
    142c:	d8c02a15 	stw	r3,168(sp)
    1430:	90c0008c 	andi	r3,r18,2
    1434:	d8c02b15 	stw	r3,172(sp)
    1438:	18000326 	beq	r3,zero,1448 <___vfprintf_internal_r+0x768>
    143c:	d8c02a17 	ldw	r3,168(sp)
    1440:	18c00084 	addi	r3,r3,2
    1444:	d8c02a15 	stw	r3,168(sp)
    1448:	90c0210c 	andi	r3,r18,132
    144c:	d8c03015 	stw	r3,192(sp)
    1450:	1801a31e 	bne	r3,zero,1ae0 <___vfprintf_internal_r+0xe00>
    1454:	d9003117 	ldw	r4,196(sp)
    1458:	d8c02a17 	ldw	r3,168(sp)
    145c:	20e7c83a 	sub	r19,r4,r3
    1460:	04c19f0e 	bge	zero,r19,1ae0 <___vfprintf_internal_r+0xe00>
    1464:	02400404 	movi	r9,16
    1468:	d8c02017 	ldw	r3,128(sp)
    146c:	d8801f17 	ldw	r2,124(sp)
    1470:	4cc50d0e 	bge	r9,r19,28a8 <___vfprintf_internal_r+0x1bc8>
    1474:	01400074 	movhi	r5,1
    1478:	297f2484 	addi	r5,r5,-878
    147c:	dc403b15 	stw	r17,236(sp)
    1480:	d9403515 	stw	r5,212(sp)
    1484:	9823883a 	mov	r17,r19
    1488:	482d883a 	mov	r22,r9
    148c:	9027883a 	mov	r19,r18
    1490:	070001c4 	movi	fp,7
    1494:	8025883a 	mov	r18,r16
    1498:	dc002c17 	ldw	r16,176(sp)
    149c:	00000306 	br	14ac <___vfprintf_internal_r+0x7cc>
    14a0:	8c7ffc04 	addi	r17,r17,-16
    14a4:	42000204 	addi	r8,r8,8
    14a8:	b440130e 	bge	r22,r17,14f8 <___vfprintf_internal_r+0x818>
    14ac:	01000074 	movhi	r4,1
    14b0:	18c00404 	addi	r3,r3,16
    14b4:	10800044 	addi	r2,r2,1
    14b8:	213f2484 	addi	r4,r4,-878
    14bc:	41000015 	stw	r4,0(r8)
    14c0:	45800115 	stw	r22,4(r8)
    14c4:	d8c02015 	stw	r3,128(sp)
    14c8:	d8801f15 	stw	r2,124(sp)
    14cc:	e0bff40e 	bge	fp,r2,14a0 <_gp+0xfffe7ac0>
    14d0:	d9801e04 	addi	r6,sp,120
    14d4:	b80b883a 	mov	r5,r23
    14d8:	8009883a 	mov	r4,r16
    14dc:	00082fc0 	call	82fc <__sprint_r>
    14e0:	103f011e 	bne	r2,zero,10e8 <_gp+0xfffe7708>
    14e4:	8c7ffc04 	addi	r17,r17,-16
    14e8:	d8c02017 	ldw	r3,128(sp)
    14ec:	d8801f17 	ldw	r2,124(sp)
    14f0:	da000404 	addi	r8,sp,16
    14f4:	b47fed16 	blt	r22,r17,14ac <_gp+0xfffe7acc>
    14f8:	9021883a 	mov	r16,r18
    14fc:	9825883a 	mov	r18,r19
    1500:	8827883a 	mov	r19,r17
    1504:	dc403b17 	ldw	r17,236(sp)
    1508:	d9403517 	ldw	r5,212(sp)
    150c:	98c7883a 	add	r3,r19,r3
    1510:	10800044 	addi	r2,r2,1
    1514:	41400015 	stw	r5,0(r8)
    1518:	44c00115 	stw	r19,4(r8)
    151c:	d8c02015 	stw	r3,128(sp)
    1520:	d8801f15 	stw	r2,124(sp)
    1524:	010001c4 	movi	r4,7
    1528:	2082a316 	blt	r4,r2,1fb8 <___vfprintf_internal_r+0x12d8>
    152c:	df002787 	ldb	fp,158(sp)
    1530:	42000204 	addi	r8,r8,8
    1534:	e0000c26 	beq	fp,zero,1568 <___vfprintf_internal_r+0x888>
    1538:	d8801f17 	ldw	r2,124(sp)
    153c:	d9002784 	addi	r4,sp,158
    1540:	18c00044 	addi	r3,r3,1
    1544:	10800044 	addi	r2,r2,1
    1548:	41000015 	stw	r4,0(r8)
    154c:	01000044 	movi	r4,1
    1550:	41000115 	stw	r4,4(r8)
    1554:	d8c02015 	stw	r3,128(sp)
    1558:	d8801f15 	stw	r2,124(sp)
    155c:	010001c4 	movi	r4,7
    1560:	20823c16 	blt	r4,r2,1e54 <___vfprintf_internal_r+0x1174>
    1564:	42000204 	addi	r8,r8,8
    1568:	d8802b17 	ldw	r2,172(sp)
    156c:	10000c26 	beq	r2,zero,15a0 <___vfprintf_internal_r+0x8c0>
    1570:	d8801f17 	ldw	r2,124(sp)
    1574:	d9002704 	addi	r4,sp,156
    1578:	18c00084 	addi	r3,r3,2
    157c:	10800044 	addi	r2,r2,1
    1580:	41000015 	stw	r4,0(r8)
    1584:	01000084 	movi	r4,2
    1588:	41000115 	stw	r4,4(r8)
    158c:	d8c02015 	stw	r3,128(sp)
    1590:	d8801f15 	stw	r2,124(sp)
    1594:	010001c4 	movi	r4,7
    1598:	20823616 	blt	r4,r2,1e74 <___vfprintf_internal_r+0x1194>
    159c:	42000204 	addi	r8,r8,8
    15a0:	d9003017 	ldw	r4,192(sp)
    15a4:	00802004 	movi	r2,128
    15a8:	20819926 	beq	r4,r2,1c10 <___vfprintf_internal_r+0xf30>
    15ac:	d9402917 	ldw	r5,164(sp)
    15b0:	d8802e17 	ldw	r2,184(sp)
    15b4:	28adc83a 	sub	r22,r5,r2
    15b8:	0580310e 	bge	zero,r22,1680 <___vfprintf_internal_r+0x9a0>
    15bc:	07000404 	movi	fp,16
    15c0:	d8801f17 	ldw	r2,124(sp)
    15c4:	e584140e 	bge	fp,r22,2618 <___vfprintf_internal_r+0x1938>
    15c8:	01400074 	movhi	r5,1
    15cc:	297f2084 	addi	r5,r5,-894
    15d0:	dc402915 	stw	r17,164(sp)
    15d4:	d9402b15 	stw	r5,172(sp)
    15d8:	b023883a 	mov	r17,r22
    15dc:	04c001c4 	movi	r19,7
    15e0:	a82d883a 	mov	r22,r21
    15e4:	902b883a 	mov	r21,r18
    15e8:	8025883a 	mov	r18,r16
    15ec:	dc002c17 	ldw	r16,176(sp)
    15f0:	00000306 	br	1600 <___vfprintf_internal_r+0x920>
    15f4:	8c7ffc04 	addi	r17,r17,-16
    15f8:	42000204 	addi	r8,r8,8
    15fc:	e440110e 	bge	fp,r17,1644 <___vfprintf_internal_r+0x964>
    1600:	18c00404 	addi	r3,r3,16
    1604:	10800044 	addi	r2,r2,1
    1608:	45000015 	stw	r20,0(r8)
    160c:	47000115 	stw	fp,4(r8)
    1610:	d8c02015 	stw	r3,128(sp)
    1614:	d8801f15 	stw	r2,124(sp)
    1618:	98bff60e 	bge	r19,r2,15f4 <_gp+0xfffe7c14>
    161c:	d9801e04 	addi	r6,sp,120
    1620:	b80b883a 	mov	r5,r23
    1624:	8009883a 	mov	r4,r16
    1628:	00082fc0 	call	82fc <__sprint_r>
    162c:	103eae1e 	bne	r2,zero,10e8 <_gp+0xfffe7708>
    1630:	8c7ffc04 	addi	r17,r17,-16
    1634:	d8c02017 	ldw	r3,128(sp)
    1638:	d8801f17 	ldw	r2,124(sp)
    163c:	da000404 	addi	r8,sp,16
    1640:	e47fef16 	blt	fp,r17,1600 <_gp+0xfffe7c20>
    1644:	9021883a 	mov	r16,r18
    1648:	a825883a 	mov	r18,r21
    164c:	b02b883a 	mov	r21,r22
    1650:	882d883a 	mov	r22,r17
    1654:	dc402917 	ldw	r17,164(sp)
    1658:	d9002b17 	ldw	r4,172(sp)
    165c:	1d87883a 	add	r3,r3,r22
    1660:	10800044 	addi	r2,r2,1
    1664:	41000015 	stw	r4,0(r8)
    1668:	45800115 	stw	r22,4(r8)
    166c:	d8c02015 	stw	r3,128(sp)
    1670:	d8801f15 	stw	r2,124(sp)
    1674:	010001c4 	movi	r4,7
    1678:	2081ee16 	blt	r4,r2,1e34 <___vfprintf_internal_r+0x1154>
    167c:	42000204 	addi	r8,r8,8
    1680:	9080400c 	andi	r2,r18,256
    1684:	1001181e 	bne	r2,zero,1ae8 <___vfprintf_internal_r+0xe08>
    1688:	d9402e17 	ldw	r5,184(sp)
    168c:	d8801f17 	ldw	r2,124(sp)
    1690:	44000015 	stw	r16,0(r8)
    1694:	1947883a 	add	r3,r3,r5
    1698:	10800044 	addi	r2,r2,1
    169c:	41400115 	stw	r5,4(r8)
    16a0:	d8c02015 	stw	r3,128(sp)
    16a4:	d8801f15 	stw	r2,124(sp)
    16a8:	010001c4 	movi	r4,7
    16ac:	2081d316 	blt	r4,r2,1dfc <___vfprintf_internal_r+0x111c>
    16b0:	42000204 	addi	r8,r8,8
    16b4:	9480010c 	andi	r18,r18,4
    16b8:	90003226 	beq	r18,zero,1784 <___vfprintf_internal_r+0xaa4>
    16bc:	d9403117 	ldw	r5,196(sp)
    16c0:	d8802a17 	ldw	r2,168(sp)
    16c4:	28a1c83a 	sub	r16,r5,r2
    16c8:	04002e0e 	bge	zero,r16,1784 <___vfprintf_internal_r+0xaa4>
    16cc:	04400404 	movi	r17,16
    16d0:	d8801f17 	ldw	r2,124(sp)
    16d4:	8c04a20e 	bge	r17,r16,2960 <___vfprintf_internal_r+0x1c80>
    16d8:	01400074 	movhi	r5,1
    16dc:	297f2484 	addi	r5,r5,-878
    16e0:	d9403515 	stw	r5,212(sp)
    16e4:	048001c4 	movi	r18,7
    16e8:	dcc02c17 	ldw	r19,176(sp)
    16ec:	00000306 	br	16fc <___vfprintf_internal_r+0xa1c>
    16f0:	843ffc04 	addi	r16,r16,-16
    16f4:	42000204 	addi	r8,r8,8
    16f8:	8c00130e 	bge	r17,r16,1748 <___vfprintf_internal_r+0xa68>
    16fc:	01000074 	movhi	r4,1
    1700:	18c00404 	addi	r3,r3,16
    1704:	10800044 	addi	r2,r2,1
    1708:	213f2484 	addi	r4,r4,-878
    170c:	41000015 	stw	r4,0(r8)
    1710:	44400115 	stw	r17,4(r8)
    1714:	d8c02015 	stw	r3,128(sp)
    1718:	d8801f15 	stw	r2,124(sp)
    171c:	90bff40e 	bge	r18,r2,16f0 <_gp+0xfffe7d10>
    1720:	d9801e04 	addi	r6,sp,120
    1724:	b80b883a 	mov	r5,r23
    1728:	9809883a 	mov	r4,r19
    172c:	00082fc0 	call	82fc <__sprint_r>
    1730:	103e6d1e 	bne	r2,zero,10e8 <_gp+0xfffe7708>
    1734:	843ffc04 	addi	r16,r16,-16
    1738:	d8c02017 	ldw	r3,128(sp)
    173c:	d8801f17 	ldw	r2,124(sp)
    1740:	da000404 	addi	r8,sp,16
    1744:	8c3fed16 	blt	r17,r16,16fc <_gp+0xfffe7d1c>
    1748:	d9403517 	ldw	r5,212(sp)
    174c:	1c07883a 	add	r3,r3,r16
    1750:	10800044 	addi	r2,r2,1
    1754:	41400015 	stw	r5,0(r8)
    1758:	44000115 	stw	r16,4(r8)
    175c:	d8c02015 	stw	r3,128(sp)
    1760:	d8801f15 	stw	r2,124(sp)
    1764:	010001c4 	movi	r4,7
    1768:	2080060e 	bge	r4,r2,1784 <___vfprintf_internal_r+0xaa4>
    176c:	d9002c17 	ldw	r4,176(sp)
    1770:	d9801e04 	addi	r6,sp,120
    1774:	b80b883a 	mov	r5,r23
    1778:	00082fc0 	call	82fc <__sprint_r>
    177c:	103e5a1e 	bne	r2,zero,10e8 <_gp+0xfffe7708>
    1780:	d8c02017 	ldw	r3,128(sp)
    1784:	d8803117 	ldw	r2,196(sp)
    1788:	d9002a17 	ldw	r4,168(sp)
    178c:	1100010e 	bge	r2,r4,1794 <___vfprintf_internal_r+0xab4>
    1790:	2005883a 	mov	r2,r4
    1794:	d9402f17 	ldw	r5,188(sp)
    1798:	288b883a 	add	r5,r5,r2
    179c:	d9402f15 	stw	r5,188(sp)
    17a0:	18019e1e 	bne	r3,zero,1e1c <___vfprintf_internal_r+0x113c>
    17a4:	a8800007 	ldb	r2,0(r21)
    17a8:	d8001f15 	stw	zero,124(sp)
    17ac:	da000404 	addi	r8,sp,16
    17b0:	103d851e 	bne	r2,zero,dc8 <_gp+0xfffe73e8>
    17b4:	a821883a 	mov	r16,r21
    17b8:	003d9b06 	br	e28 <_gp+0xfffe7448>
    17bc:	18c03fcc 	andi	r3,r3,255
    17c0:	1805c11e 	bne	r3,zero,2ec8 <___vfprintf_internal_r+0x21e8>
    17c4:	94800414 	ori	r18,r18,16
    17c8:	9080080c 	andi	r2,r18,32
    17cc:	10020c26 	beq	r2,zero,2000 <___vfprintf_internal_r+0x1320>
    17d0:	d8802d17 	ldw	r2,180(sp)
    17d4:	d9002917 	ldw	r4,164(sp)
    17d8:	d8002785 	stb	zero,158(sp)
    17dc:	10c00204 	addi	r3,r2,8
    17e0:	14c00017 	ldw	r19,0(r2)
    17e4:	15800117 	ldw	r22,4(r2)
    17e8:	20040f16 	blt	r4,zero,2828 <___vfprintf_internal_r+0x1b48>
    17ec:	013fdfc4 	movi	r4,-129
    17f0:	9d84b03a 	or	r2,r19,r22
    17f4:	d8c02d15 	stw	r3,180(sp)
    17f8:	9124703a 	and	r18,r18,r4
    17fc:	0039883a 	mov	fp,zero
    1800:	103e891e 	bne	r2,zero,1228 <_gp+0xfffe7848>
    1804:	d9002917 	ldw	r4,164(sp)
    1808:	2002c11e 	bne	r4,zero,2310 <___vfprintf_internal_r+0x1630>
    180c:	d8002915 	stw	zero,164(sp)
    1810:	d8002e15 	stw	zero,184(sp)
    1814:	dc001e04 	addi	r16,sp,120
    1818:	003ef806 	br	13fc <_gp+0xfffe7a1c>
    181c:	18c03fcc 	andi	r3,r3,255
    1820:	18059d1e 	bne	r3,zero,2e98 <___vfprintf_internal_r+0x21b8>
    1824:	01400074 	movhi	r5,1
    1828:	297f1404 	addi	r5,r5,-944
    182c:	d9403915 	stw	r5,228(sp)
    1830:	9080080c 	andi	r2,r18,32
    1834:	10005226 	beq	r2,zero,1980 <___vfprintf_internal_r+0xca0>
    1838:	d8802d17 	ldw	r2,180(sp)
    183c:	14c00017 	ldw	r19,0(r2)
    1840:	15800117 	ldw	r22,4(r2)
    1844:	10800204 	addi	r2,r2,8
    1848:	d8802d15 	stw	r2,180(sp)
    184c:	9080004c 	andi	r2,r18,1
    1850:	10019026 	beq	r2,zero,1e94 <___vfprintf_internal_r+0x11b4>
    1854:	9d84b03a 	or	r2,r19,r22
    1858:	10036926 	beq	r2,zero,2600 <___vfprintf_internal_r+0x1920>
    185c:	d8c02917 	ldw	r3,164(sp)
    1860:	00800c04 	movi	r2,48
    1864:	d8802705 	stb	r2,156(sp)
    1868:	dc402745 	stb	r17,157(sp)
    186c:	d8002785 	stb	zero,158(sp)
    1870:	90800094 	ori	r2,r18,2
    1874:	18045d16 	blt	r3,zero,29ec <___vfprintf_internal_r+0x1d0c>
    1878:	00bfdfc4 	movi	r2,-129
    187c:	90a4703a 	and	r18,r18,r2
    1880:	94800094 	ori	r18,r18,2
    1884:	0039883a 	mov	fp,zero
    1888:	d9003917 	ldw	r4,228(sp)
    188c:	dc001e04 	addi	r16,sp,120
    1890:	988003cc 	andi	r2,r19,15
    1894:	b006973a 	slli	r3,r22,28
    1898:	2085883a 	add	r2,r4,r2
    189c:	9826d13a 	srli	r19,r19,4
    18a0:	10800003 	ldbu	r2,0(r2)
    18a4:	b02cd13a 	srli	r22,r22,4
    18a8:	843fffc4 	addi	r16,r16,-1
    18ac:	1ce6b03a 	or	r19,r3,r19
    18b0:	80800005 	stb	r2,0(r16)
    18b4:	9d84b03a 	or	r2,r19,r22
    18b8:	103ff51e 	bne	r2,zero,1890 <_gp+0xfffe7eb0>
    18bc:	d8c02817 	ldw	r3,160(sp)
    18c0:	1c07c83a 	sub	r3,r3,r16
    18c4:	d8c02e15 	stw	r3,184(sp)
    18c8:	003ecc06 	br	13fc <_gp+0xfffe7a1c>
    18cc:	18c03fcc 	andi	r3,r3,255
    18d0:	183e9f26 	beq	r3,zero,1350 <_gp+0xfffe7970>
    18d4:	d9c02785 	stb	r7,158(sp)
    18d8:	003e9d06 	br	1350 <_gp+0xfffe7970>
    18dc:	00c00044 	movi	r3,1
    18e0:	01c00ac4 	movi	r7,43
    18e4:	ac400007 	ldb	r17,0(r21)
    18e8:	003d5e06 	br	e64 <_gp+0xfffe7484>
    18ec:	94800814 	ori	r18,r18,32
    18f0:	ac400007 	ldb	r17,0(r21)
    18f4:	003d5b06 	br	e64 <_gp+0xfffe7484>
    18f8:	d8c02d17 	ldw	r3,180(sp)
    18fc:	d8002785 	stb	zero,158(sp)
    1900:	1c000017 	ldw	r16,0(r3)
    1904:	1cc00104 	addi	r19,r3,4
    1908:	80041926 	beq	r16,zero,2970 <___vfprintf_internal_r+0x1c90>
    190c:	d9002917 	ldw	r4,164(sp)
    1910:	2003d016 	blt	r4,zero,2854 <___vfprintf_internal_r+0x1b74>
    1914:	200d883a 	mov	r6,r4
    1918:	000b883a 	mov	r5,zero
    191c:	8009883a 	mov	r4,r16
    1920:	da003d15 	stw	r8,244(sp)
    1924:	00064f00 	call	64f0 <memchr>
    1928:	da003d17 	ldw	r8,244(sp)
    192c:	10045426 	beq	r2,zero,2a80 <___vfprintf_internal_r+0x1da0>
    1930:	1405c83a 	sub	r2,r2,r16
    1934:	d8802e15 	stw	r2,184(sp)
    1938:	1003cc16 	blt	r2,zero,286c <___vfprintf_internal_r+0x1b8c>
    193c:	df002783 	ldbu	fp,158(sp)
    1940:	d8802a15 	stw	r2,168(sp)
    1944:	dcc02d15 	stw	r19,180(sp)
    1948:	d8002915 	stw	zero,164(sp)
    194c:	d8003215 	stw	zero,200(sp)
    1950:	003eb006 	br	1414 <_gp+0xfffe7a34>
    1954:	18c03fcc 	andi	r3,r3,255
    1958:	183f9b26 	beq	r3,zero,17c8 <_gp+0xfffe7de8>
    195c:	d9c02785 	stb	r7,158(sp)
    1960:	003f9906 	br	17c8 <_gp+0xfffe7de8>
    1964:	18c03fcc 	andi	r3,r3,255
    1968:	1805551e 	bne	r3,zero,2ec0 <___vfprintf_internal_r+0x21e0>
    196c:	01400074 	movhi	r5,1
    1970:	297f1904 	addi	r5,r5,-924
    1974:	d9403915 	stw	r5,228(sp)
    1978:	9080080c 	andi	r2,r18,32
    197c:	103fae1e 	bne	r2,zero,1838 <_gp+0xfffe7e58>
    1980:	9080040c 	andi	r2,r18,16
    1984:	1002de26 	beq	r2,zero,2500 <___vfprintf_internal_r+0x1820>
    1988:	d8c02d17 	ldw	r3,180(sp)
    198c:	002d883a 	mov	r22,zero
    1990:	1cc00017 	ldw	r19,0(r3)
    1994:	18c00104 	addi	r3,r3,4
    1998:	d8c02d15 	stw	r3,180(sp)
    199c:	003fab06 	br	184c <_gp+0xfffe7e6c>
    19a0:	38803fcc 	andi	r2,r7,255
    19a4:	1080201c 	xori	r2,r2,128
    19a8:	10bfe004 	addi	r2,r2,-128
    19ac:	1002d21e 	bne	r2,zero,24f8 <___vfprintf_internal_r+0x1818>
    19b0:	00c00044 	movi	r3,1
    19b4:	01c00804 	movi	r7,32
    19b8:	ac400007 	ldb	r17,0(r21)
    19bc:	003d2906 	br	e64 <_gp+0xfffe7484>
    19c0:	94800054 	ori	r18,r18,1
    19c4:	ac400007 	ldb	r17,0(r21)
    19c8:	003d2606 	br	e64 <_gp+0xfffe7484>
    19cc:	18c03fcc 	andi	r3,r3,255
    19d0:	183e0526 	beq	r3,zero,11e8 <_gp+0xfffe7808>
    19d4:	d9c02785 	stb	r7,158(sp)
    19d8:	003e0306 	br	11e8 <_gp+0xfffe7808>
    19dc:	94801014 	ori	r18,r18,64
    19e0:	ac400007 	ldb	r17,0(r21)
    19e4:	003d1f06 	br	e64 <_gp+0xfffe7484>
    19e8:	ac400007 	ldb	r17,0(r21)
    19ec:	8a438726 	beq	r17,r9,280c <___vfprintf_internal_r+0x1b2c>
    19f0:	94800414 	ori	r18,r18,16
    19f4:	003d1b06 	br	e64 <_gp+0xfffe7484>
    19f8:	18c03fcc 	andi	r3,r3,255
    19fc:	1805341e 	bne	r3,zero,2ed0 <___vfprintf_internal_r+0x21f0>
    1a00:	9080080c 	andi	r2,r18,32
    1a04:	1002cd26 	beq	r2,zero,253c <___vfprintf_internal_r+0x185c>
    1a08:	d9402d17 	ldw	r5,180(sp)
    1a0c:	d9002f17 	ldw	r4,188(sp)
    1a10:	28800017 	ldw	r2,0(r5)
    1a14:	2007d7fa 	srai	r3,r4,31
    1a18:	29400104 	addi	r5,r5,4
    1a1c:	d9402d15 	stw	r5,180(sp)
    1a20:	11000015 	stw	r4,0(r2)
    1a24:	10c00115 	stw	r3,4(r2)
    1a28:	003ce506 	br	dc0 <_gp+0xfffe73e0>
    1a2c:	d8c02d17 	ldw	r3,180(sp)
    1a30:	d9002d17 	ldw	r4,180(sp)
    1a34:	d8002785 	stb	zero,158(sp)
    1a38:	18800017 	ldw	r2,0(r3)
    1a3c:	21000104 	addi	r4,r4,4
    1a40:	00c00044 	movi	r3,1
    1a44:	d8c02a15 	stw	r3,168(sp)
    1a48:	d8801405 	stb	r2,80(sp)
    1a4c:	d9002d15 	stw	r4,180(sp)
    1a50:	d8c02e15 	stw	r3,184(sp)
    1a54:	d8002915 	stw	zero,164(sp)
    1a58:	d8003215 	stw	zero,200(sp)
    1a5c:	dc001404 	addi	r16,sp,80
    1a60:	0039883a 	mov	fp,zero
    1a64:	003e7206 	br	1430 <_gp+0xfffe7a50>
    1a68:	01000074 	movhi	r4,1
    1a6c:	213f1904 	addi	r4,r4,-924
    1a70:	0039883a 	mov	fp,zero
    1a74:	d9003915 	stw	r4,228(sp)
    1a78:	04401e04 	movi	r17,120
    1a7c:	003f8206 	br	1888 <_gp+0xfffe7ea8>
    1a80:	18c03fcc 	andi	r3,r3,255
    1a84:	1805061e 	bne	r3,zero,2ea0 <___vfprintf_internal_r+0x21c0>
    1a88:	883d9126 	beq	r17,zero,10d0 <_gp+0xfffe76f0>
    1a8c:	00c00044 	movi	r3,1
    1a90:	d8c02a15 	stw	r3,168(sp)
    1a94:	dc401405 	stb	r17,80(sp)
    1a98:	d8002785 	stb	zero,158(sp)
    1a9c:	003fec06 	br	1a50 <_gp+0xfffe8070>
    1aa0:	01400074 	movhi	r5,1
    1aa4:	297f1904 	addi	r5,r5,-924
    1aa8:	d9403915 	stw	r5,228(sp)
    1aac:	d8c02d15 	stw	r3,180(sp)
    1ab0:	1025883a 	mov	r18,r2
    1ab4:	04401e04 	movi	r17,120
    1ab8:	9d84b03a 	or	r2,r19,r22
    1abc:	1000fc1e 	bne	r2,zero,1eb0 <___vfprintf_internal_r+0x11d0>
    1ac0:	0039883a 	mov	fp,zero
    1ac4:	00800084 	movi	r2,2
    1ac8:	10803fcc 	andi	r2,r2,255
    1acc:	00c00044 	movi	r3,1
    1ad0:	10c20f26 	beq	r2,r3,2310 <___vfprintf_internal_r+0x1630>
    1ad4:	00c00084 	movi	r3,2
    1ad8:	10fd6326 	beq	r2,r3,1068 <_gp+0xfffe7688>
    1adc:	003e2d06 	br	1394 <_gp+0xfffe79b4>
    1ae0:	d8c02017 	ldw	r3,128(sp)
    1ae4:	003e9306 	br	1534 <_gp+0xfffe7b54>
    1ae8:	00801944 	movi	r2,101
    1aec:	14407e0e 	bge	r2,r17,1ce8 <___vfprintf_internal_r+0x1008>
    1af0:	d9003617 	ldw	r4,216(sp)
    1af4:	d9403817 	ldw	r5,224(sp)
    1af8:	000d883a 	mov	r6,zero
    1afc:	000f883a 	mov	r7,zero
    1b00:	d8c03c15 	stw	r3,240(sp)
    1b04:	da003d15 	stw	r8,244(sp)
    1b08:	000bdc00 	call	bdc0 <__eqdf2>
    1b0c:	d8c03c17 	ldw	r3,240(sp)
    1b10:	da003d17 	ldw	r8,244(sp)
    1b14:	1000f71e 	bne	r2,zero,1ef4 <___vfprintf_internal_r+0x1214>
    1b18:	d8801f17 	ldw	r2,124(sp)
    1b1c:	01000074 	movhi	r4,1
    1b20:	213f2004 	addi	r4,r4,-896
    1b24:	18c00044 	addi	r3,r3,1
    1b28:	10800044 	addi	r2,r2,1
    1b2c:	41000015 	stw	r4,0(r8)
    1b30:	01000044 	movi	r4,1
    1b34:	41000115 	stw	r4,4(r8)
    1b38:	d8c02015 	stw	r3,128(sp)
    1b3c:	d8801f15 	stw	r2,124(sp)
    1b40:	010001c4 	movi	r4,7
    1b44:	2082b816 	blt	r4,r2,2628 <___vfprintf_internal_r+0x1948>
    1b48:	42000204 	addi	r8,r8,8
    1b4c:	d8802617 	ldw	r2,152(sp)
    1b50:	d9403317 	ldw	r5,204(sp)
    1b54:	11400216 	blt	r2,r5,1b60 <___vfprintf_internal_r+0xe80>
    1b58:	9080004c 	andi	r2,r18,1
    1b5c:	103ed526 	beq	r2,zero,16b4 <_gp+0xfffe7cd4>
    1b60:	d8803717 	ldw	r2,220(sp)
    1b64:	d9003417 	ldw	r4,208(sp)
    1b68:	d9403717 	ldw	r5,220(sp)
    1b6c:	1887883a 	add	r3,r3,r2
    1b70:	d8801f17 	ldw	r2,124(sp)
    1b74:	41000015 	stw	r4,0(r8)
    1b78:	41400115 	stw	r5,4(r8)
    1b7c:	10800044 	addi	r2,r2,1
    1b80:	d8c02015 	stw	r3,128(sp)
    1b84:	d8801f15 	stw	r2,124(sp)
    1b88:	010001c4 	movi	r4,7
    1b8c:	20832916 	blt	r4,r2,2834 <___vfprintf_internal_r+0x1b54>
    1b90:	42000204 	addi	r8,r8,8
    1b94:	d8803317 	ldw	r2,204(sp)
    1b98:	143fffc4 	addi	r16,r2,-1
    1b9c:	043ec50e 	bge	zero,r16,16b4 <_gp+0xfffe7cd4>
    1ba0:	04400404 	movi	r17,16
    1ba4:	d8801f17 	ldw	r2,124(sp)
    1ba8:	8c00880e 	bge	r17,r16,1dcc <___vfprintf_internal_r+0x10ec>
    1bac:	01400074 	movhi	r5,1
    1bb0:	297f2084 	addi	r5,r5,-894
    1bb4:	d9402b15 	stw	r5,172(sp)
    1bb8:	058001c4 	movi	r22,7
    1bbc:	dcc02c17 	ldw	r19,176(sp)
    1bc0:	00000306 	br	1bd0 <___vfprintf_internal_r+0xef0>
    1bc4:	42000204 	addi	r8,r8,8
    1bc8:	843ffc04 	addi	r16,r16,-16
    1bcc:	8c00820e 	bge	r17,r16,1dd8 <___vfprintf_internal_r+0x10f8>
    1bd0:	18c00404 	addi	r3,r3,16
    1bd4:	10800044 	addi	r2,r2,1
    1bd8:	45000015 	stw	r20,0(r8)
    1bdc:	44400115 	stw	r17,4(r8)
    1be0:	d8c02015 	stw	r3,128(sp)
    1be4:	d8801f15 	stw	r2,124(sp)
    1be8:	b0bff60e 	bge	r22,r2,1bc4 <_gp+0xfffe81e4>
    1bec:	d9801e04 	addi	r6,sp,120
    1bf0:	b80b883a 	mov	r5,r23
    1bf4:	9809883a 	mov	r4,r19
    1bf8:	00082fc0 	call	82fc <__sprint_r>
    1bfc:	103d3a1e 	bne	r2,zero,10e8 <_gp+0xfffe7708>
    1c00:	d8c02017 	ldw	r3,128(sp)
    1c04:	d8801f17 	ldw	r2,124(sp)
    1c08:	da000404 	addi	r8,sp,16
    1c0c:	003fee06 	br	1bc8 <_gp+0xfffe81e8>
    1c10:	d9403117 	ldw	r5,196(sp)
    1c14:	d8802a17 	ldw	r2,168(sp)
    1c18:	28adc83a 	sub	r22,r5,r2
    1c1c:	05be630e 	bge	zero,r22,15ac <_gp+0xfffe7bcc>
    1c20:	07000404 	movi	fp,16
    1c24:	d8801f17 	ldw	r2,124(sp)
    1c28:	e5838f0e 	bge	fp,r22,2a68 <___vfprintf_internal_r+0x1d88>
    1c2c:	01400074 	movhi	r5,1
    1c30:	297f2084 	addi	r5,r5,-894
    1c34:	dc403015 	stw	r17,192(sp)
    1c38:	d9402b15 	stw	r5,172(sp)
    1c3c:	b023883a 	mov	r17,r22
    1c40:	04c001c4 	movi	r19,7
    1c44:	a82d883a 	mov	r22,r21
    1c48:	902b883a 	mov	r21,r18
    1c4c:	8025883a 	mov	r18,r16
    1c50:	dc002c17 	ldw	r16,176(sp)
    1c54:	00000306 	br	1c64 <___vfprintf_internal_r+0xf84>
    1c58:	8c7ffc04 	addi	r17,r17,-16
    1c5c:	42000204 	addi	r8,r8,8
    1c60:	e440110e 	bge	fp,r17,1ca8 <___vfprintf_internal_r+0xfc8>
    1c64:	18c00404 	addi	r3,r3,16
    1c68:	10800044 	addi	r2,r2,1
    1c6c:	45000015 	stw	r20,0(r8)
    1c70:	47000115 	stw	fp,4(r8)
    1c74:	d8c02015 	stw	r3,128(sp)
    1c78:	d8801f15 	stw	r2,124(sp)
    1c7c:	98bff60e 	bge	r19,r2,1c58 <_gp+0xfffe8278>
    1c80:	d9801e04 	addi	r6,sp,120
    1c84:	b80b883a 	mov	r5,r23
    1c88:	8009883a 	mov	r4,r16
    1c8c:	00082fc0 	call	82fc <__sprint_r>
    1c90:	103d151e 	bne	r2,zero,10e8 <_gp+0xfffe7708>
    1c94:	8c7ffc04 	addi	r17,r17,-16
    1c98:	d8c02017 	ldw	r3,128(sp)
    1c9c:	d8801f17 	ldw	r2,124(sp)
    1ca0:	da000404 	addi	r8,sp,16
    1ca4:	e47fef16 	blt	fp,r17,1c64 <_gp+0xfffe8284>
    1ca8:	9021883a 	mov	r16,r18
    1cac:	a825883a 	mov	r18,r21
    1cb0:	b02b883a 	mov	r21,r22
    1cb4:	882d883a 	mov	r22,r17
    1cb8:	dc403017 	ldw	r17,192(sp)
    1cbc:	d9002b17 	ldw	r4,172(sp)
    1cc0:	1d87883a 	add	r3,r3,r22
    1cc4:	10800044 	addi	r2,r2,1
    1cc8:	41000015 	stw	r4,0(r8)
    1ccc:	45800115 	stw	r22,4(r8)
    1cd0:	d8c02015 	stw	r3,128(sp)
    1cd4:	d8801f15 	stw	r2,124(sp)
    1cd8:	010001c4 	movi	r4,7
    1cdc:	20818e16 	blt	r4,r2,2318 <___vfprintf_internal_r+0x1638>
    1ce0:	42000204 	addi	r8,r8,8
    1ce4:	003e3106 	br	15ac <_gp+0xfffe7bcc>
    1ce8:	d9403317 	ldw	r5,204(sp)
    1cec:	00800044 	movi	r2,1
    1cf0:	18c00044 	addi	r3,r3,1
    1cf4:	1141530e 	bge	r2,r5,2244 <___vfprintf_internal_r+0x1564>
    1cf8:	dc401f17 	ldw	r17,124(sp)
    1cfc:	00800044 	movi	r2,1
    1d00:	40800115 	stw	r2,4(r8)
    1d04:	8c400044 	addi	r17,r17,1
    1d08:	44000015 	stw	r16,0(r8)
    1d0c:	d8c02015 	stw	r3,128(sp)
    1d10:	dc401f15 	stw	r17,124(sp)
    1d14:	008001c4 	movi	r2,7
    1d18:	14416b16 	blt	r2,r17,22c8 <___vfprintf_internal_r+0x15e8>
    1d1c:	42000204 	addi	r8,r8,8
    1d20:	d8803717 	ldw	r2,220(sp)
    1d24:	d9003417 	ldw	r4,208(sp)
    1d28:	8c400044 	addi	r17,r17,1
    1d2c:	10c7883a 	add	r3,r2,r3
    1d30:	40800115 	stw	r2,4(r8)
    1d34:	41000015 	stw	r4,0(r8)
    1d38:	d8c02015 	stw	r3,128(sp)
    1d3c:	dc401f15 	stw	r17,124(sp)
    1d40:	008001c4 	movi	r2,7
    1d44:	14416916 	blt	r2,r17,22ec <___vfprintf_internal_r+0x160c>
    1d48:	45800204 	addi	r22,r8,8
    1d4c:	d9003617 	ldw	r4,216(sp)
    1d50:	d9403817 	ldw	r5,224(sp)
    1d54:	000d883a 	mov	r6,zero
    1d58:	000f883a 	mov	r7,zero
    1d5c:	d8c03c15 	stw	r3,240(sp)
    1d60:	000bdc00 	call	bdc0 <__eqdf2>
    1d64:	d8c03c17 	ldw	r3,240(sp)
    1d68:	1000bc26 	beq	r2,zero,205c <___vfprintf_internal_r+0x137c>
    1d6c:	d9403317 	ldw	r5,204(sp)
    1d70:	84000044 	addi	r16,r16,1
    1d74:	8c400044 	addi	r17,r17,1
    1d78:	28bfffc4 	addi	r2,r5,-1
    1d7c:	1887883a 	add	r3,r3,r2
    1d80:	b0800115 	stw	r2,4(r22)
    1d84:	b4000015 	stw	r16,0(r22)
    1d88:	d8c02015 	stw	r3,128(sp)
    1d8c:	dc401f15 	stw	r17,124(sp)
    1d90:	008001c4 	movi	r2,7
    1d94:	14414316 	blt	r2,r17,22a4 <___vfprintf_internal_r+0x15c4>
    1d98:	b5800204 	addi	r22,r22,8
    1d9c:	d9003a17 	ldw	r4,232(sp)
    1da0:	df0022c4 	addi	fp,sp,139
    1da4:	8c400044 	addi	r17,r17,1
    1da8:	20c7883a 	add	r3,r4,r3
    1dac:	b7000015 	stw	fp,0(r22)
    1db0:	b1000115 	stw	r4,4(r22)
    1db4:	d8c02015 	stw	r3,128(sp)
    1db8:	dc401f15 	stw	r17,124(sp)
    1dbc:	008001c4 	movi	r2,7
    1dc0:	14400e16 	blt	r2,r17,1dfc <___vfprintf_internal_r+0x111c>
    1dc4:	b2000204 	addi	r8,r22,8
    1dc8:	003e3a06 	br	16b4 <_gp+0xfffe7cd4>
    1dcc:	01000074 	movhi	r4,1
    1dd0:	213f2084 	addi	r4,r4,-894
    1dd4:	d9002b15 	stw	r4,172(sp)
    1dd8:	d9002b17 	ldw	r4,172(sp)
    1ddc:	1c07883a 	add	r3,r3,r16
    1de0:	44000115 	stw	r16,4(r8)
    1de4:	41000015 	stw	r4,0(r8)
    1de8:	10800044 	addi	r2,r2,1
    1dec:	d8c02015 	stw	r3,128(sp)
    1df0:	d8801f15 	stw	r2,124(sp)
    1df4:	010001c4 	movi	r4,7
    1df8:	20be2d0e 	bge	r4,r2,16b0 <_gp+0xfffe7cd0>
    1dfc:	d9002c17 	ldw	r4,176(sp)
    1e00:	d9801e04 	addi	r6,sp,120
    1e04:	b80b883a 	mov	r5,r23
    1e08:	00082fc0 	call	82fc <__sprint_r>
    1e0c:	103cb61e 	bne	r2,zero,10e8 <_gp+0xfffe7708>
    1e10:	d8c02017 	ldw	r3,128(sp)
    1e14:	da000404 	addi	r8,sp,16
    1e18:	003e2606 	br	16b4 <_gp+0xfffe7cd4>
    1e1c:	d9002c17 	ldw	r4,176(sp)
    1e20:	d9801e04 	addi	r6,sp,120
    1e24:	b80b883a 	mov	r5,r23
    1e28:	00082fc0 	call	82fc <__sprint_r>
    1e2c:	103e5d26 	beq	r2,zero,17a4 <_gp+0xfffe7dc4>
    1e30:	003cad06 	br	10e8 <_gp+0xfffe7708>
    1e34:	d9002c17 	ldw	r4,176(sp)
    1e38:	d9801e04 	addi	r6,sp,120
    1e3c:	b80b883a 	mov	r5,r23
    1e40:	00082fc0 	call	82fc <__sprint_r>
    1e44:	103ca81e 	bne	r2,zero,10e8 <_gp+0xfffe7708>
    1e48:	d8c02017 	ldw	r3,128(sp)
    1e4c:	da000404 	addi	r8,sp,16
    1e50:	003e0b06 	br	1680 <_gp+0xfffe7ca0>
    1e54:	d9002c17 	ldw	r4,176(sp)
    1e58:	d9801e04 	addi	r6,sp,120
    1e5c:	b80b883a 	mov	r5,r23
    1e60:	00082fc0 	call	82fc <__sprint_r>
    1e64:	103ca01e 	bne	r2,zero,10e8 <_gp+0xfffe7708>
    1e68:	d8c02017 	ldw	r3,128(sp)
    1e6c:	da000404 	addi	r8,sp,16
    1e70:	003dbd06 	br	1568 <_gp+0xfffe7b88>
    1e74:	d9002c17 	ldw	r4,176(sp)
    1e78:	d9801e04 	addi	r6,sp,120
    1e7c:	b80b883a 	mov	r5,r23
    1e80:	00082fc0 	call	82fc <__sprint_r>
    1e84:	103c981e 	bne	r2,zero,10e8 <_gp+0xfffe7708>
    1e88:	d8c02017 	ldw	r3,128(sp)
    1e8c:	da000404 	addi	r8,sp,16
    1e90:	003dc306 	br	15a0 <_gp+0xfffe7bc0>
    1e94:	d8802917 	ldw	r2,164(sp)
    1e98:	d8002785 	stb	zero,158(sp)
    1e9c:	103f0616 	blt	r2,zero,1ab8 <_gp+0xfffe80d8>
    1ea0:	00ffdfc4 	movi	r3,-129
    1ea4:	9d84b03a 	or	r2,r19,r22
    1ea8:	90e4703a 	and	r18,r18,r3
    1eac:	103c6b26 	beq	r2,zero,105c <_gp+0xfffe767c>
    1eb0:	0039883a 	mov	fp,zero
    1eb4:	003e7406 	br	1888 <_gp+0xfffe7ea8>
    1eb8:	9080040c 	andi	r2,r18,16
    1ebc:	1001b326 	beq	r2,zero,258c <___vfprintf_internal_r+0x18ac>
    1ec0:	d9002d17 	ldw	r4,180(sp)
    1ec4:	d9402917 	ldw	r5,164(sp)
    1ec8:	d8002785 	stb	zero,158(sp)
    1ecc:	20800104 	addi	r2,r4,4
    1ed0:	24c00017 	ldw	r19,0(r4)
    1ed4:	002d883a 	mov	r22,zero
    1ed8:	2801b516 	blt	r5,zero,25b0 <___vfprintf_internal_r+0x18d0>
    1edc:	00ffdfc4 	movi	r3,-129
    1ee0:	d8802d15 	stw	r2,180(sp)
    1ee4:	90e4703a 	and	r18,r18,r3
    1ee8:	983d2726 	beq	r19,zero,1388 <_gp+0xfffe79a8>
    1eec:	0039883a 	mov	fp,zero
    1ef0:	003d2a06 	br	139c <_gp+0xfffe79bc>
    1ef4:	dc402617 	ldw	r17,152(sp)
    1ef8:	0441d30e 	bge	zero,r17,2648 <___vfprintf_internal_r+0x1968>
    1efc:	dc403217 	ldw	r17,200(sp)
    1f00:	d8803317 	ldw	r2,204(sp)
    1f04:	1440010e 	bge	r2,r17,1f0c <___vfprintf_internal_r+0x122c>
    1f08:	1023883a 	mov	r17,r2
    1f0c:	04400a0e 	bge	zero,r17,1f38 <___vfprintf_internal_r+0x1258>
    1f10:	d8801f17 	ldw	r2,124(sp)
    1f14:	1c47883a 	add	r3,r3,r17
    1f18:	44000015 	stw	r16,0(r8)
    1f1c:	10800044 	addi	r2,r2,1
    1f20:	44400115 	stw	r17,4(r8)
    1f24:	d8c02015 	stw	r3,128(sp)
    1f28:	d8801f15 	stw	r2,124(sp)
    1f2c:	010001c4 	movi	r4,7
    1f30:	20826516 	blt	r4,r2,28c8 <___vfprintf_internal_r+0x1be8>
    1f34:	42000204 	addi	r8,r8,8
    1f38:	88026116 	blt	r17,zero,28c0 <___vfprintf_internal_r+0x1be0>
    1f3c:	d9003217 	ldw	r4,200(sp)
    1f40:	2463c83a 	sub	r17,r4,r17
    1f44:	04407b0e 	bge	zero,r17,2134 <___vfprintf_internal_r+0x1454>
    1f48:	05800404 	movi	r22,16
    1f4c:	d8801f17 	ldw	r2,124(sp)
    1f50:	b4419d0e 	bge	r22,r17,25c8 <___vfprintf_internal_r+0x18e8>
    1f54:	01000074 	movhi	r4,1
    1f58:	213f2084 	addi	r4,r4,-894
    1f5c:	d9002b15 	stw	r4,172(sp)
    1f60:	070001c4 	movi	fp,7
    1f64:	dcc02c17 	ldw	r19,176(sp)
    1f68:	00000306 	br	1f78 <___vfprintf_internal_r+0x1298>
    1f6c:	42000204 	addi	r8,r8,8
    1f70:	8c7ffc04 	addi	r17,r17,-16
    1f74:	b441970e 	bge	r22,r17,25d4 <___vfprintf_internal_r+0x18f4>
    1f78:	18c00404 	addi	r3,r3,16
    1f7c:	10800044 	addi	r2,r2,1
    1f80:	45000015 	stw	r20,0(r8)
    1f84:	45800115 	stw	r22,4(r8)
    1f88:	d8c02015 	stw	r3,128(sp)
    1f8c:	d8801f15 	stw	r2,124(sp)
    1f90:	e0bff60e 	bge	fp,r2,1f6c <_gp+0xfffe858c>
    1f94:	d9801e04 	addi	r6,sp,120
    1f98:	b80b883a 	mov	r5,r23
    1f9c:	9809883a 	mov	r4,r19
    1fa0:	00082fc0 	call	82fc <__sprint_r>
    1fa4:	103c501e 	bne	r2,zero,10e8 <_gp+0xfffe7708>
    1fa8:	d8c02017 	ldw	r3,128(sp)
    1fac:	d8801f17 	ldw	r2,124(sp)
    1fb0:	da000404 	addi	r8,sp,16
    1fb4:	003fee06 	br	1f70 <_gp+0xfffe8590>
    1fb8:	d9002c17 	ldw	r4,176(sp)
    1fbc:	d9801e04 	addi	r6,sp,120
    1fc0:	b80b883a 	mov	r5,r23
    1fc4:	00082fc0 	call	82fc <__sprint_r>
    1fc8:	103c471e 	bne	r2,zero,10e8 <_gp+0xfffe7708>
    1fcc:	d8c02017 	ldw	r3,128(sp)
    1fd0:	df002787 	ldb	fp,158(sp)
    1fd4:	da000404 	addi	r8,sp,16
    1fd8:	003d5606 	br	1534 <_gp+0xfffe7b54>
    1fdc:	9080040c 	andi	r2,r18,16
    1fe0:	10016126 	beq	r2,zero,2568 <___vfprintf_internal_r+0x1888>
    1fe4:	d8802d17 	ldw	r2,180(sp)
    1fe8:	14c00017 	ldw	r19,0(r2)
    1fec:	10800104 	addi	r2,r2,4
    1ff0:	d8802d15 	stw	r2,180(sp)
    1ff4:	982dd7fa 	srai	r22,r19,31
    1ff8:	b005883a 	mov	r2,r22
    1ffc:	003c8206 	br	1208 <_gp+0xfffe7828>
    2000:	9080040c 	andi	r2,r18,16
    2004:	10003526 	beq	r2,zero,20dc <___vfprintf_internal_r+0x13fc>
    2008:	d9402d17 	ldw	r5,180(sp)
    200c:	d8c02917 	ldw	r3,164(sp)
    2010:	d8002785 	stb	zero,158(sp)
    2014:	28800104 	addi	r2,r5,4
    2018:	2cc00017 	ldw	r19,0(r5)
    201c:	002d883a 	mov	r22,zero
    2020:	18003716 	blt	r3,zero,2100 <___vfprintf_internal_r+0x1420>
    2024:	00ffdfc4 	movi	r3,-129
    2028:	d8802d15 	stw	r2,180(sp)
    202c:	90e4703a 	and	r18,r18,r3
    2030:	0039883a 	mov	fp,zero
    2034:	983df326 	beq	r19,zero,1804 <_gp+0xfffe7e24>
    2038:	00800244 	movi	r2,9
    203c:	14fc7b36 	bltu	r2,r19,122c <_gp+0xfffe784c>
    2040:	d8c02817 	ldw	r3,160(sp)
    2044:	dc001dc4 	addi	r16,sp,119
    2048:	9cc00c04 	addi	r19,r19,48
    204c:	1c07c83a 	sub	r3,r3,r16
    2050:	dcc01dc5 	stb	r19,119(sp)
    2054:	d8c02e15 	stw	r3,184(sp)
    2058:	003ce806 	br	13fc <_gp+0xfffe7a1c>
    205c:	d8803317 	ldw	r2,204(sp)
    2060:	143fffc4 	addi	r16,r2,-1
    2064:	043f4d0e 	bge	zero,r16,1d9c <_gp+0xfffe83bc>
    2068:	07000404 	movi	fp,16
    206c:	e400810e 	bge	fp,r16,2274 <___vfprintf_internal_r+0x1594>
    2070:	01400074 	movhi	r5,1
    2074:	297f2084 	addi	r5,r5,-894
    2078:	d9402b15 	stw	r5,172(sp)
    207c:	01c001c4 	movi	r7,7
    2080:	dcc02c17 	ldw	r19,176(sp)
    2084:	00000306 	br	2094 <___vfprintf_internal_r+0x13b4>
    2088:	b5800204 	addi	r22,r22,8
    208c:	843ffc04 	addi	r16,r16,-16
    2090:	e4007b0e 	bge	fp,r16,2280 <___vfprintf_internal_r+0x15a0>
    2094:	18c00404 	addi	r3,r3,16
    2098:	8c400044 	addi	r17,r17,1
    209c:	b5000015 	stw	r20,0(r22)
    20a0:	b7000115 	stw	fp,4(r22)
    20a4:	d8c02015 	stw	r3,128(sp)
    20a8:	dc401f15 	stw	r17,124(sp)
    20ac:	3c7ff60e 	bge	r7,r17,2088 <_gp+0xfffe86a8>
    20b0:	d9801e04 	addi	r6,sp,120
    20b4:	b80b883a 	mov	r5,r23
    20b8:	9809883a 	mov	r4,r19
    20bc:	d9c03c15 	stw	r7,240(sp)
    20c0:	00082fc0 	call	82fc <__sprint_r>
    20c4:	d9c03c17 	ldw	r7,240(sp)
    20c8:	103c071e 	bne	r2,zero,10e8 <_gp+0xfffe7708>
    20cc:	d8c02017 	ldw	r3,128(sp)
    20d0:	dc401f17 	ldw	r17,124(sp)
    20d4:	dd800404 	addi	r22,sp,16
    20d8:	003fec06 	br	208c <_gp+0xfffe86ac>
    20dc:	9080100c 	andi	r2,r18,64
    20e0:	d8002785 	stb	zero,158(sp)
    20e4:	10010e26 	beq	r2,zero,2520 <___vfprintf_internal_r+0x1840>
    20e8:	d9002d17 	ldw	r4,180(sp)
    20ec:	d9402917 	ldw	r5,164(sp)
    20f0:	002d883a 	mov	r22,zero
    20f4:	20800104 	addi	r2,r4,4
    20f8:	24c0000b 	ldhu	r19,0(r4)
    20fc:	283fc90e 	bge	r5,zero,2024 <_gp+0xfffe8644>
    2100:	d8802d15 	stw	r2,180(sp)
    2104:	0039883a 	mov	fp,zero
    2108:	9d84b03a 	or	r2,r19,r22
    210c:	103c461e 	bne	r2,zero,1228 <_gp+0xfffe7848>
    2110:	00800044 	movi	r2,1
    2114:	003e6c06 	br	1ac8 <_gp+0xfffe80e8>
    2118:	d9002c17 	ldw	r4,176(sp)
    211c:	d9801e04 	addi	r6,sp,120
    2120:	b80b883a 	mov	r5,r23
    2124:	00082fc0 	call	82fc <__sprint_r>
    2128:	103bef1e 	bne	r2,zero,10e8 <_gp+0xfffe7708>
    212c:	d8c02017 	ldw	r3,128(sp)
    2130:	da000404 	addi	r8,sp,16
    2134:	d9003217 	ldw	r4,200(sp)
    2138:	d8802617 	ldw	r2,152(sp)
    213c:	d9403317 	ldw	r5,204(sp)
    2140:	8123883a 	add	r17,r16,r4
    2144:	11400216 	blt	r2,r5,2150 <___vfprintf_internal_r+0x1470>
    2148:	9100004c 	andi	r4,r18,1
    214c:	20000d26 	beq	r4,zero,2184 <___vfprintf_internal_r+0x14a4>
    2150:	d9003717 	ldw	r4,220(sp)
    2154:	d9403417 	ldw	r5,208(sp)
    2158:	1907883a 	add	r3,r3,r4
    215c:	d9001f17 	ldw	r4,124(sp)
    2160:	41400015 	stw	r5,0(r8)
    2164:	d9403717 	ldw	r5,220(sp)
    2168:	21000044 	addi	r4,r4,1
    216c:	d8c02015 	stw	r3,128(sp)
    2170:	41400115 	stw	r5,4(r8)
    2174:	d9001f15 	stw	r4,124(sp)
    2178:	014001c4 	movi	r5,7
    217c:	2901e816 	blt	r5,r4,2920 <___vfprintf_internal_r+0x1c40>
    2180:	42000204 	addi	r8,r8,8
    2184:	d9003317 	ldw	r4,204(sp)
    2188:	8121883a 	add	r16,r16,r4
    218c:	2085c83a 	sub	r2,r4,r2
    2190:	8461c83a 	sub	r16,r16,r17
    2194:	1400010e 	bge	r2,r16,219c <___vfprintf_internal_r+0x14bc>
    2198:	1021883a 	mov	r16,r2
    219c:	04000a0e 	bge	zero,r16,21c8 <___vfprintf_internal_r+0x14e8>
    21a0:	d9001f17 	ldw	r4,124(sp)
    21a4:	1c07883a 	add	r3,r3,r16
    21a8:	44400015 	stw	r17,0(r8)
    21ac:	21000044 	addi	r4,r4,1
    21b0:	44000115 	stw	r16,4(r8)
    21b4:	d8c02015 	stw	r3,128(sp)
    21b8:	d9001f15 	stw	r4,124(sp)
    21bc:	014001c4 	movi	r5,7
    21c0:	2901fb16 	blt	r5,r4,29b0 <___vfprintf_internal_r+0x1cd0>
    21c4:	42000204 	addi	r8,r8,8
    21c8:	8001f716 	blt	r16,zero,29a8 <___vfprintf_internal_r+0x1cc8>
    21cc:	1421c83a 	sub	r16,r2,r16
    21d0:	043d380e 	bge	zero,r16,16b4 <_gp+0xfffe7cd4>
    21d4:	04400404 	movi	r17,16
    21d8:	d8801f17 	ldw	r2,124(sp)
    21dc:	8c3efb0e 	bge	r17,r16,1dcc <_gp+0xfffe83ec>
    21e0:	01400074 	movhi	r5,1
    21e4:	297f2084 	addi	r5,r5,-894
    21e8:	d9402b15 	stw	r5,172(sp)
    21ec:	058001c4 	movi	r22,7
    21f0:	dcc02c17 	ldw	r19,176(sp)
    21f4:	00000306 	br	2204 <___vfprintf_internal_r+0x1524>
    21f8:	42000204 	addi	r8,r8,8
    21fc:	843ffc04 	addi	r16,r16,-16
    2200:	8c3ef50e 	bge	r17,r16,1dd8 <_gp+0xfffe83f8>
    2204:	18c00404 	addi	r3,r3,16
    2208:	10800044 	addi	r2,r2,1
    220c:	45000015 	stw	r20,0(r8)
    2210:	44400115 	stw	r17,4(r8)
    2214:	d8c02015 	stw	r3,128(sp)
    2218:	d8801f15 	stw	r2,124(sp)
    221c:	b0bff60e 	bge	r22,r2,21f8 <_gp+0xfffe8818>
    2220:	d9801e04 	addi	r6,sp,120
    2224:	b80b883a 	mov	r5,r23
    2228:	9809883a 	mov	r4,r19
    222c:	00082fc0 	call	82fc <__sprint_r>
    2230:	103bad1e 	bne	r2,zero,10e8 <_gp+0xfffe7708>
    2234:	d8c02017 	ldw	r3,128(sp)
    2238:	d8801f17 	ldw	r2,124(sp)
    223c:	da000404 	addi	r8,sp,16
    2240:	003fee06 	br	21fc <_gp+0xfffe881c>
    2244:	9088703a 	and	r4,r18,r2
    2248:	203eab1e 	bne	r4,zero,1cf8 <_gp+0xfffe8318>
    224c:	dc401f17 	ldw	r17,124(sp)
    2250:	40800115 	stw	r2,4(r8)
    2254:	44000015 	stw	r16,0(r8)
    2258:	8c400044 	addi	r17,r17,1
    225c:	d8c02015 	stw	r3,128(sp)
    2260:	dc401f15 	stw	r17,124(sp)
    2264:	008001c4 	movi	r2,7
    2268:	14400e16 	blt	r2,r17,22a4 <___vfprintf_internal_r+0x15c4>
    226c:	45800204 	addi	r22,r8,8
    2270:	003eca06 	br	1d9c <_gp+0xfffe83bc>
    2274:	01000074 	movhi	r4,1
    2278:	213f2084 	addi	r4,r4,-894
    227c:	d9002b15 	stw	r4,172(sp)
    2280:	d8802b17 	ldw	r2,172(sp)
    2284:	1c07883a 	add	r3,r3,r16
    2288:	8c400044 	addi	r17,r17,1
    228c:	b0800015 	stw	r2,0(r22)
    2290:	b4000115 	stw	r16,4(r22)
    2294:	d8c02015 	stw	r3,128(sp)
    2298:	dc401f15 	stw	r17,124(sp)
    229c:	008001c4 	movi	r2,7
    22a0:	147ebd0e 	bge	r2,r17,1d98 <_gp+0xfffe83b8>
    22a4:	d9002c17 	ldw	r4,176(sp)
    22a8:	d9801e04 	addi	r6,sp,120
    22ac:	b80b883a 	mov	r5,r23
    22b0:	00082fc0 	call	82fc <__sprint_r>
    22b4:	103b8c1e 	bne	r2,zero,10e8 <_gp+0xfffe7708>
    22b8:	d8c02017 	ldw	r3,128(sp)
    22bc:	dc401f17 	ldw	r17,124(sp)
    22c0:	dd800404 	addi	r22,sp,16
    22c4:	003eb506 	br	1d9c <_gp+0xfffe83bc>
    22c8:	d9002c17 	ldw	r4,176(sp)
    22cc:	d9801e04 	addi	r6,sp,120
    22d0:	b80b883a 	mov	r5,r23
    22d4:	00082fc0 	call	82fc <__sprint_r>
    22d8:	103b831e 	bne	r2,zero,10e8 <_gp+0xfffe7708>
    22dc:	d8c02017 	ldw	r3,128(sp)
    22e0:	dc401f17 	ldw	r17,124(sp)
    22e4:	da000404 	addi	r8,sp,16
    22e8:	003e8d06 	br	1d20 <_gp+0xfffe8340>
    22ec:	d9002c17 	ldw	r4,176(sp)
    22f0:	d9801e04 	addi	r6,sp,120
    22f4:	b80b883a 	mov	r5,r23
    22f8:	00082fc0 	call	82fc <__sprint_r>
    22fc:	103b7a1e 	bne	r2,zero,10e8 <_gp+0xfffe7708>
    2300:	d8c02017 	ldw	r3,128(sp)
    2304:	dc401f17 	ldw	r17,124(sp)
    2308:	dd800404 	addi	r22,sp,16
    230c:	003e8f06 	br	1d4c <_gp+0xfffe836c>
    2310:	0027883a 	mov	r19,zero
    2314:	003f4a06 	br	2040 <_gp+0xfffe8660>
    2318:	d9002c17 	ldw	r4,176(sp)
    231c:	d9801e04 	addi	r6,sp,120
    2320:	b80b883a 	mov	r5,r23
    2324:	00082fc0 	call	82fc <__sprint_r>
    2328:	103b6f1e 	bne	r2,zero,10e8 <_gp+0xfffe7708>
    232c:	d8c02017 	ldw	r3,128(sp)
    2330:	da000404 	addi	r8,sp,16
    2334:	003c9d06 	br	15ac <_gp+0xfffe7bcc>
    2338:	04e7c83a 	sub	r19,zero,r19
    233c:	9804c03a 	cmpne	r2,r19,zero
    2340:	05adc83a 	sub	r22,zero,r22
    2344:	b0adc83a 	sub	r22,r22,r2
    2348:	d8802917 	ldw	r2,164(sp)
    234c:	07000b44 	movi	fp,45
    2350:	df002785 	stb	fp,158(sp)
    2354:	10017b16 	blt	r2,zero,2944 <___vfprintf_internal_r+0x1c64>
    2358:	00bfdfc4 	movi	r2,-129
    235c:	90a4703a 	and	r18,r18,r2
    2360:	003bb106 	br	1228 <_gp+0xfffe7848>
    2364:	d9003617 	ldw	r4,216(sp)
    2368:	d9403817 	ldw	r5,224(sp)
    236c:	da003d15 	stw	r8,244(sp)
    2370:	0007f200 	call	7f20 <__fpclassifyd>
    2374:	da003d17 	ldw	r8,244(sp)
    2378:	1000f026 	beq	r2,zero,273c <___vfprintf_internal_r+0x1a5c>
    237c:	d9002917 	ldw	r4,164(sp)
    2380:	05bff7c4 	movi	r22,-33
    2384:	00bfffc4 	movi	r2,-1
    2388:	8dac703a 	and	r22,r17,r22
    238c:	20820026 	beq	r4,r2,2b90 <___vfprintf_internal_r+0x1eb0>
    2390:	008011c4 	movi	r2,71
    2394:	b081f726 	beq	r22,r2,2b74 <___vfprintf_internal_r+0x1e94>
    2398:	d9003817 	ldw	r4,224(sp)
    239c:	90c04014 	ori	r3,r18,256
    23a0:	d8c02b15 	stw	r3,172(sp)
    23a4:	20021516 	blt	r4,zero,2bfc <___vfprintf_internal_r+0x1f1c>
    23a8:	dcc03817 	ldw	r19,224(sp)
    23ac:	d8002a05 	stb	zero,168(sp)
    23b0:	00801984 	movi	r2,102
    23b4:	8881f926 	beq	r17,r2,2b9c <___vfprintf_internal_r+0x1ebc>
    23b8:	00801184 	movi	r2,70
    23bc:	88821c26 	beq	r17,r2,2c30 <___vfprintf_internal_r+0x1f50>
    23c0:	00801144 	movi	r2,69
    23c4:	b081ef26 	beq	r22,r2,2b84 <___vfprintf_internal_r+0x1ea4>
    23c8:	d8c02917 	ldw	r3,164(sp)
    23cc:	d8802104 	addi	r2,sp,132
    23d0:	d8800315 	stw	r2,12(sp)
    23d4:	d9403617 	ldw	r5,216(sp)
    23d8:	d8802504 	addi	r2,sp,148
    23dc:	d9002c17 	ldw	r4,176(sp)
    23e0:	d8800215 	stw	r2,8(sp)
    23e4:	d8802604 	addi	r2,sp,152
    23e8:	d8c00015 	stw	r3,0(sp)
    23ec:	d8800115 	stw	r2,4(sp)
    23f0:	01c00084 	movi	r7,2
    23f4:	980d883a 	mov	r6,r19
    23f8:	d8c03c15 	stw	r3,240(sp)
    23fc:	da003d15 	stw	r8,244(sp)
    2400:	00033040 	call	3304 <_dtoa_r>
    2404:	1021883a 	mov	r16,r2
    2408:	008019c4 	movi	r2,103
    240c:	d8c03c17 	ldw	r3,240(sp)
    2410:	da003d17 	ldw	r8,244(sp)
    2414:	88817126 	beq	r17,r2,29dc <___vfprintf_internal_r+0x1cfc>
    2418:	008011c4 	movi	r2,71
    241c:	88829226 	beq	r17,r2,2e68 <___vfprintf_internal_r+0x2188>
    2420:	80f9883a 	add	fp,r16,r3
    2424:	d9003617 	ldw	r4,216(sp)
    2428:	000d883a 	mov	r6,zero
    242c:	000f883a 	mov	r7,zero
    2430:	980b883a 	mov	r5,r19
    2434:	da003d15 	stw	r8,244(sp)
    2438:	000bdc00 	call	bdc0 <__eqdf2>
    243c:	da003d17 	ldw	r8,244(sp)
    2440:	10018d26 	beq	r2,zero,2a78 <___vfprintf_internal_r+0x1d98>
    2444:	d8802117 	ldw	r2,132(sp)
    2448:	1700062e 	bgeu	r2,fp,2464 <___vfprintf_internal_r+0x1784>
    244c:	01000c04 	movi	r4,48
    2450:	10c00044 	addi	r3,r2,1
    2454:	d8c02115 	stw	r3,132(sp)
    2458:	11000005 	stb	r4,0(r2)
    245c:	d8802117 	ldw	r2,132(sp)
    2460:	173ffb36 	bltu	r2,fp,2450 <_gp+0xfffe8a70>
    2464:	1405c83a 	sub	r2,r2,r16
    2468:	d8803315 	stw	r2,204(sp)
    246c:	008011c4 	movi	r2,71
    2470:	b0817626 	beq	r22,r2,2a4c <___vfprintf_internal_r+0x1d6c>
    2474:	00801944 	movi	r2,101
    2478:	1442810e 	bge	r2,r17,2e80 <___vfprintf_internal_r+0x21a0>
    247c:	d8c02617 	ldw	r3,152(sp)
    2480:	00801984 	movi	r2,102
    2484:	d8c03215 	stw	r3,200(sp)
    2488:	8881fe26 	beq	r17,r2,2c84 <___vfprintf_internal_r+0x1fa4>
    248c:	d8c03217 	ldw	r3,200(sp)
    2490:	d9003317 	ldw	r4,204(sp)
    2494:	1901dd16 	blt	r3,r4,2c0c <___vfprintf_internal_r+0x1f2c>
    2498:	9480004c 	andi	r18,r18,1
    249c:	90022b1e 	bne	r18,zero,2d4c <___vfprintf_internal_r+0x206c>
    24a0:	1805883a 	mov	r2,r3
    24a4:	18028016 	blt	r3,zero,2ea8 <___vfprintf_internal_r+0x21c8>
    24a8:	d8c03217 	ldw	r3,200(sp)
    24ac:	044019c4 	movi	r17,103
    24b0:	d8c02e15 	stw	r3,184(sp)
    24b4:	df002a07 	ldb	fp,168(sp)
    24b8:	e001531e 	bne	fp,zero,2a08 <___vfprintf_internal_r+0x1d28>
    24bc:	df002783 	ldbu	fp,158(sp)
    24c0:	d8802a15 	stw	r2,168(sp)
    24c4:	dc802b17 	ldw	r18,172(sp)
    24c8:	d8002915 	stw	zero,164(sp)
    24cc:	003bd106 	br	1414 <_gp+0xfffe7a34>
    24d0:	d8802d17 	ldw	r2,180(sp)
    24d4:	d8c02d17 	ldw	r3,180(sp)
    24d8:	d9002d17 	ldw	r4,180(sp)
    24dc:	10800017 	ldw	r2,0(r2)
    24e0:	18c00117 	ldw	r3,4(r3)
    24e4:	21000204 	addi	r4,r4,8
    24e8:	d8803615 	stw	r2,216(sp)
    24ec:	d8c03815 	stw	r3,224(sp)
    24f0:	d9002d15 	stw	r4,180(sp)
    24f4:	003b7506 	br	12cc <_gp+0xfffe78ec>
    24f8:	ac400007 	ldb	r17,0(r21)
    24fc:	003a5906 	br	e64 <_gp+0xfffe7484>
    2500:	9080100c 	andi	r2,r18,64
    2504:	1000a826 	beq	r2,zero,27a8 <___vfprintf_internal_r+0x1ac8>
    2508:	d9002d17 	ldw	r4,180(sp)
    250c:	002d883a 	mov	r22,zero
    2510:	24c0000b 	ldhu	r19,0(r4)
    2514:	21000104 	addi	r4,r4,4
    2518:	d9002d15 	stw	r4,180(sp)
    251c:	003ccb06 	br	184c <_gp+0xfffe7e6c>
    2520:	d8c02d17 	ldw	r3,180(sp)
    2524:	d9002917 	ldw	r4,164(sp)
    2528:	002d883a 	mov	r22,zero
    252c:	18800104 	addi	r2,r3,4
    2530:	1cc00017 	ldw	r19,0(r3)
    2534:	203ebb0e 	bge	r4,zero,2024 <_gp+0xfffe8644>
    2538:	003ef106 	br	2100 <_gp+0xfffe8720>
    253c:	9080040c 	andi	r2,r18,16
    2540:	1000921e 	bne	r2,zero,278c <___vfprintf_internal_r+0x1aac>
    2544:	9480100c 	andi	r18,r18,64
    2548:	90013926 	beq	r18,zero,2a30 <___vfprintf_internal_r+0x1d50>
    254c:	d9002d17 	ldw	r4,180(sp)
    2550:	d9402f17 	ldw	r5,188(sp)
    2554:	20800017 	ldw	r2,0(r4)
    2558:	21000104 	addi	r4,r4,4
    255c:	d9002d15 	stw	r4,180(sp)
    2560:	1140000d 	sth	r5,0(r2)
    2564:	003a1606 	br	dc0 <_gp+0xfffe73e0>
    2568:	9080100c 	andi	r2,r18,64
    256c:	10008026 	beq	r2,zero,2770 <___vfprintf_internal_r+0x1a90>
    2570:	d8c02d17 	ldw	r3,180(sp)
    2574:	1cc0000f 	ldh	r19,0(r3)
    2578:	18c00104 	addi	r3,r3,4
    257c:	d8c02d15 	stw	r3,180(sp)
    2580:	982dd7fa 	srai	r22,r19,31
    2584:	b005883a 	mov	r2,r22
    2588:	003b1f06 	br	1208 <_gp+0xfffe7828>
    258c:	9080100c 	andi	r2,r18,64
    2590:	d8002785 	stb	zero,158(sp)
    2594:	10008a1e 	bne	r2,zero,27c0 <___vfprintf_internal_r+0x1ae0>
    2598:	d9402d17 	ldw	r5,180(sp)
    259c:	d8c02917 	ldw	r3,164(sp)
    25a0:	002d883a 	mov	r22,zero
    25a4:	28800104 	addi	r2,r5,4
    25a8:	2cc00017 	ldw	r19,0(r5)
    25ac:	183e4b0e 	bge	r3,zero,1edc <_gp+0xfffe84fc>
    25b0:	9d86b03a 	or	r3,r19,r22
    25b4:	d8802d15 	stw	r2,180(sp)
    25b8:	183e4c1e 	bne	r3,zero,1eec <_gp+0xfffe850c>
    25bc:	0039883a 	mov	fp,zero
    25c0:	0005883a 	mov	r2,zero
    25c4:	003d4006 	br	1ac8 <_gp+0xfffe80e8>
    25c8:	01400074 	movhi	r5,1
    25cc:	297f2084 	addi	r5,r5,-894
    25d0:	d9402b15 	stw	r5,172(sp)
    25d4:	d9402b17 	ldw	r5,172(sp)
    25d8:	1c47883a 	add	r3,r3,r17
    25dc:	10800044 	addi	r2,r2,1
    25e0:	41400015 	stw	r5,0(r8)
    25e4:	44400115 	stw	r17,4(r8)
    25e8:	d8c02015 	stw	r3,128(sp)
    25ec:	d8801f15 	stw	r2,124(sp)
    25f0:	010001c4 	movi	r4,7
    25f4:	20bec816 	blt	r4,r2,2118 <_gp+0xfffe8738>
    25f8:	42000204 	addi	r8,r8,8
    25fc:	003ecd06 	br	2134 <_gp+0xfffe8754>
    2600:	d9002917 	ldw	r4,164(sp)
    2604:	d8002785 	stb	zero,158(sp)
    2608:	203d2d16 	blt	r4,zero,1ac0 <_gp+0xfffe80e0>
    260c:	00bfdfc4 	movi	r2,-129
    2610:	90a4703a 	and	r18,r18,r2
    2614:	003a9106 	br	105c <_gp+0xfffe767c>
    2618:	01000074 	movhi	r4,1
    261c:	213f2084 	addi	r4,r4,-894
    2620:	d9002b15 	stw	r4,172(sp)
    2624:	003c0c06 	br	1658 <_gp+0xfffe7c78>
    2628:	d9002c17 	ldw	r4,176(sp)
    262c:	d9801e04 	addi	r6,sp,120
    2630:	b80b883a 	mov	r5,r23
    2634:	00082fc0 	call	82fc <__sprint_r>
    2638:	103aab1e 	bne	r2,zero,10e8 <_gp+0xfffe7708>
    263c:	d8c02017 	ldw	r3,128(sp)
    2640:	da000404 	addi	r8,sp,16
    2644:	003d4106 	br	1b4c <_gp+0xfffe816c>
    2648:	d8801f17 	ldw	r2,124(sp)
    264c:	01400074 	movhi	r5,1
    2650:	01000044 	movi	r4,1
    2654:	18c00044 	addi	r3,r3,1
    2658:	10800044 	addi	r2,r2,1
    265c:	297f2004 	addi	r5,r5,-896
    2660:	41000115 	stw	r4,4(r8)
    2664:	41400015 	stw	r5,0(r8)
    2668:	d8c02015 	stw	r3,128(sp)
    266c:	d8801f15 	stw	r2,124(sp)
    2670:	010001c4 	movi	r4,7
    2674:	20805c16 	blt	r4,r2,27e8 <___vfprintf_internal_r+0x1b08>
    2678:	42000204 	addi	r8,r8,8
    267c:	8800041e 	bne	r17,zero,2690 <___vfprintf_internal_r+0x19b0>
    2680:	d8803317 	ldw	r2,204(sp)
    2684:	1000021e 	bne	r2,zero,2690 <___vfprintf_internal_r+0x19b0>
    2688:	9080004c 	andi	r2,r18,1
    268c:	103c0926 	beq	r2,zero,16b4 <_gp+0xfffe7cd4>
    2690:	d9003717 	ldw	r4,220(sp)
    2694:	d8801f17 	ldw	r2,124(sp)
    2698:	d9403417 	ldw	r5,208(sp)
    269c:	20c7883a 	add	r3,r4,r3
    26a0:	10800044 	addi	r2,r2,1
    26a4:	41000115 	stw	r4,4(r8)
    26a8:	41400015 	stw	r5,0(r8)
    26ac:	d8c02015 	stw	r3,128(sp)
    26b0:	d8801f15 	stw	r2,124(sp)
    26b4:	010001c4 	movi	r4,7
    26b8:	20812116 	blt	r4,r2,2b40 <___vfprintf_internal_r+0x1e60>
    26bc:	42000204 	addi	r8,r8,8
    26c0:	0463c83a 	sub	r17,zero,r17
    26c4:	0440730e 	bge	zero,r17,2894 <___vfprintf_internal_r+0x1bb4>
    26c8:	05800404 	movi	r22,16
    26cc:	b440860e 	bge	r22,r17,28e8 <___vfprintf_internal_r+0x1c08>
    26d0:	01400074 	movhi	r5,1
    26d4:	297f2084 	addi	r5,r5,-894
    26d8:	d9402b15 	stw	r5,172(sp)
    26dc:	070001c4 	movi	fp,7
    26e0:	dcc02c17 	ldw	r19,176(sp)
    26e4:	00000306 	br	26f4 <___vfprintf_internal_r+0x1a14>
    26e8:	42000204 	addi	r8,r8,8
    26ec:	8c7ffc04 	addi	r17,r17,-16
    26f0:	b440800e 	bge	r22,r17,28f4 <___vfprintf_internal_r+0x1c14>
    26f4:	18c00404 	addi	r3,r3,16
    26f8:	10800044 	addi	r2,r2,1
    26fc:	45000015 	stw	r20,0(r8)
    2700:	45800115 	stw	r22,4(r8)
    2704:	d8c02015 	stw	r3,128(sp)
    2708:	d8801f15 	stw	r2,124(sp)
    270c:	e0bff60e 	bge	fp,r2,26e8 <_gp+0xfffe8d08>
    2710:	d9801e04 	addi	r6,sp,120
    2714:	b80b883a 	mov	r5,r23
    2718:	9809883a 	mov	r4,r19
    271c:	00082fc0 	call	82fc <__sprint_r>
    2720:	103a711e 	bne	r2,zero,10e8 <_gp+0xfffe7708>
    2724:	d8c02017 	ldw	r3,128(sp)
    2728:	d8801f17 	ldw	r2,124(sp)
    272c:	da000404 	addi	r8,sp,16
    2730:	003fee06 	br	26ec <_gp+0xfffe8d0c>
    2734:	00bfffc4 	movi	r2,-1
    2738:	003a6f06 	br	10f8 <_gp+0xfffe7718>
    273c:	008011c4 	movi	r2,71
    2740:	1440b816 	blt	r2,r17,2a24 <___vfprintf_internal_r+0x1d44>
    2744:	04000074 	movhi	r16,1
    2748:	843f1204 	addi	r16,r16,-952
    274c:	00c000c4 	movi	r3,3
    2750:	00bfdfc4 	movi	r2,-129
    2754:	d8c02a15 	stw	r3,168(sp)
    2758:	90a4703a 	and	r18,r18,r2
    275c:	df002783 	ldbu	fp,158(sp)
    2760:	d8c02e15 	stw	r3,184(sp)
    2764:	d8002915 	stw	zero,164(sp)
    2768:	d8003215 	stw	zero,200(sp)
    276c:	003b2906 	br	1414 <_gp+0xfffe7a34>
    2770:	d9002d17 	ldw	r4,180(sp)
    2774:	24c00017 	ldw	r19,0(r4)
    2778:	21000104 	addi	r4,r4,4
    277c:	d9002d15 	stw	r4,180(sp)
    2780:	982dd7fa 	srai	r22,r19,31
    2784:	b005883a 	mov	r2,r22
    2788:	003a9f06 	br	1208 <_gp+0xfffe7828>
    278c:	d9402d17 	ldw	r5,180(sp)
    2790:	d8c02f17 	ldw	r3,188(sp)
    2794:	28800017 	ldw	r2,0(r5)
    2798:	29400104 	addi	r5,r5,4
    279c:	d9402d15 	stw	r5,180(sp)
    27a0:	10c00015 	stw	r3,0(r2)
    27a4:	00398606 	br	dc0 <_gp+0xfffe73e0>
    27a8:	d9402d17 	ldw	r5,180(sp)
    27ac:	002d883a 	mov	r22,zero
    27b0:	2cc00017 	ldw	r19,0(r5)
    27b4:	29400104 	addi	r5,r5,4
    27b8:	d9402d15 	stw	r5,180(sp)
    27bc:	003c2306 	br	184c <_gp+0xfffe7e6c>
    27c0:	d8c02d17 	ldw	r3,180(sp)
    27c4:	d9002917 	ldw	r4,164(sp)
    27c8:	002d883a 	mov	r22,zero
    27cc:	18800104 	addi	r2,r3,4
    27d0:	1cc0000b 	ldhu	r19,0(r3)
    27d4:	203dc10e 	bge	r4,zero,1edc <_gp+0xfffe84fc>
    27d8:	003f7506 	br	25b0 <_gp+0xfffe8bd0>
    27dc:	04000074 	movhi	r16,1
    27e0:	843f1004 	addi	r16,r16,-960
    27e4:	003acc06 	br	1318 <_gp+0xfffe7938>
    27e8:	d9002c17 	ldw	r4,176(sp)
    27ec:	d9801e04 	addi	r6,sp,120
    27f0:	b80b883a 	mov	r5,r23
    27f4:	00082fc0 	call	82fc <__sprint_r>
    27f8:	103a3b1e 	bne	r2,zero,10e8 <_gp+0xfffe7708>
    27fc:	dc402617 	ldw	r17,152(sp)
    2800:	d8c02017 	ldw	r3,128(sp)
    2804:	da000404 	addi	r8,sp,16
    2808:	003f9c06 	br	267c <_gp+0xfffe8c9c>
    280c:	ac400043 	ldbu	r17,1(r21)
    2810:	94800814 	ori	r18,r18,32
    2814:	ad400044 	addi	r21,r21,1
    2818:	8c403fcc 	andi	r17,r17,255
    281c:	8c40201c 	xori	r17,r17,128
    2820:	8c7fe004 	addi	r17,r17,-128
    2824:	00398f06 	br	e64 <_gp+0xfffe7484>
    2828:	d8c02d15 	stw	r3,180(sp)
    282c:	0039883a 	mov	fp,zero
    2830:	003e3506 	br	2108 <_gp+0xfffe8728>
    2834:	d9002c17 	ldw	r4,176(sp)
    2838:	d9801e04 	addi	r6,sp,120
    283c:	b80b883a 	mov	r5,r23
    2840:	00082fc0 	call	82fc <__sprint_r>
    2844:	103a281e 	bne	r2,zero,10e8 <_gp+0xfffe7708>
    2848:	d8c02017 	ldw	r3,128(sp)
    284c:	da000404 	addi	r8,sp,16
    2850:	003cd006 	br	1b94 <_gp+0xfffe81b4>
    2854:	8009883a 	mov	r4,r16
    2858:	da003d15 	stw	r8,244(sp)
    285c:	0000c480 	call	c48 <strlen>
    2860:	d8802e15 	stw	r2,184(sp)
    2864:	da003d17 	ldw	r8,244(sp)
    2868:	103c340e 	bge	r2,zero,193c <_gp+0xfffe7f5c>
    286c:	0005883a 	mov	r2,zero
    2870:	003c3206 	br	193c <_gp+0xfffe7f5c>
    2874:	d9002c17 	ldw	r4,176(sp)
    2878:	d9801e04 	addi	r6,sp,120
    287c:	b80b883a 	mov	r5,r23
    2880:	00082fc0 	call	82fc <__sprint_r>
    2884:	103a181e 	bne	r2,zero,10e8 <_gp+0xfffe7708>
    2888:	d8c02017 	ldw	r3,128(sp)
    288c:	d8801f17 	ldw	r2,124(sp)
    2890:	da000404 	addi	r8,sp,16
    2894:	d9403317 	ldw	r5,204(sp)
    2898:	10800044 	addi	r2,r2,1
    289c:	44000015 	stw	r16,0(r8)
    28a0:	28c7883a 	add	r3,r5,r3
    28a4:	003b7d06 	br	169c <_gp+0xfffe7cbc>
    28a8:	01000074 	movhi	r4,1
    28ac:	213f2484 	addi	r4,r4,-878
    28b0:	d9003515 	stw	r4,212(sp)
    28b4:	003b1406 	br	1508 <_gp+0xfffe7b28>
    28b8:	013fffc4 	movi	r4,-1
    28bc:	003a3506 	br	1194 <_gp+0xfffe77b4>
    28c0:	0023883a 	mov	r17,zero
    28c4:	003d9d06 	br	1f3c <_gp+0xfffe855c>
    28c8:	d9002c17 	ldw	r4,176(sp)
    28cc:	d9801e04 	addi	r6,sp,120
    28d0:	b80b883a 	mov	r5,r23
    28d4:	00082fc0 	call	82fc <__sprint_r>
    28d8:	103a031e 	bne	r2,zero,10e8 <_gp+0xfffe7708>
    28dc:	d8c02017 	ldw	r3,128(sp)
    28e0:	da000404 	addi	r8,sp,16
    28e4:	003d9406 	br	1f38 <_gp+0xfffe8558>
    28e8:	01000074 	movhi	r4,1
    28ec:	213f2084 	addi	r4,r4,-894
    28f0:	d9002b15 	stw	r4,172(sp)
    28f4:	d9002b17 	ldw	r4,172(sp)
    28f8:	1c47883a 	add	r3,r3,r17
    28fc:	10800044 	addi	r2,r2,1
    2900:	41000015 	stw	r4,0(r8)
    2904:	44400115 	stw	r17,4(r8)
    2908:	d8c02015 	stw	r3,128(sp)
    290c:	d8801f15 	stw	r2,124(sp)
    2910:	010001c4 	movi	r4,7
    2914:	20bfd716 	blt	r4,r2,2874 <_gp+0xfffe8e94>
    2918:	42000204 	addi	r8,r8,8
    291c:	003fdd06 	br	2894 <_gp+0xfffe8eb4>
    2920:	d9002c17 	ldw	r4,176(sp)
    2924:	d9801e04 	addi	r6,sp,120
    2928:	b80b883a 	mov	r5,r23
    292c:	00082fc0 	call	82fc <__sprint_r>
    2930:	1039ed1e 	bne	r2,zero,10e8 <_gp+0xfffe7708>
    2934:	d8802617 	ldw	r2,152(sp)
    2938:	d8c02017 	ldw	r3,128(sp)
    293c:	da000404 	addi	r8,sp,16
    2940:	003e1006 	br	2184 <_gp+0xfffe87a4>
    2944:	00800044 	movi	r2,1
    2948:	10803fcc 	andi	r2,r2,255
    294c:	00c00044 	movi	r3,1
    2950:	10fa3526 	beq	r2,r3,1228 <_gp+0xfffe7848>
    2954:	00c00084 	movi	r3,2
    2958:	10fbcb26 	beq	r2,r3,1888 <_gp+0xfffe7ea8>
    295c:	003a8f06 	br	139c <_gp+0xfffe79bc>
    2960:	01000074 	movhi	r4,1
    2964:	213f2484 	addi	r4,r4,-878
    2968:	d9003515 	stw	r4,212(sp)
    296c:	003b7606 	br	1748 <_gp+0xfffe7d68>
    2970:	d8802917 	ldw	r2,164(sp)
    2974:	00c00184 	movi	r3,6
    2978:	1880012e 	bgeu	r3,r2,2980 <___vfprintf_internal_r+0x1ca0>
    297c:	1805883a 	mov	r2,r3
    2980:	d8802e15 	stw	r2,184(sp)
    2984:	1000ef16 	blt	r2,zero,2d44 <___vfprintf_internal_r+0x2064>
    2988:	04000074 	movhi	r16,1
    298c:	d8802a15 	stw	r2,168(sp)
    2990:	dcc02d15 	stw	r19,180(sp)
    2994:	d8002915 	stw	zero,164(sp)
    2998:	d8003215 	stw	zero,200(sp)
    299c:	843f1e04 	addi	r16,r16,-904
    29a0:	0039883a 	mov	fp,zero
    29a4:	003aa206 	br	1430 <_gp+0xfffe7a50>
    29a8:	0021883a 	mov	r16,zero
    29ac:	003e0706 	br	21cc <_gp+0xfffe87ec>
    29b0:	d9002c17 	ldw	r4,176(sp)
    29b4:	d9801e04 	addi	r6,sp,120
    29b8:	b80b883a 	mov	r5,r23
    29bc:	00082fc0 	call	82fc <__sprint_r>
    29c0:	1039c91e 	bne	r2,zero,10e8 <_gp+0xfffe7708>
    29c4:	d8802617 	ldw	r2,152(sp)
    29c8:	d9403317 	ldw	r5,204(sp)
    29cc:	d8c02017 	ldw	r3,128(sp)
    29d0:	da000404 	addi	r8,sp,16
    29d4:	2885c83a 	sub	r2,r5,r2
    29d8:	003dfb06 	br	21c8 <_gp+0xfffe87e8>
    29dc:	9080004c 	andi	r2,r18,1
    29e0:	103e8f1e 	bne	r2,zero,2420 <_gp+0xfffe8a40>
    29e4:	d8802117 	ldw	r2,132(sp)
    29e8:	003e9e06 	br	2464 <_gp+0xfffe8a84>
    29ec:	1025883a 	mov	r18,r2
    29f0:	0039883a 	mov	fp,zero
    29f4:	00800084 	movi	r2,2
    29f8:	003fd306 	br	2948 <_gp+0xfffe8f68>
    29fc:	07000b44 	movi	fp,45
    2a00:	df002785 	stb	fp,158(sp)
    2a04:	003a4006 	br	1308 <_gp+0xfffe7928>
    2a08:	00c00b44 	movi	r3,45
    2a0c:	d8c02785 	stb	r3,158(sp)
    2a10:	d8802a15 	stw	r2,168(sp)
    2a14:	dc802b17 	ldw	r18,172(sp)
    2a18:	d8002915 	stw	zero,164(sp)
    2a1c:	07000b44 	movi	fp,45
    2a20:	003a8006 	br	1424 <_gp+0xfffe7a44>
    2a24:	04000074 	movhi	r16,1
    2a28:	843f1304 	addi	r16,r16,-948
    2a2c:	003f4706 	br	274c <_gp+0xfffe8d6c>
    2a30:	d8c02d17 	ldw	r3,180(sp)
    2a34:	d9002f17 	ldw	r4,188(sp)
    2a38:	18800017 	ldw	r2,0(r3)
    2a3c:	18c00104 	addi	r3,r3,4
    2a40:	d8c02d15 	stw	r3,180(sp)
    2a44:	11000015 	stw	r4,0(r2)
    2a48:	0038dd06 	br	dc0 <_gp+0xfffe73e0>
    2a4c:	dd802617 	ldw	r22,152(sp)
    2a50:	00bfff44 	movi	r2,-3
    2a54:	b0801c16 	blt	r22,r2,2ac8 <___vfprintf_internal_r+0x1de8>
    2a58:	d9402917 	ldw	r5,164(sp)
    2a5c:	2d801a16 	blt	r5,r22,2ac8 <___vfprintf_internal_r+0x1de8>
    2a60:	dd803215 	stw	r22,200(sp)
    2a64:	003e8906 	br	248c <_gp+0xfffe8aac>
    2a68:	01000074 	movhi	r4,1
    2a6c:	213f2084 	addi	r4,r4,-894
    2a70:	d9002b15 	stw	r4,172(sp)
    2a74:	003c9106 	br	1cbc <_gp+0xfffe82dc>
    2a78:	e005883a 	mov	r2,fp
    2a7c:	003e7906 	br	2464 <_gp+0xfffe8a84>
    2a80:	d9402917 	ldw	r5,164(sp)
    2a84:	df002783 	ldbu	fp,158(sp)
    2a88:	dcc02d15 	stw	r19,180(sp)
    2a8c:	d9402a15 	stw	r5,168(sp)
    2a90:	d9402e15 	stw	r5,184(sp)
    2a94:	d8002915 	stw	zero,164(sp)
    2a98:	d8003215 	stw	zero,200(sp)
    2a9c:	003a5d06 	br	1414 <_gp+0xfffe7a34>
    2aa0:	9080004c 	andi	r2,r18,1
    2aa4:	0039883a 	mov	fp,zero
    2aa8:	10000426 	beq	r2,zero,2abc <___vfprintf_internal_r+0x1ddc>
    2aac:	00800c04 	movi	r2,48
    2ab0:	dc001dc4 	addi	r16,sp,119
    2ab4:	d8801dc5 	stb	r2,119(sp)
    2ab8:	003b8006 	br	18bc <_gp+0xfffe7edc>
    2abc:	d8002e15 	stw	zero,184(sp)
    2ac0:	dc001e04 	addi	r16,sp,120
    2ac4:	003a4d06 	br	13fc <_gp+0xfffe7a1c>
    2ac8:	8c7fff84 	addi	r17,r17,-2
    2acc:	b5bfffc4 	addi	r22,r22,-1
    2ad0:	dd802615 	stw	r22,152(sp)
    2ad4:	dc4022c5 	stb	r17,139(sp)
    2ad8:	b000bf16 	blt	r22,zero,2dd8 <___vfprintf_internal_r+0x20f8>
    2adc:	00800ac4 	movi	r2,43
    2ae0:	d8802305 	stb	r2,140(sp)
    2ae4:	00800244 	movi	r2,9
    2ae8:	15807016 	blt	r2,r22,2cac <___vfprintf_internal_r+0x1fcc>
    2aec:	00800c04 	movi	r2,48
    2af0:	b5800c04 	addi	r22,r22,48
    2af4:	d8802345 	stb	r2,141(sp)
    2af8:	dd802385 	stb	r22,142(sp)
    2afc:	d88023c4 	addi	r2,sp,143
    2b00:	df0022c4 	addi	fp,sp,139
    2b04:	d8c03317 	ldw	r3,204(sp)
    2b08:	1739c83a 	sub	fp,r2,fp
    2b0c:	d9003317 	ldw	r4,204(sp)
    2b10:	e0c7883a 	add	r3,fp,r3
    2b14:	df003a15 	stw	fp,232(sp)
    2b18:	d8c02e15 	stw	r3,184(sp)
    2b1c:	00800044 	movi	r2,1
    2b20:	1100b30e 	bge	r2,r4,2df0 <___vfprintf_internal_r+0x2110>
    2b24:	d8c02e17 	ldw	r3,184(sp)
    2b28:	18c00044 	addi	r3,r3,1
    2b2c:	d8c02e15 	stw	r3,184(sp)
    2b30:	1805883a 	mov	r2,r3
    2b34:	1800ac16 	blt	r3,zero,2de8 <___vfprintf_internal_r+0x2108>
    2b38:	d8003215 	stw	zero,200(sp)
    2b3c:	003e5d06 	br	24b4 <_gp+0xfffe8ad4>
    2b40:	d9002c17 	ldw	r4,176(sp)
    2b44:	d9801e04 	addi	r6,sp,120
    2b48:	b80b883a 	mov	r5,r23
    2b4c:	00082fc0 	call	82fc <__sprint_r>
    2b50:	1039651e 	bne	r2,zero,10e8 <_gp+0xfffe7708>
    2b54:	dc402617 	ldw	r17,152(sp)
    2b58:	d8c02017 	ldw	r3,128(sp)
    2b5c:	d8801f17 	ldw	r2,124(sp)
    2b60:	da000404 	addi	r8,sp,16
    2b64:	003ed606 	br	26c0 <_gp+0xfffe8ce0>
    2b68:	582b883a 	mov	r21,r11
    2b6c:	d8002915 	stw	zero,164(sp)
    2b70:	0038bd06 	br	e68 <_gp+0xfffe7488>
    2b74:	d8802917 	ldw	r2,164(sp)
    2b78:	103e071e 	bne	r2,zero,2398 <_gp+0xfffe89b8>
    2b7c:	dc002915 	stw	r16,164(sp)
    2b80:	003e0506 	br	2398 <_gp+0xfffe89b8>
    2b84:	d9002917 	ldw	r4,164(sp)
    2b88:	20c00044 	addi	r3,r4,1
    2b8c:	003e0f06 	br	23cc <_gp+0xfffe89ec>
    2b90:	01400184 	movi	r5,6
    2b94:	d9402915 	stw	r5,164(sp)
    2b98:	003dff06 	br	2398 <_gp+0xfffe89b8>
    2b9c:	d8802104 	addi	r2,sp,132
    2ba0:	d8800315 	stw	r2,12(sp)
    2ba4:	d8802504 	addi	r2,sp,148
    2ba8:	d8800215 	stw	r2,8(sp)
    2bac:	d8802604 	addi	r2,sp,152
    2bb0:	d8800115 	stw	r2,4(sp)
    2bb4:	d8802917 	ldw	r2,164(sp)
    2bb8:	d9403617 	ldw	r5,216(sp)
    2bbc:	d9002c17 	ldw	r4,176(sp)
    2bc0:	d8800015 	stw	r2,0(sp)
    2bc4:	01c000c4 	movi	r7,3
    2bc8:	980d883a 	mov	r6,r19
    2bcc:	da003d15 	stw	r8,244(sp)
    2bd0:	00033040 	call	3304 <_dtoa_r>
    2bd4:	d8c02917 	ldw	r3,164(sp)
    2bd8:	da003d17 	ldw	r8,244(sp)
    2bdc:	1021883a 	mov	r16,r2
    2be0:	10f9883a 	add	fp,r2,r3
    2be4:	81000007 	ldb	r4,0(r16)
    2be8:	00800c04 	movi	r2,48
    2bec:	20805e26 	beq	r4,r2,2d68 <___vfprintf_internal_r+0x2088>
    2bf0:	d8c02617 	ldw	r3,152(sp)
    2bf4:	e0f9883a 	add	fp,fp,r3
    2bf8:	003e0a06 	br	2424 <_gp+0xfffe8a44>
    2bfc:	00c00b44 	movi	r3,45
    2c00:	24e0003c 	xorhi	r19,r4,32768
    2c04:	d8c02a05 	stb	r3,168(sp)
    2c08:	003de906 	br	23b0 <_gp+0xfffe89d0>
    2c0c:	d8c03217 	ldw	r3,200(sp)
    2c10:	00c07a0e 	bge	zero,r3,2dfc <___vfprintf_internal_r+0x211c>
    2c14:	00800044 	movi	r2,1
    2c18:	d9003317 	ldw	r4,204(sp)
    2c1c:	1105883a 	add	r2,r2,r4
    2c20:	d8802e15 	stw	r2,184(sp)
    2c24:	10004e16 	blt	r2,zero,2d60 <___vfprintf_internal_r+0x2080>
    2c28:	044019c4 	movi	r17,103
    2c2c:	003e2106 	br	24b4 <_gp+0xfffe8ad4>
    2c30:	d9002917 	ldw	r4,164(sp)
    2c34:	d8802104 	addi	r2,sp,132
    2c38:	d8800315 	stw	r2,12(sp)
    2c3c:	d9000015 	stw	r4,0(sp)
    2c40:	d8802504 	addi	r2,sp,148
    2c44:	d9403617 	ldw	r5,216(sp)
    2c48:	d9002c17 	ldw	r4,176(sp)
    2c4c:	d8800215 	stw	r2,8(sp)
    2c50:	d8802604 	addi	r2,sp,152
    2c54:	d8800115 	stw	r2,4(sp)
    2c58:	01c000c4 	movi	r7,3
    2c5c:	980d883a 	mov	r6,r19
    2c60:	da003d15 	stw	r8,244(sp)
    2c64:	00033040 	call	3304 <_dtoa_r>
    2c68:	d8c02917 	ldw	r3,164(sp)
    2c6c:	da003d17 	ldw	r8,244(sp)
    2c70:	1021883a 	mov	r16,r2
    2c74:	00801184 	movi	r2,70
    2c78:	80f9883a 	add	fp,r16,r3
    2c7c:	88bfd926 	beq	r17,r2,2be4 <_gp+0xfffe9204>
    2c80:	003de806 	br	2424 <_gp+0xfffe8a44>
    2c84:	d9002917 	ldw	r4,164(sp)
    2c88:	00c04d0e 	bge	zero,r3,2dc0 <___vfprintf_internal_r+0x20e0>
    2c8c:	2000441e 	bne	r4,zero,2da0 <___vfprintf_internal_r+0x20c0>
    2c90:	9480004c 	andi	r18,r18,1
    2c94:	9000421e 	bne	r18,zero,2da0 <___vfprintf_internal_r+0x20c0>
    2c98:	1805883a 	mov	r2,r3
    2c9c:	18007016 	blt	r3,zero,2e60 <___vfprintf_internal_r+0x2180>
    2ca0:	d8c03217 	ldw	r3,200(sp)
    2ca4:	d8c02e15 	stw	r3,184(sp)
    2ca8:	003e0206 	br	24b4 <_gp+0xfffe8ad4>
    2cac:	df0022c4 	addi	fp,sp,139
    2cb0:	dc002915 	stw	r16,164(sp)
    2cb4:	4027883a 	mov	r19,r8
    2cb8:	e021883a 	mov	r16,fp
    2cbc:	b009883a 	mov	r4,r22
    2cc0:	01400284 	movi	r5,10
    2cc4:	00008700 	call	870 <__modsi3>
    2cc8:	10800c04 	addi	r2,r2,48
    2ccc:	843fffc4 	addi	r16,r16,-1
    2cd0:	b009883a 	mov	r4,r22
    2cd4:	01400284 	movi	r5,10
    2cd8:	80800005 	stb	r2,0(r16)
    2cdc:	00007ec0 	call	7ec <__divsi3>
    2ce0:	102d883a 	mov	r22,r2
    2ce4:	00800244 	movi	r2,9
    2ce8:	15bff416 	blt	r2,r22,2cbc <_gp+0xfffe92dc>
    2cec:	9811883a 	mov	r8,r19
    2cf0:	b0800c04 	addi	r2,r22,48
    2cf4:	8027883a 	mov	r19,r16
    2cf8:	997fffc4 	addi	r5,r19,-1
    2cfc:	98bfffc5 	stb	r2,-1(r19)
    2d00:	dc002917 	ldw	r16,164(sp)
    2d04:	2f006a2e 	bgeu	r5,fp,2eb0 <___vfprintf_internal_r+0x21d0>
    2d08:	d9c02384 	addi	r7,sp,142
    2d0c:	3ccfc83a 	sub	r7,r7,r19
    2d10:	d9002344 	addi	r4,sp,141
    2d14:	e1cf883a 	add	r7,fp,r7
    2d18:	00000106 	br	2d20 <___vfprintf_internal_r+0x2040>
    2d1c:	28800003 	ldbu	r2,0(r5)
    2d20:	20800005 	stb	r2,0(r4)
    2d24:	21000044 	addi	r4,r4,1
    2d28:	29400044 	addi	r5,r5,1
    2d2c:	393ffb1e 	bne	r7,r4,2d1c <_gp+0xfffe933c>
    2d30:	d8802304 	addi	r2,sp,140
    2d34:	14c5c83a 	sub	r2,r2,r19
    2d38:	d8c02344 	addi	r3,sp,141
    2d3c:	1885883a 	add	r2,r3,r2
    2d40:	003f7006 	br	2b04 <_gp+0xfffe9124>
    2d44:	0005883a 	mov	r2,zero
    2d48:	003f0f06 	br	2988 <_gp+0xfffe8fa8>
    2d4c:	d8c03217 	ldw	r3,200(sp)
    2d50:	18c00044 	addi	r3,r3,1
    2d54:	d8c02e15 	stw	r3,184(sp)
    2d58:	1805883a 	mov	r2,r3
    2d5c:	183fb20e 	bge	r3,zero,2c28 <_gp+0xfffe9248>
    2d60:	0005883a 	mov	r2,zero
    2d64:	003fb006 	br	2c28 <_gp+0xfffe9248>
    2d68:	d9003617 	ldw	r4,216(sp)
    2d6c:	000d883a 	mov	r6,zero
    2d70:	000f883a 	mov	r7,zero
    2d74:	980b883a 	mov	r5,r19
    2d78:	d8c03c15 	stw	r3,240(sp)
    2d7c:	da003d15 	stw	r8,244(sp)
    2d80:	000bdc00 	call	bdc0 <__eqdf2>
    2d84:	d8c03c17 	ldw	r3,240(sp)
    2d88:	da003d17 	ldw	r8,244(sp)
    2d8c:	103f9826 	beq	r2,zero,2bf0 <_gp+0xfffe9210>
    2d90:	00800044 	movi	r2,1
    2d94:	10c7c83a 	sub	r3,r2,r3
    2d98:	d8c02615 	stw	r3,152(sp)
    2d9c:	003f9506 	br	2bf4 <_gp+0xfffe9214>
    2da0:	d9002917 	ldw	r4,164(sp)
    2da4:	d8c03217 	ldw	r3,200(sp)
    2da8:	20800044 	addi	r2,r4,1
    2dac:	1885883a 	add	r2,r3,r2
    2db0:	d8802e15 	stw	r2,184(sp)
    2db4:	103dbf0e 	bge	r2,zero,24b4 <_gp+0xfffe8ad4>
    2db8:	0005883a 	mov	r2,zero
    2dbc:	003dbd06 	br	24b4 <_gp+0xfffe8ad4>
    2dc0:	2000211e 	bne	r4,zero,2e48 <___vfprintf_internal_r+0x2168>
    2dc4:	9480004c 	andi	r18,r18,1
    2dc8:	90001f1e 	bne	r18,zero,2e48 <___vfprintf_internal_r+0x2168>
    2dcc:	00800044 	movi	r2,1
    2dd0:	d8802e15 	stw	r2,184(sp)
    2dd4:	003db706 	br	24b4 <_gp+0xfffe8ad4>
    2dd8:	00800b44 	movi	r2,45
    2ddc:	05adc83a 	sub	r22,zero,r22
    2de0:	d8802305 	stb	r2,140(sp)
    2de4:	003f3f06 	br	2ae4 <_gp+0xfffe9104>
    2de8:	0005883a 	mov	r2,zero
    2dec:	003f5206 	br	2b38 <_gp+0xfffe9158>
    2df0:	90a4703a 	and	r18,r18,r2
    2df4:	903f4e26 	beq	r18,zero,2b30 <_gp+0xfffe9150>
    2df8:	003f4a06 	br	2b24 <_gp+0xfffe9144>
    2dfc:	00800084 	movi	r2,2
    2e00:	10c5c83a 	sub	r2,r2,r3
    2e04:	003f8406 	br	2c18 <_gp+0xfffe9238>
    2e08:	d8802d17 	ldw	r2,180(sp)
    2e0c:	d9002d17 	ldw	r4,180(sp)
    2e10:	ac400043 	ldbu	r17,1(r21)
    2e14:	10800017 	ldw	r2,0(r2)
    2e18:	582b883a 	mov	r21,r11
    2e1c:	d8802915 	stw	r2,164(sp)
    2e20:	20800104 	addi	r2,r4,4
    2e24:	d9002917 	ldw	r4,164(sp)
    2e28:	d8802d15 	stw	r2,180(sp)
    2e2c:	203e7a0e 	bge	r4,zero,2818 <_gp+0xfffe8e38>
    2e30:	8c403fcc 	andi	r17,r17,255
    2e34:	00bfffc4 	movi	r2,-1
    2e38:	8c40201c 	xori	r17,r17,128
    2e3c:	d8802915 	stw	r2,164(sp)
    2e40:	8c7fe004 	addi	r17,r17,-128
    2e44:	00380706 	br	e64 <_gp+0xfffe7484>
    2e48:	d8c02917 	ldw	r3,164(sp)
    2e4c:	18c00084 	addi	r3,r3,2
    2e50:	d8c02e15 	stw	r3,184(sp)
    2e54:	1805883a 	mov	r2,r3
    2e58:	183d960e 	bge	r3,zero,24b4 <_gp+0xfffe8ad4>
    2e5c:	003fd606 	br	2db8 <_gp+0xfffe93d8>
    2e60:	0005883a 	mov	r2,zero
    2e64:	003f8e06 	br	2ca0 <_gp+0xfffe92c0>
    2e68:	9080004c 	andi	r2,r18,1
    2e6c:	103f811e 	bne	r2,zero,2c74 <_gp+0xfffe9294>
    2e70:	d8802117 	ldw	r2,132(sp)
    2e74:	1405c83a 	sub	r2,r2,r16
    2e78:	d8803315 	stw	r2,204(sp)
    2e7c:	b47ef326 	beq	r22,r17,2a4c <_gp+0xfffe906c>
    2e80:	dd802617 	ldw	r22,152(sp)
    2e84:	003f1106 	br	2acc <_gp+0xfffe90ec>
    2e88:	d9c02785 	stb	r7,158(sp)
    2e8c:	00390406 	br	12a0 <_gp+0xfffe78c0>
    2e90:	d9c02785 	stb	r7,158(sp)
    2e94:	0038d306 	br	11e4 <_gp+0xfffe7804>
    2e98:	d9c02785 	stb	r7,158(sp)
    2e9c:	003a6106 	br	1824 <_gp+0xfffe7e44>
    2ea0:	d9c02785 	stb	r7,158(sp)
    2ea4:	003af806 	br	1a88 <_gp+0xfffe80a8>
    2ea8:	0005883a 	mov	r2,zero
    2eac:	003d7e06 	br	24a8 <_gp+0xfffe8ac8>
    2eb0:	d8802344 	addi	r2,sp,141
    2eb4:	003f1306 	br	2b04 <_gp+0xfffe9124>
    2eb8:	d9c02785 	stb	r7,158(sp)
    2ebc:	00392306 	br	134c <_gp+0xfffe796c>
    2ec0:	d9c02785 	stb	r7,158(sp)
    2ec4:	003aa906 	br	196c <_gp+0xfffe7f8c>
    2ec8:	d9c02785 	stb	r7,158(sp)
    2ecc:	003a3d06 	br	17c4 <_gp+0xfffe7de4>
    2ed0:	d9c02785 	stb	r7,158(sp)
    2ed4:	003aca06 	br	1a00 <_gp+0xfffe8020>

00002ed8 <__vfprintf_internal>:
    2ed8:	00800074 	movhi	r2,1
    2edc:	10867904 	addi	r2,r2,6628
    2ee0:	300f883a 	mov	r7,r6
    2ee4:	280d883a 	mov	r6,r5
    2ee8:	200b883a 	mov	r5,r4
    2eec:	11000017 	ldw	r4,0(r2)
    2ef0:	0000ce01 	jmpi	ce0 <___vfprintf_internal_r>

00002ef4 <__sbprintf>:
    2ef4:	2880030b 	ldhu	r2,12(r5)
    2ef8:	2ac01917 	ldw	r11,100(r5)
    2efc:	2a80038b 	ldhu	r10,14(r5)
    2f00:	2a400717 	ldw	r9,28(r5)
    2f04:	2a000917 	ldw	r8,36(r5)
    2f08:	defee204 	addi	sp,sp,-1144
    2f0c:	00c10004 	movi	r3,1024
    2f10:	dc011a15 	stw	r16,1128(sp)
    2f14:	10bfff4c 	andi	r2,r2,65533
    2f18:	2821883a 	mov	r16,r5
    2f1c:	d8cb883a 	add	r5,sp,r3
    2f20:	dc811c15 	stw	r18,1136(sp)
    2f24:	dc411b15 	stw	r17,1132(sp)
    2f28:	dfc11d15 	stw	ra,1140(sp)
    2f2c:	2025883a 	mov	r18,r4
    2f30:	d881030d 	sth	r2,1036(sp)
    2f34:	dac11915 	stw	r11,1124(sp)
    2f38:	da81038d 	sth	r10,1038(sp)
    2f3c:	da410715 	stw	r9,1052(sp)
    2f40:	da010915 	stw	r8,1060(sp)
    2f44:	dec10015 	stw	sp,1024(sp)
    2f48:	dec10415 	stw	sp,1040(sp)
    2f4c:	d8c10215 	stw	r3,1032(sp)
    2f50:	d8c10515 	stw	r3,1044(sp)
    2f54:	d8010615 	stw	zero,1048(sp)
    2f58:	0000ce00 	call	ce0 <___vfprintf_internal_r>
    2f5c:	1023883a 	mov	r17,r2
    2f60:	10000416 	blt	r2,zero,2f74 <__sbprintf+0x80>
    2f64:	d9410004 	addi	r5,sp,1024
    2f68:	9009883a 	mov	r4,r18
    2f6c:	0004ba80 	call	4ba8 <_fflush_r>
    2f70:	10000d1e 	bne	r2,zero,2fa8 <__sbprintf+0xb4>
    2f74:	d881030b 	ldhu	r2,1036(sp)
    2f78:	1080100c 	andi	r2,r2,64
    2f7c:	10000326 	beq	r2,zero,2f8c <__sbprintf+0x98>
    2f80:	8080030b 	ldhu	r2,12(r16)
    2f84:	10801014 	ori	r2,r2,64
    2f88:	8080030d 	sth	r2,12(r16)
    2f8c:	8805883a 	mov	r2,r17
    2f90:	dfc11d17 	ldw	ra,1140(sp)
    2f94:	dc811c17 	ldw	r18,1136(sp)
    2f98:	dc411b17 	ldw	r17,1132(sp)
    2f9c:	dc011a17 	ldw	r16,1128(sp)
    2fa0:	dec11e04 	addi	sp,sp,1144
    2fa4:	f800283a 	ret
    2fa8:	047fffc4 	movi	r17,-1
    2fac:	003ff106 	br	2f74 <_gp+0xfffe9594>

00002fb0 <__swsetup_r>:
    2fb0:	00800074 	movhi	r2,1
    2fb4:	defffd04 	addi	sp,sp,-12
    2fb8:	10867904 	addi	r2,r2,6628
    2fbc:	dc400115 	stw	r17,4(sp)
    2fc0:	2023883a 	mov	r17,r4
    2fc4:	11000017 	ldw	r4,0(r2)
    2fc8:	dc000015 	stw	r16,0(sp)
    2fcc:	dfc00215 	stw	ra,8(sp)
    2fd0:	2821883a 	mov	r16,r5
    2fd4:	20000226 	beq	r4,zero,2fe0 <__swsetup_r+0x30>
    2fd8:	20800e17 	ldw	r2,56(r4)
    2fdc:	10003126 	beq	r2,zero,30a4 <__swsetup_r+0xf4>
    2fe0:	8080030b 	ldhu	r2,12(r16)
    2fe4:	10c0020c 	andi	r3,r2,8
    2fe8:	1009883a 	mov	r4,r2
    2fec:	18000f26 	beq	r3,zero,302c <__swsetup_r+0x7c>
    2ff0:	80c00417 	ldw	r3,16(r16)
    2ff4:	18001526 	beq	r3,zero,304c <__swsetup_r+0x9c>
    2ff8:	1100004c 	andi	r4,r2,1
    2ffc:	20001c1e 	bne	r4,zero,3070 <__swsetup_r+0xc0>
    3000:	1080008c 	andi	r2,r2,2
    3004:	1000291e 	bne	r2,zero,30ac <__swsetup_r+0xfc>
    3008:	80800517 	ldw	r2,20(r16)
    300c:	80800215 	stw	r2,8(r16)
    3010:	18001c26 	beq	r3,zero,3084 <__swsetup_r+0xd4>
    3014:	0005883a 	mov	r2,zero
    3018:	dfc00217 	ldw	ra,8(sp)
    301c:	dc400117 	ldw	r17,4(sp)
    3020:	dc000017 	ldw	r16,0(sp)
    3024:	dec00304 	addi	sp,sp,12
    3028:	f800283a 	ret
    302c:	2080040c 	andi	r2,r4,16
    3030:	10002e26 	beq	r2,zero,30ec <__swsetup_r+0x13c>
    3034:	2080010c 	andi	r2,r4,4
    3038:	10001e1e 	bne	r2,zero,30b4 <__swsetup_r+0x104>
    303c:	80c00417 	ldw	r3,16(r16)
    3040:	20800214 	ori	r2,r4,8
    3044:	8080030d 	sth	r2,12(r16)
    3048:	183feb1e 	bne	r3,zero,2ff8 <_gp+0xfffe9618>
    304c:	1100a00c 	andi	r4,r2,640
    3050:	01408004 	movi	r5,512
    3054:	217fe826 	beq	r4,r5,2ff8 <_gp+0xfffe9618>
    3058:	800b883a 	mov	r5,r16
    305c:	8809883a 	mov	r4,r17
    3060:	0005b280 	call	5b28 <__smakebuf_r>
    3064:	8080030b 	ldhu	r2,12(r16)
    3068:	80c00417 	ldw	r3,16(r16)
    306c:	003fe206 	br	2ff8 <_gp+0xfffe9618>
    3070:	80800517 	ldw	r2,20(r16)
    3074:	80000215 	stw	zero,8(r16)
    3078:	0085c83a 	sub	r2,zero,r2
    307c:	80800615 	stw	r2,24(r16)
    3080:	183fe41e 	bne	r3,zero,3014 <_gp+0xfffe9634>
    3084:	80c0030b 	ldhu	r3,12(r16)
    3088:	0005883a 	mov	r2,zero
    308c:	1900200c 	andi	r4,r3,128
    3090:	203fe126 	beq	r4,zero,3018 <_gp+0xfffe9638>
    3094:	18c01014 	ori	r3,r3,64
    3098:	80c0030d 	sth	r3,12(r16)
    309c:	00bfffc4 	movi	r2,-1
    30a0:	003fdd06 	br	3018 <_gp+0xfffe9638>
    30a4:	0004f840 	call	4f84 <__sinit>
    30a8:	003fcd06 	br	2fe0 <_gp+0xfffe9600>
    30ac:	0005883a 	mov	r2,zero
    30b0:	003fd606 	br	300c <_gp+0xfffe962c>
    30b4:	81400c17 	ldw	r5,48(r16)
    30b8:	28000626 	beq	r5,zero,30d4 <__swsetup_r+0x124>
    30bc:	80801004 	addi	r2,r16,64
    30c0:	28800326 	beq	r5,r2,30d0 <__swsetup_r+0x120>
    30c4:	8809883a 	mov	r4,r17
    30c8:	00050f80 	call	50f8 <_free_r>
    30cc:	8100030b 	ldhu	r4,12(r16)
    30d0:	80000c15 	stw	zero,48(r16)
    30d4:	80c00417 	ldw	r3,16(r16)
    30d8:	00bff6c4 	movi	r2,-37
    30dc:	1108703a 	and	r4,r2,r4
    30e0:	80000115 	stw	zero,4(r16)
    30e4:	80c00015 	stw	r3,0(r16)
    30e8:	003fd506 	br	3040 <_gp+0xfffe9660>
    30ec:	00800244 	movi	r2,9
    30f0:	88800015 	stw	r2,0(r17)
    30f4:	20801014 	ori	r2,r4,64
    30f8:	8080030d 	sth	r2,12(r16)
    30fc:	00bfffc4 	movi	r2,-1
    3100:	003fc506 	br	3018 <_gp+0xfffe9638>

00003104 <quorem>:
    3104:	defff704 	addi	sp,sp,-36
    3108:	dc800215 	stw	r18,8(sp)
    310c:	20800417 	ldw	r2,16(r4)
    3110:	2c800417 	ldw	r18,16(r5)
    3114:	dfc00815 	stw	ra,32(sp)
    3118:	ddc00715 	stw	r23,28(sp)
    311c:	dd800615 	stw	r22,24(sp)
    3120:	dd400515 	stw	r21,20(sp)
    3124:	dd000415 	stw	r20,16(sp)
    3128:	dcc00315 	stw	r19,12(sp)
    312c:	dc400115 	stw	r17,4(sp)
    3130:	dc000015 	stw	r16,0(sp)
    3134:	14807116 	blt	r2,r18,32fc <quorem+0x1f8>
    3138:	94bfffc4 	addi	r18,r18,-1
    313c:	94ad883a 	add	r22,r18,r18
    3140:	b5ad883a 	add	r22,r22,r22
    3144:	2c400504 	addi	r17,r5,20
    3148:	8da9883a 	add	r20,r17,r22
    314c:	25400504 	addi	r21,r4,20
    3150:	282f883a 	mov	r23,r5
    3154:	adad883a 	add	r22,r21,r22
    3158:	a1400017 	ldw	r5,0(r20)
    315c:	2021883a 	mov	r16,r4
    3160:	b1000017 	ldw	r4,0(r22)
    3164:	29400044 	addi	r5,r5,1
    3168:	00008e40 	call	8e4 <__udivsi3>
    316c:	1027883a 	mov	r19,r2
    3170:	10002c26 	beq	r2,zero,3224 <quorem+0x120>
    3174:	a813883a 	mov	r9,r21
    3178:	880b883a 	mov	r5,r17
    317c:	0009883a 	mov	r4,zero
    3180:	000d883a 	mov	r6,zero
    3184:	2a000017 	ldw	r8,0(r5)
    3188:	49c00017 	ldw	r7,0(r9)
    318c:	29400104 	addi	r5,r5,4
    3190:	40bfffcc 	andi	r2,r8,65535
    3194:	14c5383a 	mul	r2,r2,r19
    3198:	4010d43a 	srli	r8,r8,16
    319c:	38ffffcc 	andi	r3,r7,65535
    31a0:	1105883a 	add	r2,r2,r4
    31a4:	1008d43a 	srli	r4,r2,16
    31a8:	44d1383a 	mul	r8,r8,r19
    31ac:	198d883a 	add	r6,r3,r6
    31b0:	10ffffcc 	andi	r3,r2,65535
    31b4:	30c7c83a 	sub	r3,r6,r3
    31b8:	380ed43a 	srli	r7,r7,16
    31bc:	4105883a 	add	r2,r8,r4
    31c0:	180dd43a 	srai	r6,r3,16
    31c4:	113fffcc 	andi	r4,r2,65535
    31c8:	390fc83a 	sub	r7,r7,r4
    31cc:	398d883a 	add	r6,r7,r6
    31d0:	300e943a 	slli	r7,r6,16
    31d4:	18ffffcc 	andi	r3,r3,65535
    31d8:	1008d43a 	srli	r4,r2,16
    31dc:	38ceb03a 	or	r7,r7,r3
    31e0:	49c00015 	stw	r7,0(r9)
    31e4:	300dd43a 	srai	r6,r6,16
    31e8:	4a400104 	addi	r9,r9,4
    31ec:	a17fe52e 	bgeu	r20,r5,3184 <_gp+0xfffe97a4>
    31f0:	b0800017 	ldw	r2,0(r22)
    31f4:	10000b1e 	bne	r2,zero,3224 <quorem+0x120>
    31f8:	b0bfff04 	addi	r2,r22,-4
    31fc:	a880082e 	bgeu	r21,r2,3220 <quorem+0x11c>
    3200:	b0ffff17 	ldw	r3,-4(r22)
    3204:	18000326 	beq	r3,zero,3214 <quorem+0x110>
    3208:	00000506 	br	3220 <quorem+0x11c>
    320c:	10c00017 	ldw	r3,0(r2)
    3210:	1800031e 	bne	r3,zero,3220 <quorem+0x11c>
    3214:	10bfff04 	addi	r2,r2,-4
    3218:	94bfffc4 	addi	r18,r18,-1
    321c:	a8bffb36 	bltu	r21,r2,320c <_gp+0xfffe982c>
    3220:	84800415 	stw	r18,16(r16)
    3224:	b80b883a 	mov	r5,r23
    3228:	8009883a 	mov	r4,r16
    322c:	00071200 	call	7120 <__mcmp>
    3230:	10002616 	blt	r2,zero,32cc <quorem+0x1c8>
    3234:	9cc00044 	addi	r19,r19,1
    3238:	a805883a 	mov	r2,r21
    323c:	000b883a 	mov	r5,zero
    3240:	11000017 	ldw	r4,0(r2)
    3244:	89800017 	ldw	r6,0(r17)
    3248:	10800104 	addi	r2,r2,4
    324c:	20ffffcc 	andi	r3,r4,65535
    3250:	194b883a 	add	r5,r3,r5
    3254:	30ffffcc 	andi	r3,r6,65535
    3258:	28c7c83a 	sub	r3,r5,r3
    325c:	300cd43a 	srli	r6,r6,16
    3260:	2008d43a 	srli	r4,r4,16
    3264:	180bd43a 	srai	r5,r3,16
    3268:	18ffffcc 	andi	r3,r3,65535
    326c:	2189c83a 	sub	r4,r4,r6
    3270:	2149883a 	add	r4,r4,r5
    3274:	200c943a 	slli	r6,r4,16
    3278:	8c400104 	addi	r17,r17,4
    327c:	200bd43a 	srai	r5,r4,16
    3280:	30c6b03a 	or	r3,r6,r3
    3284:	10ffff15 	stw	r3,-4(r2)
    3288:	a47fed2e 	bgeu	r20,r17,3240 <_gp+0xfffe9860>
    328c:	9485883a 	add	r2,r18,r18
    3290:	1085883a 	add	r2,r2,r2
    3294:	a887883a 	add	r3,r21,r2
    3298:	18800017 	ldw	r2,0(r3)
    329c:	10000b1e 	bne	r2,zero,32cc <quorem+0x1c8>
    32a0:	18bfff04 	addi	r2,r3,-4
    32a4:	a880082e 	bgeu	r21,r2,32c8 <quorem+0x1c4>
    32a8:	18ffff17 	ldw	r3,-4(r3)
    32ac:	18000326 	beq	r3,zero,32bc <quorem+0x1b8>
    32b0:	00000506 	br	32c8 <quorem+0x1c4>
    32b4:	10c00017 	ldw	r3,0(r2)
    32b8:	1800031e 	bne	r3,zero,32c8 <quorem+0x1c4>
    32bc:	10bfff04 	addi	r2,r2,-4
    32c0:	94bfffc4 	addi	r18,r18,-1
    32c4:	a8bffb36 	bltu	r21,r2,32b4 <_gp+0xfffe98d4>
    32c8:	84800415 	stw	r18,16(r16)
    32cc:	9805883a 	mov	r2,r19
    32d0:	dfc00817 	ldw	ra,32(sp)
    32d4:	ddc00717 	ldw	r23,28(sp)
    32d8:	dd800617 	ldw	r22,24(sp)
    32dc:	dd400517 	ldw	r21,20(sp)
    32e0:	dd000417 	ldw	r20,16(sp)
    32e4:	dcc00317 	ldw	r19,12(sp)
    32e8:	dc800217 	ldw	r18,8(sp)
    32ec:	dc400117 	ldw	r17,4(sp)
    32f0:	dc000017 	ldw	r16,0(sp)
    32f4:	dec00904 	addi	sp,sp,36
    32f8:	f800283a 	ret
    32fc:	0005883a 	mov	r2,zero
    3300:	003ff306 	br	32d0 <_gp+0xfffe98f0>

00003304 <_dtoa_r>:
    3304:	20801017 	ldw	r2,64(r4)
    3308:	deffde04 	addi	sp,sp,-136
    330c:	df002015 	stw	fp,128(sp)
    3310:	dcc01b15 	stw	r19,108(sp)
    3314:	dc801a15 	stw	r18,104(sp)
    3318:	dc401915 	stw	r17,100(sp)
    331c:	dc001815 	stw	r16,96(sp)
    3320:	dfc02115 	stw	ra,132(sp)
    3324:	ddc01f15 	stw	r23,124(sp)
    3328:	dd801e15 	stw	r22,120(sp)
    332c:	dd401d15 	stw	r21,116(sp)
    3330:	dd001c15 	stw	r20,112(sp)
    3334:	d9c00315 	stw	r7,12(sp)
    3338:	2039883a 	mov	fp,r4
    333c:	3023883a 	mov	r17,r6
    3340:	2825883a 	mov	r18,r5
    3344:	dc002417 	ldw	r16,144(sp)
    3348:	3027883a 	mov	r19,r6
    334c:	10000826 	beq	r2,zero,3370 <_dtoa_r+0x6c>
    3350:	21801117 	ldw	r6,68(r4)
    3354:	00c00044 	movi	r3,1
    3358:	100b883a 	mov	r5,r2
    335c:	1986983a 	sll	r3,r3,r6
    3360:	11800115 	stw	r6,4(r2)
    3364:	10c00215 	stw	r3,8(r2)
    3368:	00069000 	call	6900 <_Bfree>
    336c:	e0001015 	stw	zero,64(fp)
    3370:	88002e16 	blt	r17,zero,342c <_dtoa_r+0x128>
    3374:	80000015 	stw	zero,0(r16)
    3378:	889ffc2c 	andhi	r2,r17,32752
    337c:	00dffc34 	movhi	r3,32752
    3380:	10c01c26 	beq	r2,r3,33f4 <_dtoa_r+0xf0>
    3384:	000d883a 	mov	r6,zero
    3388:	000f883a 	mov	r7,zero
    338c:	9009883a 	mov	r4,r18
    3390:	980b883a 	mov	r5,r19
    3394:	000bdc00 	call	bdc0 <__eqdf2>
    3398:	10002b1e 	bne	r2,zero,3448 <_dtoa_r+0x144>
    339c:	d9c02317 	ldw	r7,140(sp)
    33a0:	00800044 	movi	r2,1
    33a4:	38800015 	stw	r2,0(r7)
    33a8:	d8802517 	ldw	r2,148(sp)
    33ac:	10019e26 	beq	r2,zero,3a28 <_dtoa_r+0x724>
    33b0:	d8c02517 	ldw	r3,148(sp)
    33b4:	00800074 	movhi	r2,1
    33b8:	10bf2044 	addi	r2,r2,-895
    33bc:	18800015 	stw	r2,0(r3)
    33c0:	10bfffc4 	addi	r2,r2,-1
    33c4:	dfc02117 	ldw	ra,132(sp)
    33c8:	df002017 	ldw	fp,128(sp)
    33cc:	ddc01f17 	ldw	r23,124(sp)
    33d0:	dd801e17 	ldw	r22,120(sp)
    33d4:	dd401d17 	ldw	r21,116(sp)
    33d8:	dd001c17 	ldw	r20,112(sp)
    33dc:	dcc01b17 	ldw	r19,108(sp)
    33e0:	dc801a17 	ldw	r18,104(sp)
    33e4:	dc401917 	ldw	r17,100(sp)
    33e8:	dc001817 	ldw	r16,96(sp)
    33ec:	dec02204 	addi	sp,sp,136
    33f0:	f800283a 	ret
    33f4:	d8c02317 	ldw	r3,140(sp)
    33f8:	0089c3c4 	movi	r2,9999
    33fc:	18800015 	stw	r2,0(r3)
    3400:	90017726 	beq	r18,zero,39e0 <_dtoa_r+0x6dc>
    3404:	00800074 	movhi	r2,1
    3408:	10bf2c04 	addi	r2,r2,-848
    340c:	d9002517 	ldw	r4,148(sp)
    3410:	203fec26 	beq	r4,zero,33c4 <_gp+0xfffe99e4>
    3414:	10c000c7 	ldb	r3,3(r2)
    3418:	1801781e 	bne	r3,zero,39fc <_dtoa_r+0x6f8>
    341c:	10c000c4 	addi	r3,r2,3
    3420:	d9802517 	ldw	r6,148(sp)
    3424:	30c00015 	stw	r3,0(r6)
    3428:	003fe606 	br	33c4 <_gp+0xfffe99e4>
    342c:	04e00034 	movhi	r19,32768
    3430:	9cffffc4 	addi	r19,r19,-1
    3434:	00800044 	movi	r2,1
    3438:	8ce6703a 	and	r19,r17,r19
    343c:	80800015 	stw	r2,0(r16)
    3440:	9823883a 	mov	r17,r19
    3444:	003fcc06 	br	3378 <_gp+0xfffe9998>
    3448:	d8800204 	addi	r2,sp,8
    344c:	d8800015 	stw	r2,0(sp)
    3450:	d9c00104 	addi	r7,sp,4
    3454:	900b883a 	mov	r5,r18
    3458:	980d883a 	mov	r6,r19
    345c:	e009883a 	mov	r4,fp
    3460:	8820d53a 	srli	r16,r17,20
    3464:	00074ec0 	call	74ec <__d2b>
    3468:	d8800915 	stw	r2,36(sp)
    346c:	8001651e 	bne	r16,zero,3a04 <_dtoa_r+0x700>
    3470:	dd800217 	ldw	r22,8(sp)
    3474:	dc000117 	ldw	r16,4(sp)
    3478:	00800804 	movi	r2,32
    347c:	b421883a 	add	r16,r22,r16
    3480:	80c10c84 	addi	r3,r16,1074
    3484:	10c2d10e 	bge	r2,r3,3fcc <_dtoa_r+0xcc8>
    3488:	00801004 	movi	r2,64
    348c:	81010484 	addi	r4,r16,1042
    3490:	10c7c83a 	sub	r3,r2,r3
    3494:	9108d83a 	srl	r4,r18,r4
    3498:	88e2983a 	sll	r17,r17,r3
    349c:	2448b03a 	or	r4,r4,r17
    34a0:	000d1880 	call	d188 <__floatunsidf>
    34a4:	017f8434 	movhi	r5,65040
    34a8:	01800044 	movi	r6,1
    34ac:	1009883a 	mov	r4,r2
    34b0:	194b883a 	add	r5,r3,r5
    34b4:	843fffc4 	addi	r16,r16,-1
    34b8:	d9801115 	stw	r6,68(sp)
    34bc:	000d883a 	mov	r6,zero
    34c0:	01cffe34 	movhi	r7,16376
    34c4:	000c7300 	call	c730 <__subdf3>
    34c8:	0198dbf4 	movhi	r6,25455
    34cc:	01cff4f4 	movhi	r7,16339
    34d0:	3190d844 	addi	r6,r6,17249
    34d4:	39e1e9c4 	addi	r7,r7,-30809
    34d8:	1009883a 	mov	r4,r2
    34dc:	180b883a 	mov	r5,r3
    34e0:	000c0180 	call	c018 <__muldf3>
    34e4:	01a2d874 	movhi	r6,35681
    34e8:	01cff1f4 	movhi	r7,16327
    34ec:	31b22cc4 	addi	r6,r6,-14157
    34f0:	39e28a04 	addi	r7,r7,-30168
    34f4:	180b883a 	mov	r5,r3
    34f8:	1009883a 	mov	r4,r2
    34fc:	000ac2c0 	call	ac2c <__adddf3>
    3500:	8009883a 	mov	r4,r16
    3504:	1029883a 	mov	r20,r2
    3508:	1823883a 	mov	r17,r3
    350c:	000d0ac0 	call	d0ac <__floatsidf>
    3510:	019427f4 	movhi	r6,20639
    3514:	01cff4f4 	movhi	r7,16339
    3518:	319e7ec4 	addi	r6,r6,31227
    351c:	39d104c4 	addi	r7,r7,17427
    3520:	1009883a 	mov	r4,r2
    3524:	180b883a 	mov	r5,r3
    3528:	000c0180 	call	c018 <__muldf3>
    352c:	100d883a 	mov	r6,r2
    3530:	180f883a 	mov	r7,r3
    3534:	a009883a 	mov	r4,r20
    3538:	880b883a 	mov	r5,r17
    353c:	000ac2c0 	call	ac2c <__adddf3>
    3540:	1009883a 	mov	r4,r2
    3544:	180b883a 	mov	r5,r3
    3548:	1029883a 	mov	r20,r2
    354c:	1823883a 	mov	r17,r3
    3550:	000d02c0 	call	d02c <__fixdfsi>
    3554:	000d883a 	mov	r6,zero
    3558:	000f883a 	mov	r7,zero
    355c:	a009883a 	mov	r4,r20
    3560:	880b883a 	mov	r5,r17
    3564:	d8800515 	stw	r2,20(sp)
    3568:	000bf240 	call	bf24 <__ledf2>
    356c:	10028716 	blt	r2,zero,3f8c <_dtoa_r+0xc88>
    3570:	d8c00517 	ldw	r3,20(sp)
    3574:	00800584 	movi	r2,22
    3578:	10c27536 	bltu	r2,r3,3f50 <_dtoa_r+0xc4c>
    357c:	180490fa 	slli	r2,r3,3
    3580:	00c00074 	movhi	r3,1
    3584:	18ff4804 	addi	r3,r3,-736
    3588:	1885883a 	add	r2,r3,r2
    358c:	11000017 	ldw	r4,0(r2)
    3590:	11400117 	ldw	r5,4(r2)
    3594:	900d883a 	mov	r6,r18
    3598:	980f883a 	mov	r7,r19
    359c:	000be480 	call	be48 <__gedf2>
    35a0:	00828d0e 	bge	zero,r2,3fd8 <_dtoa_r+0xcd4>
    35a4:	d9000517 	ldw	r4,20(sp)
    35a8:	d8000e15 	stw	zero,56(sp)
    35ac:	213fffc4 	addi	r4,r4,-1
    35b0:	d9000515 	stw	r4,20(sp)
    35b4:	b42dc83a 	sub	r22,r22,r16
    35b8:	b5bfffc4 	addi	r22,r22,-1
    35bc:	b0026f16 	blt	r22,zero,3f7c <_dtoa_r+0xc78>
    35c0:	d8000815 	stw	zero,32(sp)
    35c4:	d9c00517 	ldw	r7,20(sp)
    35c8:	38026416 	blt	r7,zero,3f5c <_dtoa_r+0xc58>
    35cc:	b1ed883a 	add	r22,r22,r7
    35d0:	d9c00d15 	stw	r7,52(sp)
    35d4:	d8000a15 	stw	zero,40(sp)
    35d8:	d9800317 	ldw	r6,12(sp)
    35dc:	00800244 	movi	r2,9
    35e0:	11811436 	bltu	r2,r6,3a34 <_dtoa_r+0x730>
    35e4:	00800144 	movi	r2,5
    35e8:	1184e10e 	bge	r2,r6,4970 <_dtoa_r+0x166c>
    35ec:	31bfff04 	addi	r6,r6,-4
    35f0:	d9800315 	stw	r6,12(sp)
    35f4:	0023883a 	mov	r17,zero
    35f8:	d9800317 	ldw	r6,12(sp)
    35fc:	008000c4 	movi	r2,3
    3600:	30836726 	beq	r6,r2,43a0 <_dtoa_r+0x109c>
    3604:	1183410e 	bge	r2,r6,430c <_dtoa_r+0x1008>
    3608:	d9c00317 	ldw	r7,12(sp)
    360c:	00800104 	movi	r2,4
    3610:	38827c26 	beq	r7,r2,4004 <_dtoa_r+0xd00>
    3614:	00800144 	movi	r2,5
    3618:	3884c41e 	bne	r7,r2,492c <_dtoa_r+0x1628>
    361c:	00800044 	movi	r2,1
    3620:	d8800b15 	stw	r2,44(sp)
    3624:	d8c00517 	ldw	r3,20(sp)
    3628:	d9002217 	ldw	r4,136(sp)
    362c:	1907883a 	add	r3,r3,r4
    3630:	19800044 	addi	r6,r3,1
    3634:	d8c00c15 	stw	r3,48(sp)
    3638:	d9800615 	stw	r6,24(sp)
    363c:	0183a40e 	bge	zero,r6,44d0 <_dtoa_r+0x11cc>
    3640:	d9800617 	ldw	r6,24(sp)
    3644:	3021883a 	mov	r16,r6
    3648:	e0001115 	stw	zero,68(fp)
    364c:	008005c4 	movi	r2,23
    3650:	1184c92e 	bgeu	r2,r6,4978 <_dtoa_r+0x1674>
    3654:	00c00044 	movi	r3,1
    3658:	00800104 	movi	r2,4
    365c:	1085883a 	add	r2,r2,r2
    3660:	11000504 	addi	r4,r2,20
    3664:	180b883a 	mov	r5,r3
    3668:	18c00044 	addi	r3,r3,1
    366c:	313ffb2e 	bgeu	r6,r4,365c <_gp+0xfffe9c7c>
    3670:	e1401115 	stw	r5,68(fp)
    3674:	e009883a 	mov	r4,fp
    3678:	00068580 	call	6858 <_Balloc>
    367c:	d8800715 	stw	r2,28(sp)
    3680:	e0801015 	stw	r2,64(fp)
    3684:	00800384 	movi	r2,14
    3688:	1400f736 	bltu	r2,r16,3a68 <_dtoa_r+0x764>
    368c:	8800f626 	beq	r17,zero,3a68 <_dtoa_r+0x764>
    3690:	d9c00517 	ldw	r7,20(sp)
    3694:	01c39a0e 	bge	zero,r7,4500 <_dtoa_r+0x11fc>
    3698:	388003cc 	andi	r2,r7,15
    369c:	100490fa 	slli	r2,r2,3
    36a0:	382bd13a 	srai	r21,r7,4
    36a4:	00c00074 	movhi	r3,1
    36a8:	18ff4804 	addi	r3,r3,-736
    36ac:	1885883a 	add	r2,r3,r2
    36b0:	a8c0040c 	andi	r3,r21,16
    36b4:	12400017 	ldw	r9,0(r2)
    36b8:	12000117 	ldw	r8,4(r2)
    36bc:	18037926 	beq	r3,zero,44a4 <_dtoa_r+0x11a0>
    36c0:	00800074 	movhi	r2,1
    36c4:	10bf3e04 	addi	r2,r2,-776
    36c8:	11800817 	ldw	r6,32(r2)
    36cc:	11c00917 	ldw	r7,36(r2)
    36d0:	9009883a 	mov	r4,r18
    36d4:	980b883a 	mov	r5,r19
    36d8:	da001715 	stw	r8,92(sp)
    36dc:	da401615 	stw	r9,88(sp)
    36e0:	000b4d80 	call	b4d8 <__divdf3>
    36e4:	da001717 	ldw	r8,92(sp)
    36e8:	da401617 	ldw	r9,88(sp)
    36ec:	ad4003cc 	andi	r21,r21,15
    36f0:	040000c4 	movi	r16,3
    36f4:	1023883a 	mov	r17,r2
    36f8:	1829883a 	mov	r20,r3
    36fc:	a8001126 	beq	r21,zero,3744 <_dtoa_r+0x440>
    3700:	05c00074 	movhi	r23,1
    3704:	bdff3e04 	addi	r23,r23,-776
    3708:	4805883a 	mov	r2,r9
    370c:	4007883a 	mov	r3,r8
    3710:	a980004c 	andi	r6,r21,1
    3714:	1009883a 	mov	r4,r2
    3718:	a82bd07a 	srai	r21,r21,1
    371c:	180b883a 	mov	r5,r3
    3720:	30000426 	beq	r6,zero,3734 <_dtoa_r+0x430>
    3724:	b9800017 	ldw	r6,0(r23)
    3728:	b9c00117 	ldw	r7,4(r23)
    372c:	84000044 	addi	r16,r16,1
    3730:	000c0180 	call	c018 <__muldf3>
    3734:	bdc00204 	addi	r23,r23,8
    3738:	a83ff51e 	bne	r21,zero,3710 <_gp+0xfffe9d30>
    373c:	1013883a 	mov	r9,r2
    3740:	1811883a 	mov	r8,r3
    3744:	480d883a 	mov	r6,r9
    3748:	400f883a 	mov	r7,r8
    374c:	8809883a 	mov	r4,r17
    3750:	a00b883a 	mov	r5,r20
    3754:	000b4d80 	call	b4d8 <__divdf3>
    3758:	d8800f15 	stw	r2,60(sp)
    375c:	d8c01015 	stw	r3,64(sp)
    3760:	d8c00e17 	ldw	r3,56(sp)
    3764:	18000626 	beq	r3,zero,3780 <_dtoa_r+0x47c>
    3768:	d9000f17 	ldw	r4,60(sp)
    376c:	d9401017 	ldw	r5,64(sp)
    3770:	000d883a 	mov	r6,zero
    3774:	01cffc34 	movhi	r7,16368
    3778:	000bf240 	call	bf24 <__ledf2>
    377c:	10040b16 	blt	r2,zero,47ac <_dtoa_r+0x14a8>
    3780:	8009883a 	mov	r4,r16
    3784:	000d0ac0 	call	d0ac <__floatsidf>
    3788:	d9800f17 	ldw	r6,60(sp)
    378c:	d9c01017 	ldw	r7,64(sp)
    3790:	1009883a 	mov	r4,r2
    3794:	180b883a 	mov	r5,r3
    3798:	000c0180 	call	c018 <__muldf3>
    379c:	000d883a 	mov	r6,zero
    37a0:	01d00734 	movhi	r7,16412
    37a4:	1009883a 	mov	r4,r2
    37a8:	180b883a 	mov	r5,r3
    37ac:	000ac2c0 	call	ac2c <__adddf3>
    37b0:	1021883a 	mov	r16,r2
    37b4:	d8800617 	ldw	r2,24(sp)
    37b8:	047f3034 	movhi	r17,64704
    37bc:	1c63883a 	add	r17,r3,r17
    37c0:	10031826 	beq	r2,zero,4424 <_dtoa_r+0x1120>
    37c4:	d8c00517 	ldw	r3,20(sp)
    37c8:	db000617 	ldw	r12,24(sp)
    37cc:	d8c01315 	stw	r3,76(sp)
    37d0:	d9000b17 	ldw	r4,44(sp)
    37d4:	20038f26 	beq	r4,zero,4614 <_dtoa_r+0x1310>
    37d8:	60bfffc4 	addi	r2,r12,-1
    37dc:	100490fa 	slli	r2,r2,3
    37e0:	00c00074 	movhi	r3,1
    37e4:	18ff4804 	addi	r3,r3,-736
    37e8:	1885883a 	add	r2,r3,r2
    37ec:	11800017 	ldw	r6,0(r2)
    37f0:	11c00117 	ldw	r7,4(r2)
    37f4:	d8800717 	ldw	r2,28(sp)
    37f8:	0009883a 	mov	r4,zero
    37fc:	014ff834 	movhi	r5,16352
    3800:	db001615 	stw	r12,88(sp)
    3804:	15c00044 	addi	r23,r2,1
    3808:	000b4d80 	call	b4d8 <__divdf3>
    380c:	800d883a 	mov	r6,r16
    3810:	880f883a 	mov	r7,r17
    3814:	1009883a 	mov	r4,r2
    3818:	180b883a 	mov	r5,r3
    381c:	000c7300 	call	c730 <__subdf3>
    3820:	d9401017 	ldw	r5,64(sp)
    3824:	d9000f17 	ldw	r4,60(sp)
    3828:	102b883a 	mov	r21,r2
    382c:	d8c01215 	stw	r3,72(sp)
    3830:	000d02c0 	call	d02c <__fixdfsi>
    3834:	1009883a 	mov	r4,r2
    3838:	1029883a 	mov	r20,r2
    383c:	000d0ac0 	call	d0ac <__floatsidf>
    3840:	d9000f17 	ldw	r4,60(sp)
    3844:	d9401017 	ldw	r5,64(sp)
    3848:	100d883a 	mov	r6,r2
    384c:	180f883a 	mov	r7,r3
    3850:	000c7300 	call	c730 <__subdf3>
    3854:	1823883a 	mov	r17,r3
    3858:	d8c00717 	ldw	r3,28(sp)
    385c:	d9401217 	ldw	r5,72(sp)
    3860:	a2000c04 	addi	r8,r20,48
    3864:	1021883a 	mov	r16,r2
    3868:	1a000005 	stb	r8,0(r3)
    386c:	800d883a 	mov	r6,r16
    3870:	880f883a 	mov	r7,r17
    3874:	a809883a 	mov	r4,r21
    3878:	4029883a 	mov	r20,r8
    387c:	000be480 	call	be48 <__gedf2>
    3880:	00841d16 	blt	zero,r2,48f8 <_dtoa_r+0x15f4>
    3884:	800d883a 	mov	r6,r16
    3888:	880f883a 	mov	r7,r17
    388c:	0009883a 	mov	r4,zero
    3890:	014ffc34 	movhi	r5,16368
    3894:	000c7300 	call	c730 <__subdf3>
    3898:	d9401217 	ldw	r5,72(sp)
    389c:	100d883a 	mov	r6,r2
    38a0:	180f883a 	mov	r7,r3
    38a4:	a809883a 	mov	r4,r21
    38a8:	000be480 	call	be48 <__gedf2>
    38ac:	db001617 	ldw	r12,88(sp)
    38b0:	00840e16 	blt	zero,r2,48ec <_dtoa_r+0x15e8>
    38b4:	00800044 	movi	r2,1
    38b8:	13006b0e 	bge	r2,r12,3a68 <_dtoa_r+0x764>
    38bc:	d9000717 	ldw	r4,28(sp)
    38c0:	dd800f15 	stw	r22,60(sp)
    38c4:	dcc01015 	stw	r19,64(sp)
    38c8:	2319883a 	add	r12,r4,r12
    38cc:	dcc01217 	ldw	r19,72(sp)
    38d0:	602d883a 	mov	r22,r12
    38d4:	dc801215 	stw	r18,72(sp)
    38d8:	b825883a 	mov	r18,r23
    38dc:	00000906 	br	3904 <_dtoa_r+0x600>
    38e0:	000c7300 	call	c730 <__subdf3>
    38e4:	a80d883a 	mov	r6,r21
    38e8:	980f883a 	mov	r7,r19
    38ec:	1009883a 	mov	r4,r2
    38f0:	180b883a 	mov	r5,r3
    38f4:	000bf240 	call	bf24 <__ledf2>
    38f8:	1003e816 	blt	r2,zero,489c <_dtoa_r+0x1598>
    38fc:	b825883a 	mov	r18,r23
    3900:	bd83e926 	beq	r23,r22,48a8 <_dtoa_r+0x15a4>
    3904:	a809883a 	mov	r4,r21
    3908:	980b883a 	mov	r5,r19
    390c:	000d883a 	mov	r6,zero
    3910:	01d00934 	movhi	r7,16420
    3914:	000c0180 	call	c018 <__muldf3>
    3918:	000d883a 	mov	r6,zero
    391c:	01d00934 	movhi	r7,16420
    3920:	8009883a 	mov	r4,r16
    3924:	880b883a 	mov	r5,r17
    3928:	102b883a 	mov	r21,r2
    392c:	1827883a 	mov	r19,r3
    3930:	000c0180 	call	c018 <__muldf3>
    3934:	180b883a 	mov	r5,r3
    3938:	1009883a 	mov	r4,r2
    393c:	1821883a 	mov	r16,r3
    3940:	1023883a 	mov	r17,r2
    3944:	000d02c0 	call	d02c <__fixdfsi>
    3948:	1009883a 	mov	r4,r2
    394c:	1029883a 	mov	r20,r2
    3950:	000d0ac0 	call	d0ac <__floatsidf>
    3954:	8809883a 	mov	r4,r17
    3958:	800b883a 	mov	r5,r16
    395c:	100d883a 	mov	r6,r2
    3960:	180f883a 	mov	r7,r3
    3964:	000c7300 	call	c730 <__subdf3>
    3968:	a5000c04 	addi	r20,r20,48
    396c:	a80d883a 	mov	r6,r21
    3970:	980f883a 	mov	r7,r19
    3974:	1009883a 	mov	r4,r2
    3978:	180b883a 	mov	r5,r3
    397c:	95000005 	stb	r20,0(r18)
    3980:	1021883a 	mov	r16,r2
    3984:	1823883a 	mov	r17,r3
    3988:	000bf240 	call	bf24 <__ledf2>
    398c:	bdc00044 	addi	r23,r23,1
    3990:	800d883a 	mov	r6,r16
    3994:	880f883a 	mov	r7,r17
    3998:	0009883a 	mov	r4,zero
    399c:	014ffc34 	movhi	r5,16368
    39a0:	103fcf0e 	bge	r2,zero,38e0 <_gp+0xfffe9f00>
    39a4:	d8c01317 	ldw	r3,76(sp)
    39a8:	d8c00515 	stw	r3,20(sp)
    39ac:	d9400917 	ldw	r5,36(sp)
    39b0:	e009883a 	mov	r4,fp
    39b4:	00069000 	call	6900 <_Bfree>
    39b8:	d9000517 	ldw	r4,20(sp)
    39bc:	d9802317 	ldw	r6,140(sp)
    39c0:	d9c02517 	ldw	r7,148(sp)
    39c4:	b8000005 	stb	zero,0(r23)
    39c8:	20800044 	addi	r2,r4,1
    39cc:	30800015 	stw	r2,0(r6)
    39d0:	3802aa26 	beq	r7,zero,447c <_dtoa_r+0x1178>
    39d4:	3dc00015 	stw	r23,0(r7)
    39d8:	d8800717 	ldw	r2,28(sp)
    39dc:	003e7906 	br	33c4 <_gp+0xfffe99e4>
    39e0:	00800434 	movhi	r2,16
    39e4:	10bfffc4 	addi	r2,r2,-1
    39e8:	88a2703a 	and	r17,r17,r2
    39ec:	883e851e 	bne	r17,zero,3404 <_gp+0xfffe9a24>
    39f0:	00800074 	movhi	r2,1
    39f4:	10bf2904 	addi	r2,r2,-860
    39f8:	003e8406 	br	340c <_gp+0xfffe9a2c>
    39fc:	10c00204 	addi	r3,r2,8
    3a00:	003e8706 	br	3420 <_gp+0xfffe9a40>
    3a04:	01400434 	movhi	r5,16
    3a08:	297fffc4 	addi	r5,r5,-1
    3a0c:	994a703a 	and	r5,r19,r5
    3a10:	9009883a 	mov	r4,r18
    3a14:	843f0044 	addi	r16,r16,-1023
    3a18:	294ffc34 	orhi	r5,r5,16368
    3a1c:	dd800217 	ldw	r22,8(sp)
    3a20:	d8001115 	stw	zero,68(sp)
    3a24:	003ea506 	br	34bc <_gp+0xfffe9adc>
    3a28:	00800074 	movhi	r2,1
    3a2c:	10bf2004 	addi	r2,r2,-896
    3a30:	003e6406 	br	33c4 <_gp+0xfffe99e4>
    3a34:	e0001115 	stw	zero,68(fp)
    3a38:	000b883a 	mov	r5,zero
    3a3c:	e009883a 	mov	r4,fp
    3a40:	00068580 	call	6858 <_Balloc>
    3a44:	01bfffc4 	movi	r6,-1
    3a48:	01c00044 	movi	r7,1
    3a4c:	d8800715 	stw	r2,28(sp)
    3a50:	d9800c15 	stw	r6,48(sp)
    3a54:	e0801015 	stw	r2,64(fp)
    3a58:	d8000315 	stw	zero,12(sp)
    3a5c:	d9c00b15 	stw	r7,44(sp)
    3a60:	d9800615 	stw	r6,24(sp)
    3a64:	d8002215 	stw	zero,136(sp)
    3a68:	d8800117 	ldw	r2,4(sp)
    3a6c:	10008916 	blt	r2,zero,3c94 <_dtoa_r+0x990>
    3a70:	d9000517 	ldw	r4,20(sp)
    3a74:	00c00384 	movi	r3,14
    3a78:	19008616 	blt	r3,r4,3c94 <_dtoa_r+0x990>
    3a7c:	200490fa 	slli	r2,r4,3
    3a80:	00c00074 	movhi	r3,1
    3a84:	d9802217 	ldw	r6,136(sp)
    3a88:	18ff4804 	addi	r3,r3,-736
    3a8c:	1885883a 	add	r2,r3,r2
    3a90:	14000017 	ldw	r16,0(r2)
    3a94:	14400117 	ldw	r17,4(r2)
    3a98:	30016316 	blt	r6,zero,4028 <_dtoa_r+0xd24>
    3a9c:	800d883a 	mov	r6,r16
    3aa0:	880f883a 	mov	r7,r17
    3aa4:	9009883a 	mov	r4,r18
    3aa8:	980b883a 	mov	r5,r19
    3aac:	000b4d80 	call	b4d8 <__divdf3>
    3ab0:	180b883a 	mov	r5,r3
    3ab4:	1009883a 	mov	r4,r2
    3ab8:	000d02c0 	call	d02c <__fixdfsi>
    3abc:	1009883a 	mov	r4,r2
    3ac0:	102b883a 	mov	r21,r2
    3ac4:	000d0ac0 	call	d0ac <__floatsidf>
    3ac8:	800d883a 	mov	r6,r16
    3acc:	880f883a 	mov	r7,r17
    3ad0:	1009883a 	mov	r4,r2
    3ad4:	180b883a 	mov	r5,r3
    3ad8:	000c0180 	call	c018 <__muldf3>
    3adc:	100d883a 	mov	r6,r2
    3ae0:	180f883a 	mov	r7,r3
    3ae4:	9009883a 	mov	r4,r18
    3ae8:	980b883a 	mov	r5,r19
    3aec:	000c7300 	call	c730 <__subdf3>
    3af0:	d9c00717 	ldw	r7,28(sp)
    3af4:	1009883a 	mov	r4,r2
    3af8:	a8800c04 	addi	r2,r21,48
    3afc:	38800005 	stb	r2,0(r7)
    3b00:	3dc00044 	addi	r23,r7,1
    3b04:	d9c00617 	ldw	r7,24(sp)
    3b08:	01800044 	movi	r6,1
    3b0c:	180b883a 	mov	r5,r3
    3b10:	2005883a 	mov	r2,r4
    3b14:	39803826 	beq	r7,r6,3bf8 <_dtoa_r+0x8f4>
    3b18:	000d883a 	mov	r6,zero
    3b1c:	01d00934 	movhi	r7,16420
    3b20:	000c0180 	call	c018 <__muldf3>
    3b24:	000d883a 	mov	r6,zero
    3b28:	000f883a 	mov	r7,zero
    3b2c:	1009883a 	mov	r4,r2
    3b30:	180b883a 	mov	r5,r3
    3b34:	1025883a 	mov	r18,r2
    3b38:	1827883a 	mov	r19,r3
    3b3c:	000bdc00 	call	bdc0 <__eqdf2>
    3b40:	103f9a26 	beq	r2,zero,39ac <_gp+0xfffe9fcc>
    3b44:	d9c00617 	ldw	r7,24(sp)
    3b48:	d8c00717 	ldw	r3,28(sp)
    3b4c:	b829883a 	mov	r20,r23
    3b50:	38bfffc4 	addi	r2,r7,-1
    3b54:	18ad883a 	add	r22,r3,r2
    3b58:	00000a06 	br	3b84 <_dtoa_r+0x880>
    3b5c:	000c0180 	call	c018 <__muldf3>
    3b60:	000d883a 	mov	r6,zero
    3b64:	000f883a 	mov	r7,zero
    3b68:	1009883a 	mov	r4,r2
    3b6c:	180b883a 	mov	r5,r3
    3b70:	1025883a 	mov	r18,r2
    3b74:	1827883a 	mov	r19,r3
    3b78:	b829883a 	mov	r20,r23
    3b7c:	000bdc00 	call	bdc0 <__eqdf2>
    3b80:	103f8a26 	beq	r2,zero,39ac <_gp+0xfffe9fcc>
    3b84:	800d883a 	mov	r6,r16
    3b88:	880f883a 	mov	r7,r17
    3b8c:	9009883a 	mov	r4,r18
    3b90:	980b883a 	mov	r5,r19
    3b94:	000b4d80 	call	b4d8 <__divdf3>
    3b98:	180b883a 	mov	r5,r3
    3b9c:	1009883a 	mov	r4,r2
    3ba0:	000d02c0 	call	d02c <__fixdfsi>
    3ba4:	1009883a 	mov	r4,r2
    3ba8:	102b883a 	mov	r21,r2
    3bac:	000d0ac0 	call	d0ac <__floatsidf>
    3bb0:	800d883a 	mov	r6,r16
    3bb4:	880f883a 	mov	r7,r17
    3bb8:	1009883a 	mov	r4,r2
    3bbc:	180b883a 	mov	r5,r3
    3bc0:	000c0180 	call	c018 <__muldf3>
    3bc4:	100d883a 	mov	r6,r2
    3bc8:	180f883a 	mov	r7,r3
    3bcc:	9009883a 	mov	r4,r18
    3bd0:	980b883a 	mov	r5,r19
    3bd4:	000c7300 	call	c730 <__subdf3>
    3bd8:	aa000c04 	addi	r8,r21,48
    3bdc:	a2000005 	stb	r8,0(r20)
    3be0:	000d883a 	mov	r6,zero
    3be4:	01d00934 	movhi	r7,16420
    3be8:	1009883a 	mov	r4,r2
    3bec:	180b883a 	mov	r5,r3
    3bf0:	a5c00044 	addi	r23,r20,1
    3bf4:	b53fd91e 	bne	r22,r20,3b5c <_gp+0xfffea17c>
    3bf8:	100d883a 	mov	r6,r2
    3bfc:	180f883a 	mov	r7,r3
    3c00:	1009883a 	mov	r4,r2
    3c04:	180b883a 	mov	r5,r3
    3c08:	000ac2c0 	call	ac2c <__adddf3>
    3c0c:	100d883a 	mov	r6,r2
    3c10:	180f883a 	mov	r7,r3
    3c14:	8009883a 	mov	r4,r16
    3c18:	880b883a 	mov	r5,r17
    3c1c:	1027883a 	mov	r19,r2
    3c20:	1825883a 	mov	r18,r3
    3c24:	000bf240 	call	bf24 <__ledf2>
    3c28:	10000816 	blt	r2,zero,3c4c <_dtoa_r+0x948>
    3c2c:	980d883a 	mov	r6,r19
    3c30:	900f883a 	mov	r7,r18
    3c34:	8009883a 	mov	r4,r16
    3c38:	880b883a 	mov	r5,r17
    3c3c:	000bdc00 	call	bdc0 <__eqdf2>
    3c40:	103f5a1e 	bne	r2,zero,39ac <_gp+0xfffe9fcc>
    3c44:	ad40004c 	andi	r21,r21,1
    3c48:	a83f5826 	beq	r21,zero,39ac <_gp+0xfffe9fcc>
    3c4c:	bd3fffc3 	ldbu	r20,-1(r23)
    3c50:	b8bfffc4 	addi	r2,r23,-1
    3c54:	1007883a 	mov	r3,r2
    3c58:	01400e44 	movi	r5,57
    3c5c:	d9800717 	ldw	r6,28(sp)
    3c60:	00000506 	br	3c78 <_dtoa_r+0x974>
    3c64:	18ffffc4 	addi	r3,r3,-1
    3c68:	11824726 	beq	r2,r6,4588 <_dtoa_r+0x1284>
    3c6c:	1d000003 	ldbu	r20,0(r3)
    3c70:	102f883a 	mov	r23,r2
    3c74:	10bfffc4 	addi	r2,r2,-1
    3c78:	a1003fcc 	andi	r4,r20,255
    3c7c:	2100201c 	xori	r4,r4,128
    3c80:	213fe004 	addi	r4,r4,-128
    3c84:	217ff726 	beq	r4,r5,3c64 <_gp+0xfffea284>
    3c88:	a2000044 	addi	r8,r20,1
    3c8c:	12000005 	stb	r8,0(r2)
    3c90:	003f4606 	br	39ac <_gp+0xfffe9fcc>
    3c94:	d9000b17 	ldw	r4,44(sp)
    3c98:	2000c826 	beq	r4,zero,3fbc <_dtoa_r+0xcb8>
    3c9c:	d9800317 	ldw	r6,12(sp)
    3ca0:	00c00044 	movi	r3,1
    3ca4:	1980f90e 	bge	r3,r6,408c <_dtoa_r+0xd88>
    3ca8:	d8800617 	ldw	r2,24(sp)
    3cac:	d8c00a17 	ldw	r3,40(sp)
    3cb0:	157fffc4 	addi	r21,r2,-1
    3cb4:	1d41f316 	blt	r3,r21,4484 <_dtoa_r+0x1180>
    3cb8:	1d6bc83a 	sub	r21,r3,r21
    3cbc:	d9c00617 	ldw	r7,24(sp)
    3cc0:	3802aa16 	blt	r7,zero,476c <_dtoa_r+0x1468>
    3cc4:	dd000817 	ldw	r20,32(sp)
    3cc8:	d8800617 	ldw	r2,24(sp)
    3ccc:	d8c00817 	ldw	r3,32(sp)
    3cd0:	01400044 	movi	r5,1
    3cd4:	e009883a 	mov	r4,fp
    3cd8:	1887883a 	add	r3,r3,r2
    3cdc:	d8c00815 	stw	r3,32(sp)
    3ce0:	b0ad883a 	add	r22,r22,r2
    3ce4:	0006c640 	call	6c64 <__i2b>
    3ce8:	1023883a 	mov	r17,r2
    3cec:	a0000826 	beq	r20,zero,3d10 <_dtoa_r+0xa0c>
    3cf0:	0580070e 	bge	zero,r22,3d10 <_dtoa_r+0xa0c>
    3cf4:	a005883a 	mov	r2,r20
    3cf8:	b500b916 	blt	r22,r20,3fe0 <_dtoa_r+0xcdc>
    3cfc:	d9000817 	ldw	r4,32(sp)
    3d00:	a0a9c83a 	sub	r20,r20,r2
    3d04:	b0adc83a 	sub	r22,r22,r2
    3d08:	2089c83a 	sub	r4,r4,r2
    3d0c:	d9000815 	stw	r4,32(sp)
    3d10:	d9800a17 	ldw	r6,40(sp)
    3d14:	0181810e 	bge	zero,r6,431c <_dtoa_r+0x1018>
    3d18:	d9c00b17 	ldw	r7,44(sp)
    3d1c:	3800b326 	beq	r7,zero,3fec <_dtoa_r+0xce8>
    3d20:	a800b226 	beq	r21,zero,3fec <_dtoa_r+0xce8>
    3d24:	880b883a 	mov	r5,r17
    3d28:	a80d883a 	mov	r6,r21
    3d2c:	e009883a 	mov	r4,fp
    3d30:	0006e980 	call	6e98 <__pow5mult>
    3d34:	d9800917 	ldw	r6,36(sp)
    3d38:	100b883a 	mov	r5,r2
    3d3c:	e009883a 	mov	r4,fp
    3d40:	1023883a 	mov	r17,r2
    3d44:	0006ca00 	call	6ca0 <__multiply>
    3d48:	1021883a 	mov	r16,r2
    3d4c:	d8800a17 	ldw	r2,40(sp)
    3d50:	d9400917 	ldw	r5,36(sp)
    3d54:	e009883a 	mov	r4,fp
    3d58:	1545c83a 	sub	r2,r2,r21
    3d5c:	d8800a15 	stw	r2,40(sp)
    3d60:	00069000 	call	6900 <_Bfree>
    3d64:	d8c00a17 	ldw	r3,40(sp)
    3d68:	18009f1e 	bne	r3,zero,3fe8 <_dtoa_r+0xce4>
    3d6c:	05c00044 	movi	r23,1
    3d70:	e009883a 	mov	r4,fp
    3d74:	b80b883a 	mov	r5,r23
    3d78:	0006c640 	call	6c64 <__i2b>
    3d7c:	d9000d17 	ldw	r4,52(sp)
    3d80:	102b883a 	mov	r21,r2
    3d84:	2000ce26 	beq	r4,zero,40c0 <_dtoa_r+0xdbc>
    3d88:	200d883a 	mov	r6,r4
    3d8c:	100b883a 	mov	r5,r2
    3d90:	e009883a 	mov	r4,fp
    3d94:	0006e980 	call	6e98 <__pow5mult>
    3d98:	d9800317 	ldw	r6,12(sp)
    3d9c:	102b883a 	mov	r21,r2
    3da0:	b981810e 	bge	r23,r6,43a8 <_dtoa_r+0x10a4>
    3da4:	0027883a 	mov	r19,zero
    3da8:	a8800417 	ldw	r2,16(r21)
    3dac:	05c00804 	movi	r23,32
    3db0:	10800104 	addi	r2,r2,4
    3db4:	1085883a 	add	r2,r2,r2
    3db8:	1085883a 	add	r2,r2,r2
    3dbc:	a885883a 	add	r2,r21,r2
    3dc0:	11000017 	ldw	r4,0(r2)
    3dc4:	0006b4c0 	call	6b4c <__hi0bits>
    3dc8:	b885c83a 	sub	r2,r23,r2
    3dcc:	1585883a 	add	r2,r2,r22
    3dd0:	108007cc 	andi	r2,r2,31
    3dd4:	1000b326 	beq	r2,zero,40a4 <_dtoa_r+0xda0>
    3dd8:	00c00804 	movi	r3,32
    3ddc:	1887c83a 	sub	r3,r3,r2
    3de0:	01000104 	movi	r4,4
    3de4:	20c2cd0e 	bge	r4,r3,491c <_dtoa_r+0x1618>
    3de8:	00c00704 	movi	r3,28
    3dec:	1885c83a 	sub	r2,r3,r2
    3df0:	d8c00817 	ldw	r3,32(sp)
    3df4:	a0a9883a 	add	r20,r20,r2
    3df8:	b0ad883a 	add	r22,r22,r2
    3dfc:	1887883a 	add	r3,r3,r2
    3e00:	d8c00815 	stw	r3,32(sp)
    3e04:	d9800817 	ldw	r6,32(sp)
    3e08:	0180040e 	bge	zero,r6,3e1c <_dtoa_r+0xb18>
    3e0c:	800b883a 	mov	r5,r16
    3e10:	e009883a 	mov	r4,fp
    3e14:	0006fd80 	call	6fd8 <__lshift>
    3e18:	1021883a 	mov	r16,r2
    3e1c:	0580050e 	bge	zero,r22,3e34 <_dtoa_r+0xb30>
    3e20:	a80b883a 	mov	r5,r21
    3e24:	b00d883a 	mov	r6,r22
    3e28:	e009883a 	mov	r4,fp
    3e2c:	0006fd80 	call	6fd8 <__lshift>
    3e30:	102b883a 	mov	r21,r2
    3e34:	d9c00e17 	ldw	r7,56(sp)
    3e38:	3801211e 	bne	r7,zero,42c0 <_dtoa_r+0xfbc>
    3e3c:	d9800617 	ldw	r6,24(sp)
    3e40:	0181380e 	bge	zero,r6,4324 <_dtoa_r+0x1020>
    3e44:	d8c00b17 	ldw	r3,44(sp)
    3e48:	1800ab1e 	bne	r3,zero,40f8 <_dtoa_r+0xdf4>
    3e4c:	dc800717 	ldw	r18,28(sp)
    3e50:	dcc00617 	ldw	r19,24(sp)
    3e54:	9029883a 	mov	r20,r18
    3e58:	00000206 	br	3e64 <_dtoa_r+0xb60>
    3e5c:	00069280 	call	6928 <__multadd>
    3e60:	1021883a 	mov	r16,r2
    3e64:	a80b883a 	mov	r5,r21
    3e68:	8009883a 	mov	r4,r16
    3e6c:	00031040 	call	3104 <quorem>
    3e70:	10800c04 	addi	r2,r2,48
    3e74:	90800005 	stb	r2,0(r18)
    3e78:	94800044 	addi	r18,r18,1
    3e7c:	9507c83a 	sub	r3,r18,r20
    3e80:	000f883a 	mov	r7,zero
    3e84:	01800284 	movi	r6,10
    3e88:	800b883a 	mov	r5,r16
    3e8c:	e009883a 	mov	r4,fp
    3e90:	1cfff216 	blt	r3,r19,3e5c <_gp+0xfffea47c>
    3e94:	1011883a 	mov	r8,r2
    3e98:	d8800617 	ldw	r2,24(sp)
    3e9c:	0082370e 	bge	zero,r2,477c <_dtoa_r+0x1478>
    3ea0:	d9000717 	ldw	r4,28(sp)
    3ea4:	0025883a 	mov	r18,zero
    3ea8:	20af883a 	add	r23,r4,r2
    3eac:	01800044 	movi	r6,1
    3eb0:	800b883a 	mov	r5,r16
    3eb4:	e009883a 	mov	r4,fp
    3eb8:	da001715 	stw	r8,92(sp)
    3ebc:	0006fd80 	call	6fd8 <__lshift>
    3ec0:	a80b883a 	mov	r5,r21
    3ec4:	1009883a 	mov	r4,r2
    3ec8:	d8800915 	stw	r2,36(sp)
    3ecc:	00071200 	call	7120 <__mcmp>
    3ed0:	da001717 	ldw	r8,92(sp)
    3ed4:	0081800e 	bge	zero,r2,44d8 <_dtoa_r+0x11d4>
    3ed8:	b93fffc3 	ldbu	r4,-1(r23)
    3edc:	b8bfffc4 	addi	r2,r23,-1
    3ee0:	1007883a 	mov	r3,r2
    3ee4:	01800e44 	movi	r6,57
    3ee8:	d9c00717 	ldw	r7,28(sp)
    3eec:	00000506 	br	3f04 <_dtoa_r+0xc00>
    3ef0:	18ffffc4 	addi	r3,r3,-1
    3ef4:	11c12326 	beq	r2,r7,4384 <_dtoa_r+0x1080>
    3ef8:	19000003 	ldbu	r4,0(r3)
    3efc:	102f883a 	mov	r23,r2
    3f00:	10bfffc4 	addi	r2,r2,-1
    3f04:	21403fcc 	andi	r5,r4,255
    3f08:	2940201c 	xori	r5,r5,128
    3f0c:	297fe004 	addi	r5,r5,-128
    3f10:	29bff726 	beq	r5,r6,3ef0 <_gp+0xfffea510>
    3f14:	21000044 	addi	r4,r4,1
    3f18:	11000005 	stb	r4,0(r2)
    3f1c:	a80b883a 	mov	r5,r21
    3f20:	e009883a 	mov	r4,fp
    3f24:	00069000 	call	6900 <_Bfree>
    3f28:	883ea026 	beq	r17,zero,39ac <_gp+0xfffe9fcc>
    3f2c:	90000426 	beq	r18,zero,3f40 <_dtoa_r+0xc3c>
    3f30:	94400326 	beq	r18,r17,3f40 <_dtoa_r+0xc3c>
    3f34:	900b883a 	mov	r5,r18
    3f38:	e009883a 	mov	r4,fp
    3f3c:	00069000 	call	6900 <_Bfree>
    3f40:	880b883a 	mov	r5,r17
    3f44:	e009883a 	mov	r4,fp
    3f48:	00069000 	call	6900 <_Bfree>
    3f4c:	003e9706 	br	39ac <_gp+0xfffe9fcc>
    3f50:	01800044 	movi	r6,1
    3f54:	d9800e15 	stw	r6,56(sp)
    3f58:	003d9606 	br	35b4 <_gp+0xfffe9bd4>
    3f5c:	d8800817 	ldw	r2,32(sp)
    3f60:	d8c00517 	ldw	r3,20(sp)
    3f64:	d8000d15 	stw	zero,52(sp)
    3f68:	10c5c83a 	sub	r2,r2,r3
    3f6c:	00c9c83a 	sub	r4,zero,r3
    3f70:	d8800815 	stw	r2,32(sp)
    3f74:	d9000a15 	stw	r4,40(sp)
    3f78:	003d9706 	br	35d8 <_gp+0xfffe9bf8>
    3f7c:	05adc83a 	sub	r22,zero,r22
    3f80:	dd800815 	stw	r22,32(sp)
    3f84:	002d883a 	mov	r22,zero
    3f88:	003d8e06 	br	35c4 <_gp+0xfffe9be4>
    3f8c:	d9000517 	ldw	r4,20(sp)
    3f90:	000d0ac0 	call	d0ac <__floatsidf>
    3f94:	100d883a 	mov	r6,r2
    3f98:	180f883a 	mov	r7,r3
    3f9c:	a009883a 	mov	r4,r20
    3fa0:	880b883a 	mov	r5,r17
    3fa4:	000bdc00 	call	bdc0 <__eqdf2>
    3fa8:	103d7126 	beq	r2,zero,3570 <_gp+0xfffe9b90>
    3fac:	d9c00517 	ldw	r7,20(sp)
    3fb0:	39ffffc4 	addi	r7,r7,-1
    3fb4:	d9c00515 	stw	r7,20(sp)
    3fb8:	003d6d06 	br	3570 <_gp+0xfffe9b90>
    3fbc:	dd400a17 	ldw	r21,40(sp)
    3fc0:	dd000817 	ldw	r20,32(sp)
    3fc4:	0023883a 	mov	r17,zero
    3fc8:	003f4806 	br	3cec <_gp+0xfffea30c>
    3fcc:	10e3c83a 	sub	r17,r2,r3
    3fd0:	9448983a 	sll	r4,r18,r17
    3fd4:	003d3206 	br	34a0 <_gp+0xfffe9ac0>
    3fd8:	d8000e15 	stw	zero,56(sp)
    3fdc:	003d7506 	br	35b4 <_gp+0xfffe9bd4>
    3fe0:	b005883a 	mov	r2,r22
    3fe4:	003f4506 	br	3cfc <_gp+0xfffea31c>
    3fe8:	dc000915 	stw	r16,36(sp)
    3fec:	d9800a17 	ldw	r6,40(sp)
    3ff0:	d9400917 	ldw	r5,36(sp)
    3ff4:	e009883a 	mov	r4,fp
    3ff8:	0006e980 	call	6e98 <__pow5mult>
    3ffc:	1021883a 	mov	r16,r2
    4000:	003f5a06 	br	3d6c <_gp+0xfffea38c>
    4004:	01c00044 	movi	r7,1
    4008:	d9c00b15 	stw	r7,44(sp)
    400c:	d8802217 	ldw	r2,136(sp)
    4010:	0081280e 	bge	zero,r2,44b4 <_dtoa_r+0x11b0>
    4014:	100d883a 	mov	r6,r2
    4018:	1021883a 	mov	r16,r2
    401c:	d8800c15 	stw	r2,48(sp)
    4020:	d8800615 	stw	r2,24(sp)
    4024:	003d8806 	br	3648 <_gp+0xfffe9c68>
    4028:	d8800617 	ldw	r2,24(sp)
    402c:	00be9b16 	blt	zero,r2,3a9c <_gp+0xfffea0bc>
    4030:	10010f1e 	bne	r2,zero,4470 <_dtoa_r+0x116c>
    4034:	880b883a 	mov	r5,r17
    4038:	000d883a 	mov	r6,zero
    403c:	01d00534 	movhi	r7,16404
    4040:	8009883a 	mov	r4,r16
    4044:	000c0180 	call	c018 <__muldf3>
    4048:	900d883a 	mov	r6,r18
    404c:	980f883a 	mov	r7,r19
    4050:	1009883a 	mov	r4,r2
    4054:	180b883a 	mov	r5,r3
    4058:	000be480 	call	be48 <__gedf2>
    405c:	002b883a 	mov	r21,zero
    4060:	0023883a 	mov	r17,zero
    4064:	1000bf16 	blt	r2,zero,4364 <_dtoa_r+0x1060>
    4068:	d9802217 	ldw	r6,136(sp)
    406c:	ddc00717 	ldw	r23,28(sp)
    4070:	018c303a 	nor	r6,zero,r6
    4074:	d9800515 	stw	r6,20(sp)
    4078:	a80b883a 	mov	r5,r21
    407c:	e009883a 	mov	r4,fp
    4080:	00069000 	call	6900 <_Bfree>
    4084:	883e4926 	beq	r17,zero,39ac <_gp+0xfffe9fcc>
    4088:	003fad06 	br	3f40 <_gp+0xfffea560>
    408c:	d9c01117 	ldw	r7,68(sp)
    4090:	3801bc26 	beq	r7,zero,4784 <_dtoa_r+0x1480>
    4094:	10810cc4 	addi	r2,r2,1075
    4098:	dd400a17 	ldw	r21,40(sp)
    409c:	dd000817 	ldw	r20,32(sp)
    40a0:	003f0a06 	br	3ccc <_gp+0xfffea2ec>
    40a4:	00800704 	movi	r2,28
    40a8:	d9000817 	ldw	r4,32(sp)
    40ac:	a0a9883a 	add	r20,r20,r2
    40b0:	b0ad883a 	add	r22,r22,r2
    40b4:	2089883a 	add	r4,r4,r2
    40b8:	d9000815 	stw	r4,32(sp)
    40bc:	003f5106 	br	3e04 <_gp+0xfffea424>
    40c0:	d8c00317 	ldw	r3,12(sp)
    40c4:	b8c1fc0e 	bge	r23,r3,48b8 <_dtoa_r+0x15b4>
    40c8:	0027883a 	mov	r19,zero
    40cc:	b805883a 	mov	r2,r23
    40d0:	003f3e06 	br	3dcc <_gp+0xfffea3ec>
    40d4:	880b883a 	mov	r5,r17
    40d8:	e009883a 	mov	r4,fp
    40dc:	000f883a 	mov	r7,zero
    40e0:	01800284 	movi	r6,10
    40e4:	00069280 	call	6928 <__multadd>
    40e8:	d9000c17 	ldw	r4,48(sp)
    40ec:	1023883a 	mov	r17,r2
    40f0:	0102040e 	bge	zero,r4,4904 <_dtoa_r+0x1600>
    40f4:	d9000615 	stw	r4,24(sp)
    40f8:	0500050e 	bge	zero,r20,4110 <_dtoa_r+0xe0c>
    40fc:	880b883a 	mov	r5,r17
    4100:	a00d883a 	mov	r6,r20
    4104:	e009883a 	mov	r4,fp
    4108:	0006fd80 	call	6fd8 <__lshift>
    410c:	1023883a 	mov	r17,r2
    4110:	9801241e 	bne	r19,zero,45a4 <_dtoa_r+0x12a0>
    4114:	8829883a 	mov	r20,r17
    4118:	d9000617 	ldw	r4,24(sp)
    411c:	dcc00717 	ldw	r19,28(sp)
    4120:	9480004c 	andi	r18,r18,1
    4124:	20bfffc4 	addi	r2,r4,-1
    4128:	9885883a 	add	r2,r19,r2
    412c:	d8800415 	stw	r2,16(sp)
    4130:	dc800615 	stw	r18,24(sp)
    4134:	a80b883a 	mov	r5,r21
    4138:	8009883a 	mov	r4,r16
    413c:	00031040 	call	3104 <quorem>
    4140:	880b883a 	mov	r5,r17
    4144:	8009883a 	mov	r4,r16
    4148:	102f883a 	mov	r23,r2
    414c:	00071200 	call	7120 <__mcmp>
    4150:	a80b883a 	mov	r5,r21
    4154:	a00d883a 	mov	r6,r20
    4158:	e009883a 	mov	r4,fp
    415c:	102d883a 	mov	r22,r2
    4160:	00071800 	call	7180 <__mdiff>
    4164:	1007883a 	mov	r3,r2
    4168:	10800317 	ldw	r2,12(r2)
    416c:	bc800c04 	addi	r18,r23,48
    4170:	180b883a 	mov	r5,r3
    4174:	10004e1e 	bne	r2,zero,42b0 <_dtoa_r+0xfac>
    4178:	8009883a 	mov	r4,r16
    417c:	d8c01615 	stw	r3,88(sp)
    4180:	00071200 	call	7120 <__mcmp>
    4184:	d8c01617 	ldw	r3,88(sp)
    4188:	e009883a 	mov	r4,fp
    418c:	d8801615 	stw	r2,88(sp)
    4190:	180b883a 	mov	r5,r3
    4194:	00069000 	call	6900 <_Bfree>
    4198:	d8801617 	ldw	r2,88(sp)
    419c:	1000041e 	bne	r2,zero,41b0 <_dtoa_r+0xeac>
    41a0:	d9800317 	ldw	r6,12(sp)
    41a4:	3000021e 	bne	r6,zero,41b0 <_dtoa_r+0xeac>
    41a8:	d8c00617 	ldw	r3,24(sp)
    41ac:	18003726 	beq	r3,zero,428c <_dtoa_r+0xf88>
    41b0:	b0002016 	blt	r22,zero,4234 <_dtoa_r+0xf30>
    41b4:	b000041e 	bne	r22,zero,41c8 <_dtoa_r+0xec4>
    41b8:	d9000317 	ldw	r4,12(sp)
    41bc:	2000021e 	bne	r4,zero,41c8 <_dtoa_r+0xec4>
    41c0:	d8c00617 	ldw	r3,24(sp)
    41c4:	18001b26 	beq	r3,zero,4234 <_dtoa_r+0xf30>
    41c8:	00810716 	blt	zero,r2,45e8 <_dtoa_r+0x12e4>
    41cc:	d8c00417 	ldw	r3,16(sp)
    41d0:	9d800044 	addi	r22,r19,1
    41d4:	9c800005 	stb	r18,0(r19)
    41d8:	b02f883a 	mov	r23,r22
    41dc:	98c10626 	beq	r19,r3,45f8 <_dtoa_r+0x12f4>
    41e0:	800b883a 	mov	r5,r16
    41e4:	000f883a 	mov	r7,zero
    41e8:	01800284 	movi	r6,10
    41ec:	e009883a 	mov	r4,fp
    41f0:	00069280 	call	6928 <__multadd>
    41f4:	1021883a 	mov	r16,r2
    41f8:	000f883a 	mov	r7,zero
    41fc:	01800284 	movi	r6,10
    4200:	880b883a 	mov	r5,r17
    4204:	e009883a 	mov	r4,fp
    4208:	8d002526 	beq	r17,r20,42a0 <_dtoa_r+0xf9c>
    420c:	00069280 	call	6928 <__multadd>
    4210:	a00b883a 	mov	r5,r20
    4214:	000f883a 	mov	r7,zero
    4218:	01800284 	movi	r6,10
    421c:	e009883a 	mov	r4,fp
    4220:	1023883a 	mov	r17,r2
    4224:	00069280 	call	6928 <__multadd>
    4228:	1029883a 	mov	r20,r2
    422c:	b027883a 	mov	r19,r22
    4230:	003fc006 	br	4134 <_gp+0xfffea754>
    4234:	9011883a 	mov	r8,r18
    4238:	00800e0e 	bge	zero,r2,4274 <_dtoa_r+0xf70>
    423c:	800b883a 	mov	r5,r16
    4240:	01800044 	movi	r6,1
    4244:	e009883a 	mov	r4,fp
    4248:	da001715 	stw	r8,92(sp)
    424c:	0006fd80 	call	6fd8 <__lshift>
    4250:	a80b883a 	mov	r5,r21
    4254:	1009883a 	mov	r4,r2
    4258:	1021883a 	mov	r16,r2
    425c:	00071200 	call	7120 <__mcmp>
    4260:	da001717 	ldw	r8,92(sp)
    4264:	0081960e 	bge	zero,r2,48c0 <_dtoa_r+0x15bc>
    4268:	00800e44 	movi	r2,57
    426c:	40817026 	beq	r8,r2,4830 <_dtoa_r+0x152c>
    4270:	ba000c44 	addi	r8,r23,49
    4274:	8825883a 	mov	r18,r17
    4278:	9dc00044 	addi	r23,r19,1
    427c:	9a000005 	stb	r8,0(r19)
    4280:	a023883a 	mov	r17,r20
    4284:	dc000915 	stw	r16,36(sp)
    4288:	003f2406 	br	3f1c <_gp+0xfffea53c>
    428c:	00800e44 	movi	r2,57
    4290:	9011883a 	mov	r8,r18
    4294:	90816626 	beq	r18,r2,4830 <_dtoa_r+0x152c>
    4298:	05bff516 	blt	zero,r22,4270 <_gp+0xfffea890>
    429c:	003ff506 	br	4274 <_gp+0xfffea894>
    42a0:	00069280 	call	6928 <__multadd>
    42a4:	1023883a 	mov	r17,r2
    42a8:	1029883a 	mov	r20,r2
    42ac:	003fdf06 	br	422c <_gp+0xfffea84c>
    42b0:	e009883a 	mov	r4,fp
    42b4:	00069000 	call	6900 <_Bfree>
    42b8:	00800044 	movi	r2,1
    42bc:	003fbc06 	br	41b0 <_gp+0xfffea7d0>
    42c0:	a80b883a 	mov	r5,r21
    42c4:	8009883a 	mov	r4,r16
    42c8:	00071200 	call	7120 <__mcmp>
    42cc:	103edb0e 	bge	r2,zero,3e3c <_gp+0xfffea45c>
    42d0:	800b883a 	mov	r5,r16
    42d4:	000f883a 	mov	r7,zero
    42d8:	01800284 	movi	r6,10
    42dc:	e009883a 	mov	r4,fp
    42e0:	00069280 	call	6928 <__multadd>
    42e4:	1021883a 	mov	r16,r2
    42e8:	d8800517 	ldw	r2,20(sp)
    42ec:	d8c00b17 	ldw	r3,44(sp)
    42f0:	10bfffc4 	addi	r2,r2,-1
    42f4:	d8800515 	stw	r2,20(sp)
    42f8:	183f761e 	bne	r3,zero,40d4 <_gp+0xfffea6f4>
    42fc:	d9000c17 	ldw	r4,48(sp)
    4300:	0101730e 	bge	zero,r4,48d0 <_dtoa_r+0x15cc>
    4304:	d9000615 	stw	r4,24(sp)
    4308:	003ed006 	br	3e4c <_gp+0xfffea46c>
    430c:	00800084 	movi	r2,2
    4310:	3081861e 	bne	r6,r2,492c <_dtoa_r+0x1628>
    4314:	d8000b15 	stw	zero,44(sp)
    4318:	003f3c06 	br	400c <_gp+0xfffea62c>
    431c:	dc000917 	ldw	r16,36(sp)
    4320:	003e9206 	br	3d6c <_gp+0xfffea38c>
    4324:	d9c00317 	ldw	r7,12(sp)
    4328:	00800084 	movi	r2,2
    432c:	11fec50e 	bge	r2,r7,3e44 <_gp+0xfffea464>
    4330:	d9000617 	ldw	r4,24(sp)
    4334:	20013c1e 	bne	r4,zero,4828 <_dtoa_r+0x1524>
    4338:	a80b883a 	mov	r5,r21
    433c:	000f883a 	mov	r7,zero
    4340:	01800144 	movi	r6,5
    4344:	e009883a 	mov	r4,fp
    4348:	00069280 	call	6928 <__multadd>
    434c:	100b883a 	mov	r5,r2
    4350:	8009883a 	mov	r4,r16
    4354:	102b883a 	mov	r21,r2
    4358:	00071200 	call	7120 <__mcmp>
    435c:	dc000915 	stw	r16,36(sp)
    4360:	00bf410e 	bge	zero,r2,4068 <_gp+0xfffea688>
    4364:	d9c00717 	ldw	r7,28(sp)
    4368:	00800c44 	movi	r2,49
    436c:	38800005 	stb	r2,0(r7)
    4370:	d8800517 	ldw	r2,20(sp)
    4374:	3dc00044 	addi	r23,r7,1
    4378:	10800044 	addi	r2,r2,1
    437c:	d8800515 	stw	r2,20(sp)
    4380:	003f3d06 	br	4078 <_gp+0xfffea698>
    4384:	d9800517 	ldw	r6,20(sp)
    4388:	d9c00717 	ldw	r7,28(sp)
    438c:	00800c44 	movi	r2,49
    4390:	31800044 	addi	r6,r6,1
    4394:	d9800515 	stw	r6,20(sp)
    4398:	38800005 	stb	r2,0(r7)
    439c:	003edf06 	br	3f1c <_gp+0xfffea53c>
    43a0:	d8000b15 	stw	zero,44(sp)
    43a4:	003c9f06 	br	3624 <_gp+0xfffe9c44>
    43a8:	903e7e1e 	bne	r18,zero,3da4 <_gp+0xfffea3c4>
    43ac:	00800434 	movhi	r2,16
    43b0:	10bfffc4 	addi	r2,r2,-1
    43b4:	9884703a 	and	r2,r19,r2
    43b8:	1000ea1e 	bne	r2,zero,4764 <_dtoa_r+0x1460>
    43bc:	9cdffc2c 	andhi	r19,r19,32752
    43c0:	9800e826 	beq	r19,zero,4764 <_dtoa_r+0x1460>
    43c4:	d9c00817 	ldw	r7,32(sp)
    43c8:	b5800044 	addi	r22,r22,1
    43cc:	04c00044 	movi	r19,1
    43d0:	39c00044 	addi	r7,r7,1
    43d4:	d9c00815 	stw	r7,32(sp)
    43d8:	d8800d17 	ldw	r2,52(sp)
    43dc:	103e721e 	bne	r2,zero,3da8 <_gp+0xfffea3c8>
    43e0:	00800044 	movi	r2,1
    43e4:	003e7906 	br	3dcc <_gp+0xfffea3ec>
    43e8:	8009883a 	mov	r4,r16
    43ec:	000d0ac0 	call	d0ac <__floatsidf>
    43f0:	d9800f17 	ldw	r6,60(sp)
    43f4:	d9c01017 	ldw	r7,64(sp)
    43f8:	1009883a 	mov	r4,r2
    43fc:	180b883a 	mov	r5,r3
    4400:	000c0180 	call	c018 <__muldf3>
    4404:	000d883a 	mov	r6,zero
    4408:	01d00734 	movhi	r7,16412
    440c:	1009883a 	mov	r4,r2
    4410:	180b883a 	mov	r5,r3
    4414:	000ac2c0 	call	ac2c <__adddf3>
    4418:	047f3034 	movhi	r17,64704
    441c:	1021883a 	mov	r16,r2
    4420:	1c63883a 	add	r17,r3,r17
    4424:	d9000f17 	ldw	r4,60(sp)
    4428:	d9401017 	ldw	r5,64(sp)
    442c:	000d883a 	mov	r6,zero
    4430:	01d00534 	movhi	r7,16404
    4434:	000c7300 	call	c730 <__subdf3>
    4438:	800d883a 	mov	r6,r16
    443c:	880f883a 	mov	r7,r17
    4440:	1009883a 	mov	r4,r2
    4444:	180b883a 	mov	r5,r3
    4448:	102b883a 	mov	r21,r2
    444c:	1829883a 	mov	r20,r3
    4450:	000be480 	call	be48 <__gedf2>
    4454:	00806c16 	blt	zero,r2,4608 <_dtoa_r+0x1304>
    4458:	89e0003c 	xorhi	r7,r17,32768
    445c:	800d883a 	mov	r6,r16
    4460:	a809883a 	mov	r4,r21
    4464:	a00b883a 	mov	r5,r20
    4468:	000bf240 	call	bf24 <__ledf2>
    446c:	103d7e0e 	bge	r2,zero,3a68 <_gp+0xfffea088>
    4470:	002b883a 	mov	r21,zero
    4474:	0023883a 	mov	r17,zero
    4478:	003efb06 	br	4068 <_gp+0xfffea688>
    447c:	d8800717 	ldw	r2,28(sp)
    4480:	003bd006 	br	33c4 <_gp+0xfffe99e4>
    4484:	d9000a17 	ldw	r4,40(sp)
    4488:	d9800d17 	ldw	r6,52(sp)
    448c:	dd400a15 	stw	r21,40(sp)
    4490:	a905c83a 	sub	r2,r21,r4
    4494:	308d883a 	add	r6,r6,r2
    4498:	d9800d15 	stw	r6,52(sp)
    449c:	002b883a 	mov	r21,zero
    44a0:	003e0606 	br	3cbc <_gp+0xfffea2dc>
    44a4:	9023883a 	mov	r17,r18
    44a8:	9829883a 	mov	r20,r19
    44ac:	04000084 	movi	r16,2
    44b0:	003c9206 	br	36fc <_gp+0xfffe9d1c>
    44b4:	04000044 	movi	r16,1
    44b8:	dc000c15 	stw	r16,48(sp)
    44bc:	dc000615 	stw	r16,24(sp)
    44c0:	dc002215 	stw	r16,136(sp)
    44c4:	e0001115 	stw	zero,68(fp)
    44c8:	000b883a 	mov	r5,zero
    44cc:	003c6906 	br	3674 <_gp+0xfffe9c94>
    44d0:	3021883a 	mov	r16,r6
    44d4:	003ffb06 	br	44c4 <_gp+0xfffeaae4>
    44d8:	1000021e 	bne	r2,zero,44e4 <_dtoa_r+0x11e0>
    44dc:	4200004c 	andi	r8,r8,1
    44e0:	403e7d1e 	bne	r8,zero,3ed8 <_gp+0xfffea4f8>
    44e4:	01000c04 	movi	r4,48
    44e8:	00000106 	br	44f0 <_dtoa_r+0x11ec>
    44ec:	102f883a 	mov	r23,r2
    44f0:	b8bfffc4 	addi	r2,r23,-1
    44f4:	10c00007 	ldb	r3,0(r2)
    44f8:	193ffc26 	beq	r3,r4,44ec <_gp+0xfffeab0c>
    44fc:	003e8706 	br	3f1c <_gp+0xfffea53c>
    4500:	d8800517 	ldw	r2,20(sp)
    4504:	00a3c83a 	sub	r17,zero,r2
    4508:	8800a426 	beq	r17,zero,479c <_dtoa_r+0x1498>
    450c:	888003cc 	andi	r2,r17,15
    4510:	100490fa 	slli	r2,r2,3
    4514:	00c00074 	movhi	r3,1
    4518:	18ff4804 	addi	r3,r3,-736
    451c:	1885883a 	add	r2,r3,r2
    4520:	11800017 	ldw	r6,0(r2)
    4524:	11c00117 	ldw	r7,4(r2)
    4528:	9009883a 	mov	r4,r18
    452c:	980b883a 	mov	r5,r19
    4530:	8823d13a 	srai	r17,r17,4
    4534:	000c0180 	call	c018 <__muldf3>
    4538:	d8800f15 	stw	r2,60(sp)
    453c:	d8c01015 	stw	r3,64(sp)
    4540:	8800e826 	beq	r17,zero,48e4 <_dtoa_r+0x15e0>
    4544:	05000074 	movhi	r20,1
    4548:	a53f3e04 	addi	r20,r20,-776
    454c:	04000084 	movi	r16,2
    4550:	8980004c 	andi	r6,r17,1
    4554:	1009883a 	mov	r4,r2
    4558:	8823d07a 	srai	r17,r17,1
    455c:	180b883a 	mov	r5,r3
    4560:	30000426 	beq	r6,zero,4574 <_dtoa_r+0x1270>
    4564:	a1800017 	ldw	r6,0(r20)
    4568:	a1c00117 	ldw	r7,4(r20)
    456c:	84000044 	addi	r16,r16,1
    4570:	000c0180 	call	c018 <__muldf3>
    4574:	a5000204 	addi	r20,r20,8
    4578:	883ff51e 	bne	r17,zero,4550 <_gp+0xfffeab70>
    457c:	d8800f15 	stw	r2,60(sp)
    4580:	d8c01015 	stw	r3,64(sp)
    4584:	003c7606 	br	3760 <_gp+0xfffe9d80>
    4588:	00c00c04 	movi	r3,48
    458c:	10c00005 	stb	r3,0(r2)
    4590:	d8c00517 	ldw	r3,20(sp)
    4594:	bd3fffc3 	ldbu	r20,-1(r23)
    4598:	18c00044 	addi	r3,r3,1
    459c:	d8c00515 	stw	r3,20(sp)
    45a0:	003db906 	br	3c88 <_gp+0xfffea2a8>
    45a4:	89400117 	ldw	r5,4(r17)
    45a8:	e009883a 	mov	r4,fp
    45ac:	00068580 	call	6858 <_Balloc>
    45b0:	89800417 	ldw	r6,16(r17)
    45b4:	89400304 	addi	r5,r17,12
    45b8:	11000304 	addi	r4,r2,12
    45bc:	31800084 	addi	r6,r6,2
    45c0:	318d883a 	add	r6,r6,r6
    45c4:	318d883a 	add	r6,r6,r6
    45c8:	1027883a 	mov	r19,r2
    45cc:	00009a00 	call	9a0 <memcpy>
    45d0:	01800044 	movi	r6,1
    45d4:	980b883a 	mov	r5,r19
    45d8:	e009883a 	mov	r4,fp
    45dc:	0006fd80 	call	6fd8 <__lshift>
    45e0:	1029883a 	mov	r20,r2
    45e4:	003ecc06 	br	4118 <_gp+0xfffea738>
    45e8:	00800e44 	movi	r2,57
    45ec:	90809026 	beq	r18,r2,4830 <_dtoa_r+0x152c>
    45f0:	92000044 	addi	r8,r18,1
    45f4:	003f1f06 	br	4274 <_gp+0xfffea894>
    45f8:	9011883a 	mov	r8,r18
    45fc:	8825883a 	mov	r18,r17
    4600:	a023883a 	mov	r17,r20
    4604:	003e2906 	br	3eac <_gp+0xfffea4cc>
    4608:	002b883a 	mov	r21,zero
    460c:	0023883a 	mov	r17,zero
    4610:	003f5406 	br	4364 <_gp+0xfffea984>
    4614:	61bfffc4 	addi	r6,r12,-1
    4618:	300490fa 	slli	r2,r6,3
    461c:	00c00074 	movhi	r3,1
    4620:	18ff4804 	addi	r3,r3,-736
    4624:	1885883a 	add	r2,r3,r2
    4628:	11000017 	ldw	r4,0(r2)
    462c:	11400117 	ldw	r5,4(r2)
    4630:	d8800717 	ldw	r2,28(sp)
    4634:	880f883a 	mov	r7,r17
    4638:	d9801215 	stw	r6,72(sp)
    463c:	800d883a 	mov	r6,r16
    4640:	db001615 	stw	r12,88(sp)
    4644:	15c00044 	addi	r23,r2,1
    4648:	000c0180 	call	c018 <__muldf3>
    464c:	d9401017 	ldw	r5,64(sp)
    4650:	d9000f17 	ldw	r4,60(sp)
    4654:	d8c01515 	stw	r3,84(sp)
    4658:	d8801415 	stw	r2,80(sp)
    465c:	000d02c0 	call	d02c <__fixdfsi>
    4660:	1009883a 	mov	r4,r2
    4664:	1021883a 	mov	r16,r2
    4668:	000d0ac0 	call	d0ac <__floatsidf>
    466c:	d9000f17 	ldw	r4,60(sp)
    4670:	d9401017 	ldw	r5,64(sp)
    4674:	100d883a 	mov	r6,r2
    4678:	180f883a 	mov	r7,r3
    467c:	000c7300 	call	c730 <__subdf3>
    4680:	1829883a 	mov	r20,r3
    4684:	d8c00717 	ldw	r3,28(sp)
    4688:	84000c04 	addi	r16,r16,48
    468c:	1023883a 	mov	r17,r2
    4690:	1c000005 	stb	r16,0(r3)
    4694:	db001617 	ldw	r12,88(sp)
    4698:	00800044 	movi	r2,1
    469c:	60802226 	beq	r12,r2,4728 <_dtoa_r+0x1424>
    46a0:	d9c00717 	ldw	r7,28(sp)
    46a4:	8805883a 	mov	r2,r17
    46a8:	b82b883a 	mov	r21,r23
    46ac:	3b19883a 	add	r12,r7,r12
    46b0:	6023883a 	mov	r17,r12
    46b4:	a007883a 	mov	r3,r20
    46b8:	dc800f15 	stw	r18,60(sp)
    46bc:	000d883a 	mov	r6,zero
    46c0:	01d00934 	movhi	r7,16420
    46c4:	1009883a 	mov	r4,r2
    46c8:	180b883a 	mov	r5,r3
    46cc:	000c0180 	call	c018 <__muldf3>
    46d0:	180b883a 	mov	r5,r3
    46d4:	1009883a 	mov	r4,r2
    46d8:	1829883a 	mov	r20,r3
    46dc:	1025883a 	mov	r18,r2
    46e0:	000d02c0 	call	d02c <__fixdfsi>
    46e4:	1009883a 	mov	r4,r2
    46e8:	1021883a 	mov	r16,r2
    46ec:	000d0ac0 	call	d0ac <__floatsidf>
    46f0:	100d883a 	mov	r6,r2
    46f4:	180f883a 	mov	r7,r3
    46f8:	9009883a 	mov	r4,r18
    46fc:	a00b883a 	mov	r5,r20
    4700:	84000c04 	addi	r16,r16,48
    4704:	000c7300 	call	c730 <__subdf3>
    4708:	ad400044 	addi	r21,r21,1
    470c:	ac3fffc5 	stb	r16,-1(r21)
    4710:	ac7fea1e 	bne	r21,r17,46bc <_gp+0xfffeacdc>
    4714:	1023883a 	mov	r17,r2
    4718:	d8801217 	ldw	r2,72(sp)
    471c:	dc800f17 	ldw	r18,60(sp)
    4720:	1829883a 	mov	r20,r3
    4724:	b8af883a 	add	r23,r23,r2
    4728:	d9001417 	ldw	r4,80(sp)
    472c:	d9401517 	ldw	r5,84(sp)
    4730:	000d883a 	mov	r6,zero
    4734:	01cff834 	movhi	r7,16352
    4738:	000ac2c0 	call	ac2c <__adddf3>
    473c:	880d883a 	mov	r6,r17
    4740:	a00f883a 	mov	r7,r20
    4744:	1009883a 	mov	r4,r2
    4748:	180b883a 	mov	r5,r3
    474c:	000bf240 	call	bf24 <__ledf2>
    4750:	10003e0e 	bge	r2,zero,484c <_dtoa_r+0x1548>
    4754:	d9001317 	ldw	r4,76(sp)
    4758:	bd3fffc3 	ldbu	r20,-1(r23)
    475c:	d9000515 	stw	r4,20(sp)
    4760:	003d3b06 	br	3c50 <_gp+0xfffea270>
    4764:	0027883a 	mov	r19,zero
    4768:	003f1b06 	br	43d8 <_gp+0xfffea9f8>
    476c:	d8800817 	ldw	r2,32(sp)
    4770:	11e9c83a 	sub	r20,r2,r7
    4774:	0005883a 	mov	r2,zero
    4778:	003d5406 	br	3ccc <_gp+0xfffea2ec>
    477c:	00800044 	movi	r2,1
    4780:	003dc706 	br	3ea0 <_gp+0xfffea4c0>
    4784:	d8c00217 	ldw	r3,8(sp)
    4788:	00800d84 	movi	r2,54
    478c:	dd400a17 	ldw	r21,40(sp)
    4790:	10c5c83a 	sub	r2,r2,r3
    4794:	dd000817 	ldw	r20,32(sp)
    4798:	003d4c06 	br	3ccc <_gp+0xfffea2ec>
    479c:	dc800f15 	stw	r18,60(sp)
    47a0:	dcc01015 	stw	r19,64(sp)
    47a4:	04000084 	movi	r16,2
    47a8:	003bed06 	br	3760 <_gp+0xfffe9d80>
    47ac:	d9000617 	ldw	r4,24(sp)
    47b0:	203f0d26 	beq	r4,zero,43e8 <_gp+0xfffeaa08>
    47b4:	d9800c17 	ldw	r6,48(sp)
    47b8:	01bcab0e 	bge	zero,r6,3a68 <_gp+0xfffea088>
    47bc:	d9401017 	ldw	r5,64(sp)
    47c0:	d9000f17 	ldw	r4,60(sp)
    47c4:	000d883a 	mov	r6,zero
    47c8:	01d00934 	movhi	r7,16420
    47cc:	000c0180 	call	c018 <__muldf3>
    47d0:	81000044 	addi	r4,r16,1
    47d4:	d8800f15 	stw	r2,60(sp)
    47d8:	d8c01015 	stw	r3,64(sp)
    47dc:	000d0ac0 	call	d0ac <__floatsidf>
    47e0:	d9800f17 	ldw	r6,60(sp)
    47e4:	d9c01017 	ldw	r7,64(sp)
    47e8:	1009883a 	mov	r4,r2
    47ec:	180b883a 	mov	r5,r3
    47f0:	000c0180 	call	c018 <__muldf3>
    47f4:	01d00734 	movhi	r7,16412
    47f8:	000d883a 	mov	r6,zero
    47fc:	1009883a 	mov	r4,r2
    4800:	180b883a 	mov	r5,r3
    4804:	000ac2c0 	call	ac2c <__adddf3>
    4808:	d9c00517 	ldw	r7,20(sp)
    480c:	047f3034 	movhi	r17,64704
    4810:	1021883a 	mov	r16,r2
    4814:	39ffffc4 	addi	r7,r7,-1
    4818:	d9c01315 	stw	r7,76(sp)
    481c:	1c63883a 	add	r17,r3,r17
    4820:	db000c17 	ldw	r12,48(sp)
    4824:	003bea06 	br	37d0 <_gp+0xfffe9df0>
    4828:	dc000915 	stw	r16,36(sp)
    482c:	003e0e06 	br	4068 <_gp+0xfffea688>
    4830:	01000e44 	movi	r4,57
    4834:	8825883a 	mov	r18,r17
    4838:	9dc00044 	addi	r23,r19,1
    483c:	99000005 	stb	r4,0(r19)
    4840:	a023883a 	mov	r17,r20
    4844:	dc000915 	stw	r16,36(sp)
    4848:	003da406 	br	3edc <_gp+0xfffea4fc>
    484c:	d9801417 	ldw	r6,80(sp)
    4850:	d9c01517 	ldw	r7,84(sp)
    4854:	0009883a 	mov	r4,zero
    4858:	014ff834 	movhi	r5,16352
    485c:	000c7300 	call	c730 <__subdf3>
    4860:	880d883a 	mov	r6,r17
    4864:	a00f883a 	mov	r7,r20
    4868:	1009883a 	mov	r4,r2
    486c:	180b883a 	mov	r5,r3
    4870:	000be480 	call	be48 <__gedf2>
    4874:	00bc7c0e 	bge	zero,r2,3a68 <_gp+0xfffea088>
    4878:	01000c04 	movi	r4,48
    487c:	00000106 	br	4884 <_dtoa_r+0x1580>
    4880:	102f883a 	mov	r23,r2
    4884:	b8bfffc4 	addi	r2,r23,-1
    4888:	10c00007 	ldb	r3,0(r2)
    488c:	193ffc26 	beq	r3,r4,4880 <_gp+0xfffeaea0>
    4890:	d9801317 	ldw	r6,76(sp)
    4894:	d9800515 	stw	r6,20(sp)
    4898:	003c4406 	br	39ac <_gp+0xfffe9fcc>
    489c:	d9801317 	ldw	r6,76(sp)
    48a0:	d9800515 	stw	r6,20(sp)
    48a4:	003cea06 	br	3c50 <_gp+0xfffea270>
    48a8:	dd800f17 	ldw	r22,60(sp)
    48ac:	dcc01017 	ldw	r19,64(sp)
    48b0:	dc801217 	ldw	r18,72(sp)
    48b4:	003c6c06 	br	3a68 <_gp+0xfffea088>
    48b8:	903e031e 	bne	r18,zero,40c8 <_gp+0xfffea6e8>
    48bc:	003ebb06 	br	43ac <_gp+0xfffea9cc>
    48c0:	103e6c1e 	bne	r2,zero,4274 <_gp+0xfffea894>
    48c4:	4080004c 	andi	r2,r8,1
    48c8:	103e6a26 	beq	r2,zero,4274 <_gp+0xfffea894>
    48cc:	003e6606 	br	4268 <_gp+0xfffea888>
    48d0:	d8c00317 	ldw	r3,12(sp)
    48d4:	00800084 	movi	r2,2
    48d8:	10c02916 	blt	r2,r3,4980 <_dtoa_r+0x167c>
    48dc:	d9000c17 	ldw	r4,48(sp)
    48e0:	003e8806 	br	4304 <_gp+0xfffea924>
    48e4:	04000084 	movi	r16,2
    48e8:	003b9d06 	br	3760 <_gp+0xfffe9d80>
    48ec:	d9001317 	ldw	r4,76(sp)
    48f0:	d9000515 	stw	r4,20(sp)
    48f4:	003cd606 	br	3c50 <_gp+0xfffea270>
    48f8:	d8801317 	ldw	r2,76(sp)
    48fc:	d8800515 	stw	r2,20(sp)
    4900:	003c2a06 	br	39ac <_gp+0xfffe9fcc>
    4904:	d9800317 	ldw	r6,12(sp)
    4908:	00800084 	movi	r2,2
    490c:	11801516 	blt	r2,r6,4964 <_dtoa_r+0x1660>
    4910:	d9c00c17 	ldw	r7,48(sp)
    4914:	d9c00615 	stw	r7,24(sp)
    4918:	003df706 	br	40f8 <_gp+0xfffea718>
    491c:	193d3926 	beq	r3,r4,3e04 <_gp+0xfffea424>
    4920:	00c00f04 	movi	r3,60
    4924:	1885c83a 	sub	r2,r3,r2
    4928:	003ddf06 	br	40a8 <_gp+0xfffea6c8>
    492c:	e009883a 	mov	r4,fp
    4930:	e0001115 	stw	zero,68(fp)
    4934:	000b883a 	mov	r5,zero
    4938:	00068580 	call	6858 <_Balloc>
    493c:	d8800715 	stw	r2,28(sp)
    4940:	d8c00717 	ldw	r3,28(sp)
    4944:	00bfffc4 	movi	r2,-1
    4948:	01000044 	movi	r4,1
    494c:	d8800c15 	stw	r2,48(sp)
    4950:	e0c01015 	stw	r3,64(fp)
    4954:	d9000b15 	stw	r4,44(sp)
    4958:	d8800615 	stw	r2,24(sp)
    495c:	d8002215 	stw	zero,136(sp)
    4960:	003c4106 	br	3a68 <_gp+0xfffea088>
    4964:	d8c00c17 	ldw	r3,48(sp)
    4968:	d8c00615 	stw	r3,24(sp)
    496c:	003e7006 	br	4330 <_gp+0xfffea950>
    4970:	04400044 	movi	r17,1
    4974:	003b2006 	br	35f8 <_gp+0xfffe9c18>
    4978:	000b883a 	mov	r5,zero
    497c:	003b3d06 	br	3674 <_gp+0xfffe9c94>
    4980:	d8800c17 	ldw	r2,48(sp)
    4984:	d8800615 	stw	r2,24(sp)
    4988:	003e6906 	br	4330 <_gp+0xfffea950>

0000498c <__sflush_r>:
    498c:	2880030b 	ldhu	r2,12(r5)
    4990:	defffb04 	addi	sp,sp,-20
    4994:	dcc00315 	stw	r19,12(sp)
    4998:	dc400115 	stw	r17,4(sp)
    499c:	dfc00415 	stw	ra,16(sp)
    49a0:	dc800215 	stw	r18,8(sp)
    49a4:	dc000015 	stw	r16,0(sp)
    49a8:	10c0020c 	andi	r3,r2,8
    49ac:	2823883a 	mov	r17,r5
    49b0:	2027883a 	mov	r19,r4
    49b4:	1800311e 	bne	r3,zero,4a7c <__sflush_r+0xf0>
    49b8:	28c00117 	ldw	r3,4(r5)
    49bc:	10820014 	ori	r2,r2,2048
    49c0:	2880030d 	sth	r2,12(r5)
    49c4:	00c04b0e 	bge	zero,r3,4af4 <__sflush_r+0x168>
    49c8:	8a000a17 	ldw	r8,40(r17)
    49cc:	40002326 	beq	r8,zero,4a5c <__sflush_r+0xd0>
    49d0:	9c000017 	ldw	r16,0(r19)
    49d4:	10c4000c 	andi	r3,r2,4096
    49d8:	98000015 	stw	zero,0(r19)
    49dc:	18004826 	beq	r3,zero,4b00 <__sflush_r+0x174>
    49e0:	89801417 	ldw	r6,80(r17)
    49e4:	10c0010c 	andi	r3,r2,4
    49e8:	18000626 	beq	r3,zero,4a04 <__sflush_r+0x78>
    49ec:	88c00117 	ldw	r3,4(r17)
    49f0:	88800c17 	ldw	r2,48(r17)
    49f4:	30cdc83a 	sub	r6,r6,r3
    49f8:	10000226 	beq	r2,zero,4a04 <__sflush_r+0x78>
    49fc:	88800f17 	ldw	r2,60(r17)
    4a00:	308dc83a 	sub	r6,r6,r2
    4a04:	89400717 	ldw	r5,28(r17)
    4a08:	000f883a 	mov	r7,zero
    4a0c:	9809883a 	mov	r4,r19
    4a10:	403ee83a 	callr	r8
    4a14:	00ffffc4 	movi	r3,-1
    4a18:	10c04426 	beq	r2,r3,4b2c <__sflush_r+0x1a0>
    4a1c:	88c0030b 	ldhu	r3,12(r17)
    4a20:	89000417 	ldw	r4,16(r17)
    4a24:	88000115 	stw	zero,4(r17)
    4a28:	197dffcc 	andi	r5,r3,63487
    4a2c:	8940030d 	sth	r5,12(r17)
    4a30:	89000015 	stw	r4,0(r17)
    4a34:	18c4000c 	andi	r3,r3,4096
    4a38:	18002c1e 	bne	r3,zero,4aec <__sflush_r+0x160>
    4a3c:	89400c17 	ldw	r5,48(r17)
    4a40:	9c000015 	stw	r16,0(r19)
    4a44:	28000526 	beq	r5,zero,4a5c <__sflush_r+0xd0>
    4a48:	88801004 	addi	r2,r17,64
    4a4c:	28800226 	beq	r5,r2,4a58 <__sflush_r+0xcc>
    4a50:	9809883a 	mov	r4,r19
    4a54:	00050f80 	call	50f8 <_free_r>
    4a58:	88000c15 	stw	zero,48(r17)
    4a5c:	0005883a 	mov	r2,zero
    4a60:	dfc00417 	ldw	ra,16(sp)
    4a64:	dcc00317 	ldw	r19,12(sp)
    4a68:	dc800217 	ldw	r18,8(sp)
    4a6c:	dc400117 	ldw	r17,4(sp)
    4a70:	dc000017 	ldw	r16,0(sp)
    4a74:	dec00504 	addi	sp,sp,20
    4a78:	f800283a 	ret
    4a7c:	2c800417 	ldw	r18,16(r5)
    4a80:	903ff626 	beq	r18,zero,4a5c <_gp+0xfffeb07c>
    4a84:	2c000017 	ldw	r16,0(r5)
    4a88:	108000cc 	andi	r2,r2,3
    4a8c:	2c800015 	stw	r18,0(r5)
    4a90:	84a1c83a 	sub	r16,r16,r18
    4a94:	1000131e 	bne	r2,zero,4ae4 <__sflush_r+0x158>
    4a98:	28800517 	ldw	r2,20(r5)
    4a9c:	88800215 	stw	r2,8(r17)
    4aa0:	04000316 	blt	zero,r16,4ab0 <__sflush_r+0x124>
    4aa4:	003fed06 	br	4a5c <_gp+0xfffeb07c>
    4aa8:	90a5883a 	add	r18,r18,r2
    4aac:	043feb0e 	bge	zero,r16,4a5c <_gp+0xfffeb07c>
    4ab0:	88800917 	ldw	r2,36(r17)
    4ab4:	89400717 	ldw	r5,28(r17)
    4ab8:	800f883a 	mov	r7,r16
    4abc:	900d883a 	mov	r6,r18
    4ac0:	9809883a 	mov	r4,r19
    4ac4:	103ee83a 	callr	r2
    4ac8:	80a1c83a 	sub	r16,r16,r2
    4acc:	00bff616 	blt	zero,r2,4aa8 <_gp+0xfffeb0c8>
    4ad0:	88c0030b 	ldhu	r3,12(r17)
    4ad4:	00bfffc4 	movi	r2,-1
    4ad8:	18c01014 	ori	r3,r3,64
    4adc:	88c0030d 	sth	r3,12(r17)
    4ae0:	003fdf06 	br	4a60 <_gp+0xfffeb080>
    4ae4:	0005883a 	mov	r2,zero
    4ae8:	003fec06 	br	4a9c <_gp+0xfffeb0bc>
    4aec:	88801415 	stw	r2,80(r17)
    4af0:	003fd206 	br	4a3c <_gp+0xfffeb05c>
    4af4:	28c00f17 	ldw	r3,60(r5)
    4af8:	00ffb316 	blt	zero,r3,49c8 <_gp+0xfffeafe8>
    4afc:	003fd706 	br	4a5c <_gp+0xfffeb07c>
    4b00:	89400717 	ldw	r5,28(r17)
    4b04:	000d883a 	mov	r6,zero
    4b08:	01c00044 	movi	r7,1
    4b0c:	9809883a 	mov	r4,r19
    4b10:	403ee83a 	callr	r8
    4b14:	100d883a 	mov	r6,r2
    4b18:	00bfffc4 	movi	r2,-1
    4b1c:	30801426 	beq	r6,r2,4b70 <__sflush_r+0x1e4>
    4b20:	8880030b 	ldhu	r2,12(r17)
    4b24:	8a000a17 	ldw	r8,40(r17)
    4b28:	003fae06 	br	49e4 <_gp+0xfffeb004>
    4b2c:	98c00017 	ldw	r3,0(r19)
    4b30:	183fba26 	beq	r3,zero,4a1c <_gp+0xfffeb03c>
    4b34:	01000744 	movi	r4,29
    4b38:	19000626 	beq	r3,r4,4b54 <__sflush_r+0x1c8>
    4b3c:	01000584 	movi	r4,22
    4b40:	19000426 	beq	r3,r4,4b54 <__sflush_r+0x1c8>
    4b44:	88c0030b 	ldhu	r3,12(r17)
    4b48:	18c01014 	ori	r3,r3,64
    4b4c:	88c0030d 	sth	r3,12(r17)
    4b50:	003fc306 	br	4a60 <_gp+0xfffeb080>
    4b54:	8880030b 	ldhu	r2,12(r17)
    4b58:	88c00417 	ldw	r3,16(r17)
    4b5c:	88000115 	stw	zero,4(r17)
    4b60:	10bdffcc 	andi	r2,r2,63487
    4b64:	8880030d 	sth	r2,12(r17)
    4b68:	88c00015 	stw	r3,0(r17)
    4b6c:	003fb306 	br	4a3c <_gp+0xfffeb05c>
    4b70:	98800017 	ldw	r2,0(r19)
    4b74:	103fea26 	beq	r2,zero,4b20 <_gp+0xfffeb140>
    4b78:	00c00744 	movi	r3,29
    4b7c:	10c00226 	beq	r2,r3,4b88 <__sflush_r+0x1fc>
    4b80:	00c00584 	movi	r3,22
    4b84:	10c0031e 	bne	r2,r3,4b94 <__sflush_r+0x208>
    4b88:	9c000015 	stw	r16,0(r19)
    4b8c:	0005883a 	mov	r2,zero
    4b90:	003fb306 	br	4a60 <_gp+0xfffeb080>
    4b94:	88c0030b 	ldhu	r3,12(r17)
    4b98:	3005883a 	mov	r2,r6
    4b9c:	18c01014 	ori	r3,r3,64
    4ba0:	88c0030d 	sth	r3,12(r17)
    4ba4:	003fae06 	br	4a60 <_gp+0xfffeb080>

00004ba8 <_fflush_r>:
    4ba8:	defffd04 	addi	sp,sp,-12
    4bac:	dc000115 	stw	r16,4(sp)
    4bb0:	dfc00215 	stw	ra,8(sp)
    4bb4:	2021883a 	mov	r16,r4
    4bb8:	20000226 	beq	r4,zero,4bc4 <_fflush_r+0x1c>
    4bbc:	20800e17 	ldw	r2,56(r4)
    4bc0:	10000c26 	beq	r2,zero,4bf4 <_fflush_r+0x4c>
    4bc4:	2880030f 	ldh	r2,12(r5)
    4bc8:	1000051e 	bne	r2,zero,4be0 <_fflush_r+0x38>
    4bcc:	0005883a 	mov	r2,zero
    4bd0:	dfc00217 	ldw	ra,8(sp)
    4bd4:	dc000117 	ldw	r16,4(sp)
    4bd8:	dec00304 	addi	sp,sp,12
    4bdc:	f800283a 	ret
    4be0:	8009883a 	mov	r4,r16
    4be4:	dfc00217 	ldw	ra,8(sp)
    4be8:	dc000117 	ldw	r16,4(sp)
    4bec:	dec00304 	addi	sp,sp,12
    4bf0:	000498c1 	jmpi	498c <__sflush_r>
    4bf4:	d9400015 	stw	r5,0(sp)
    4bf8:	0004f840 	call	4f84 <__sinit>
    4bfc:	d9400017 	ldw	r5,0(sp)
    4c00:	003ff006 	br	4bc4 <_gp+0xfffeb1e4>

00004c04 <fflush>:
    4c04:	20000526 	beq	r4,zero,4c1c <fflush+0x18>
    4c08:	00800074 	movhi	r2,1
    4c0c:	10867904 	addi	r2,r2,6628
    4c10:	200b883a 	mov	r5,r4
    4c14:	11000017 	ldw	r4,0(r2)
    4c18:	0004ba81 	jmpi	4ba8 <_fflush_r>
    4c1c:	00800074 	movhi	r2,1
    4c20:	10867804 	addi	r2,r2,6624
    4c24:	11000017 	ldw	r4,0(r2)
    4c28:	01400034 	movhi	r5,0
    4c2c:	2952ea04 	addi	r5,r5,19368
    4c30:	00059881 	jmpi	5988 <_fwalk_reent>

00004c34 <__fp_unlock>:
    4c34:	0005883a 	mov	r2,zero
    4c38:	f800283a 	ret

00004c3c <_cleanup_r>:
    4c3c:	01400074 	movhi	r5,1
    4c40:	2966c604 	addi	r5,r5,-25832
    4c44:	00059881 	jmpi	5988 <_fwalk_reent>

00004c48 <__sinit.part.1>:
    4c48:	defff704 	addi	sp,sp,-36
    4c4c:	00c00034 	movhi	r3,0
    4c50:	dfc00815 	stw	ra,32(sp)
    4c54:	ddc00715 	stw	r23,28(sp)
    4c58:	dd800615 	stw	r22,24(sp)
    4c5c:	dd400515 	stw	r21,20(sp)
    4c60:	dd000415 	stw	r20,16(sp)
    4c64:	dcc00315 	stw	r19,12(sp)
    4c68:	dc800215 	stw	r18,8(sp)
    4c6c:	dc400115 	stw	r17,4(sp)
    4c70:	dc000015 	stw	r16,0(sp)
    4c74:	18d30f04 	addi	r3,r3,19516
    4c78:	24000117 	ldw	r16,4(r4)
    4c7c:	20c00f15 	stw	r3,60(r4)
    4c80:	2080bb04 	addi	r2,r4,748
    4c84:	00c000c4 	movi	r3,3
    4c88:	20c0b915 	stw	r3,740(r4)
    4c8c:	2080ba15 	stw	r2,744(r4)
    4c90:	2000b815 	stw	zero,736(r4)
    4c94:	05c00204 	movi	r23,8
    4c98:	00800104 	movi	r2,4
    4c9c:	2025883a 	mov	r18,r4
    4ca0:	b80d883a 	mov	r6,r23
    4ca4:	81001704 	addi	r4,r16,92
    4ca8:	000b883a 	mov	r5,zero
    4cac:	80000015 	stw	zero,0(r16)
    4cb0:	80000115 	stw	zero,4(r16)
    4cb4:	80000215 	stw	zero,8(r16)
    4cb8:	8080030d 	sth	r2,12(r16)
    4cbc:	80001915 	stw	zero,100(r16)
    4cc0:	8000038d 	sth	zero,14(r16)
    4cc4:	80000415 	stw	zero,16(r16)
    4cc8:	80000515 	stw	zero,20(r16)
    4ccc:	80000615 	stw	zero,24(r16)
    4cd0:	00067300 	call	6730 <memset>
    4cd4:	05800034 	movhi	r22,0
    4cd8:	94400217 	ldw	r17,8(r18)
    4cdc:	05400074 	movhi	r21,1
    4ce0:	05000074 	movhi	r20,1
    4ce4:	04c00074 	movhi	r19,1
    4ce8:	b59ffa04 	addi	r22,r22,32744
    4cec:	ad601104 	addi	r21,r21,-32700
    4cf0:	a5203004 	addi	r20,r20,-32576
    4cf4:	9ce04704 	addi	r19,r19,-32484
    4cf8:	85800815 	stw	r22,32(r16)
    4cfc:	85400915 	stw	r21,36(r16)
    4d00:	85000a15 	stw	r20,40(r16)
    4d04:	84c00b15 	stw	r19,44(r16)
    4d08:	84000715 	stw	r16,28(r16)
    4d0c:	00800284 	movi	r2,10
    4d10:	8880030d 	sth	r2,12(r17)
    4d14:	00800044 	movi	r2,1
    4d18:	b80d883a 	mov	r6,r23
    4d1c:	89001704 	addi	r4,r17,92
    4d20:	000b883a 	mov	r5,zero
    4d24:	88000015 	stw	zero,0(r17)
    4d28:	88000115 	stw	zero,4(r17)
    4d2c:	88000215 	stw	zero,8(r17)
    4d30:	88001915 	stw	zero,100(r17)
    4d34:	8880038d 	sth	r2,14(r17)
    4d38:	88000415 	stw	zero,16(r17)
    4d3c:	88000515 	stw	zero,20(r17)
    4d40:	88000615 	stw	zero,24(r17)
    4d44:	00067300 	call	6730 <memset>
    4d48:	94000317 	ldw	r16,12(r18)
    4d4c:	00800484 	movi	r2,18
    4d50:	8c400715 	stw	r17,28(r17)
    4d54:	8d800815 	stw	r22,32(r17)
    4d58:	8d400915 	stw	r21,36(r17)
    4d5c:	8d000a15 	stw	r20,40(r17)
    4d60:	8cc00b15 	stw	r19,44(r17)
    4d64:	8080030d 	sth	r2,12(r16)
    4d68:	00800084 	movi	r2,2
    4d6c:	80000015 	stw	zero,0(r16)
    4d70:	80000115 	stw	zero,4(r16)
    4d74:	80000215 	stw	zero,8(r16)
    4d78:	80001915 	stw	zero,100(r16)
    4d7c:	8080038d 	sth	r2,14(r16)
    4d80:	80000415 	stw	zero,16(r16)
    4d84:	80000515 	stw	zero,20(r16)
    4d88:	80000615 	stw	zero,24(r16)
    4d8c:	b80d883a 	mov	r6,r23
    4d90:	000b883a 	mov	r5,zero
    4d94:	81001704 	addi	r4,r16,92
    4d98:	00067300 	call	6730 <memset>
    4d9c:	00800044 	movi	r2,1
    4da0:	84000715 	stw	r16,28(r16)
    4da4:	85800815 	stw	r22,32(r16)
    4da8:	85400915 	stw	r21,36(r16)
    4dac:	85000a15 	stw	r20,40(r16)
    4db0:	84c00b15 	stw	r19,44(r16)
    4db4:	90800e15 	stw	r2,56(r18)
    4db8:	dfc00817 	ldw	ra,32(sp)
    4dbc:	ddc00717 	ldw	r23,28(sp)
    4dc0:	dd800617 	ldw	r22,24(sp)
    4dc4:	dd400517 	ldw	r21,20(sp)
    4dc8:	dd000417 	ldw	r20,16(sp)
    4dcc:	dcc00317 	ldw	r19,12(sp)
    4dd0:	dc800217 	ldw	r18,8(sp)
    4dd4:	dc400117 	ldw	r17,4(sp)
    4dd8:	dc000017 	ldw	r16,0(sp)
    4ddc:	dec00904 	addi	sp,sp,36
    4de0:	f800283a 	ret

00004de4 <__fp_lock>:
    4de4:	0005883a 	mov	r2,zero
    4de8:	f800283a 	ret

00004dec <__sfmoreglue>:
    4dec:	defffc04 	addi	sp,sp,-16
    4df0:	dc400115 	stw	r17,4(sp)
    4df4:	2c7fffc4 	addi	r17,r5,-1
    4df8:	8c401a24 	muli	r17,r17,104
    4dfc:	dc800215 	stw	r18,8(sp)
    4e00:	2825883a 	mov	r18,r5
    4e04:	89401d04 	addi	r5,r17,116
    4e08:	dc000015 	stw	r16,0(sp)
    4e0c:	dfc00315 	stw	ra,12(sp)
    4e10:	0005ce40 	call	5ce4 <_malloc_r>
    4e14:	1021883a 	mov	r16,r2
    4e18:	10000726 	beq	r2,zero,4e38 <__sfmoreglue+0x4c>
    4e1c:	11000304 	addi	r4,r2,12
    4e20:	10000015 	stw	zero,0(r2)
    4e24:	14800115 	stw	r18,4(r2)
    4e28:	11000215 	stw	r4,8(r2)
    4e2c:	89801a04 	addi	r6,r17,104
    4e30:	000b883a 	mov	r5,zero
    4e34:	00067300 	call	6730 <memset>
    4e38:	8005883a 	mov	r2,r16
    4e3c:	dfc00317 	ldw	ra,12(sp)
    4e40:	dc800217 	ldw	r18,8(sp)
    4e44:	dc400117 	ldw	r17,4(sp)
    4e48:	dc000017 	ldw	r16,0(sp)
    4e4c:	dec00404 	addi	sp,sp,16
    4e50:	f800283a 	ret

00004e54 <__sfp>:
    4e54:	defffb04 	addi	sp,sp,-20
    4e58:	dc000015 	stw	r16,0(sp)
    4e5c:	04000074 	movhi	r16,1
    4e60:	84067804 	addi	r16,r16,6624
    4e64:	dcc00315 	stw	r19,12(sp)
    4e68:	2027883a 	mov	r19,r4
    4e6c:	81000017 	ldw	r4,0(r16)
    4e70:	dfc00415 	stw	ra,16(sp)
    4e74:	dc800215 	stw	r18,8(sp)
    4e78:	20800e17 	ldw	r2,56(r4)
    4e7c:	dc400115 	stw	r17,4(sp)
    4e80:	1000021e 	bne	r2,zero,4e8c <__sfp+0x38>
    4e84:	0004c480 	call	4c48 <__sinit.part.1>
    4e88:	81000017 	ldw	r4,0(r16)
    4e8c:	2480b804 	addi	r18,r4,736
    4e90:	047fffc4 	movi	r17,-1
    4e94:	91000117 	ldw	r4,4(r18)
    4e98:	94000217 	ldw	r16,8(r18)
    4e9c:	213fffc4 	addi	r4,r4,-1
    4ea0:	20000a16 	blt	r4,zero,4ecc <__sfp+0x78>
    4ea4:	8080030f 	ldh	r2,12(r16)
    4ea8:	10000c26 	beq	r2,zero,4edc <__sfp+0x88>
    4eac:	80c01d04 	addi	r3,r16,116
    4eb0:	00000206 	br	4ebc <__sfp+0x68>
    4eb4:	18bfe60f 	ldh	r2,-104(r3)
    4eb8:	10000826 	beq	r2,zero,4edc <__sfp+0x88>
    4ebc:	213fffc4 	addi	r4,r4,-1
    4ec0:	1c3ffd04 	addi	r16,r3,-12
    4ec4:	18c01a04 	addi	r3,r3,104
    4ec8:	247ffa1e 	bne	r4,r17,4eb4 <_gp+0xfffeb4d4>
    4ecc:	90800017 	ldw	r2,0(r18)
    4ed0:	10001d26 	beq	r2,zero,4f48 <__sfp+0xf4>
    4ed4:	1025883a 	mov	r18,r2
    4ed8:	003fee06 	br	4e94 <_gp+0xfffeb4b4>
    4edc:	00bfffc4 	movi	r2,-1
    4ee0:	8080038d 	sth	r2,14(r16)
    4ee4:	00800044 	movi	r2,1
    4ee8:	8080030d 	sth	r2,12(r16)
    4eec:	80001915 	stw	zero,100(r16)
    4ef0:	80000015 	stw	zero,0(r16)
    4ef4:	80000215 	stw	zero,8(r16)
    4ef8:	80000115 	stw	zero,4(r16)
    4efc:	80000415 	stw	zero,16(r16)
    4f00:	80000515 	stw	zero,20(r16)
    4f04:	80000615 	stw	zero,24(r16)
    4f08:	01800204 	movi	r6,8
    4f0c:	000b883a 	mov	r5,zero
    4f10:	81001704 	addi	r4,r16,92
    4f14:	00067300 	call	6730 <memset>
    4f18:	8005883a 	mov	r2,r16
    4f1c:	80000c15 	stw	zero,48(r16)
    4f20:	80000d15 	stw	zero,52(r16)
    4f24:	80001115 	stw	zero,68(r16)
    4f28:	80001215 	stw	zero,72(r16)
    4f2c:	dfc00417 	ldw	ra,16(sp)
    4f30:	dcc00317 	ldw	r19,12(sp)
    4f34:	dc800217 	ldw	r18,8(sp)
    4f38:	dc400117 	ldw	r17,4(sp)
    4f3c:	dc000017 	ldw	r16,0(sp)
    4f40:	dec00504 	addi	sp,sp,20
    4f44:	f800283a 	ret
    4f48:	01400104 	movi	r5,4
    4f4c:	9809883a 	mov	r4,r19
    4f50:	0004dec0 	call	4dec <__sfmoreglue>
    4f54:	90800015 	stw	r2,0(r18)
    4f58:	103fde1e 	bne	r2,zero,4ed4 <_gp+0xfffeb4f4>
    4f5c:	00800304 	movi	r2,12
    4f60:	98800015 	stw	r2,0(r19)
    4f64:	0005883a 	mov	r2,zero
    4f68:	003ff006 	br	4f2c <_gp+0xfffeb54c>

00004f6c <_cleanup>:
    4f6c:	00800074 	movhi	r2,1
    4f70:	10867804 	addi	r2,r2,6624
    4f74:	11000017 	ldw	r4,0(r2)
    4f78:	01400074 	movhi	r5,1
    4f7c:	2966c604 	addi	r5,r5,-25832
    4f80:	00059881 	jmpi	5988 <_fwalk_reent>

00004f84 <__sinit>:
    4f84:	20800e17 	ldw	r2,56(r4)
    4f88:	10000126 	beq	r2,zero,4f90 <__sinit+0xc>
    4f8c:	f800283a 	ret
    4f90:	0004c481 	jmpi	4c48 <__sinit.part.1>

00004f94 <__sfp_lock_acquire>:
    4f94:	f800283a 	ret

00004f98 <__sfp_lock_release>:
    4f98:	f800283a 	ret

00004f9c <__sinit_lock_acquire>:
    4f9c:	f800283a 	ret

00004fa0 <__sinit_lock_release>:
    4fa0:	f800283a 	ret

00004fa4 <__fp_lock_all>:
    4fa4:	00800074 	movhi	r2,1
    4fa8:	10867904 	addi	r2,r2,6628
    4fac:	11000017 	ldw	r4,0(r2)
    4fb0:	01400034 	movhi	r5,0
    4fb4:	29537904 	addi	r5,r5,19940
    4fb8:	00058c41 	jmpi	58c4 <_fwalk>

00004fbc <__fp_unlock_all>:
    4fbc:	00800074 	movhi	r2,1
    4fc0:	10867904 	addi	r2,r2,6628
    4fc4:	11000017 	ldw	r4,0(r2)
    4fc8:	01400034 	movhi	r5,0
    4fcc:	29530d04 	addi	r5,r5,19508
    4fd0:	00058c41 	jmpi	58c4 <_fwalk>

00004fd4 <_malloc_trim_r>:
    4fd4:	defffb04 	addi	sp,sp,-20
    4fd8:	dcc00315 	stw	r19,12(sp)
    4fdc:	04c00074 	movhi	r19,1
    4fe0:	dc800215 	stw	r18,8(sp)
    4fe4:	dc400115 	stw	r17,4(sp)
    4fe8:	dc000015 	stw	r16,0(sp)
    4fec:	dfc00415 	stw	ra,16(sp)
    4ff0:	2821883a 	mov	r16,r5
    4ff4:	9cc0f404 	addi	r19,r19,976
    4ff8:	2025883a 	mov	r18,r4
    4ffc:	000d8a80 	call	d8a8 <__malloc_lock>
    5000:	98800217 	ldw	r2,8(r19)
    5004:	14400117 	ldw	r17,4(r2)
    5008:	00bfff04 	movi	r2,-4
    500c:	88a2703a 	and	r17,r17,r2
    5010:	8c21c83a 	sub	r16,r17,r16
    5014:	8403fbc4 	addi	r16,r16,4079
    5018:	8020d33a 	srli	r16,r16,12
    501c:	0083ffc4 	movi	r2,4095
    5020:	843fffc4 	addi	r16,r16,-1
    5024:	8020933a 	slli	r16,r16,12
    5028:	1400060e 	bge	r2,r16,5044 <_malloc_trim_r+0x70>
    502c:	000b883a 	mov	r5,zero
    5030:	9009883a 	mov	r4,r18
    5034:	0007f940 	call	7f94 <_sbrk_r>
    5038:	98c00217 	ldw	r3,8(r19)
    503c:	1c47883a 	add	r3,r3,r17
    5040:	10c00a26 	beq	r2,r3,506c <_malloc_trim_r+0x98>
    5044:	9009883a 	mov	r4,r18
    5048:	000d8cc0 	call	d8cc <__malloc_unlock>
    504c:	0005883a 	mov	r2,zero
    5050:	dfc00417 	ldw	ra,16(sp)
    5054:	dcc00317 	ldw	r19,12(sp)
    5058:	dc800217 	ldw	r18,8(sp)
    505c:	dc400117 	ldw	r17,4(sp)
    5060:	dc000017 	ldw	r16,0(sp)
    5064:	dec00504 	addi	sp,sp,20
    5068:	f800283a 	ret
    506c:	040bc83a 	sub	r5,zero,r16
    5070:	9009883a 	mov	r4,r18
    5074:	0007f940 	call	7f94 <_sbrk_r>
    5078:	00ffffc4 	movi	r3,-1
    507c:	10c00d26 	beq	r2,r3,50b4 <_malloc_trim_r+0xe0>
    5080:	00c00074 	movhi	r3,1
    5084:	18cd5104 	addi	r3,r3,13636
    5088:	18800017 	ldw	r2,0(r3)
    508c:	99000217 	ldw	r4,8(r19)
    5090:	8c23c83a 	sub	r17,r17,r16
    5094:	8c400054 	ori	r17,r17,1
    5098:	1421c83a 	sub	r16,r2,r16
    509c:	24400115 	stw	r17,4(r4)
    50a0:	9009883a 	mov	r4,r18
    50a4:	1c000015 	stw	r16,0(r3)
    50a8:	000d8cc0 	call	d8cc <__malloc_unlock>
    50ac:	00800044 	movi	r2,1
    50b0:	003fe706 	br	5050 <_gp+0xfffeb670>
    50b4:	000b883a 	mov	r5,zero
    50b8:	9009883a 	mov	r4,r18
    50bc:	0007f940 	call	7f94 <_sbrk_r>
    50c0:	99000217 	ldw	r4,8(r19)
    50c4:	014003c4 	movi	r5,15
    50c8:	1107c83a 	sub	r3,r2,r4
    50cc:	28ffdd0e 	bge	r5,r3,5044 <_gp+0xfffeb664>
    50d0:	01400074 	movhi	r5,1
    50d4:	29467b04 	addi	r5,r5,6636
    50d8:	29400017 	ldw	r5,0(r5)
    50dc:	18c00054 	ori	r3,r3,1
    50e0:	20c00115 	stw	r3,4(r4)
    50e4:	00c00074 	movhi	r3,1
    50e8:	1145c83a 	sub	r2,r2,r5
    50ec:	18cd5104 	addi	r3,r3,13636
    50f0:	18800015 	stw	r2,0(r3)
    50f4:	003fd306 	br	5044 <_gp+0xfffeb664>

000050f8 <_free_r>:
    50f8:	28004126 	beq	r5,zero,5200 <_free_r+0x108>
    50fc:	defffd04 	addi	sp,sp,-12
    5100:	dc400115 	stw	r17,4(sp)
    5104:	dc000015 	stw	r16,0(sp)
    5108:	2023883a 	mov	r17,r4
    510c:	2821883a 	mov	r16,r5
    5110:	dfc00215 	stw	ra,8(sp)
    5114:	000d8a80 	call	d8a8 <__malloc_lock>
    5118:	81ffff17 	ldw	r7,-4(r16)
    511c:	00bfff84 	movi	r2,-2
    5120:	01000074 	movhi	r4,1
    5124:	81bffe04 	addi	r6,r16,-8
    5128:	3884703a 	and	r2,r7,r2
    512c:	2100f404 	addi	r4,r4,976
    5130:	308b883a 	add	r5,r6,r2
    5134:	2a400117 	ldw	r9,4(r5)
    5138:	22000217 	ldw	r8,8(r4)
    513c:	00ffff04 	movi	r3,-4
    5140:	48c6703a 	and	r3,r9,r3
    5144:	2a005726 	beq	r5,r8,52a4 <_free_r+0x1ac>
    5148:	28c00115 	stw	r3,4(r5)
    514c:	39c0004c 	andi	r7,r7,1
    5150:	3800091e 	bne	r7,zero,5178 <_free_r+0x80>
    5154:	823ffe17 	ldw	r8,-8(r16)
    5158:	22400204 	addi	r9,r4,8
    515c:	320dc83a 	sub	r6,r6,r8
    5160:	31c00217 	ldw	r7,8(r6)
    5164:	1205883a 	add	r2,r2,r8
    5168:	3a406526 	beq	r7,r9,5300 <_free_r+0x208>
    516c:	32000317 	ldw	r8,12(r6)
    5170:	3a000315 	stw	r8,12(r7)
    5174:	41c00215 	stw	r7,8(r8)
    5178:	28cf883a 	add	r7,r5,r3
    517c:	39c00117 	ldw	r7,4(r7)
    5180:	39c0004c 	andi	r7,r7,1
    5184:	38003a26 	beq	r7,zero,5270 <_free_r+0x178>
    5188:	10c00054 	ori	r3,r2,1
    518c:	30c00115 	stw	r3,4(r6)
    5190:	3087883a 	add	r3,r6,r2
    5194:	18800015 	stw	r2,0(r3)
    5198:	00c07fc4 	movi	r3,511
    519c:	18801936 	bltu	r3,r2,5204 <_free_r+0x10c>
    51a0:	1004d0fa 	srli	r2,r2,3
    51a4:	01c00044 	movi	r7,1
    51a8:	21400117 	ldw	r5,4(r4)
    51ac:	10c00044 	addi	r3,r2,1
    51b0:	18c7883a 	add	r3,r3,r3
    51b4:	1005d0ba 	srai	r2,r2,2
    51b8:	18c7883a 	add	r3,r3,r3
    51bc:	18c7883a 	add	r3,r3,r3
    51c0:	1907883a 	add	r3,r3,r4
    51c4:	3884983a 	sll	r2,r7,r2
    51c8:	19c00017 	ldw	r7,0(r3)
    51cc:	1a3ffe04 	addi	r8,r3,-8
    51d0:	1144b03a 	or	r2,r2,r5
    51d4:	32000315 	stw	r8,12(r6)
    51d8:	31c00215 	stw	r7,8(r6)
    51dc:	20800115 	stw	r2,4(r4)
    51e0:	19800015 	stw	r6,0(r3)
    51e4:	39800315 	stw	r6,12(r7)
    51e8:	8809883a 	mov	r4,r17
    51ec:	dfc00217 	ldw	ra,8(sp)
    51f0:	dc400117 	ldw	r17,4(sp)
    51f4:	dc000017 	ldw	r16,0(sp)
    51f8:	dec00304 	addi	sp,sp,12
    51fc:	000d8cc1 	jmpi	d8cc <__malloc_unlock>
    5200:	f800283a 	ret
    5204:	100ad27a 	srli	r5,r2,9
    5208:	00c00104 	movi	r3,4
    520c:	19404a36 	bltu	r3,r5,5338 <_free_r+0x240>
    5210:	100ad1ba 	srli	r5,r2,6
    5214:	28c00e44 	addi	r3,r5,57
    5218:	18c7883a 	add	r3,r3,r3
    521c:	29400e04 	addi	r5,r5,56
    5220:	18c7883a 	add	r3,r3,r3
    5224:	18c7883a 	add	r3,r3,r3
    5228:	1909883a 	add	r4,r3,r4
    522c:	20c00017 	ldw	r3,0(r4)
    5230:	01c00074 	movhi	r7,1
    5234:	213ffe04 	addi	r4,r4,-8
    5238:	39c0f404 	addi	r7,r7,976
    523c:	20c04426 	beq	r4,r3,5350 <_free_r+0x258>
    5240:	01ffff04 	movi	r7,-4
    5244:	19400117 	ldw	r5,4(r3)
    5248:	29ca703a 	and	r5,r5,r7
    524c:	1140022e 	bgeu	r2,r5,5258 <_free_r+0x160>
    5250:	18c00217 	ldw	r3,8(r3)
    5254:	20fffb1e 	bne	r4,r3,5244 <_gp+0xfffeb864>
    5258:	19000317 	ldw	r4,12(r3)
    525c:	31000315 	stw	r4,12(r6)
    5260:	30c00215 	stw	r3,8(r6)
    5264:	21800215 	stw	r6,8(r4)
    5268:	19800315 	stw	r6,12(r3)
    526c:	003fde06 	br	51e8 <_gp+0xfffeb808>
    5270:	29c00217 	ldw	r7,8(r5)
    5274:	10c5883a 	add	r2,r2,r3
    5278:	00c00074 	movhi	r3,1
    527c:	18c0f604 	addi	r3,r3,984
    5280:	38c03b26 	beq	r7,r3,5370 <_free_r+0x278>
    5284:	2a000317 	ldw	r8,12(r5)
    5288:	11400054 	ori	r5,r2,1
    528c:	3087883a 	add	r3,r6,r2
    5290:	3a000315 	stw	r8,12(r7)
    5294:	41c00215 	stw	r7,8(r8)
    5298:	31400115 	stw	r5,4(r6)
    529c:	18800015 	stw	r2,0(r3)
    52a0:	003fbd06 	br	5198 <_gp+0xfffeb7b8>
    52a4:	39c0004c 	andi	r7,r7,1
    52a8:	10c5883a 	add	r2,r2,r3
    52ac:	3800071e 	bne	r7,zero,52cc <_free_r+0x1d4>
    52b0:	81fffe17 	ldw	r7,-8(r16)
    52b4:	31cdc83a 	sub	r6,r6,r7
    52b8:	30c00317 	ldw	r3,12(r6)
    52bc:	31400217 	ldw	r5,8(r6)
    52c0:	11c5883a 	add	r2,r2,r7
    52c4:	28c00315 	stw	r3,12(r5)
    52c8:	19400215 	stw	r5,8(r3)
    52cc:	10c00054 	ori	r3,r2,1
    52d0:	30c00115 	stw	r3,4(r6)
    52d4:	00c00074 	movhi	r3,1
    52d8:	18c67c04 	addi	r3,r3,6640
    52dc:	18c00017 	ldw	r3,0(r3)
    52e0:	21800215 	stw	r6,8(r4)
    52e4:	10ffc036 	bltu	r2,r3,51e8 <_gp+0xfffeb808>
    52e8:	00800074 	movhi	r2,1
    52ec:	108d4804 	addi	r2,r2,13600
    52f0:	11400017 	ldw	r5,0(r2)
    52f4:	8809883a 	mov	r4,r17
    52f8:	0004fd40 	call	4fd4 <_malloc_trim_r>
    52fc:	003fba06 	br	51e8 <_gp+0xfffeb808>
    5300:	28c9883a 	add	r4,r5,r3
    5304:	21000117 	ldw	r4,4(r4)
    5308:	2100004c 	andi	r4,r4,1
    530c:	2000391e 	bne	r4,zero,53f4 <_free_r+0x2fc>
    5310:	29c00217 	ldw	r7,8(r5)
    5314:	29000317 	ldw	r4,12(r5)
    5318:	1885883a 	add	r2,r3,r2
    531c:	10c00054 	ori	r3,r2,1
    5320:	39000315 	stw	r4,12(r7)
    5324:	21c00215 	stw	r7,8(r4)
    5328:	30c00115 	stw	r3,4(r6)
    532c:	308d883a 	add	r6,r6,r2
    5330:	30800015 	stw	r2,0(r6)
    5334:	003fac06 	br	51e8 <_gp+0xfffeb808>
    5338:	00c00504 	movi	r3,20
    533c:	19401536 	bltu	r3,r5,5394 <_free_r+0x29c>
    5340:	28c01704 	addi	r3,r5,92
    5344:	18c7883a 	add	r3,r3,r3
    5348:	294016c4 	addi	r5,r5,91
    534c:	003fb406 	br	5220 <_gp+0xfffeb840>
    5350:	280bd0ba 	srai	r5,r5,2
    5354:	00c00044 	movi	r3,1
    5358:	38800117 	ldw	r2,4(r7)
    535c:	194a983a 	sll	r5,r3,r5
    5360:	2007883a 	mov	r3,r4
    5364:	2884b03a 	or	r2,r5,r2
    5368:	38800115 	stw	r2,4(r7)
    536c:	003fbb06 	br	525c <_gp+0xfffeb87c>
    5370:	21800515 	stw	r6,20(r4)
    5374:	21800415 	stw	r6,16(r4)
    5378:	10c00054 	ori	r3,r2,1
    537c:	31c00315 	stw	r7,12(r6)
    5380:	31c00215 	stw	r7,8(r6)
    5384:	30c00115 	stw	r3,4(r6)
    5388:	308d883a 	add	r6,r6,r2
    538c:	30800015 	stw	r2,0(r6)
    5390:	003f9506 	br	51e8 <_gp+0xfffeb808>
    5394:	00c01504 	movi	r3,84
    5398:	19400536 	bltu	r3,r5,53b0 <_free_r+0x2b8>
    539c:	100ad33a 	srli	r5,r2,12
    53a0:	28c01bc4 	addi	r3,r5,111
    53a4:	18c7883a 	add	r3,r3,r3
    53a8:	29401b84 	addi	r5,r5,110
    53ac:	003f9c06 	br	5220 <_gp+0xfffeb840>
    53b0:	00c05504 	movi	r3,340
    53b4:	19400536 	bltu	r3,r5,53cc <_free_r+0x2d4>
    53b8:	100ad3fa 	srli	r5,r2,15
    53bc:	28c01e04 	addi	r3,r5,120
    53c0:	18c7883a 	add	r3,r3,r3
    53c4:	29401dc4 	addi	r5,r5,119
    53c8:	003f9506 	br	5220 <_gp+0xfffeb840>
    53cc:	00c15504 	movi	r3,1364
    53d0:	19400536 	bltu	r3,r5,53e8 <_free_r+0x2f0>
    53d4:	100ad4ba 	srli	r5,r2,18
    53d8:	28c01f44 	addi	r3,r5,125
    53dc:	18c7883a 	add	r3,r3,r3
    53e0:	29401f04 	addi	r5,r5,124
    53e4:	003f8e06 	br	5220 <_gp+0xfffeb840>
    53e8:	00c03f84 	movi	r3,254
    53ec:	01401f84 	movi	r5,126
    53f0:	003f8b06 	br	5220 <_gp+0xfffeb840>
    53f4:	10c00054 	ori	r3,r2,1
    53f8:	30c00115 	stw	r3,4(r6)
    53fc:	308d883a 	add	r6,r6,r2
    5400:	30800015 	stw	r2,0(r6)
    5404:	003f7806 	br	51e8 <_gp+0xfffeb808>

00005408 <__sfvwrite_r>:
    5408:	30800217 	ldw	r2,8(r6)
    540c:	10006726 	beq	r2,zero,55ac <__sfvwrite_r+0x1a4>
    5410:	28c0030b 	ldhu	r3,12(r5)
    5414:	defff404 	addi	sp,sp,-48
    5418:	dd400715 	stw	r21,28(sp)
    541c:	dd000615 	stw	r20,24(sp)
    5420:	dc000215 	stw	r16,8(sp)
    5424:	dfc00b15 	stw	ra,44(sp)
    5428:	df000a15 	stw	fp,40(sp)
    542c:	ddc00915 	stw	r23,36(sp)
    5430:	dd800815 	stw	r22,32(sp)
    5434:	dcc00515 	stw	r19,20(sp)
    5438:	dc800415 	stw	r18,16(sp)
    543c:	dc400315 	stw	r17,12(sp)
    5440:	1880020c 	andi	r2,r3,8
    5444:	2821883a 	mov	r16,r5
    5448:	202b883a 	mov	r21,r4
    544c:	3029883a 	mov	r20,r6
    5450:	10002726 	beq	r2,zero,54f0 <__sfvwrite_r+0xe8>
    5454:	28800417 	ldw	r2,16(r5)
    5458:	10002526 	beq	r2,zero,54f0 <__sfvwrite_r+0xe8>
    545c:	1880008c 	andi	r2,r3,2
    5460:	a4400017 	ldw	r17,0(r20)
    5464:	10002a26 	beq	r2,zero,5510 <__sfvwrite_r+0x108>
    5468:	05a00034 	movhi	r22,32768
    546c:	0027883a 	mov	r19,zero
    5470:	0025883a 	mov	r18,zero
    5474:	b5bf0004 	addi	r22,r22,-1024
    5478:	980d883a 	mov	r6,r19
    547c:	a809883a 	mov	r4,r21
    5480:	90004626 	beq	r18,zero,559c <__sfvwrite_r+0x194>
    5484:	900f883a 	mov	r7,r18
    5488:	b480022e 	bgeu	r22,r18,5494 <__sfvwrite_r+0x8c>
    548c:	01e00034 	movhi	r7,32768
    5490:	39ff0004 	addi	r7,r7,-1024
    5494:	80800917 	ldw	r2,36(r16)
    5498:	81400717 	ldw	r5,28(r16)
    549c:	103ee83a 	callr	r2
    54a0:	0080570e 	bge	zero,r2,5600 <__sfvwrite_r+0x1f8>
    54a4:	a0c00217 	ldw	r3,8(r20)
    54a8:	98a7883a 	add	r19,r19,r2
    54ac:	90a5c83a 	sub	r18,r18,r2
    54b0:	1885c83a 	sub	r2,r3,r2
    54b4:	a0800215 	stw	r2,8(r20)
    54b8:	103fef1e 	bne	r2,zero,5478 <_gp+0xfffeba98>
    54bc:	0005883a 	mov	r2,zero
    54c0:	dfc00b17 	ldw	ra,44(sp)
    54c4:	df000a17 	ldw	fp,40(sp)
    54c8:	ddc00917 	ldw	r23,36(sp)
    54cc:	dd800817 	ldw	r22,32(sp)
    54d0:	dd400717 	ldw	r21,28(sp)
    54d4:	dd000617 	ldw	r20,24(sp)
    54d8:	dcc00517 	ldw	r19,20(sp)
    54dc:	dc800417 	ldw	r18,16(sp)
    54e0:	dc400317 	ldw	r17,12(sp)
    54e4:	dc000217 	ldw	r16,8(sp)
    54e8:	dec00c04 	addi	sp,sp,48
    54ec:	f800283a 	ret
    54f0:	800b883a 	mov	r5,r16
    54f4:	a809883a 	mov	r4,r21
    54f8:	0002fb00 	call	2fb0 <__swsetup_r>
    54fc:	1000eb1e 	bne	r2,zero,58ac <__sfvwrite_r+0x4a4>
    5500:	80c0030b 	ldhu	r3,12(r16)
    5504:	a4400017 	ldw	r17,0(r20)
    5508:	1880008c 	andi	r2,r3,2
    550c:	103fd61e 	bne	r2,zero,5468 <_gp+0xfffeba88>
    5510:	1880004c 	andi	r2,r3,1
    5514:	10003f1e 	bne	r2,zero,5614 <__sfvwrite_r+0x20c>
    5518:	0039883a 	mov	fp,zero
    551c:	0025883a 	mov	r18,zero
    5520:	90001a26 	beq	r18,zero,558c <__sfvwrite_r+0x184>
    5524:	1880800c 	andi	r2,r3,512
    5528:	84c00217 	ldw	r19,8(r16)
    552c:	10002126 	beq	r2,zero,55b4 <__sfvwrite_r+0x1ac>
    5530:	982f883a 	mov	r23,r19
    5534:	94c09336 	bltu	r18,r19,5784 <__sfvwrite_r+0x37c>
    5538:	1881200c 	andi	r2,r3,1152
    553c:	10009e1e 	bne	r2,zero,57b8 <__sfvwrite_r+0x3b0>
    5540:	81000017 	ldw	r4,0(r16)
    5544:	b80d883a 	mov	r6,r23
    5548:	e00b883a 	mov	r5,fp
    554c:	00065d40 	call	65d4 <memmove>
    5550:	80c00217 	ldw	r3,8(r16)
    5554:	81000017 	ldw	r4,0(r16)
    5558:	9005883a 	mov	r2,r18
    555c:	1ce7c83a 	sub	r19,r3,r19
    5560:	25cf883a 	add	r7,r4,r23
    5564:	84c00215 	stw	r19,8(r16)
    5568:	81c00015 	stw	r7,0(r16)
    556c:	a0c00217 	ldw	r3,8(r20)
    5570:	e0b9883a 	add	fp,fp,r2
    5574:	90a5c83a 	sub	r18,r18,r2
    5578:	18a7c83a 	sub	r19,r3,r2
    557c:	a4c00215 	stw	r19,8(r20)
    5580:	983fce26 	beq	r19,zero,54bc <_gp+0xfffebadc>
    5584:	80c0030b 	ldhu	r3,12(r16)
    5588:	903fe61e 	bne	r18,zero,5524 <_gp+0xfffebb44>
    558c:	8f000017 	ldw	fp,0(r17)
    5590:	8c800117 	ldw	r18,4(r17)
    5594:	8c400204 	addi	r17,r17,8
    5598:	003fe106 	br	5520 <_gp+0xfffebb40>
    559c:	8cc00017 	ldw	r19,0(r17)
    55a0:	8c800117 	ldw	r18,4(r17)
    55a4:	8c400204 	addi	r17,r17,8
    55a8:	003fb306 	br	5478 <_gp+0xfffeba98>
    55ac:	0005883a 	mov	r2,zero
    55b0:	f800283a 	ret
    55b4:	81000017 	ldw	r4,0(r16)
    55b8:	80800417 	ldw	r2,16(r16)
    55bc:	11005736 	bltu	r2,r4,571c <__sfvwrite_r+0x314>
    55c0:	85c00517 	ldw	r23,20(r16)
    55c4:	95c05536 	bltu	r18,r23,571c <__sfvwrite_r+0x314>
    55c8:	00a00034 	movhi	r2,32768
    55cc:	10bfffc4 	addi	r2,r2,-1
    55d0:	9009883a 	mov	r4,r18
    55d4:	1480012e 	bgeu	r2,r18,55dc <__sfvwrite_r+0x1d4>
    55d8:	1009883a 	mov	r4,r2
    55dc:	b80b883a 	mov	r5,r23
    55e0:	00007ec0 	call	7ec <__divsi3>
    55e4:	15cf383a 	mul	r7,r2,r23
    55e8:	81400717 	ldw	r5,28(r16)
    55ec:	80800917 	ldw	r2,36(r16)
    55f0:	e00d883a 	mov	r6,fp
    55f4:	a809883a 	mov	r4,r21
    55f8:	103ee83a 	callr	r2
    55fc:	00bfdb16 	blt	zero,r2,556c <_gp+0xfffebb8c>
    5600:	8080030b 	ldhu	r2,12(r16)
    5604:	10801014 	ori	r2,r2,64
    5608:	8080030d 	sth	r2,12(r16)
    560c:	00bfffc4 	movi	r2,-1
    5610:	003fab06 	br	54c0 <_gp+0xfffebae0>
    5614:	0027883a 	mov	r19,zero
    5618:	0011883a 	mov	r8,zero
    561c:	0039883a 	mov	fp,zero
    5620:	0025883a 	mov	r18,zero
    5624:	90001f26 	beq	r18,zero,56a4 <__sfvwrite_r+0x29c>
    5628:	40005a26 	beq	r8,zero,5794 <__sfvwrite_r+0x38c>
    562c:	982d883a 	mov	r22,r19
    5630:	94c0012e 	bgeu	r18,r19,5638 <__sfvwrite_r+0x230>
    5634:	902d883a 	mov	r22,r18
    5638:	81000017 	ldw	r4,0(r16)
    563c:	80800417 	ldw	r2,16(r16)
    5640:	b02f883a 	mov	r23,r22
    5644:	81c00517 	ldw	r7,20(r16)
    5648:	1100032e 	bgeu	r2,r4,5658 <__sfvwrite_r+0x250>
    564c:	80c00217 	ldw	r3,8(r16)
    5650:	38c7883a 	add	r3,r7,r3
    5654:	1d801816 	blt	r3,r22,56b8 <__sfvwrite_r+0x2b0>
    5658:	b1c03e16 	blt	r22,r7,5754 <__sfvwrite_r+0x34c>
    565c:	80800917 	ldw	r2,36(r16)
    5660:	81400717 	ldw	r5,28(r16)
    5664:	e00d883a 	mov	r6,fp
    5668:	da000115 	stw	r8,4(sp)
    566c:	a809883a 	mov	r4,r21
    5670:	103ee83a 	callr	r2
    5674:	102f883a 	mov	r23,r2
    5678:	da000117 	ldw	r8,4(sp)
    567c:	00bfe00e 	bge	zero,r2,5600 <_gp+0xfffebc20>
    5680:	9de7c83a 	sub	r19,r19,r23
    5684:	98001f26 	beq	r19,zero,5704 <__sfvwrite_r+0x2fc>
    5688:	a0800217 	ldw	r2,8(r20)
    568c:	e5f9883a 	add	fp,fp,r23
    5690:	95e5c83a 	sub	r18,r18,r23
    5694:	15efc83a 	sub	r23,r2,r23
    5698:	a5c00215 	stw	r23,8(r20)
    569c:	b83f8726 	beq	r23,zero,54bc <_gp+0xfffebadc>
    56a0:	903fe11e 	bne	r18,zero,5628 <_gp+0xfffebc48>
    56a4:	8f000017 	ldw	fp,0(r17)
    56a8:	8c800117 	ldw	r18,4(r17)
    56ac:	0011883a 	mov	r8,zero
    56b0:	8c400204 	addi	r17,r17,8
    56b4:	003fdb06 	br	5624 <_gp+0xfffebc44>
    56b8:	180d883a 	mov	r6,r3
    56bc:	e00b883a 	mov	r5,fp
    56c0:	da000115 	stw	r8,4(sp)
    56c4:	d8c00015 	stw	r3,0(sp)
    56c8:	00065d40 	call	65d4 <memmove>
    56cc:	d8c00017 	ldw	r3,0(sp)
    56d0:	80800017 	ldw	r2,0(r16)
    56d4:	800b883a 	mov	r5,r16
    56d8:	a809883a 	mov	r4,r21
    56dc:	10c5883a 	add	r2,r2,r3
    56e0:	80800015 	stw	r2,0(r16)
    56e4:	d8c00015 	stw	r3,0(sp)
    56e8:	0004ba80 	call	4ba8 <_fflush_r>
    56ec:	d8c00017 	ldw	r3,0(sp)
    56f0:	da000117 	ldw	r8,4(sp)
    56f4:	103fc21e 	bne	r2,zero,5600 <_gp+0xfffebc20>
    56f8:	182f883a 	mov	r23,r3
    56fc:	9de7c83a 	sub	r19,r19,r23
    5700:	983fe11e 	bne	r19,zero,5688 <_gp+0xfffebca8>
    5704:	800b883a 	mov	r5,r16
    5708:	a809883a 	mov	r4,r21
    570c:	0004ba80 	call	4ba8 <_fflush_r>
    5710:	103fbb1e 	bne	r2,zero,5600 <_gp+0xfffebc20>
    5714:	0011883a 	mov	r8,zero
    5718:	003fdb06 	br	5688 <_gp+0xfffebca8>
    571c:	94c0012e 	bgeu	r18,r19,5724 <__sfvwrite_r+0x31c>
    5720:	9027883a 	mov	r19,r18
    5724:	980d883a 	mov	r6,r19
    5728:	e00b883a 	mov	r5,fp
    572c:	00065d40 	call	65d4 <memmove>
    5730:	80800217 	ldw	r2,8(r16)
    5734:	80c00017 	ldw	r3,0(r16)
    5738:	14c5c83a 	sub	r2,r2,r19
    573c:	1cc7883a 	add	r3,r3,r19
    5740:	80800215 	stw	r2,8(r16)
    5744:	80c00015 	stw	r3,0(r16)
    5748:	10004326 	beq	r2,zero,5858 <__sfvwrite_r+0x450>
    574c:	9805883a 	mov	r2,r19
    5750:	003f8606 	br	556c <_gp+0xfffebb8c>
    5754:	b00d883a 	mov	r6,r22
    5758:	e00b883a 	mov	r5,fp
    575c:	da000115 	stw	r8,4(sp)
    5760:	00065d40 	call	65d4 <memmove>
    5764:	80800217 	ldw	r2,8(r16)
    5768:	80c00017 	ldw	r3,0(r16)
    576c:	da000117 	ldw	r8,4(sp)
    5770:	1585c83a 	sub	r2,r2,r22
    5774:	1dad883a 	add	r22,r3,r22
    5778:	80800215 	stw	r2,8(r16)
    577c:	85800015 	stw	r22,0(r16)
    5780:	003fbf06 	br	5680 <_gp+0xfffebca0>
    5784:	81000017 	ldw	r4,0(r16)
    5788:	9027883a 	mov	r19,r18
    578c:	902f883a 	mov	r23,r18
    5790:	003f6c06 	br	5544 <_gp+0xfffebb64>
    5794:	900d883a 	mov	r6,r18
    5798:	01400284 	movi	r5,10
    579c:	e009883a 	mov	r4,fp
    57a0:	00064f00 	call	64f0 <memchr>
    57a4:	10003e26 	beq	r2,zero,58a0 <__sfvwrite_r+0x498>
    57a8:	10800044 	addi	r2,r2,1
    57ac:	1727c83a 	sub	r19,r2,fp
    57b0:	02000044 	movi	r8,1
    57b4:	003f9d06 	br	562c <_gp+0xfffebc4c>
    57b8:	80800517 	ldw	r2,20(r16)
    57bc:	81400417 	ldw	r5,16(r16)
    57c0:	81c00017 	ldw	r7,0(r16)
    57c4:	10a7883a 	add	r19,r2,r2
    57c8:	9885883a 	add	r2,r19,r2
    57cc:	1026d7fa 	srli	r19,r2,31
    57d0:	396dc83a 	sub	r22,r7,r5
    57d4:	b1000044 	addi	r4,r22,1
    57d8:	9885883a 	add	r2,r19,r2
    57dc:	1027d07a 	srai	r19,r2,1
    57e0:	2485883a 	add	r2,r4,r18
    57e4:	980d883a 	mov	r6,r19
    57e8:	9880022e 	bgeu	r19,r2,57f4 <__sfvwrite_r+0x3ec>
    57ec:	1027883a 	mov	r19,r2
    57f0:	100d883a 	mov	r6,r2
    57f4:	18c1000c 	andi	r3,r3,1024
    57f8:	18001c26 	beq	r3,zero,586c <__sfvwrite_r+0x464>
    57fc:	300b883a 	mov	r5,r6
    5800:	a809883a 	mov	r4,r21
    5804:	0005ce40 	call	5ce4 <_malloc_r>
    5808:	102f883a 	mov	r23,r2
    580c:	10002926 	beq	r2,zero,58b4 <__sfvwrite_r+0x4ac>
    5810:	81400417 	ldw	r5,16(r16)
    5814:	b00d883a 	mov	r6,r22
    5818:	1009883a 	mov	r4,r2
    581c:	00009a00 	call	9a0 <memcpy>
    5820:	8080030b 	ldhu	r2,12(r16)
    5824:	00fedfc4 	movi	r3,-1153
    5828:	10c4703a 	and	r2,r2,r3
    582c:	10802014 	ori	r2,r2,128
    5830:	8080030d 	sth	r2,12(r16)
    5834:	bd89883a 	add	r4,r23,r22
    5838:	9d8fc83a 	sub	r7,r19,r22
    583c:	85c00415 	stw	r23,16(r16)
    5840:	84c00515 	stw	r19,20(r16)
    5844:	81000015 	stw	r4,0(r16)
    5848:	9027883a 	mov	r19,r18
    584c:	81c00215 	stw	r7,8(r16)
    5850:	902f883a 	mov	r23,r18
    5854:	003f3b06 	br	5544 <_gp+0xfffebb64>
    5858:	800b883a 	mov	r5,r16
    585c:	a809883a 	mov	r4,r21
    5860:	0004ba80 	call	4ba8 <_fflush_r>
    5864:	103fb926 	beq	r2,zero,574c <_gp+0xfffebd6c>
    5868:	003f6506 	br	5600 <_gp+0xfffebc20>
    586c:	a809883a 	mov	r4,r21
    5870:	00079bc0 	call	79bc <_realloc_r>
    5874:	102f883a 	mov	r23,r2
    5878:	103fee1e 	bne	r2,zero,5834 <_gp+0xfffebe54>
    587c:	81400417 	ldw	r5,16(r16)
    5880:	a809883a 	mov	r4,r21
    5884:	00050f80 	call	50f8 <_free_r>
    5888:	8080030b 	ldhu	r2,12(r16)
    588c:	00ffdfc4 	movi	r3,-129
    5890:	1884703a 	and	r2,r3,r2
    5894:	00c00304 	movi	r3,12
    5898:	a8c00015 	stw	r3,0(r21)
    589c:	003f5906 	br	5604 <_gp+0xfffebc24>
    58a0:	94c00044 	addi	r19,r18,1
    58a4:	02000044 	movi	r8,1
    58a8:	003f6006 	br	562c <_gp+0xfffebc4c>
    58ac:	00bfffc4 	movi	r2,-1
    58b0:	003f0306 	br	54c0 <_gp+0xfffebae0>
    58b4:	00800304 	movi	r2,12
    58b8:	a8800015 	stw	r2,0(r21)
    58bc:	8080030b 	ldhu	r2,12(r16)
    58c0:	003f5006 	br	5604 <_gp+0xfffebc24>

000058c4 <_fwalk>:
    58c4:	defff704 	addi	sp,sp,-36
    58c8:	dd000415 	stw	r20,16(sp)
    58cc:	dfc00815 	stw	ra,32(sp)
    58d0:	ddc00715 	stw	r23,28(sp)
    58d4:	dd800615 	stw	r22,24(sp)
    58d8:	dd400515 	stw	r21,20(sp)
    58dc:	dcc00315 	stw	r19,12(sp)
    58e0:	dc800215 	stw	r18,8(sp)
    58e4:	dc400115 	stw	r17,4(sp)
    58e8:	dc000015 	stw	r16,0(sp)
    58ec:	2500b804 	addi	r20,r4,736
    58f0:	a0002326 	beq	r20,zero,5980 <_fwalk+0xbc>
    58f4:	282b883a 	mov	r21,r5
    58f8:	002f883a 	mov	r23,zero
    58fc:	05800044 	movi	r22,1
    5900:	04ffffc4 	movi	r19,-1
    5904:	a4400117 	ldw	r17,4(r20)
    5908:	a4800217 	ldw	r18,8(r20)
    590c:	8c7fffc4 	addi	r17,r17,-1
    5910:	88000d16 	blt	r17,zero,5948 <_fwalk+0x84>
    5914:	94000304 	addi	r16,r18,12
    5918:	94800384 	addi	r18,r18,14
    591c:	8080000b 	ldhu	r2,0(r16)
    5920:	8c7fffc4 	addi	r17,r17,-1
    5924:	813ffd04 	addi	r4,r16,-12
    5928:	b080042e 	bgeu	r22,r2,593c <_fwalk+0x78>
    592c:	9080000f 	ldh	r2,0(r18)
    5930:	14c00226 	beq	r2,r19,593c <_fwalk+0x78>
    5934:	a83ee83a 	callr	r21
    5938:	b8aeb03a 	or	r23,r23,r2
    593c:	84001a04 	addi	r16,r16,104
    5940:	94801a04 	addi	r18,r18,104
    5944:	8cfff51e 	bne	r17,r19,591c <_gp+0xfffebf3c>
    5948:	a5000017 	ldw	r20,0(r20)
    594c:	a03fed1e 	bne	r20,zero,5904 <_gp+0xfffebf24>
    5950:	b805883a 	mov	r2,r23
    5954:	dfc00817 	ldw	ra,32(sp)
    5958:	ddc00717 	ldw	r23,28(sp)
    595c:	dd800617 	ldw	r22,24(sp)
    5960:	dd400517 	ldw	r21,20(sp)
    5964:	dd000417 	ldw	r20,16(sp)
    5968:	dcc00317 	ldw	r19,12(sp)
    596c:	dc800217 	ldw	r18,8(sp)
    5970:	dc400117 	ldw	r17,4(sp)
    5974:	dc000017 	ldw	r16,0(sp)
    5978:	dec00904 	addi	sp,sp,36
    597c:	f800283a 	ret
    5980:	002f883a 	mov	r23,zero
    5984:	003ff206 	br	5950 <_gp+0xfffebf70>

00005988 <_fwalk_reent>:
    5988:	defff704 	addi	sp,sp,-36
    598c:	dd000415 	stw	r20,16(sp)
    5990:	dfc00815 	stw	ra,32(sp)
    5994:	ddc00715 	stw	r23,28(sp)
    5998:	dd800615 	stw	r22,24(sp)
    599c:	dd400515 	stw	r21,20(sp)
    59a0:	dcc00315 	stw	r19,12(sp)
    59a4:	dc800215 	stw	r18,8(sp)
    59a8:	dc400115 	stw	r17,4(sp)
    59ac:	dc000015 	stw	r16,0(sp)
    59b0:	2500b804 	addi	r20,r4,736
    59b4:	a0002326 	beq	r20,zero,5a44 <_fwalk_reent+0xbc>
    59b8:	282b883a 	mov	r21,r5
    59bc:	2027883a 	mov	r19,r4
    59c0:	002f883a 	mov	r23,zero
    59c4:	05800044 	movi	r22,1
    59c8:	04bfffc4 	movi	r18,-1
    59cc:	a4400117 	ldw	r17,4(r20)
    59d0:	a4000217 	ldw	r16,8(r20)
    59d4:	8c7fffc4 	addi	r17,r17,-1
    59d8:	88000c16 	blt	r17,zero,5a0c <_fwalk_reent+0x84>
    59dc:	84000304 	addi	r16,r16,12
    59e0:	8080000b 	ldhu	r2,0(r16)
    59e4:	8c7fffc4 	addi	r17,r17,-1
    59e8:	817ffd04 	addi	r5,r16,-12
    59ec:	b080052e 	bgeu	r22,r2,5a04 <_fwalk_reent+0x7c>
    59f0:	8080008f 	ldh	r2,2(r16)
    59f4:	9809883a 	mov	r4,r19
    59f8:	14800226 	beq	r2,r18,5a04 <_fwalk_reent+0x7c>
    59fc:	a83ee83a 	callr	r21
    5a00:	b8aeb03a 	or	r23,r23,r2
    5a04:	84001a04 	addi	r16,r16,104
    5a08:	8cbff51e 	bne	r17,r18,59e0 <_gp+0xfffec000>
    5a0c:	a5000017 	ldw	r20,0(r20)
    5a10:	a03fee1e 	bne	r20,zero,59cc <_gp+0xfffebfec>
    5a14:	b805883a 	mov	r2,r23
    5a18:	dfc00817 	ldw	ra,32(sp)
    5a1c:	ddc00717 	ldw	r23,28(sp)
    5a20:	dd800617 	ldw	r22,24(sp)
    5a24:	dd400517 	ldw	r21,20(sp)
    5a28:	dd000417 	ldw	r20,16(sp)
    5a2c:	dcc00317 	ldw	r19,12(sp)
    5a30:	dc800217 	ldw	r18,8(sp)
    5a34:	dc400117 	ldw	r17,4(sp)
    5a38:	dc000017 	ldw	r16,0(sp)
    5a3c:	dec00904 	addi	sp,sp,36
    5a40:	f800283a 	ret
    5a44:	002f883a 	mov	r23,zero
    5a48:	003ff206 	br	5a14 <_gp+0xfffec034>

00005a4c <_setlocale_r>:
    5a4c:	30001b26 	beq	r6,zero,5abc <_setlocale_r+0x70>
    5a50:	01400074 	movhi	r5,1
    5a54:	defffe04 	addi	sp,sp,-8
    5a58:	297f2e04 	addi	r5,r5,-840
    5a5c:	3009883a 	mov	r4,r6
    5a60:	dc000015 	stw	r16,0(sp)
    5a64:	dfc00115 	stw	ra,4(sp)
    5a68:	3021883a 	mov	r16,r6
    5a6c:	00081240 	call	8124 <strcmp>
    5a70:	1000061e 	bne	r2,zero,5a8c <_setlocale_r+0x40>
    5a74:	00800074 	movhi	r2,1
    5a78:	10bf2d04 	addi	r2,r2,-844
    5a7c:	dfc00117 	ldw	ra,4(sp)
    5a80:	dc000017 	ldw	r16,0(sp)
    5a84:	dec00204 	addi	sp,sp,8
    5a88:	f800283a 	ret
    5a8c:	01400074 	movhi	r5,1
    5a90:	297f2d04 	addi	r5,r5,-844
    5a94:	8009883a 	mov	r4,r16
    5a98:	00081240 	call	8124 <strcmp>
    5a9c:	103ff526 	beq	r2,zero,5a74 <_gp+0xfffec094>
    5aa0:	01400074 	movhi	r5,1
    5aa4:	297f1804 	addi	r5,r5,-928
    5aa8:	8009883a 	mov	r4,r16
    5aac:	00081240 	call	8124 <strcmp>
    5ab0:	103ff026 	beq	r2,zero,5a74 <_gp+0xfffec094>
    5ab4:	0005883a 	mov	r2,zero
    5ab8:	003ff006 	br	5a7c <_gp+0xfffec09c>
    5abc:	00800074 	movhi	r2,1
    5ac0:	10bf2d04 	addi	r2,r2,-844
    5ac4:	f800283a 	ret

00005ac8 <__locale_charset>:
    5ac8:	00800074 	movhi	r2,1
    5acc:	1080de04 	addi	r2,r2,888
    5ad0:	f800283a 	ret

00005ad4 <__locale_mb_cur_max>:
    5ad4:	00800074 	movhi	r2,1
    5ad8:	10867a04 	addi	r2,r2,6632
    5adc:	10800017 	ldw	r2,0(r2)
    5ae0:	f800283a 	ret

00005ae4 <__locale_msgcharset>:
    5ae4:	00800074 	movhi	r2,1
    5ae8:	1080d604 	addi	r2,r2,856
    5aec:	f800283a 	ret

00005af0 <__locale_cjk_lang>:
    5af0:	0005883a 	mov	r2,zero
    5af4:	f800283a 	ret

00005af8 <_localeconv_r>:
    5af8:	00800074 	movhi	r2,1
    5afc:	1080e604 	addi	r2,r2,920
    5b00:	f800283a 	ret

00005b04 <setlocale>:
    5b04:	00800074 	movhi	r2,1
    5b08:	10867904 	addi	r2,r2,6628
    5b0c:	280d883a 	mov	r6,r5
    5b10:	200b883a 	mov	r5,r4
    5b14:	11000017 	ldw	r4,0(r2)
    5b18:	0005a4c1 	jmpi	5a4c <_setlocale_r>

00005b1c <localeconv>:
    5b1c:	00800074 	movhi	r2,1
    5b20:	1080e604 	addi	r2,r2,920
    5b24:	f800283a 	ret

00005b28 <__smakebuf_r>:
    5b28:	2880030b 	ldhu	r2,12(r5)
    5b2c:	10c0008c 	andi	r3,r2,2
    5b30:	1800411e 	bne	r3,zero,5c38 <__smakebuf_r+0x110>
    5b34:	deffec04 	addi	sp,sp,-80
    5b38:	dc000f15 	stw	r16,60(sp)
    5b3c:	2821883a 	mov	r16,r5
    5b40:	2940038f 	ldh	r5,14(r5)
    5b44:	dc401015 	stw	r17,64(sp)
    5b48:	dfc01315 	stw	ra,76(sp)
    5b4c:	dcc01215 	stw	r19,72(sp)
    5b50:	dc801115 	stw	r18,68(sp)
    5b54:	2023883a 	mov	r17,r4
    5b58:	28001c16 	blt	r5,zero,5bcc <__smakebuf_r+0xa4>
    5b5c:	d80d883a 	mov	r6,sp
    5b60:	0009e240 	call	9e24 <_fstat_r>
    5b64:	10001816 	blt	r2,zero,5bc8 <__smakebuf_r+0xa0>
    5b68:	d8800117 	ldw	r2,4(sp)
    5b6c:	00e00014 	movui	r3,32768
    5b70:	10bc000c 	andi	r2,r2,61440
    5b74:	14c80020 	cmpeqi	r19,r2,8192
    5b78:	10c03726 	beq	r2,r3,5c58 <__smakebuf_r+0x130>
    5b7c:	80c0030b 	ldhu	r3,12(r16)
    5b80:	18c20014 	ori	r3,r3,2048
    5b84:	80c0030d 	sth	r3,12(r16)
    5b88:	00c80004 	movi	r3,8192
    5b8c:	10c0521e 	bne	r2,r3,5cd8 <__smakebuf_r+0x1b0>
    5b90:	8140038f 	ldh	r5,14(r16)
    5b94:	8809883a 	mov	r4,r17
    5b98:	0009e800 	call	9e80 <_isatty_r>
    5b9c:	10004c26 	beq	r2,zero,5cd0 <__smakebuf_r+0x1a8>
    5ba0:	8080030b 	ldhu	r2,12(r16)
    5ba4:	80c010c4 	addi	r3,r16,67
    5ba8:	80c00015 	stw	r3,0(r16)
    5bac:	10800054 	ori	r2,r2,1
    5bb0:	8080030d 	sth	r2,12(r16)
    5bb4:	00800044 	movi	r2,1
    5bb8:	80c00415 	stw	r3,16(r16)
    5bbc:	80800515 	stw	r2,20(r16)
    5bc0:	04810004 	movi	r18,1024
    5bc4:	00000706 	br	5be4 <__smakebuf_r+0xbc>
    5bc8:	8080030b 	ldhu	r2,12(r16)
    5bcc:	10c0200c 	andi	r3,r2,128
    5bd0:	18001f1e 	bne	r3,zero,5c50 <__smakebuf_r+0x128>
    5bd4:	04810004 	movi	r18,1024
    5bd8:	10820014 	ori	r2,r2,2048
    5bdc:	8080030d 	sth	r2,12(r16)
    5be0:	0027883a 	mov	r19,zero
    5be4:	900b883a 	mov	r5,r18
    5be8:	8809883a 	mov	r4,r17
    5bec:	0005ce40 	call	5ce4 <_malloc_r>
    5bf0:	10002c26 	beq	r2,zero,5ca4 <__smakebuf_r+0x17c>
    5bf4:	80c0030b 	ldhu	r3,12(r16)
    5bf8:	01000034 	movhi	r4,0
    5bfc:	21130f04 	addi	r4,r4,19516
    5c00:	89000f15 	stw	r4,60(r17)
    5c04:	18c02014 	ori	r3,r3,128
    5c08:	80c0030d 	sth	r3,12(r16)
    5c0c:	80800015 	stw	r2,0(r16)
    5c10:	80800415 	stw	r2,16(r16)
    5c14:	84800515 	stw	r18,20(r16)
    5c18:	98001a1e 	bne	r19,zero,5c84 <__smakebuf_r+0x15c>
    5c1c:	dfc01317 	ldw	ra,76(sp)
    5c20:	dcc01217 	ldw	r19,72(sp)
    5c24:	dc801117 	ldw	r18,68(sp)
    5c28:	dc401017 	ldw	r17,64(sp)
    5c2c:	dc000f17 	ldw	r16,60(sp)
    5c30:	dec01404 	addi	sp,sp,80
    5c34:	f800283a 	ret
    5c38:	288010c4 	addi	r2,r5,67
    5c3c:	28800015 	stw	r2,0(r5)
    5c40:	28800415 	stw	r2,16(r5)
    5c44:	00800044 	movi	r2,1
    5c48:	28800515 	stw	r2,20(r5)
    5c4c:	f800283a 	ret
    5c50:	04801004 	movi	r18,64
    5c54:	003fe006 	br	5bd8 <_gp+0xfffec1f8>
    5c58:	81000a17 	ldw	r4,40(r16)
    5c5c:	00c00074 	movhi	r3,1
    5c60:	18e03004 	addi	r3,r3,-32576
    5c64:	20ffc51e 	bne	r4,r3,5b7c <_gp+0xfffec19c>
    5c68:	8080030b 	ldhu	r2,12(r16)
    5c6c:	04810004 	movi	r18,1024
    5c70:	84801315 	stw	r18,76(r16)
    5c74:	1484b03a 	or	r2,r2,r18
    5c78:	8080030d 	sth	r2,12(r16)
    5c7c:	0027883a 	mov	r19,zero
    5c80:	003fd806 	br	5be4 <_gp+0xfffec204>
    5c84:	8140038f 	ldh	r5,14(r16)
    5c88:	8809883a 	mov	r4,r17
    5c8c:	0009e800 	call	9e80 <_isatty_r>
    5c90:	103fe226 	beq	r2,zero,5c1c <_gp+0xfffec23c>
    5c94:	8080030b 	ldhu	r2,12(r16)
    5c98:	10800054 	ori	r2,r2,1
    5c9c:	8080030d 	sth	r2,12(r16)
    5ca0:	003fde06 	br	5c1c <_gp+0xfffec23c>
    5ca4:	8080030b 	ldhu	r2,12(r16)
    5ca8:	10c0800c 	andi	r3,r2,512
    5cac:	183fdb1e 	bne	r3,zero,5c1c <_gp+0xfffec23c>
    5cb0:	10800094 	ori	r2,r2,2
    5cb4:	80c010c4 	addi	r3,r16,67
    5cb8:	8080030d 	sth	r2,12(r16)
    5cbc:	00800044 	movi	r2,1
    5cc0:	80c00015 	stw	r3,0(r16)
    5cc4:	80c00415 	stw	r3,16(r16)
    5cc8:	80800515 	stw	r2,20(r16)
    5ccc:	003fd306 	br	5c1c <_gp+0xfffec23c>
    5cd0:	04810004 	movi	r18,1024
    5cd4:	003fc306 	br	5be4 <_gp+0xfffec204>
    5cd8:	0027883a 	mov	r19,zero
    5cdc:	04810004 	movi	r18,1024
    5ce0:	003fc006 	br	5be4 <_gp+0xfffec204>

00005ce4 <_malloc_r>:
    5ce4:	defff504 	addi	sp,sp,-44
    5ce8:	dc800315 	stw	r18,12(sp)
    5cec:	dfc00a15 	stw	ra,40(sp)
    5cf0:	df000915 	stw	fp,36(sp)
    5cf4:	ddc00815 	stw	r23,32(sp)
    5cf8:	dd800715 	stw	r22,28(sp)
    5cfc:	dd400615 	stw	r21,24(sp)
    5d00:	dd000515 	stw	r20,20(sp)
    5d04:	dcc00415 	stw	r19,16(sp)
    5d08:	dc400215 	stw	r17,8(sp)
    5d0c:	dc000115 	stw	r16,4(sp)
    5d10:	288002c4 	addi	r2,r5,11
    5d14:	00c00584 	movi	r3,22
    5d18:	2025883a 	mov	r18,r4
    5d1c:	18807f2e 	bgeu	r3,r2,5f1c <_malloc_r+0x238>
    5d20:	047ffe04 	movi	r17,-8
    5d24:	1462703a 	and	r17,r2,r17
    5d28:	8800a316 	blt	r17,zero,5fb8 <_malloc_r+0x2d4>
    5d2c:	8940a236 	bltu	r17,r5,5fb8 <_malloc_r+0x2d4>
    5d30:	000d8a80 	call	d8a8 <__malloc_lock>
    5d34:	00807dc4 	movi	r2,503
    5d38:	1441e92e 	bgeu	r2,r17,64e0 <_malloc_r+0x7fc>
    5d3c:	8804d27a 	srli	r2,r17,9
    5d40:	1000a126 	beq	r2,zero,5fc8 <_malloc_r+0x2e4>
    5d44:	00c00104 	movi	r3,4
    5d48:	18811e36 	bltu	r3,r2,61c4 <_malloc_r+0x4e0>
    5d4c:	8804d1ba 	srli	r2,r17,6
    5d50:	12000e44 	addi	r8,r2,57
    5d54:	11c00e04 	addi	r7,r2,56
    5d58:	4209883a 	add	r4,r8,r8
    5d5c:	04c00074 	movhi	r19,1
    5d60:	2109883a 	add	r4,r4,r4
    5d64:	9cc0f404 	addi	r19,r19,976
    5d68:	2109883a 	add	r4,r4,r4
    5d6c:	9909883a 	add	r4,r19,r4
    5d70:	24000117 	ldw	r16,4(r4)
    5d74:	213ffe04 	addi	r4,r4,-8
    5d78:	24009726 	beq	r4,r16,5fd8 <_malloc_r+0x2f4>
    5d7c:	80800117 	ldw	r2,4(r16)
    5d80:	01bfff04 	movi	r6,-4
    5d84:	014003c4 	movi	r5,15
    5d88:	1184703a 	and	r2,r2,r6
    5d8c:	1447c83a 	sub	r3,r2,r17
    5d90:	28c00716 	blt	r5,r3,5db0 <_malloc_r+0xcc>
    5d94:	1800920e 	bge	r3,zero,5fe0 <_malloc_r+0x2fc>
    5d98:	84000317 	ldw	r16,12(r16)
    5d9c:	24008e26 	beq	r4,r16,5fd8 <_malloc_r+0x2f4>
    5da0:	80800117 	ldw	r2,4(r16)
    5da4:	1184703a 	and	r2,r2,r6
    5da8:	1447c83a 	sub	r3,r2,r17
    5dac:	28fff90e 	bge	r5,r3,5d94 <_gp+0xfffec3b4>
    5db0:	3809883a 	mov	r4,r7
    5db4:	01800074 	movhi	r6,1
    5db8:	9c000417 	ldw	r16,16(r19)
    5dbc:	3180f404 	addi	r6,r6,976
    5dc0:	32000204 	addi	r8,r6,8
    5dc4:	82013426 	beq	r16,r8,6298 <_malloc_r+0x5b4>
    5dc8:	80c00117 	ldw	r3,4(r16)
    5dcc:	00bfff04 	movi	r2,-4
    5dd0:	188e703a 	and	r7,r3,r2
    5dd4:	3c45c83a 	sub	r2,r7,r17
    5dd8:	00c003c4 	movi	r3,15
    5ddc:	18811f16 	blt	r3,r2,625c <_malloc_r+0x578>
    5de0:	32000515 	stw	r8,20(r6)
    5de4:	32000415 	stw	r8,16(r6)
    5de8:	10007f0e 	bge	r2,zero,5fe8 <_malloc_r+0x304>
    5dec:	00807fc4 	movi	r2,511
    5df0:	11c0fd36 	bltu	r2,r7,61e8 <_malloc_r+0x504>
    5df4:	3806d0fa 	srli	r3,r7,3
    5df8:	01c00044 	movi	r7,1
    5dfc:	30800117 	ldw	r2,4(r6)
    5e00:	19400044 	addi	r5,r3,1
    5e04:	294b883a 	add	r5,r5,r5
    5e08:	1807d0ba 	srai	r3,r3,2
    5e0c:	294b883a 	add	r5,r5,r5
    5e10:	294b883a 	add	r5,r5,r5
    5e14:	298b883a 	add	r5,r5,r6
    5e18:	38c6983a 	sll	r3,r7,r3
    5e1c:	29c00017 	ldw	r7,0(r5)
    5e20:	2a7ffe04 	addi	r9,r5,-8
    5e24:	1886b03a 	or	r3,r3,r2
    5e28:	82400315 	stw	r9,12(r16)
    5e2c:	81c00215 	stw	r7,8(r16)
    5e30:	30c00115 	stw	r3,4(r6)
    5e34:	2c000015 	stw	r16,0(r5)
    5e38:	3c000315 	stw	r16,12(r7)
    5e3c:	2005d0ba 	srai	r2,r4,2
    5e40:	01400044 	movi	r5,1
    5e44:	288a983a 	sll	r5,r5,r2
    5e48:	19406f36 	bltu	r3,r5,6008 <_malloc_r+0x324>
    5e4c:	28c4703a 	and	r2,r5,r3
    5e50:	10000a1e 	bne	r2,zero,5e7c <_malloc_r+0x198>
    5e54:	00bfff04 	movi	r2,-4
    5e58:	294b883a 	add	r5,r5,r5
    5e5c:	2088703a 	and	r4,r4,r2
    5e60:	28c4703a 	and	r2,r5,r3
    5e64:	21000104 	addi	r4,r4,4
    5e68:	1000041e 	bne	r2,zero,5e7c <_malloc_r+0x198>
    5e6c:	294b883a 	add	r5,r5,r5
    5e70:	28c4703a 	and	r2,r5,r3
    5e74:	21000104 	addi	r4,r4,4
    5e78:	103ffc26 	beq	r2,zero,5e6c <_gp+0xfffec48c>
    5e7c:	02bfff04 	movi	r10,-4
    5e80:	024003c4 	movi	r9,15
    5e84:	21800044 	addi	r6,r4,1
    5e88:	318d883a 	add	r6,r6,r6
    5e8c:	318d883a 	add	r6,r6,r6
    5e90:	318d883a 	add	r6,r6,r6
    5e94:	998d883a 	add	r6,r19,r6
    5e98:	333ffe04 	addi	r12,r6,-8
    5e9c:	2017883a 	mov	r11,r4
    5ea0:	31800104 	addi	r6,r6,4
    5ea4:	34000017 	ldw	r16,0(r6)
    5ea8:	31fffd04 	addi	r7,r6,-12
    5eac:	81c0041e 	bne	r16,r7,5ec0 <_malloc_r+0x1dc>
    5eb0:	0000fb06 	br	62a0 <_malloc_r+0x5bc>
    5eb4:	1801030e 	bge	r3,zero,62c4 <_malloc_r+0x5e0>
    5eb8:	84000317 	ldw	r16,12(r16)
    5ebc:	81c0f826 	beq	r16,r7,62a0 <_malloc_r+0x5bc>
    5ec0:	80800117 	ldw	r2,4(r16)
    5ec4:	1284703a 	and	r2,r2,r10
    5ec8:	1447c83a 	sub	r3,r2,r17
    5ecc:	48fff90e 	bge	r9,r3,5eb4 <_gp+0xfffec4d4>
    5ed0:	80800317 	ldw	r2,12(r16)
    5ed4:	81000217 	ldw	r4,8(r16)
    5ed8:	89400054 	ori	r5,r17,1
    5edc:	81400115 	stw	r5,4(r16)
    5ee0:	20800315 	stw	r2,12(r4)
    5ee4:	11000215 	stw	r4,8(r2)
    5ee8:	8463883a 	add	r17,r16,r17
    5eec:	9c400515 	stw	r17,20(r19)
    5ef0:	9c400415 	stw	r17,16(r19)
    5ef4:	18800054 	ori	r2,r3,1
    5ef8:	88800115 	stw	r2,4(r17)
    5efc:	8a000315 	stw	r8,12(r17)
    5f00:	8a000215 	stw	r8,8(r17)
    5f04:	88e3883a 	add	r17,r17,r3
    5f08:	88c00015 	stw	r3,0(r17)
    5f0c:	9009883a 	mov	r4,r18
    5f10:	000d8cc0 	call	d8cc <__malloc_unlock>
    5f14:	80800204 	addi	r2,r16,8
    5f18:	00001b06 	br	5f88 <_malloc_r+0x2a4>
    5f1c:	04400404 	movi	r17,16
    5f20:	89402536 	bltu	r17,r5,5fb8 <_malloc_r+0x2d4>
    5f24:	000d8a80 	call	d8a8 <__malloc_lock>
    5f28:	00800184 	movi	r2,6
    5f2c:	01000084 	movi	r4,2
    5f30:	04c00074 	movhi	r19,1
    5f34:	1085883a 	add	r2,r2,r2
    5f38:	9cc0f404 	addi	r19,r19,976
    5f3c:	1085883a 	add	r2,r2,r2
    5f40:	9885883a 	add	r2,r19,r2
    5f44:	14000117 	ldw	r16,4(r2)
    5f48:	10fffe04 	addi	r3,r2,-8
    5f4c:	80c0d926 	beq	r16,r3,62b4 <_malloc_r+0x5d0>
    5f50:	80c00117 	ldw	r3,4(r16)
    5f54:	81000317 	ldw	r4,12(r16)
    5f58:	00bfff04 	movi	r2,-4
    5f5c:	1884703a 	and	r2,r3,r2
    5f60:	81400217 	ldw	r5,8(r16)
    5f64:	8085883a 	add	r2,r16,r2
    5f68:	10c00117 	ldw	r3,4(r2)
    5f6c:	29000315 	stw	r4,12(r5)
    5f70:	21400215 	stw	r5,8(r4)
    5f74:	18c00054 	ori	r3,r3,1
    5f78:	10c00115 	stw	r3,4(r2)
    5f7c:	9009883a 	mov	r4,r18
    5f80:	000d8cc0 	call	d8cc <__malloc_unlock>
    5f84:	80800204 	addi	r2,r16,8
    5f88:	dfc00a17 	ldw	ra,40(sp)
    5f8c:	df000917 	ldw	fp,36(sp)
    5f90:	ddc00817 	ldw	r23,32(sp)
    5f94:	dd800717 	ldw	r22,28(sp)
    5f98:	dd400617 	ldw	r21,24(sp)
    5f9c:	dd000517 	ldw	r20,20(sp)
    5fa0:	dcc00417 	ldw	r19,16(sp)
    5fa4:	dc800317 	ldw	r18,12(sp)
    5fa8:	dc400217 	ldw	r17,8(sp)
    5fac:	dc000117 	ldw	r16,4(sp)
    5fb0:	dec00b04 	addi	sp,sp,44
    5fb4:	f800283a 	ret
    5fb8:	00800304 	movi	r2,12
    5fbc:	90800015 	stw	r2,0(r18)
    5fc0:	0005883a 	mov	r2,zero
    5fc4:	003ff006 	br	5f88 <_gp+0xfffec5a8>
    5fc8:	01002004 	movi	r4,128
    5fcc:	02001004 	movi	r8,64
    5fd0:	01c00fc4 	movi	r7,63
    5fd4:	003f6106 	br	5d5c <_gp+0xfffec37c>
    5fd8:	4009883a 	mov	r4,r8
    5fdc:	003f7506 	br	5db4 <_gp+0xfffec3d4>
    5fe0:	81000317 	ldw	r4,12(r16)
    5fe4:	003fde06 	br	5f60 <_gp+0xfffec580>
    5fe8:	81c5883a 	add	r2,r16,r7
    5fec:	11400117 	ldw	r5,4(r2)
    5ff0:	9009883a 	mov	r4,r18
    5ff4:	29400054 	ori	r5,r5,1
    5ff8:	11400115 	stw	r5,4(r2)
    5ffc:	000d8cc0 	call	d8cc <__malloc_unlock>
    6000:	80800204 	addi	r2,r16,8
    6004:	003fe006 	br	5f88 <_gp+0xfffec5a8>
    6008:	9c000217 	ldw	r16,8(r19)
    600c:	00bfff04 	movi	r2,-4
    6010:	85800117 	ldw	r22,4(r16)
    6014:	b0ac703a 	and	r22,r22,r2
    6018:	b4400336 	bltu	r22,r17,6028 <_malloc_r+0x344>
    601c:	b445c83a 	sub	r2,r22,r17
    6020:	00c003c4 	movi	r3,15
    6024:	18805d16 	blt	r3,r2,619c <_malloc_r+0x4b8>
    6028:	05c00074 	movhi	r23,1
    602c:	00800074 	movhi	r2,1
    6030:	108d4804 	addi	r2,r2,13600
    6034:	bdc67b04 	addi	r23,r23,6636
    6038:	15400017 	ldw	r21,0(r2)
    603c:	b8c00017 	ldw	r3,0(r23)
    6040:	00bfffc4 	movi	r2,-1
    6044:	858d883a 	add	r6,r16,r22
    6048:	8d6b883a 	add	r21,r17,r21
    604c:	1880ea26 	beq	r3,r2,63f8 <_malloc_r+0x714>
    6050:	ad4403c4 	addi	r21,r21,4111
    6054:	00bc0004 	movi	r2,-4096
    6058:	a8aa703a 	and	r21,r21,r2
    605c:	a80b883a 	mov	r5,r21
    6060:	9009883a 	mov	r4,r18
    6064:	d9800015 	stw	r6,0(sp)
    6068:	0007f940 	call	7f94 <_sbrk_r>
    606c:	1029883a 	mov	r20,r2
    6070:	00bfffc4 	movi	r2,-1
    6074:	d9800017 	ldw	r6,0(sp)
    6078:	a080e826 	beq	r20,r2,641c <_malloc_r+0x738>
    607c:	a180a636 	bltu	r20,r6,6318 <_malloc_r+0x634>
    6080:	07000074 	movhi	fp,1
    6084:	e70d5104 	addi	fp,fp,13636
    6088:	e0800017 	ldw	r2,0(fp)
    608c:	a887883a 	add	r3,r21,r2
    6090:	e0c00015 	stw	r3,0(fp)
    6094:	3500e626 	beq	r6,r20,6430 <_malloc_r+0x74c>
    6098:	b9000017 	ldw	r4,0(r23)
    609c:	00bfffc4 	movi	r2,-1
    60a0:	2080ee26 	beq	r4,r2,645c <_malloc_r+0x778>
    60a4:	a185c83a 	sub	r2,r20,r6
    60a8:	10c5883a 	add	r2,r2,r3
    60ac:	e0800015 	stw	r2,0(fp)
    60b0:	a0c001cc 	andi	r3,r20,7
    60b4:	1800bc26 	beq	r3,zero,63a8 <_malloc_r+0x6c4>
    60b8:	a0e9c83a 	sub	r20,r20,r3
    60bc:	00840204 	movi	r2,4104
    60c0:	a5000204 	addi	r20,r20,8
    60c4:	10c7c83a 	sub	r3,r2,r3
    60c8:	a545883a 	add	r2,r20,r21
    60cc:	1083ffcc 	andi	r2,r2,4095
    60d0:	18abc83a 	sub	r21,r3,r2
    60d4:	a80b883a 	mov	r5,r21
    60d8:	9009883a 	mov	r4,r18
    60dc:	0007f940 	call	7f94 <_sbrk_r>
    60e0:	00ffffc4 	movi	r3,-1
    60e4:	10c0e126 	beq	r2,r3,646c <_malloc_r+0x788>
    60e8:	1505c83a 	sub	r2,r2,r20
    60ec:	1545883a 	add	r2,r2,r21
    60f0:	10800054 	ori	r2,r2,1
    60f4:	e0c00017 	ldw	r3,0(fp)
    60f8:	9d000215 	stw	r20,8(r19)
    60fc:	a0800115 	stw	r2,4(r20)
    6100:	a8c7883a 	add	r3,r21,r3
    6104:	e0c00015 	stw	r3,0(fp)
    6108:	84c00e26 	beq	r16,r19,6144 <_malloc_r+0x460>
    610c:	018003c4 	movi	r6,15
    6110:	3580a72e 	bgeu	r6,r22,63b0 <_malloc_r+0x6cc>
    6114:	81400117 	ldw	r5,4(r16)
    6118:	013ffe04 	movi	r4,-8
    611c:	b0bffd04 	addi	r2,r22,-12
    6120:	1104703a 	and	r2,r2,r4
    6124:	2900004c 	andi	r4,r5,1
    6128:	2088b03a 	or	r4,r4,r2
    612c:	81000115 	stw	r4,4(r16)
    6130:	01400144 	movi	r5,5
    6134:	8089883a 	add	r4,r16,r2
    6138:	21400115 	stw	r5,4(r4)
    613c:	21400215 	stw	r5,8(r4)
    6140:	3080cd36 	bltu	r6,r2,6478 <_malloc_r+0x794>
    6144:	00800074 	movhi	r2,1
    6148:	108d4704 	addi	r2,r2,13596
    614c:	11000017 	ldw	r4,0(r2)
    6150:	20c0012e 	bgeu	r4,r3,6158 <_malloc_r+0x474>
    6154:	10c00015 	stw	r3,0(r2)
    6158:	00800074 	movhi	r2,1
    615c:	108d4604 	addi	r2,r2,13592
    6160:	11000017 	ldw	r4,0(r2)
    6164:	9c000217 	ldw	r16,8(r19)
    6168:	20c0012e 	bgeu	r4,r3,6170 <_malloc_r+0x48c>
    616c:	10c00015 	stw	r3,0(r2)
    6170:	80c00117 	ldw	r3,4(r16)
    6174:	00bfff04 	movi	r2,-4
    6178:	1886703a 	and	r3,r3,r2
    617c:	1c45c83a 	sub	r2,r3,r17
    6180:	1c400236 	bltu	r3,r17,618c <_malloc_r+0x4a8>
    6184:	00c003c4 	movi	r3,15
    6188:	18800416 	blt	r3,r2,619c <_malloc_r+0x4b8>
    618c:	9009883a 	mov	r4,r18
    6190:	000d8cc0 	call	d8cc <__malloc_unlock>
    6194:	0005883a 	mov	r2,zero
    6198:	003f7b06 	br	5f88 <_gp+0xfffec5a8>
    619c:	88c00054 	ori	r3,r17,1
    61a0:	80c00115 	stw	r3,4(r16)
    61a4:	8463883a 	add	r17,r16,r17
    61a8:	10800054 	ori	r2,r2,1
    61ac:	9c400215 	stw	r17,8(r19)
    61b0:	88800115 	stw	r2,4(r17)
    61b4:	9009883a 	mov	r4,r18
    61b8:	000d8cc0 	call	d8cc <__malloc_unlock>
    61bc:	80800204 	addi	r2,r16,8
    61c0:	003f7106 	br	5f88 <_gp+0xfffec5a8>
    61c4:	00c00504 	movi	r3,20
    61c8:	18804a2e 	bgeu	r3,r2,62f4 <_malloc_r+0x610>
    61cc:	00c01504 	movi	r3,84
    61d0:	18806e36 	bltu	r3,r2,638c <_malloc_r+0x6a8>
    61d4:	8804d33a 	srli	r2,r17,12
    61d8:	12001bc4 	addi	r8,r2,111
    61dc:	11c01b84 	addi	r7,r2,110
    61e0:	4209883a 	add	r4,r8,r8
    61e4:	003edd06 	br	5d5c <_gp+0xfffec37c>
    61e8:	3804d27a 	srli	r2,r7,9
    61ec:	00c00104 	movi	r3,4
    61f0:	1880442e 	bgeu	r3,r2,6304 <_malloc_r+0x620>
    61f4:	00c00504 	movi	r3,20
    61f8:	18808136 	bltu	r3,r2,6400 <_malloc_r+0x71c>
    61fc:	11401704 	addi	r5,r2,92
    6200:	10c016c4 	addi	r3,r2,91
    6204:	294b883a 	add	r5,r5,r5
    6208:	294b883a 	add	r5,r5,r5
    620c:	294b883a 	add	r5,r5,r5
    6210:	994b883a 	add	r5,r19,r5
    6214:	28800017 	ldw	r2,0(r5)
    6218:	01800074 	movhi	r6,1
    621c:	297ffe04 	addi	r5,r5,-8
    6220:	3180f404 	addi	r6,r6,976
    6224:	28806526 	beq	r5,r2,63bc <_malloc_r+0x6d8>
    6228:	01bfff04 	movi	r6,-4
    622c:	10c00117 	ldw	r3,4(r2)
    6230:	1986703a 	and	r3,r3,r6
    6234:	38c0022e 	bgeu	r7,r3,6240 <_malloc_r+0x55c>
    6238:	10800217 	ldw	r2,8(r2)
    623c:	28bffb1e 	bne	r5,r2,622c <_gp+0xfffec84c>
    6240:	11400317 	ldw	r5,12(r2)
    6244:	98c00117 	ldw	r3,4(r19)
    6248:	81400315 	stw	r5,12(r16)
    624c:	80800215 	stw	r2,8(r16)
    6250:	2c000215 	stw	r16,8(r5)
    6254:	14000315 	stw	r16,12(r2)
    6258:	003ef806 	br	5e3c <_gp+0xfffec45c>
    625c:	88c00054 	ori	r3,r17,1
    6260:	80c00115 	stw	r3,4(r16)
    6264:	8463883a 	add	r17,r16,r17
    6268:	34400515 	stw	r17,20(r6)
    626c:	34400415 	stw	r17,16(r6)
    6270:	10c00054 	ori	r3,r2,1
    6274:	8a000315 	stw	r8,12(r17)
    6278:	8a000215 	stw	r8,8(r17)
    627c:	88c00115 	stw	r3,4(r17)
    6280:	88a3883a 	add	r17,r17,r2
    6284:	88800015 	stw	r2,0(r17)
    6288:	9009883a 	mov	r4,r18
    628c:	000d8cc0 	call	d8cc <__malloc_unlock>
    6290:	80800204 	addi	r2,r16,8
    6294:	003f3c06 	br	5f88 <_gp+0xfffec5a8>
    6298:	30c00117 	ldw	r3,4(r6)
    629c:	003ee706 	br	5e3c <_gp+0xfffec45c>
    62a0:	5ac00044 	addi	r11,r11,1
    62a4:	588000cc 	andi	r2,r11,3
    62a8:	31800204 	addi	r6,r6,8
    62ac:	103efd1e 	bne	r2,zero,5ea4 <_gp+0xfffec4c4>
    62b0:	00002406 	br	6344 <_malloc_r+0x660>
    62b4:	14000317 	ldw	r16,12(r2)
    62b8:	143f251e 	bne	r2,r16,5f50 <_gp+0xfffec570>
    62bc:	21000084 	addi	r4,r4,2
    62c0:	003ebc06 	br	5db4 <_gp+0xfffec3d4>
    62c4:	8085883a 	add	r2,r16,r2
    62c8:	10c00117 	ldw	r3,4(r2)
    62cc:	81000317 	ldw	r4,12(r16)
    62d0:	81400217 	ldw	r5,8(r16)
    62d4:	18c00054 	ori	r3,r3,1
    62d8:	10c00115 	stw	r3,4(r2)
    62dc:	29000315 	stw	r4,12(r5)
    62e0:	21400215 	stw	r5,8(r4)
    62e4:	9009883a 	mov	r4,r18
    62e8:	000d8cc0 	call	d8cc <__malloc_unlock>
    62ec:	80800204 	addi	r2,r16,8
    62f0:	003f2506 	br	5f88 <_gp+0xfffec5a8>
    62f4:	12001704 	addi	r8,r2,92
    62f8:	11c016c4 	addi	r7,r2,91
    62fc:	4209883a 	add	r4,r8,r8
    6300:	003e9606 	br	5d5c <_gp+0xfffec37c>
    6304:	3804d1ba 	srli	r2,r7,6
    6308:	11400e44 	addi	r5,r2,57
    630c:	10c00e04 	addi	r3,r2,56
    6310:	294b883a 	add	r5,r5,r5
    6314:	003fbc06 	br	6208 <_gp+0xfffec828>
    6318:	84ff5926 	beq	r16,r19,6080 <_gp+0xfffec6a0>
    631c:	00800074 	movhi	r2,1
    6320:	1080f404 	addi	r2,r2,976
    6324:	14000217 	ldw	r16,8(r2)
    6328:	00bfff04 	movi	r2,-4
    632c:	80c00117 	ldw	r3,4(r16)
    6330:	1886703a 	and	r3,r3,r2
    6334:	003f9106 	br	617c <_gp+0xfffec79c>
    6338:	60800217 	ldw	r2,8(r12)
    633c:	213fffc4 	addi	r4,r4,-1
    6340:	1300651e 	bne	r2,r12,64d8 <_malloc_r+0x7f4>
    6344:	208000cc 	andi	r2,r4,3
    6348:	633ffe04 	addi	r12,r12,-8
    634c:	103ffa1e 	bne	r2,zero,6338 <_gp+0xfffec958>
    6350:	98800117 	ldw	r2,4(r19)
    6354:	0146303a 	nor	r3,zero,r5
    6358:	1884703a 	and	r2,r3,r2
    635c:	98800115 	stw	r2,4(r19)
    6360:	294b883a 	add	r5,r5,r5
    6364:	117f2836 	bltu	r2,r5,6008 <_gp+0xfffec628>
    6368:	283f2726 	beq	r5,zero,6008 <_gp+0xfffec628>
    636c:	2886703a 	and	r3,r5,r2
    6370:	5809883a 	mov	r4,r11
    6374:	183ec31e 	bne	r3,zero,5e84 <_gp+0xfffec4a4>
    6378:	294b883a 	add	r5,r5,r5
    637c:	2886703a 	and	r3,r5,r2
    6380:	21000104 	addi	r4,r4,4
    6384:	183ffc26 	beq	r3,zero,6378 <_gp+0xfffec998>
    6388:	003ebe06 	br	5e84 <_gp+0xfffec4a4>
    638c:	00c05504 	movi	r3,340
    6390:	18801236 	bltu	r3,r2,63dc <_malloc_r+0x6f8>
    6394:	8804d3fa 	srli	r2,r17,15
    6398:	12001e04 	addi	r8,r2,120
    639c:	11c01dc4 	addi	r7,r2,119
    63a0:	4209883a 	add	r4,r8,r8
    63a4:	003e6d06 	br	5d5c <_gp+0xfffec37c>
    63a8:	00c40004 	movi	r3,4096
    63ac:	003f4606 	br	60c8 <_gp+0xfffec6e8>
    63b0:	00800044 	movi	r2,1
    63b4:	a0800115 	stw	r2,4(r20)
    63b8:	003f7406 	br	618c <_gp+0xfffec7ac>
    63bc:	1805d0ba 	srai	r2,r3,2
    63c0:	01c00044 	movi	r7,1
    63c4:	30c00117 	ldw	r3,4(r6)
    63c8:	388e983a 	sll	r7,r7,r2
    63cc:	2805883a 	mov	r2,r5
    63d0:	38c6b03a 	or	r3,r7,r3
    63d4:	30c00115 	stw	r3,4(r6)
    63d8:	003f9b06 	br	6248 <_gp+0xfffec868>
    63dc:	00c15504 	movi	r3,1364
    63e0:	18801a36 	bltu	r3,r2,644c <_malloc_r+0x768>
    63e4:	8804d4ba 	srli	r2,r17,18
    63e8:	12001f44 	addi	r8,r2,125
    63ec:	11c01f04 	addi	r7,r2,124
    63f0:	4209883a 	add	r4,r8,r8
    63f4:	003e5906 	br	5d5c <_gp+0xfffec37c>
    63f8:	ad400404 	addi	r21,r21,16
    63fc:	003f1706 	br	605c <_gp+0xfffec67c>
    6400:	00c01504 	movi	r3,84
    6404:	18802336 	bltu	r3,r2,6494 <_malloc_r+0x7b0>
    6408:	3804d33a 	srli	r2,r7,12
    640c:	11401bc4 	addi	r5,r2,111
    6410:	10c01b84 	addi	r3,r2,110
    6414:	294b883a 	add	r5,r5,r5
    6418:	003f7b06 	br	6208 <_gp+0xfffec828>
    641c:	9c000217 	ldw	r16,8(r19)
    6420:	00bfff04 	movi	r2,-4
    6424:	80c00117 	ldw	r3,4(r16)
    6428:	1886703a 	and	r3,r3,r2
    642c:	003f5306 	br	617c <_gp+0xfffec79c>
    6430:	3083ffcc 	andi	r2,r6,4095
    6434:	103f181e 	bne	r2,zero,6098 <_gp+0xfffec6b8>
    6438:	99000217 	ldw	r4,8(r19)
    643c:	b545883a 	add	r2,r22,r21
    6440:	10800054 	ori	r2,r2,1
    6444:	20800115 	stw	r2,4(r4)
    6448:	003f3e06 	br	6144 <_gp+0xfffec764>
    644c:	01003f84 	movi	r4,254
    6450:	02001fc4 	movi	r8,127
    6454:	01c01f84 	movi	r7,126
    6458:	003e4006 	br	5d5c <_gp+0xfffec37c>
    645c:	00800074 	movhi	r2,1
    6460:	10867b04 	addi	r2,r2,6636
    6464:	15000015 	stw	r20,0(r2)
    6468:	003f1106 	br	60b0 <_gp+0xfffec6d0>
    646c:	00800044 	movi	r2,1
    6470:	002b883a 	mov	r21,zero
    6474:	003f1f06 	br	60f4 <_gp+0xfffec714>
    6478:	81400204 	addi	r5,r16,8
    647c:	9009883a 	mov	r4,r18
    6480:	00050f80 	call	50f8 <_free_r>
    6484:	00800074 	movhi	r2,1
    6488:	108d5104 	addi	r2,r2,13636
    648c:	10c00017 	ldw	r3,0(r2)
    6490:	003f2c06 	br	6144 <_gp+0xfffec764>
    6494:	00c05504 	movi	r3,340
    6498:	18800536 	bltu	r3,r2,64b0 <_malloc_r+0x7cc>
    649c:	3804d3fa 	srli	r2,r7,15
    64a0:	11401e04 	addi	r5,r2,120
    64a4:	10c01dc4 	addi	r3,r2,119
    64a8:	294b883a 	add	r5,r5,r5
    64ac:	003f5606 	br	6208 <_gp+0xfffec828>
    64b0:	00c15504 	movi	r3,1364
    64b4:	18800536 	bltu	r3,r2,64cc <_malloc_r+0x7e8>
    64b8:	3804d4ba 	srli	r2,r7,18
    64bc:	11401f44 	addi	r5,r2,125
    64c0:	10c01f04 	addi	r3,r2,124
    64c4:	294b883a 	add	r5,r5,r5
    64c8:	003f4f06 	br	6208 <_gp+0xfffec828>
    64cc:	01403f84 	movi	r5,254
    64d0:	00c01f84 	movi	r3,126
    64d4:	003f4c06 	br	6208 <_gp+0xfffec828>
    64d8:	98800117 	ldw	r2,4(r19)
    64dc:	003fa006 	br	6360 <_gp+0xfffec980>
    64e0:	8808d0fa 	srli	r4,r17,3
    64e4:	20800044 	addi	r2,r4,1
    64e8:	1085883a 	add	r2,r2,r2
    64ec:	003e9006 	br	5f30 <_gp+0xfffec550>

000064f0 <memchr>:
    64f0:	208000cc 	andi	r2,r4,3
    64f4:	280f883a 	mov	r7,r5
    64f8:	10003426 	beq	r2,zero,65cc <memchr+0xdc>
    64fc:	30bfffc4 	addi	r2,r6,-1
    6500:	30001a26 	beq	r6,zero,656c <memchr+0x7c>
    6504:	20c00003 	ldbu	r3,0(r4)
    6508:	29803fcc 	andi	r6,r5,255
    650c:	30c0051e 	bne	r6,r3,6524 <memchr+0x34>
    6510:	00001806 	br	6574 <memchr+0x84>
    6514:	10001526 	beq	r2,zero,656c <memchr+0x7c>
    6518:	20c00003 	ldbu	r3,0(r4)
    651c:	10bfffc4 	addi	r2,r2,-1
    6520:	30c01426 	beq	r6,r3,6574 <memchr+0x84>
    6524:	21000044 	addi	r4,r4,1
    6528:	20c000cc 	andi	r3,r4,3
    652c:	183ff91e 	bne	r3,zero,6514 <_gp+0xfffecb34>
    6530:	020000c4 	movi	r8,3
    6534:	40801136 	bltu	r8,r2,657c <memchr+0x8c>
    6538:	10000c26 	beq	r2,zero,656c <memchr+0x7c>
    653c:	20c00003 	ldbu	r3,0(r4)
    6540:	29403fcc 	andi	r5,r5,255
    6544:	28c00b26 	beq	r5,r3,6574 <memchr+0x84>
    6548:	20c00044 	addi	r3,r4,1
    654c:	39803fcc 	andi	r6,r7,255
    6550:	2089883a 	add	r4,r4,r2
    6554:	00000306 	br	6564 <memchr+0x74>
    6558:	18c00044 	addi	r3,r3,1
    655c:	197fffc3 	ldbu	r5,-1(r3)
    6560:	31400526 	beq	r6,r5,6578 <memchr+0x88>
    6564:	1805883a 	mov	r2,r3
    6568:	20fffb1e 	bne	r4,r3,6558 <_gp+0xfffecb78>
    656c:	0005883a 	mov	r2,zero
    6570:	f800283a 	ret
    6574:	2005883a 	mov	r2,r4
    6578:	f800283a 	ret
    657c:	28c03fcc 	andi	r3,r5,255
    6580:	1812923a 	slli	r9,r3,8
    6584:	02ffbff4 	movhi	r11,65279
    6588:	02a02074 	movhi	r10,32897
    658c:	48d2b03a 	or	r9,r9,r3
    6590:	4806943a 	slli	r3,r9,16
    6594:	5affbfc4 	addi	r11,r11,-257
    6598:	52a02004 	addi	r10,r10,-32640
    659c:	48d2b03a 	or	r9,r9,r3
    65a0:	20c00017 	ldw	r3,0(r4)
    65a4:	48c6f03a 	xor	r3,r9,r3
    65a8:	1acd883a 	add	r6,r3,r11
    65ac:	00c6303a 	nor	r3,zero,r3
    65b0:	30c6703a 	and	r3,r6,r3
    65b4:	1a86703a 	and	r3,r3,r10
    65b8:	183fe01e 	bne	r3,zero,653c <_gp+0xfffecb5c>
    65bc:	10bfff04 	addi	r2,r2,-4
    65c0:	21000104 	addi	r4,r4,4
    65c4:	40bff636 	bltu	r8,r2,65a0 <_gp+0xfffecbc0>
    65c8:	003fdb06 	br	6538 <_gp+0xfffecb58>
    65cc:	3005883a 	mov	r2,r6
    65d0:	003fd706 	br	6530 <_gp+0xfffecb50>

000065d4 <memmove>:
    65d4:	2005883a 	mov	r2,r4
    65d8:	29000b2e 	bgeu	r5,r4,6608 <memmove+0x34>
    65dc:	298f883a 	add	r7,r5,r6
    65e0:	21c0092e 	bgeu	r4,r7,6608 <memmove+0x34>
    65e4:	2187883a 	add	r3,r4,r6
    65e8:	198bc83a 	sub	r5,r3,r6
    65ec:	30004826 	beq	r6,zero,6710 <memmove+0x13c>
    65f0:	39ffffc4 	addi	r7,r7,-1
    65f4:	39000003 	ldbu	r4,0(r7)
    65f8:	18ffffc4 	addi	r3,r3,-1
    65fc:	19000005 	stb	r4,0(r3)
    6600:	28fffb1e 	bne	r5,r3,65f0 <_gp+0xfffecc10>
    6604:	f800283a 	ret
    6608:	00c003c4 	movi	r3,15
    660c:	1980412e 	bgeu	r3,r6,6714 <memmove+0x140>
    6610:	2886b03a 	or	r3,r5,r2
    6614:	18c000cc 	andi	r3,r3,3
    6618:	1800401e 	bne	r3,zero,671c <memmove+0x148>
    661c:	33fffc04 	addi	r15,r6,-16
    6620:	781ed13a 	srli	r15,r15,4
    6624:	28c00104 	addi	r3,r5,4
    6628:	13400104 	addi	r13,r2,4
    662c:	781c913a 	slli	r14,r15,4
    6630:	2b000204 	addi	r12,r5,8
    6634:	12c00204 	addi	r11,r2,8
    6638:	73800504 	addi	r14,r14,20
    663c:	2a800304 	addi	r10,r5,12
    6640:	12400304 	addi	r9,r2,12
    6644:	2b9d883a 	add	r14,r5,r14
    6648:	2811883a 	mov	r8,r5
    664c:	100f883a 	mov	r7,r2
    6650:	41000017 	ldw	r4,0(r8)
    6654:	39c00404 	addi	r7,r7,16
    6658:	18c00404 	addi	r3,r3,16
    665c:	393ffc15 	stw	r4,-16(r7)
    6660:	193ffc17 	ldw	r4,-16(r3)
    6664:	6b400404 	addi	r13,r13,16
    6668:	5ac00404 	addi	r11,r11,16
    666c:	693ffc15 	stw	r4,-16(r13)
    6670:	61000017 	ldw	r4,0(r12)
    6674:	4a400404 	addi	r9,r9,16
    6678:	42000404 	addi	r8,r8,16
    667c:	593ffc15 	stw	r4,-16(r11)
    6680:	51000017 	ldw	r4,0(r10)
    6684:	63000404 	addi	r12,r12,16
    6688:	52800404 	addi	r10,r10,16
    668c:	493ffc15 	stw	r4,-16(r9)
    6690:	1bbfef1e 	bne	r3,r14,6650 <_gp+0xfffecc70>
    6694:	79000044 	addi	r4,r15,1
    6698:	2008913a 	slli	r4,r4,4
    669c:	328003cc 	andi	r10,r6,15
    66a0:	02c000c4 	movi	r11,3
    66a4:	1107883a 	add	r3,r2,r4
    66a8:	290b883a 	add	r5,r5,r4
    66ac:	5a801e2e 	bgeu	r11,r10,6728 <memmove+0x154>
    66b0:	1813883a 	mov	r9,r3
    66b4:	2811883a 	mov	r8,r5
    66b8:	500f883a 	mov	r7,r10
    66bc:	41000017 	ldw	r4,0(r8)
    66c0:	4a400104 	addi	r9,r9,4
    66c4:	39ffff04 	addi	r7,r7,-4
    66c8:	493fff15 	stw	r4,-4(r9)
    66cc:	42000104 	addi	r8,r8,4
    66d0:	59fffa36 	bltu	r11,r7,66bc <_gp+0xfffeccdc>
    66d4:	513fff04 	addi	r4,r10,-4
    66d8:	2008d0ba 	srli	r4,r4,2
    66dc:	318000cc 	andi	r6,r6,3
    66e0:	21000044 	addi	r4,r4,1
    66e4:	2109883a 	add	r4,r4,r4
    66e8:	2109883a 	add	r4,r4,r4
    66ec:	1907883a 	add	r3,r3,r4
    66f0:	290b883a 	add	r5,r5,r4
    66f4:	30000b26 	beq	r6,zero,6724 <memmove+0x150>
    66f8:	198d883a 	add	r6,r3,r6
    66fc:	29c00003 	ldbu	r7,0(r5)
    6700:	18c00044 	addi	r3,r3,1
    6704:	29400044 	addi	r5,r5,1
    6708:	19ffffc5 	stb	r7,-1(r3)
    670c:	19bffb1e 	bne	r3,r6,66fc <_gp+0xfffecd1c>
    6710:	f800283a 	ret
    6714:	1007883a 	mov	r3,r2
    6718:	003ff606 	br	66f4 <_gp+0xfffecd14>
    671c:	1007883a 	mov	r3,r2
    6720:	003ff506 	br	66f8 <_gp+0xfffecd18>
    6724:	f800283a 	ret
    6728:	500d883a 	mov	r6,r10
    672c:	003ff106 	br	66f4 <_gp+0xfffecd14>

00006730 <memset>:
    6730:	20c000cc 	andi	r3,r4,3
    6734:	2005883a 	mov	r2,r4
    6738:	18004426 	beq	r3,zero,684c <memset+0x11c>
    673c:	31ffffc4 	addi	r7,r6,-1
    6740:	30004026 	beq	r6,zero,6844 <memset+0x114>
    6744:	2813883a 	mov	r9,r5
    6748:	200d883a 	mov	r6,r4
    674c:	2007883a 	mov	r3,r4
    6750:	00000406 	br	6764 <memset+0x34>
    6754:	3a3fffc4 	addi	r8,r7,-1
    6758:	31800044 	addi	r6,r6,1
    675c:	38003926 	beq	r7,zero,6844 <memset+0x114>
    6760:	400f883a 	mov	r7,r8
    6764:	18c00044 	addi	r3,r3,1
    6768:	32400005 	stb	r9,0(r6)
    676c:	1a0000cc 	andi	r8,r3,3
    6770:	403ff81e 	bne	r8,zero,6754 <_gp+0xfffecd74>
    6774:	010000c4 	movi	r4,3
    6778:	21c02d2e 	bgeu	r4,r7,6830 <memset+0x100>
    677c:	29003fcc 	andi	r4,r5,255
    6780:	200c923a 	slli	r6,r4,8
    6784:	3108b03a 	or	r4,r6,r4
    6788:	200c943a 	slli	r6,r4,16
    678c:	218cb03a 	or	r6,r4,r6
    6790:	010003c4 	movi	r4,15
    6794:	21c0182e 	bgeu	r4,r7,67f8 <memset+0xc8>
    6798:	3b3ffc04 	addi	r12,r7,-16
    679c:	6018d13a 	srli	r12,r12,4
    67a0:	1a000104 	addi	r8,r3,4
    67a4:	1ac00204 	addi	r11,r3,8
    67a8:	6008913a 	slli	r4,r12,4
    67ac:	1a800304 	addi	r10,r3,12
    67b0:	1813883a 	mov	r9,r3
    67b4:	21000504 	addi	r4,r4,20
    67b8:	1909883a 	add	r4,r3,r4
    67bc:	49800015 	stw	r6,0(r9)
    67c0:	41800015 	stw	r6,0(r8)
    67c4:	59800015 	stw	r6,0(r11)
    67c8:	51800015 	stw	r6,0(r10)
    67cc:	42000404 	addi	r8,r8,16
    67d0:	4a400404 	addi	r9,r9,16
    67d4:	5ac00404 	addi	r11,r11,16
    67d8:	52800404 	addi	r10,r10,16
    67dc:	413ff71e 	bne	r8,r4,67bc <_gp+0xfffecddc>
    67e0:	63000044 	addi	r12,r12,1
    67e4:	6018913a 	slli	r12,r12,4
    67e8:	39c003cc 	andi	r7,r7,15
    67ec:	010000c4 	movi	r4,3
    67f0:	1b07883a 	add	r3,r3,r12
    67f4:	21c00e2e 	bgeu	r4,r7,6830 <memset+0x100>
    67f8:	1813883a 	mov	r9,r3
    67fc:	3811883a 	mov	r8,r7
    6800:	010000c4 	movi	r4,3
    6804:	49800015 	stw	r6,0(r9)
    6808:	423fff04 	addi	r8,r8,-4
    680c:	4a400104 	addi	r9,r9,4
    6810:	223ffc36 	bltu	r4,r8,6804 <_gp+0xfffece24>
    6814:	393fff04 	addi	r4,r7,-4
    6818:	2008d0ba 	srli	r4,r4,2
    681c:	39c000cc 	andi	r7,r7,3
    6820:	21000044 	addi	r4,r4,1
    6824:	2109883a 	add	r4,r4,r4
    6828:	2109883a 	add	r4,r4,r4
    682c:	1907883a 	add	r3,r3,r4
    6830:	38000526 	beq	r7,zero,6848 <memset+0x118>
    6834:	19cf883a 	add	r7,r3,r7
    6838:	19400005 	stb	r5,0(r3)
    683c:	18c00044 	addi	r3,r3,1
    6840:	38fffd1e 	bne	r7,r3,6838 <_gp+0xfffece58>
    6844:	f800283a 	ret
    6848:	f800283a 	ret
    684c:	2007883a 	mov	r3,r4
    6850:	300f883a 	mov	r7,r6
    6854:	003fc706 	br	6774 <_gp+0xfffecd94>

00006858 <_Balloc>:
    6858:	20801317 	ldw	r2,76(r4)
    685c:	defffc04 	addi	sp,sp,-16
    6860:	dc400115 	stw	r17,4(sp)
    6864:	dc000015 	stw	r16,0(sp)
    6868:	dfc00315 	stw	ra,12(sp)
    686c:	dc800215 	stw	r18,8(sp)
    6870:	2023883a 	mov	r17,r4
    6874:	2821883a 	mov	r16,r5
    6878:	10000f26 	beq	r2,zero,68b8 <_Balloc+0x60>
    687c:	8407883a 	add	r3,r16,r16
    6880:	18c7883a 	add	r3,r3,r3
    6884:	10c7883a 	add	r3,r2,r3
    6888:	18800017 	ldw	r2,0(r3)
    688c:	10001126 	beq	r2,zero,68d4 <_Balloc+0x7c>
    6890:	11000017 	ldw	r4,0(r2)
    6894:	19000015 	stw	r4,0(r3)
    6898:	10000415 	stw	zero,16(r2)
    689c:	10000315 	stw	zero,12(r2)
    68a0:	dfc00317 	ldw	ra,12(sp)
    68a4:	dc800217 	ldw	r18,8(sp)
    68a8:	dc400117 	ldw	r17,4(sp)
    68ac:	dc000017 	ldw	r16,0(sp)
    68b0:	dec00404 	addi	sp,sp,16
    68b4:	f800283a 	ret
    68b8:	01800844 	movi	r6,33
    68bc:	01400104 	movi	r5,4
    68c0:	0009a540 	call	9a54 <_calloc_r>
    68c4:	88801315 	stw	r2,76(r17)
    68c8:	103fec1e 	bne	r2,zero,687c <_gp+0xfffece9c>
    68cc:	0005883a 	mov	r2,zero
    68d0:	003ff306 	br	68a0 <_gp+0xfffecec0>
    68d4:	01400044 	movi	r5,1
    68d8:	2c24983a 	sll	r18,r5,r16
    68dc:	8809883a 	mov	r4,r17
    68e0:	91800144 	addi	r6,r18,5
    68e4:	318d883a 	add	r6,r6,r6
    68e8:	318d883a 	add	r6,r6,r6
    68ec:	0009a540 	call	9a54 <_calloc_r>
    68f0:	103ff626 	beq	r2,zero,68cc <_gp+0xfffeceec>
    68f4:	14000115 	stw	r16,4(r2)
    68f8:	14800215 	stw	r18,8(r2)
    68fc:	003fe606 	br	6898 <_gp+0xfffeceb8>

00006900 <_Bfree>:
    6900:	28000826 	beq	r5,zero,6924 <_Bfree+0x24>
    6904:	28c00117 	ldw	r3,4(r5)
    6908:	20801317 	ldw	r2,76(r4)
    690c:	18c7883a 	add	r3,r3,r3
    6910:	18c7883a 	add	r3,r3,r3
    6914:	10c5883a 	add	r2,r2,r3
    6918:	10c00017 	ldw	r3,0(r2)
    691c:	28c00015 	stw	r3,0(r5)
    6920:	11400015 	stw	r5,0(r2)
    6924:	f800283a 	ret

00006928 <__multadd>:
    6928:	defffa04 	addi	sp,sp,-24
    692c:	dc800315 	stw	r18,12(sp)
    6930:	dc400215 	stw	r17,8(sp)
    6934:	dc000115 	stw	r16,4(sp)
    6938:	2823883a 	mov	r17,r5
    693c:	2c000417 	ldw	r16,16(r5)
    6940:	dfc00515 	stw	ra,20(sp)
    6944:	dcc00415 	stw	r19,16(sp)
    6948:	2025883a 	mov	r18,r4
    694c:	29400504 	addi	r5,r5,20
    6950:	0011883a 	mov	r8,zero
    6954:	28c00017 	ldw	r3,0(r5)
    6958:	29400104 	addi	r5,r5,4
    695c:	42000044 	addi	r8,r8,1
    6960:	18bfffcc 	andi	r2,r3,65535
    6964:	1185383a 	mul	r2,r2,r6
    6968:	1806d43a 	srli	r3,r3,16
    696c:	11cf883a 	add	r7,r2,r7
    6970:	3808d43a 	srli	r4,r7,16
    6974:	1987383a 	mul	r3,r3,r6
    6978:	38bfffcc 	andi	r2,r7,65535
    697c:	1907883a 	add	r3,r3,r4
    6980:	1808943a 	slli	r4,r3,16
    6984:	180ed43a 	srli	r7,r3,16
    6988:	2085883a 	add	r2,r4,r2
    698c:	28bfff15 	stw	r2,-4(r5)
    6990:	443ff016 	blt	r8,r16,6954 <_gp+0xfffecf74>
    6994:	38000926 	beq	r7,zero,69bc <__multadd+0x94>
    6998:	88800217 	ldw	r2,8(r17)
    699c:	80800f0e 	bge	r16,r2,69dc <__multadd+0xb4>
    69a0:	80800144 	addi	r2,r16,5
    69a4:	1085883a 	add	r2,r2,r2
    69a8:	1085883a 	add	r2,r2,r2
    69ac:	8885883a 	add	r2,r17,r2
    69b0:	11c00015 	stw	r7,0(r2)
    69b4:	84000044 	addi	r16,r16,1
    69b8:	8c000415 	stw	r16,16(r17)
    69bc:	8805883a 	mov	r2,r17
    69c0:	dfc00517 	ldw	ra,20(sp)
    69c4:	dcc00417 	ldw	r19,16(sp)
    69c8:	dc800317 	ldw	r18,12(sp)
    69cc:	dc400217 	ldw	r17,8(sp)
    69d0:	dc000117 	ldw	r16,4(sp)
    69d4:	dec00604 	addi	sp,sp,24
    69d8:	f800283a 	ret
    69dc:	89400117 	ldw	r5,4(r17)
    69e0:	9009883a 	mov	r4,r18
    69e4:	d9c00015 	stw	r7,0(sp)
    69e8:	29400044 	addi	r5,r5,1
    69ec:	00068580 	call	6858 <_Balloc>
    69f0:	89800417 	ldw	r6,16(r17)
    69f4:	89400304 	addi	r5,r17,12
    69f8:	11000304 	addi	r4,r2,12
    69fc:	31800084 	addi	r6,r6,2
    6a00:	318d883a 	add	r6,r6,r6
    6a04:	318d883a 	add	r6,r6,r6
    6a08:	1027883a 	mov	r19,r2
    6a0c:	00009a00 	call	9a0 <memcpy>
    6a10:	d9c00017 	ldw	r7,0(sp)
    6a14:	88000a26 	beq	r17,zero,6a40 <__multadd+0x118>
    6a18:	88c00117 	ldw	r3,4(r17)
    6a1c:	90801317 	ldw	r2,76(r18)
    6a20:	18c7883a 	add	r3,r3,r3
    6a24:	18c7883a 	add	r3,r3,r3
    6a28:	10c5883a 	add	r2,r2,r3
    6a2c:	10c00017 	ldw	r3,0(r2)
    6a30:	88c00015 	stw	r3,0(r17)
    6a34:	14400015 	stw	r17,0(r2)
    6a38:	9823883a 	mov	r17,r19
    6a3c:	003fd806 	br	69a0 <_gp+0xfffecfc0>
    6a40:	9823883a 	mov	r17,r19
    6a44:	003fd606 	br	69a0 <_gp+0xfffecfc0>

00006a48 <__s2b>:
    6a48:	defff904 	addi	sp,sp,-28
    6a4c:	dc400115 	stw	r17,4(sp)
    6a50:	dc000015 	stw	r16,0(sp)
    6a54:	2023883a 	mov	r17,r4
    6a58:	2821883a 	mov	r16,r5
    6a5c:	39000204 	addi	r4,r7,8
    6a60:	01400244 	movi	r5,9
    6a64:	dcc00315 	stw	r19,12(sp)
    6a68:	dc800215 	stw	r18,8(sp)
    6a6c:	dfc00615 	stw	ra,24(sp)
    6a70:	dd400515 	stw	r21,20(sp)
    6a74:	dd000415 	stw	r20,16(sp)
    6a78:	3825883a 	mov	r18,r7
    6a7c:	3027883a 	mov	r19,r6
    6a80:	00007ec0 	call	7ec <__divsi3>
    6a84:	00c00044 	movi	r3,1
    6a88:	000b883a 	mov	r5,zero
    6a8c:	1880030e 	bge	r3,r2,6a9c <__s2b+0x54>
    6a90:	18c7883a 	add	r3,r3,r3
    6a94:	29400044 	addi	r5,r5,1
    6a98:	18bffd16 	blt	r3,r2,6a90 <_gp+0xfffed0b0>
    6a9c:	8809883a 	mov	r4,r17
    6aa0:	00068580 	call	6858 <_Balloc>
    6aa4:	d8c00717 	ldw	r3,28(sp)
    6aa8:	10c00515 	stw	r3,20(r2)
    6aac:	00c00044 	movi	r3,1
    6ab0:	10c00415 	stw	r3,16(r2)
    6ab4:	00c00244 	movi	r3,9
    6ab8:	1cc0210e 	bge	r3,r19,6b40 <__s2b+0xf8>
    6abc:	80eb883a 	add	r21,r16,r3
    6ac0:	a829883a 	mov	r20,r21
    6ac4:	84e1883a 	add	r16,r16,r19
    6ac8:	a1c00007 	ldb	r7,0(r20)
    6acc:	01800284 	movi	r6,10
    6ad0:	a5000044 	addi	r20,r20,1
    6ad4:	100b883a 	mov	r5,r2
    6ad8:	39fff404 	addi	r7,r7,-48
    6adc:	8809883a 	mov	r4,r17
    6ae0:	00069280 	call	6928 <__multadd>
    6ae4:	a43ff81e 	bne	r20,r16,6ac8 <_gp+0xfffed0e8>
    6ae8:	ace1883a 	add	r16,r21,r19
    6aec:	843ffe04 	addi	r16,r16,-8
    6af0:	9c800a0e 	bge	r19,r18,6b1c <__s2b+0xd4>
    6af4:	94e5c83a 	sub	r18,r18,r19
    6af8:	84a5883a 	add	r18,r16,r18
    6afc:	81c00007 	ldb	r7,0(r16)
    6b00:	01800284 	movi	r6,10
    6b04:	84000044 	addi	r16,r16,1
    6b08:	100b883a 	mov	r5,r2
    6b0c:	39fff404 	addi	r7,r7,-48
    6b10:	8809883a 	mov	r4,r17
    6b14:	00069280 	call	6928 <__multadd>
    6b18:	84bff81e 	bne	r16,r18,6afc <_gp+0xfffed11c>
    6b1c:	dfc00617 	ldw	ra,24(sp)
    6b20:	dd400517 	ldw	r21,20(sp)
    6b24:	dd000417 	ldw	r20,16(sp)
    6b28:	dcc00317 	ldw	r19,12(sp)
    6b2c:	dc800217 	ldw	r18,8(sp)
    6b30:	dc400117 	ldw	r17,4(sp)
    6b34:	dc000017 	ldw	r16,0(sp)
    6b38:	dec00704 	addi	sp,sp,28
    6b3c:	f800283a 	ret
    6b40:	84000284 	addi	r16,r16,10
    6b44:	1827883a 	mov	r19,r3
    6b48:	003fe906 	br	6af0 <_gp+0xfffed110>

00006b4c <__hi0bits>:
    6b4c:	20bfffec 	andhi	r2,r4,65535
    6b50:	1000141e 	bne	r2,zero,6ba4 <__hi0bits+0x58>
    6b54:	2008943a 	slli	r4,r4,16
    6b58:	00800404 	movi	r2,16
    6b5c:	20ffc02c 	andhi	r3,r4,65280
    6b60:	1800021e 	bne	r3,zero,6b6c <__hi0bits+0x20>
    6b64:	2008923a 	slli	r4,r4,8
    6b68:	10800204 	addi	r2,r2,8
    6b6c:	20fc002c 	andhi	r3,r4,61440
    6b70:	1800021e 	bne	r3,zero,6b7c <__hi0bits+0x30>
    6b74:	2008913a 	slli	r4,r4,4
    6b78:	10800104 	addi	r2,r2,4
    6b7c:	20f0002c 	andhi	r3,r4,49152
    6b80:	1800031e 	bne	r3,zero,6b90 <__hi0bits+0x44>
    6b84:	2109883a 	add	r4,r4,r4
    6b88:	10800084 	addi	r2,r2,2
    6b8c:	2109883a 	add	r4,r4,r4
    6b90:	20000316 	blt	r4,zero,6ba0 <__hi0bits+0x54>
    6b94:	2110002c 	andhi	r4,r4,16384
    6b98:	2000041e 	bne	r4,zero,6bac <__hi0bits+0x60>
    6b9c:	00800804 	movi	r2,32
    6ba0:	f800283a 	ret
    6ba4:	0005883a 	mov	r2,zero
    6ba8:	003fec06 	br	6b5c <_gp+0xfffed17c>
    6bac:	10800044 	addi	r2,r2,1
    6bb0:	f800283a 	ret

00006bb4 <__lo0bits>:
    6bb4:	20c00017 	ldw	r3,0(r4)
    6bb8:	188001cc 	andi	r2,r3,7
    6bbc:	10000826 	beq	r2,zero,6be0 <__lo0bits+0x2c>
    6bc0:	1880004c 	andi	r2,r3,1
    6bc4:	1000211e 	bne	r2,zero,6c4c <__lo0bits+0x98>
    6bc8:	1880008c 	andi	r2,r3,2
    6bcc:	1000211e 	bne	r2,zero,6c54 <__lo0bits+0xa0>
    6bd0:	1806d0ba 	srli	r3,r3,2
    6bd4:	00800084 	movi	r2,2
    6bd8:	20c00015 	stw	r3,0(r4)
    6bdc:	f800283a 	ret
    6be0:	18bfffcc 	andi	r2,r3,65535
    6be4:	10001326 	beq	r2,zero,6c34 <__lo0bits+0x80>
    6be8:	0005883a 	mov	r2,zero
    6bec:	19403fcc 	andi	r5,r3,255
    6bf0:	2800021e 	bne	r5,zero,6bfc <__lo0bits+0x48>
    6bf4:	1806d23a 	srli	r3,r3,8
    6bf8:	10800204 	addi	r2,r2,8
    6bfc:	194003cc 	andi	r5,r3,15
    6c00:	2800021e 	bne	r5,zero,6c0c <__lo0bits+0x58>
    6c04:	1806d13a 	srli	r3,r3,4
    6c08:	10800104 	addi	r2,r2,4
    6c0c:	194000cc 	andi	r5,r3,3
    6c10:	2800021e 	bne	r5,zero,6c1c <__lo0bits+0x68>
    6c14:	1806d0ba 	srli	r3,r3,2
    6c18:	10800084 	addi	r2,r2,2
    6c1c:	1940004c 	andi	r5,r3,1
    6c20:	2800081e 	bne	r5,zero,6c44 <__lo0bits+0x90>
    6c24:	1806d07a 	srli	r3,r3,1
    6c28:	1800051e 	bne	r3,zero,6c40 <__lo0bits+0x8c>
    6c2c:	00800804 	movi	r2,32
    6c30:	f800283a 	ret
    6c34:	1806d43a 	srli	r3,r3,16
    6c38:	00800404 	movi	r2,16
    6c3c:	003feb06 	br	6bec <_gp+0xfffed20c>
    6c40:	10800044 	addi	r2,r2,1
    6c44:	20c00015 	stw	r3,0(r4)
    6c48:	f800283a 	ret
    6c4c:	0005883a 	mov	r2,zero
    6c50:	f800283a 	ret
    6c54:	1806d07a 	srli	r3,r3,1
    6c58:	00800044 	movi	r2,1
    6c5c:	20c00015 	stw	r3,0(r4)
    6c60:	f800283a 	ret

00006c64 <__i2b>:
    6c64:	defffd04 	addi	sp,sp,-12
    6c68:	dc000015 	stw	r16,0(sp)
    6c6c:	04000044 	movi	r16,1
    6c70:	dc400115 	stw	r17,4(sp)
    6c74:	2823883a 	mov	r17,r5
    6c78:	800b883a 	mov	r5,r16
    6c7c:	dfc00215 	stw	ra,8(sp)
    6c80:	00068580 	call	6858 <_Balloc>
    6c84:	14400515 	stw	r17,20(r2)
    6c88:	14000415 	stw	r16,16(r2)
    6c8c:	dfc00217 	ldw	ra,8(sp)
    6c90:	dc400117 	ldw	r17,4(sp)
    6c94:	dc000017 	ldw	r16,0(sp)
    6c98:	dec00304 	addi	sp,sp,12
    6c9c:	f800283a 	ret

00006ca0 <__multiply>:
    6ca0:	defffa04 	addi	sp,sp,-24
    6ca4:	dcc00315 	stw	r19,12(sp)
    6ca8:	dc800215 	stw	r18,8(sp)
    6cac:	34c00417 	ldw	r19,16(r6)
    6cb0:	2c800417 	ldw	r18,16(r5)
    6cb4:	dd000415 	stw	r20,16(sp)
    6cb8:	dc400115 	stw	r17,4(sp)
    6cbc:	dfc00515 	stw	ra,20(sp)
    6cc0:	dc000015 	stw	r16,0(sp)
    6cc4:	2829883a 	mov	r20,r5
    6cc8:	3023883a 	mov	r17,r6
    6ccc:	94c0050e 	bge	r18,r19,6ce4 <__multiply+0x44>
    6cd0:	9007883a 	mov	r3,r18
    6cd4:	3029883a 	mov	r20,r6
    6cd8:	9825883a 	mov	r18,r19
    6cdc:	2823883a 	mov	r17,r5
    6ce0:	1827883a 	mov	r19,r3
    6ce4:	a0800217 	ldw	r2,8(r20)
    6ce8:	94e1883a 	add	r16,r18,r19
    6cec:	a1400117 	ldw	r5,4(r20)
    6cf0:	1400010e 	bge	r2,r16,6cf8 <__multiply+0x58>
    6cf4:	29400044 	addi	r5,r5,1
    6cf8:	00068580 	call	6858 <_Balloc>
    6cfc:	8415883a 	add	r10,r16,r16
    6d00:	12c00504 	addi	r11,r2,20
    6d04:	5295883a 	add	r10,r10,r10
    6d08:	5a95883a 	add	r10,r11,r10
    6d0c:	5807883a 	mov	r3,r11
    6d10:	5a80032e 	bgeu	r11,r10,6d20 <__multiply+0x80>
    6d14:	18000015 	stw	zero,0(r3)
    6d18:	18c00104 	addi	r3,r3,4
    6d1c:	1abffd36 	bltu	r3,r10,6d14 <_gp+0xfffed334>
    6d20:	9ce7883a 	add	r19,r19,r19
    6d24:	94a5883a 	add	r18,r18,r18
    6d28:	89800504 	addi	r6,r17,20
    6d2c:	9ce7883a 	add	r19,r19,r19
    6d30:	a3400504 	addi	r13,r20,20
    6d34:	94a5883a 	add	r18,r18,r18
    6d38:	34d9883a 	add	r12,r6,r19
    6d3c:	6c93883a 	add	r9,r13,r18
    6d40:	3300422e 	bgeu	r6,r12,6e4c <__multiply+0x1ac>
    6d44:	37c00017 	ldw	ra,0(r6)
    6d48:	fbffffcc 	andi	r15,ra,65535
    6d4c:	78001b26 	beq	r15,zero,6dbc <__multiply+0x11c>
    6d50:	5811883a 	mov	r8,r11
    6d54:	681d883a 	mov	r14,r13
    6d58:	000f883a 	mov	r7,zero
    6d5c:	71000017 	ldw	r4,0(r14)
    6d60:	40c00017 	ldw	r3,0(r8)
    6d64:	73800104 	addi	r14,r14,4
    6d68:	217fffcc 	andi	r5,r4,65535
    6d6c:	2bcb383a 	mul	r5,r5,r15
    6d70:	2008d43a 	srli	r4,r4,16
    6d74:	1c7fffcc 	andi	r17,r3,65535
    6d78:	2c4b883a 	add	r5,r5,r17
    6d7c:	29cb883a 	add	r5,r5,r7
    6d80:	23c9383a 	mul	r4,r4,r15
    6d84:	1806d43a 	srli	r3,r3,16
    6d88:	280ed43a 	srli	r7,r5,16
    6d8c:	297fffcc 	andi	r5,r5,65535
    6d90:	20c7883a 	add	r3,r4,r3
    6d94:	19c7883a 	add	r3,r3,r7
    6d98:	1808943a 	slli	r4,r3,16
    6d9c:	4023883a 	mov	r17,r8
    6da0:	180ed43a 	srli	r7,r3,16
    6da4:	214ab03a 	or	r5,r4,r5
    6da8:	41400015 	stw	r5,0(r8)
    6dac:	42000104 	addi	r8,r8,4
    6db0:	727fea36 	bltu	r14,r9,6d5c <_gp+0xfffed37c>
    6db4:	89c00115 	stw	r7,4(r17)
    6db8:	37c00017 	ldw	ra,0(r6)
    6dbc:	f83ed43a 	srli	ra,ra,16
    6dc0:	f8001f26 	beq	ra,zero,6e40 <__multiply+0x1a0>
    6dc4:	58c00017 	ldw	r3,0(r11)
    6dc8:	681d883a 	mov	r14,r13
    6dcc:	581f883a 	mov	r15,r11
    6dd0:	1811883a 	mov	r8,r3
    6dd4:	5825883a 	mov	r18,r11
    6dd8:	000f883a 	mov	r7,zero
    6ddc:	00000106 	br	6de4 <__multiply+0x144>
    6de0:	8825883a 	mov	r18,r17
    6de4:	7140000b 	ldhu	r5,0(r14)
    6de8:	4010d43a 	srli	r8,r8,16
    6dec:	193fffcc 	andi	r4,r3,65535
    6df0:	2fcb383a 	mul	r5,r5,ra
    6df4:	7bc00104 	addi	r15,r15,4
    6df8:	73800104 	addi	r14,r14,4
    6dfc:	2a0b883a 	add	r5,r5,r8
    6e00:	29cb883a 	add	r5,r5,r7
    6e04:	2806943a 	slli	r3,r5,16
    6e08:	94400104 	addi	r17,r18,4
    6e0c:	280ad43a 	srli	r5,r5,16
    6e10:	1908b03a 	or	r4,r3,r4
    6e14:	793fff15 	stw	r4,-4(r15)
    6e18:	70ffff17 	ldw	r3,-4(r14)
    6e1c:	8a000017 	ldw	r8,0(r17)
    6e20:	1806d43a 	srli	r3,r3,16
    6e24:	413fffcc 	andi	r4,r8,65535
    6e28:	1fc7383a 	mul	r3,r3,ra
    6e2c:	1907883a 	add	r3,r3,r4
    6e30:	1947883a 	add	r3,r3,r5
    6e34:	180ed43a 	srli	r7,r3,16
    6e38:	727fe936 	bltu	r14,r9,6de0 <_gp+0xfffed400>
    6e3c:	90c00115 	stw	r3,4(r18)
    6e40:	31800104 	addi	r6,r6,4
    6e44:	5ac00104 	addi	r11,r11,4
    6e48:	333fbe36 	bltu	r6,r12,6d44 <_gp+0xfffed364>
    6e4c:	0400090e 	bge	zero,r16,6e74 <__multiply+0x1d4>
    6e50:	50ffff17 	ldw	r3,-4(r10)
    6e54:	52bfff04 	addi	r10,r10,-4
    6e58:	18000326 	beq	r3,zero,6e68 <__multiply+0x1c8>
    6e5c:	00000506 	br	6e74 <__multiply+0x1d4>
    6e60:	50c00017 	ldw	r3,0(r10)
    6e64:	1800031e 	bne	r3,zero,6e74 <__multiply+0x1d4>
    6e68:	843fffc4 	addi	r16,r16,-1
    6e6c:	52bfff04 	addi	r10,r10,-4
    6e70:	803ffb1e 	bne	r16,zero,6e60 <_gp+0xfffed480>
    6e74:	14000415 	stw	r16,16(r2)
    6e78:	dfc00517 	ldw	ra,20(sp)
    6e7c:	dd000417 	ldw	r20,16(sp)
    6e80:	dcc00317 	ldw	r19,12(sp)
    6e84:	dc800217 	ldw	r18,8(sp)
    6e88:	dc400117 	ldw	r17,4(sp)
    6e8c:	dc000017 	ldw	r16,0(sp)
    6e90:	dec00604 	addi	sp,sp,24
    6e94:	f800283a 	ret

00006e98 <__pow5mult>:
    6e98:	defffa04 	addi	sp,sp,-24
    6e9c:	dcc00315 	stw	r19,12(sp)
    6ea0:	dc000015 	stw	r16,0(sp)
    6ea4:	dfc00515 	stw	ra,20(sp)
    6ea8:	dd000415 	stw	r20,16(sp)
    6eac:	dc800215 	stw	r18,8(sp)
    6eb0:	dc400115 	stw	r17,4(sp)
    6eb4:	308000cc 	andi	r2,r6,3
    6eb8:	3021883a 	mov	r16,r6
    6ebc:	2027883a 	mov	r19,r4
    6ec0:	10002f1e 	bne	r2,zero,6f80 <__pow5mult+0xe8>
    6ec4:	2825883a 	mov	r18,r5
    6ec8:	8021d0ba 	srai	r16,r16,2
    6ecc:	80001a26 	beq	r16,zero,6f38 <__pow5mult+0xa0>
    6ed0:	9c401217 	ldw	r17,72(r19)
    6ed4:	8800061e 	bne	r17,zero,6ef0 <__pow5mult+0x58>
    6ed8:	00003406 	br	6fac <__pow5mult+0x114>
    6edc:	8021d07a 	srai	r16,r16,1
    6ee0:	80001526 	beq	r16,zero,6f38 <__pow5mult+0xa0>
    6ee4:	88800017 	ldw	r2,0(r17)
    6ee8:	10001c26 	beq	r2,zero,6f5c <__pow5mult+0xc4>
    6eec:	1023883a 	mov	r17,r2
    6ef0:	8080004c 	andi	r2,r16,1
    6ef4:	103ff926 	beq	r2,zero,6edc <_gp+0xfffed4fc>
    6ef8:	880d883a 	mov	r6,r17
    6efc:	900b883a 	mov	r5,r18
    6f00:	9809883a 	mov	r4,r19
    6f04:	0006ca00 	call	6ca0 <__multiply>
    6f08:	90001b26 	beq	r18,zero,6f78 <__pow5mult+0xe0>
    6f0c:	91000117 	ldw	r4,4(r18)
    6f10:	98c01317 	ldw	r3,76(r19)
    6f14:	8021d07a 	srai	r16,r16,1
    6f18:	2109883a 	add	r4,r4,r4
    6f1c:	2109883a 	add	r4,r4,r4
    6f20:	1907883a 	add	r3,r3,r4
    6f24:	19000017 	ldw	r4,0(r3)
    6f28:	91000015 	stw	r4,0(r18)
    6f2c:	1c800015 	stw	r18,0(r3)
    6f30:	1025883a 	mov	r18,r2
    6f34:	803feb1e 	bne	r16,zero,6ee4 <_gp+0xfffed504>
    6f38:	9005883a 	mov	r2,r18
    6f3c:	dfc00517 	ldw	ra,20(sp)
    6f40:	dd000417 	ldw	r20,16(sp)
    6f44:	dcc00317 	ldw	r19,12(sp)
    6f48:	dc800217 	ldw	r18,8(sp)
    6f4c:	dc400117 	ldw	r17,4(sp)
    6f50:	dc000017 	ldw	r16,0(sp)
    6f54:	dec00604 	addi	sp,sp,24
    6f58:	f800283a 	ret
    6f5c:	880d883a 	mov	r6,r17
    6f60:	880b883a 	mov	r5,r17
    6f64:	9809883a 	mov	r4,r19
    6f68:	0006ca00 	call	6ca0 <__multiply>
    6f6c:	88800015 	stw	r2,0(r17)
    6f70:	10000015 	stw	zero,0(r2)
    6f74:	003fdd06 	br	6eec <_gp+0xfffed50c>
    6f78:	1025883a 	mov	r18,r2
    6f7c:	003fd706 	br	6edc <_gp+0xfffed4fc>
    6f80:	10bfffc4 	addi	r2,r2,-1
    6f84:	1085883a 	add	r2,r2,r2
    6f88:	00c00074 	movhi	r3,1
    6f8c:	18ff3104 	addi	r3,r3,-828
    6f90:	1085883a 	add	r2,r2,r2
    6f94:	1885883a 	add	r2,r3,r2
    6f98:	11800017 	ldw	r6,0(r2)
    6f9c:	000f883a 	mov	r7,zero
    6fa0:	00069280 	call	6928 <__multadd>
    6fa4:	1025883a 	mov	r18,r2
    6fa8:	003fc706 	br	6ec8 <_gp+0xfffed4e8>
    6fac:	05000044 	movi	r20,1
    6fb0:	a00b883a 	mov	r5,r20
    6fb4:	9809883a 	mov	r4,r19
    6fb8:	00068580 	call	6858 <_Balloc>
    6fbc:	1023883a 	mov	r17,r2
    6fc0:	00809c44 	movi	r2,625
    6fc4:	88800515 	stw	r2,20(r17)
    6fc8:	8d000415 	stw	r20,16(r17)
    6fcc:	9c401215 	stw	r17,72(r19)
    6fd0:	88000015 	stw	zero,0(r17)
    6fd4:	003fc606 	br	6ef0 <_gp+0xfffed510>

00006fd8 <__lshift>:
    6fd8:	defff904 	addi	sp,sp,-28
    6fdc:	dd400515 	stw	r21,20(sp)
    6fe0:	dcc00315 	stw	r19,12(sp)
    6fe4:	302bd17a 	srai	r21,r6,5
    6fe8:	2cc00417 	ldw	r19,16(r5)
    6fec:	28800217 	ldw	r2,8(r5)
    6ff0:	dd000415 	stw	r20,16(sp)
    6ff4:	ace7883a 	add	r19,r21,r19
    6ff8:	dc800215 	stw	r18,8(sp)
    6ffc:	dc400115 	stw	r17,4(sp)
    7000:	dc000015 	stw	r16,0(sp)
    7004:	dfc00615 	stw	ra,24(sp)
    7008:	9c000044 	addi	r16,r19,1
    700c:	2823883a 	mov	r17,r5
    7010:	3029883a 	mov	r20,r6
    7014:	2025883a 	mov	r18,r4
    7018:	29400117 	ldw	r5,4(r5)
    701c:	1400030e 	bge	r2,r16,702c <__lshift+0x54>
    7020:	1085883a 	add	r2,r2,r2
    7024:	29400044 	addi	r5,r5,1
    7028:	143ffd16 	blt	r2,r16,7020 <_gp+0xfffed640>
    702c:	9009883a 	mov	r4,r18
    7030:	00068580 	call	6858 <_Balloc>
    7034:	10c00504 	addi	r3,r2,20
    7038:	0540070e 	bge	zero,r21,7058 <__lshift+0x80>
    703c:	ad6b883a 	add	r21,r21,r21
    7040:	ad6b883a 	add	r21,r21,r21
    7044:	1809883a 	mov	r4,r3
    7048:	1d47883a 	add	r3,r3,r21
    704c:	20000015 	stw	zero,0(r4)
    7050:	21000104 	addi	r4,r4,4
    7054:	193ffd1e 	bne	r3,r4,704c <_gp+0xfffed66c>
    7058:	8a000417 	ldw	r8,16(r17)
    705c:	89000504 	addi	r4,r17,20
    7060:	a18007cc 	andi	r6,r20,31
    7064:	4211883a 	add	r8,r8,r8
    7068:	4211883a 	add	r8,r8,r8
    706c:	2211883a 	add	r8,r4,r8
    7070:	30002326 	beq	r6,zero,7100 <__lshift+0x128>
    7074:	02400804 	movi	r9,32
    7078:	4993c83a 	sub	r9,r9,r6
    707c:	000b883a 	mov	r5,zero
    7080:	21c00017 	ldw	r7,0(r4)
    7084:	1815883a 	mov	r10,r3
    7088:	18c00104 	addi	r3,r3,4
    708c:	398e983a 	sll	r7,r7,r6
    7090:	21000104 	addi	r4,r4,4
    7094:	394ab03a 	or	r5,r7,r5
    7098:	197fff15 	stw	r5,-4(r3)
    709c:	217fff17 	ldw	r5,-4(r4)
    70a0:	2a4ad83a 	srl	r5,r5,r9
    70a4:	223ff636 	bltu	r4,r8,7080 <_gp+0xfffed6a0>
    70a8:	51400115 	stw	r5,4(r10)
    70ac:	28001a1e 	bne	r5,zero,7118 <__lshift+0x140>
    70b0:	843fffc4 	addi	r16,r16,-1
    70b4:	14000415 	stw	r16,16(r2)
    70b8:	88000826 	beq	r17,zero,70dc <__lshift+0x104>
    70bc:	89000117 	ldw	r4,4(r17)
    70c0:	90c01317 	ldw	r3,76(r18)
    70c4:	2109883a 	add	r4,r4,r4
    70c8:	2109883a 	add	r4,r4,r4
    70cc:	1907883a 	add	r3,r3,r4
    70d0:	19000017 	ldw	r4,0(r3)
    70d4:	89000015 	stw	r4,0(r17)
    70d8:	1c400015 	stw	r17,0(r3)
    70dc:	dfc00617 	ldw	ra,24(sp)
    70e0:	dd400517 	ldw	r21,20(sp)
    70e4:	dd000417 	ldw	r20,16(sp)
    70e8:	dcc00317 	ldw	r19,12(sp)
    70ec:	dc800217 	ldw	r18,8(sp)
    70f0:	dc400117 	ldw	r17,4(sp)
    70f4:	dc000017 	ldw	r16,0(sp)
    70f8:	dec00704 	addi	sp,sp,28
    70fc:	f800283a 	ret
    7100:	21400017 	ldw	r5,0(r4)
    7104:	18c00104 	addi	r3,r3,4
    7108:	21000104 	addi	r4,r4,4
    710c:	197fff15 	stw	r5,-4(r3)
    7110:	223ffb36 	bltu	r4,r8,7100 <_gp+0xfffed720>
    7114:	003fe606 	br	70b0 <_gp+0xfffed6d0>
    7118:	9c000084 	addi	r16,r19,2
    711c:	003fe406 	br	70b0 <_gp+0xfffed6d0>

00007120 <__mcmp>:
    7120:	20800417 	ldw	r2,16(r4)
    7124:	28c00417 	ldw	r3,16(r5)
    7128:	10c5c83a 	sub	r2,r2,r3
    712c:	1000111e 	bne	r2,zero,7174 <__mcmp+0x54>
    7130:	18c7883a 	add	r3,r3,r3
    7134:	18c7883a 	add	r3,r3,r3
    7138:	21000504 	addi	r4,r4,20
    713c:	29400504 	addi	r5,r5,20
    7140:	20c5883a 	add	r2,r4,r3
    7144:	28cb883a 	add	r5,r5,r3
    7148:	00000106 	br	7150 <__mcmp+0x30>
    714c:	20800a2e 	bgeu	r4,r2,7178 <__mcmp+0x58>
    7150:	10bfff04 	addi	r2,r2,-4
    7154:	297fff04 	addi	r5,r5,-4
    7158:	11800017 	ldw	r6,0(r2)
    715c:	28c00017 	ldw	r3,0(r5)
    7160:	30fffa26 	beq	r6,r3,714c <_gp+0xfffed76c>
    7164:	30c00236 	bltu	r6,r3,7170 <__mcmp+0x50>
    7168:	00800044 	movi	r2,1
    716c:	f800283a 	ret
    7170:	00bfffc4 	movi	r2,-1
    7174:	f800283a 	ret
    7178:	0005883a 	mov	r2,zero
    717c:	f800283a 	ret

00007180 <__mdiff>:
    7180:	28c00417 	ldw	r3,16(r5)
    7184:	30800417 	ldw	r2,16(r6)
    7188:	defffa04 	addi	sp,sp,-24
    718c:	dcc00315 	stw	r19,12(sp)
    7190:	dc800215 	stw	r18,8(sp)
    7194:	dfc00515 	stw	ra,20(sp)
    7198:	dd000415 	stw	r20,16(sp)
    719c:	dc400115 	stw	r17,4(sp)
    71a0:	dc000015 	stw	r16,0(sp)
    71a4:	1887c83a 	sub	r3,r3,r2
    71a8:	2825883a 	mov	r18,r5
    71ac:	3027883a 	mov	r19,r6
    71b0:	1800141e 	bne	r3,zero,7204 <__mdiff+0x84>
    71b4:	1085883a 	add	r2,r2,r2
    71b8:	1085883a 	add	r2,r2,r2
    71bc:	2a000504 	addi	r8,r5,20
    71c0:	34000504 	addi	r16,r6,20
    71c4:	4087883a 	add	r3,r8,r2
    71c8:	8085883a 	add	r2,r16,r2
    71cc:	00000106 	br	71d4 <__mdiff+0x54>
    71d0:	40c0592e 	bgeu	r8,r3,7338 <__mdiff+0x1b8>
    71d4:	18ffff04 	addi	r3,r3,-4
    71d8:	10bfff04 	addi	r2,r2,-4
    71dc:	19c00017 	ldw	r7,0(r3)
    71e0:	11400017 	ldw	r5,0(r2)
    71e4:	397ffa26 	beq	r7,r5,71d0 <_gp+0xfffed7f0>
    71e8:	3940592e 	bgeu	r7,r5,7350 <__mdiff+0x1d0>
    71ec:	9005883a 	mov	r2,r18
    71f0:	4023883a 	mov	r17,r8
    71f4:	9825883a 	mov	r18,r19
    71f8:	05000044 	movi	r20,1
    71fc:	1027883a 	mov	r19,r2
    7200:	00000406 	br	7214 <__mdiff+0x94>
    7204:	18005616 	blt	r3,zero,7360 <__mdiff+0x1e0>
    7208:	34400504 	addi	r17,r6,20
    720c:	2c000504 	addi	r16,r5,20
    7210:	0029883a 	mov	r20,zero
    7214:	91400117 	ldw	r5,4(r18)
    7218:	00068580 	call	6858 <_Balloc>
    721c:	92400417 	ldw	r9,16(r18)
    7220:	9b000417 	ldw	r12,16(r19)
    7224:	12c00504 	addi	r11,r2,20
    7228:	4a51883a 	add	r8,r9,r9
    722c:	6319883a 	add	r12,r12,r12
    7230:	4211883a 	add	r8,r8,r8
    7234:	6319883a 	add	r12,r12,r12
    7238:	15000315 	stw	r20,12(r2)
    723c:	8211883a 	add	r8,r16,r8
    7240:	8b19883a 	add	r12,r17,r12
    7244:	0007883a 	mov	r3,zero
    7248:	81400017 	ldw	r5,0(r16)
    724c:	89c00017 	ldw	r7,0(r17)
    7250:	59800104 	addi	r6,r11,4
    7254:	293fffcc 	andi	r4,r5,65535
    7258:	20c7883a 	add	r3,r4,r3
    725c:	393fffcc 	andi	r4,r7,65535
    7260:	1909c83a 	sub	r4,r3,r4
    7264:	280ad43a 	srli	r5,r5,16
    7268:	380ed43a 	srli	r7,r7,16
    726c:	2007d43a 	srai	r3,r4,16
    7270:	213fffcc 	andi	r4,r4,65535
    7274:	29cbc83a 	sub	r5,r5,r7
    7278:	28c7883a 	add	r3,r5,r3
    727c:	180a943a 	slli	r5,r3,16
    7280:	8c400104 	addi	r17,r17,4
    7284:	84000104 	addi	r16,r16,4
    7288:	2908b03a 	or	r4,r5,r4
    728c:	59000015 	stw	r4,0(r11)
    7290:	1807d43a 	srai	r3,r3,16
    7294:	3015883a 	mov	r10,r6
    7298:	3017883a 	mov	r11,r6
    729c:	8b3fea36 	bltu	r17,r12,7248 <_gp+0xfffed868>
    72a0:	8200162e 	bgeu	r16,r8,72fc <__mdiff+0x17c>
    72a4:	8017883a 	mov	r11,r16
    72a8:	59400017 	ldw	r5,0(r11)
    72ac:	31800104 	addi	r6,r6,4
    72b0:	5ac00104 	addi	r11,r11,4
    72b4:	293fffcc 	andi	r4,r5,65535
    72b8:	20c7883a 	add	r3,r4,r3
    72bc:	280ed43a 	srli	r7,r5,16
    72c0:	180bd43a 	srai	r5,r3,16
    72c4:	193fffcc 	andi	r4,r3,65535
    72c8:	3947883a 	add	r3,r7,r5
    72cc:	180a943a 	slli	r5,r3,16
    72d0:	1807d43a 	srai	r3,r3,16
    72d4:	2908b03a 	or	r4,r5,r4
    72d8:	313fff15 	stw	r4,-4(r6)
    72dc:	5a3ff236 	bltu	r11,r8,72a8 <_gp+0xfffed8c8>
    72e0:	0406303a 	nor	r3,zero,r16
    72e4:	1a07883a 	add	r3,r3,r8
    72e8:	1806d0ba 	srli	r3,r3,2
    72ec:	18c00044 	addi	r3,r3,1
    72f0:	18c7883a 	add	r3,r3,r3
    72f4:	18c7883a 	add	r3,r3,r3
    72f8:	50d5883a 	add	r10,r10,r3
    72fc:	50ffff04 	addi	r3,r10,-4
    7300:	2000041e 	bne	r4,zero,7314 <__mdiff+0x194>
    7304:	18ffff04 	addi	r3,r3,-4
    7308:	19000017 	ldw	r4,0(r3)
    730c:	4a7fffc4 	addi	r9,r9,-1
    7310:	203ffc26 	beq	r4,zero,7304 <_gp+0xfffed924>
    7314:	12400415 	stw	r9,16(r2)
    7318:	dfc00517 	ldw	ra,20(sp)
    731c:	dd000417 	ldw	r20,16(sp)
    7320:	dcc00317 	ldw	r19,12(sp)
    7324:	dc800217 	ldw	r18,8(sp)
    7328:	dc400117 	ldw	r17,4(sp)
    732c:	dc000017 	ldw	r16,0(sp)
    7330:	dec00604 	addi	sp,sp,24
    7334:	f800283a 	ret
    7338:	000b883a 	mov	r5,zero
    733c:	00068580 	call	6858 <_Balloc>
    7340:	00c00044 	movi	r3,1
    7344:	10c00415 	stw	r3,16(r2)
    7348:	10000515 	stw	zero,20(r2)
    734c:	003ff206 	br	7318 <_gp+0xfffed938>
    7350:	8023883a 	mov	r17,r16
    7354:	0029883a 	mov	r20,zero
    7358:	4021883a 	mov	r16,r8
    735c:	003fad06 	br	7214 <_gp+0xfffed834>
    7360:	9005883a 	mov	r2,r18
    7364:	94400504 	addi	r17,r18,20
    7368:	9c000504 	addi	r16,r19,20
    736c:	9825883a 	mov	r18,r19
    7370:	05000044 	movi	r20,1
    7374:	1027883a 	mov	r19,r2
    7378:	003fa606 	br	7214 <_gp+0xfffed834>

0000737c <__ulp>:
    737c:	295ffc2c 	andhi	r5,r5,32752
    7380:	00bf3034 	movhi	r2,64704
    7384:	2887883a 	add	r3,r5,r2
    7388:	00c0020e 	bge	zero,r3,7394 <__ulp+0x18>
    738c:	0005883a 	mov	r2,zero
    7390:	f800283a 	ret
    7394:	00c7c83a 	sub	r3,zero,r3
    7398:	1807d53a 	srai	r3,r3,20
    739c:	008004c4 	movi	r2,19
    73a0:	10c00b0e 	bge	r2,r3,73d0 <__ulp+0x54>
    73a4:	18bffb04 	addi	r2,r3,-20
    73a8:	01000784 	movi	r4,30
    73ac:	0007883a 	mov	r3,zero
    73b0:	20800516 	blt	r4,r2,73c8 <__ulp+0x4c>
    73b4:	010007c4 	movi	r4,31
    73b8:	2089c83a 	sub	r4,r4,r2
    73bc:	00800044 	movi	r2,1
    73c0:	1104983a 	sll	r2,r2,r4
    73c4:	f800283a 	ret
    73c8:	00800044 	movi	r2,1
    73cc:	f800283a 	ret
    73d0:	01400234 	movhi	r5,8
    73d4:	28c7d83a 	sra	r3,r5,r3
    73d8:	0005883a 	mov	r2,zero
    73dc:	f800283a 	ret

000073e0 <__b2d>:
    73e0:	defffa04 	addi	sp,sp,-24
    73e4:	dc000015 	stw	r16,0(sp)
    73e8:	24000417 	ldw	r16,16(r4)
    73ec:	dc400115 	stw	r17,4(sp)
    73f0:	24400504 	addi	r17,r4,20
    73f4:	8421883a 	add	r16,r16,r16
    73f8:	8421883a 	add	r16,r16,r16
    73fc:	8c21883a 	add	r16,r17,r16
    7400:	dc800215 	stw	r18,8(sp)
    7404:	84bfff17 	ldw	r18,-4(r16)
    7408:	dd000415 	stw	r20,16(sp)
    740c:	dcc00315 	stw	r19,12(sp)
    7410:	9009883a 	mov	r4,r18
    7414:	2829883a 	mov	r20,r5
    7418:	dfc00515 	stw	ra,20(sp)
    741c:	0006b4c0 	call	6b4c <__hi0bits>
    7420:	00c00804 	movi	r3,32
    7424:	1889c83a 	sub	r4,r3,r2
    7428:	a1000015 	stw	r4,0(r20)
    742c:	01000284 	movi	r4,10
    7430:	84ffff04 	addi	r19,r16,-4
    7434:	20801216 	blt	r4,r2,7480 <__b2d+0xa0>
    7438:	018002c4 	movi	r6,11
    743c:	308dc83a 	sub	r6,r6,r2
    7440:	9186d83a 	srl	r3,r18,r6
    7444:	18cffc34 	orhi	r3,r3,16368
    7448:	8cc0212e 	bgeu	r17,r19,74d0 <__b2d+0xf0>
    744c:	813ffe17 	ldw	r4,-8(r16)
    7450:	218cd83a 	srl	r6,r4,r6
    7454:	10800544 	addi	r2,r2,21
    7458:	9084983a 	sll	r2,r18,r2
    745c:	1184b03a 	or	r2,r2,r6
    7460:	dfc00517 	ldw	ra,20(sp)
    7464:	dd000417 	ldw	r20,16(sp)
    7468:	dcc00317 	ldw	r19,12(sp)
    746c:	dc800217 	ldw	r18,8(sp)
    7470:	dc400117 	ldw	r17,4(sp)
    7474:	dc000017 	ldw	r16,0(sp)
    7478:	dec00604 	addi	sp,sp,24
    747c:	f800283a 	ret
    7480:	8cc00f2e 	bgeu	r17,r19,74c0 <__b2d+0xe0>
    7484:	117ffd44 	addi	r5,r2,-11
    7488:	80bffe17 	ldw	r2,-8(r16)
    748c:	28000e26 	beq	r5,zero,74c8 <__b2d+0xe8>
    7490:	1949c83a 	sub	r4,r3,r5
    7494:	9164983a 	sll	r18,r18,r5
    7498:	1106d83a 	srl	r3,r2,r4
    749c:	81bffe04 	addi	r6,r16,-8
    74a0:	948ffc34 	orhi	r18,r18,16368
    74a4:	90c6b03a 	or	r3,r18,r3
    74a8:	89800e2e 	bgeu	r17,r6,74e4 <__b2d+0x104>
    74ac:	81bffd17 	ldw	r6,-12(r16)
    74b0:	1144983a 	sll	r2,r2,r5
    74b4:	310ad83a 	srl	r5,r6,r4
    74b8:	2884b03a 	or	r2,r5,r2
    74bc:	003fe806 	br	7460 <_gp+0xfffeda80>
    74c0:	10bffd44 	addi	r2,r2,-11
    74c4:	1000041e 	bne	r2,zero,74d8 <__b2d+0xf8>
    74c8:	90cffc34 	orhi	r3,r18,16368
    74cc:	003fe406 	br	7460 <_gp+0xfffeda80>
    74d0:	000d883a 	mov	r6,zero
    74d4:	003fdf06 	br	7454 <_gp+0xfffeda74>
    74d8:	90a4983a 	sll	r18,r18,r2
    74dc:	0005883a 	mov	r2,zero
    74e0:	003ff906 	br	74c8 <_gp+0xfffedae8>
    74e4:	1144983a 	sll	r2,r2,r5
    74e8:	003fdd06 	br	7460 <_gp+0xfffeda80>

000074ec <__d2b>:
    74ec:	defff804 	addi	sp,sp,-32
    74f0:	dc000215 	stw	r16,8(sp)
    74f4:	3021883a 	mov	r16,r6
    74f8:	dc400315 	stw	r17,12(sp)
    74fc:	8022907a 	slli	r17,r16,1
    7500:	dd000615 	stw	r20,24(sp)
    7504:	2829883a 	mov	r20,r5
    7508:	01400044 	movi	r5,1
    750c:	dcc00515 	stw	r19,20(sp)
    7510:	dc800415 	stw	r18,16(sp)
    7514:	dfc00715 	stw	ra,28(sp)
    7518:	3825883a 	mov	r18,r7
    751c:	8822d57a 	srli	r17,r17,21
    7520:	00068580 	call	6858 <_Balloc>
    7524:	1027883a 	mov	r19,r2
    7528:	00800434 	movhi	r2,16
    752c:	10bfffc4 	addi	r2,r2,-1
    7530:	808c703a 	and	r6,r16,r2
    7534:	88000126 	beq	r17,zero,753c <__d2b+0x50>
    7538:	31800434 	orhi	r6,r6,16
    753c:	d9800015 	stw	r6,0(sp)
    7540:	a0002426 	beq	r20,zero,75d4 <__d2b+0xe8>
    7544:	d9000104 	addi	r4,sp,4
    7548:	dd000115 	stw	r20,4(sp)
    754c:	0006bb40 	call	6bb4 <__lo0bits>
    7550:	d8c00017 	ldw	r3,0(sp)
    7554:	10002f1e 	bne	r2,zero,7614 <__d2b+0x128>
    7558:	d9000117 	ldw	r4,4(sp)
    755c:	99000515 	stw	r4,20(r19)
    7560:	1821003a 	cmpeq	r16,r3,zero
    7564:	01000084 	movi	r4,2
    7568:	2421c83a 	sub	r16,r4,r16
    756c:	98c00615 	stw	r3,24(r19)
    7570:	9c000415 	stw	r16,16(r19)
    7574:	88001f1e 	bne	r17,zero,75f4 <__d2b+0x108>
    7578:	10bef384 	addi	r2,r2,-1074
    757c:	90800015 	stw	r2,0(r18)
    7580:	00900034 	movhi	r2,16384
    7584:	10bfffc4 	addi	r2,r2,-1
    7588:	8085883a 	add	r2,r16,r2
    758c:	1085883a 	add	r2,r2,r2
    7590:	1085883a 	add	r2,r2,r2
    7594:	9885883a 	add	r2,r19,r2
    7598:	11000517 	ldw	r4,20(r2)
    759c:	8020917a 	slli	r16,r16,5
    75a0:	0006b4c0 	call	6b4c <__hi0bits>
    75a4:	d8c00817 	ldw	r3,32(sp)
    75a8:	8085c83a 	sub	r2,r16,r2
    75ac:	18800015 	stw	r2,0(r3)
    75b0:	9805883a 	mov	r2,r19
    75b4:	dfc00717 	ldw	ra,28(sp)
    75b8:	dd000617 	ldw	r20,24(sp)
    75bc:	dcc00517 	ldw	r19,20(sp)
    75c0:	dc800417 	ldw	r18,16(sp)
    75c4:	dc400317 	ldw	r17,12(sp)
    75c8:	dc000217 	ldw	r16,8(sp)
    75cc:	dec00804 	addi	sp,sp,32
    75d0:	f800283a 	ret
    75d4:	d809883a 	mov	r4,sp
    75d8:	0006bb40 	call	6bb4 <__lo0bits>
    75dc:	d8c00017 	ldw	r3,0(sp)
    75e0:	04000044 	movi	r16,1
    75e4:	9c000415 	stw	r16,16(r19)
    75e8:	98c00515 	stw	r3,20(r19)
    75ec:	10800804 	addi	r2,r2,32
    75f0:	883fe126 	beq	r17,zero,7578 <_gp+0xfffedb98>
    75f4:	00c00d44 	movi	r3,53
    75f8:	8c7ef344 	addi	r17,r17,-1075
    75fc:	88a3883a 	add	r17,r17,r2
    7600:	1885c83a 	sub	r2,r3,r2
    7604:	d8c00817 	ldw	r3,32(sp)
    7608:	94400015 	stw	r17,0(r18)
    760c:	18800015 	stw	r2,0(r3)
    7610:	003fe706 	br	75b0 <_gp+0xfffedbd0>
    7614:	01000804 	movi	r4,32
    7618:	2089c83a 	sub	r4,r4,r2
    761c:	1908983a 	sll	r4,r3,r4
    7620:	d9400117 	ldw	r5,4(sp)
    7624:	1886d83a 	srl	r3,r3,r2
    7628:	2148b03a 	or	r4,r4,r5
    762c:	99000515 	stw	r4,20(r19)
    7630:	d8c00015 	stw	r3,0(sp)
    7634:	003fca06 	br	7560 <_gp+0xfffedb80>

00007638 <__ratio>:
    7638:	defff904 	addi	sp,sp,-28
    763c:	dc400315 	stw	r17,12(sp)
    7640:	2823883a 	mov	r17,r5
    7644:	d9400104 	addi	r5,sp,4
    7648:	dfc00615 	stw	ra,24(sp)
    764c:	dcc00515 	stw	r19,20(sp)
    7650:	dc800415 	stw	r18,16(sp)
    7654:	2027883a 	mov	r19,r4
    7658:	dc000215 	stw	r16,8(sp)
    765c:	00073e00 	call	73e0 <__b2d>
    7660:	d80b883a 	mov	r5,sp
    7664:	8809883a 	mov	r4,r17
    7668:	1025883a 	mov	r18,r2
    766c:	1821883a 	mov	r16,r3
    7670:	00073e00 	call	73e0 <__b2d>
    7674:	8a000417 	ldw	r8,16(r17)
    7678:	99000417 	ldw	r4,16(r19)
    767c:	d9400117 	ldw	r5,4(sp)
    7680:	2209c83a 	sub	r4,r4,r8
    7684:	2010917a 	slli	r8,r4,5
    7688:	d9000017 	ldw	r4,0(sp)
    768c:	2909c83a 	sub	r4,r5,r4
    7690:	4109883a 	add	r4,r8,r4
    7694:	01000e0e 	bge	zero,r4,76d0 <__ratio+0x98>
    7698:	2008953a 	slli	r4,r4,20
    769c:	2421883a 	add	r16,r4,r16
    76a0:	100d883a 	mov	r6,r2
    76a4:	180f883a 	mov	r7,r3
    76a8:	9009883a 	mov	r4,r18
    76ac:	800b883a 	mov	r5,r16
    76b0:	000b4d80 	call	b4d8 <__divdf3>
    76b4:	dfc00617 	ldw	ra,24(sp)
    76b8:	dcc00517 	ldw	r19,20(sp)
    76bc:	dc800417 	ldw	r18,16(sp)
    76c0:	dc400317 	ldw	r17,12(sp)
    76c4:	dc000217 	ldw	r16,8(sp)
    76c8:	dec00704 	addi	sp,sp,28
    76cc:	f800283a 	ret
    76d0:	2008953a 	slli	r4,r4,20
    76d4:	1907c83a 	sub	r3,r3,r4
    76d8:	003ff106 	br	76a0 <_gp+0xfffedcc0>

000076dc <_mprec_log10>:
    76dc:	defffe04 	addi	sp,sp,-8
    76e0:	dc000015 	stw	r16,0(sp)
    76e4:	dfc00115 	stw	ra,4(sp)
    76e8:	008005c4 	movi	r2,23
    76ec:	2021883a 	mov	r16,r4
    76f0:	11000d0e 	bge	r2,r4,7728 <_mprec_log10+0x4c>
    76f4:	0005883a 	mov	r2,zero
    76f8:	00cffc34 	movhi	r3,16368
    76fc:	843fffc4 	addi	r16,r16,-1
    7700:	000d883a 	mov	r6,zero
    7704:	01d00934 	movhi	r7,16420
    7708:	1009883a 	mov	r4,r2
    770c:	180b883a 	mov	r5,r3
    7710:	000c0180 	call	c018 <__muldf3>
    7714:	803ff91e 	bne	r16,zero,76fc <_gp+0xfffedd1c>
    7718:	dfc00117 	ldw	ra,4(sp)
    771c:	dc000017 	ldw	r16,0(sp)
    7720:	dec00204 	addi	sp,sp,8
    7724:	f800283a 	ret
    7728:	202090fa 	slli	r16,r4,3
    772c:	00800074 	movhi	r2,1
    7730:	10bf4804 	addi	r2,r2,-736
    7734:	1421883a 	add	r16,r2,r16
    7738:	80800017 	ldw	r2,0(r16)
    773c:	80c00117 	ldw	r3,4(r16)
    7740:	dfc00117 	ldw	ra,4(sp)
    7744:	dc000017 	ldw	r16,0(sp)
    7748:	dec00204 	addi	sp,sp,8
    774c:	f800283a 	ret

00007750 <__copybits>:
    7750:	297fffc4 	addi	r5,r5,-1
    7754:	280fd17a 	srai	r7,r5,5
    7758:	30c00417 	ldw	r3,16(r6)
    775c:	30800504 	addi	r2,r6,20
    7760:	39c00044 	addi	r7,r7,1
    7764:	18c7883a 	add	r3,r3,r3
    7768:	39cf883a 	add	r7,r7,r7
    776c:	18c7883a 	add	r3,r3,r3
    7770:	39cf883a 	add	r7,r7,r7
    7774:	10c7883a 	add	r3,r2,r3
    7778:	21cf883a 	add	r7,r4,r7
    777c:	10c00d2e 	bgeu	r2,r3,77b4 <__copybits+0x64>
    7780:	200b883a 	mov	r5,r4
    7784:	12000017 	ldw	r8,0(r2)
    7788:	29400104 	addi	r5,r5,4
    778c:	10800104 	addi	r2,r2,4
    7790:	2a3fff15 	stw	r8,-4(r5)
    7794:	10fffb36 	bltu	r2,r3,7784 <_gp+0xfffedda4>
    7798:	1985c83a 	sub	r2,r3,r6
    779c:	10bffac4 	addi	r2,r2,-21
    77a0:	1004d0ba 	srli	r2,r2,2
    77a4:	10800044 	addi	r2,r2,1
    77a8:	1085883a 	add	r2,r2,r2
    77ac:	1085883a 	add	r2,r2,r2
    77b0:	2089883a 	add	r4,r4,r2
    77b4:	21c0032e 	bgeu	r4,r7,77c4 <__copybits+0x74>
    77b8:	20000015 	stw	zero,0(r4)
    77bc:	21000104 	addi	r4,r4,4
    77c0:	21fffd36 	bltu	r4,r7,77b8 <_gp+0xfffeddd8>
    77c4:	f800283a 	ret

000077c8 <__any_on>:
    77c8:	20c00417 	ldw	r3,16(r4)
    77cc:	2805d17a 	srai	r2,r5,5
    77d0:	21000504 	addi	r4,r4,20
    77d4:	18800d0e 	bge	r3,r2,780c <__any_on+0x44>
    77d8:	18c7883a 	add	r3,r3,r3
    77dc:	18c7883a 	add	r3,r3,r3
    77e0:	20c7883a 	add	r3,r4,r3
    77e4:	20c0192e 	bgeu	r4,r3,784c <__any_on+0x84>
    77e8:	18bfff17 	ldw	r2,-4(r3)
    77ec:	18ffff04 	addi	r3,r3,-4
    77f0:	1000041e 	bne	r2,zero,7804 <__any_on+0x3c>
    77f4:	20c0142e 	bgeu	r4,r3,7848 <__any_on+0x80>
    77f8:	18ffff04 	addi	r3,r3,-4
    77fc:	19400017 	ldw	r5,0(r3)
    7800:	283ffc26 	beq	r5,zero,77f4 <_gp+0xfffede14>
    7804:	00800044 	movi	r2,1
    7808:	f800283a 	ret
    780c:	10c00a0e 	bge	r2,r3,7838 <__any_on+0x70>
    7810:	1085883a 	add	r2,r2,r2
    7814:	1085883a 	add	r2,r2,r2
    7818:	294007cc 	andi	r5,r5,31
    781c:	2087883a 	add	r3,r4,r2
    7820:	283ff026 	beq	r5,zero,77e4 <_gp+0xfffede04>
    7824:	19800017 	ldw	r6,0(r3)
    7828:	3144d83a 	srl	r2,r6,r5
    782c:	114a983a 	sll	r5,r2,r5
    7830:	317ff41e 	bne	r6,r5,7804 <_gp+0xfffede24>
    7834:	003feb06 	br	77e4 <_gp+0xfffede04>
    7838:	1085883a 	add	r2,r2,r2
    783c:	1085883a 	add	r2,r2,r2
    7840:	2087883a 	add	r3,r4,r2
    7844:	003fe706 	br	77e4 <_gp+0xfffede04>
    7848:	f800283a 	ret
    784c:	0005883a 	mov	r2,zero
    7850:	f800283a 	ret

00007854 <_putc_r>:
    7854:	defffc04 	addi	sp,sp,-16
    7858:	dc000215 	stw	r16,8(sp)
    785c:	dfc00315 	stw	ra,12(sp)
    7860:	2021883a 	mov	r16,r4
    7864:	20000226 	beq	r4,zero,7870 <_putc_r+0x1c>
    7868:	20800e17 	ldw	r2,56(r4)
    786c:	10001b26 	beq	r2,zero,78dc <_putc_r+0x88>
    7870:	30800217 	ldw	r2,8(r6)
    7874:	10bfffc4 	addi	r2,r2,-1
    7878:	30800215 	stw	r2,8(r6)
    787c:	10000a16 	blt	r2,zero,78a8 <_putc_r+0x54>
    7880:	30800017 	ldw	r2,0(r6)
    7884:	11400005 	stb	r5,0(r2)
    7888:	30800017 	ldw	r2,0(r6)
    788c:	10c00044 	addi	r3,r2,1
    7890:	30c00015 	stw	r3,0(r6)
    7894:	10800003 	ldbu	r2,0(r2)
    7898:	dfc00317 	ldw	ra,12(sp)
    789c:	dc000217 	ldw	r16,8(sp)
    78a0:	dec00404 	addi	sp,sp,16
    78a4:	f800283a 	ret
    78a8:	30c00617 	ldw	r3,24(r6)
    78ac:	10c00616 	blt	r2,r3,78c8 <_putc_r+0x74>
    78b0:	30800017 	ldw	r2,0(r6)
    78b4:	00c00284 	movi	r3,10
    78b8:	11400005 	stb	r5,0(r2)
    78bc:	30800017 	ldw	r2,0(r6)
    78c0:	11400003 	ldbu	r5,0(r2)
    78c4:	28fff11e 	bne	r5,r3,788c <_gp+0xfffedeac>
    78c8:	8009883a 	mov	r4,r16
    78cc:	dfc00317 	ldw	ra,12(sp)
    78d0:	dc000217 	ldw	r16,8(sp)
    78d4:	dec00404 	addi	sp,sp,16
    78d8:	00098481 	jmpi	9848 <__swbuf_r>
    78dc:	d9400015 	stw	r5,0(sp)
    78e0:	d9800115 	stw	r6,4(sp)
    78e4:	0004f840 	call	4f84 <__sinit>
    78e8:	d9800117 	ldw	r6,4(sp)
    78ec:	d9400017 	ldw	r5,0(sp)
    78f0:	003fdf06 	br	7870 <_gp+0xfffede90>

000078f4 <putc>:
    78f4:	00800074 	movhi	r2,1
    78f8:	defffc04 	addi	sp,sp,-16
    78fc:	10867904 	addi	r2,r2,6628
    7900:	dc000115 	stw	r16,4(sp)
    7904:	14000017 	ldw	r16,0(r2)
    7908:	dc400215 	stw	r17,8(sp)
    790c:	dfc00315 	stw	ra,12(sp)
    7910:	2023883a 	mov	r17,r4
    7914:	80000226 	beq	r16,zero,7920 <putc+0x2c>
    7918:	80800e17 	ldw	r2,56(r16)
    791c:	10001a26 	beq	r2,zero,7988 <putc+0x94>
    7920:	28800217 	ldw	r2,8(r5)
    7924:	10bfffc4 	addi	r2,r2,-1
    7928:	28800215 	stw	r2,8(r5)
    792c:	10000b16 	blt	r2,zero,795c <putc+0x68>
    7930:	28800017 	ldw	r2,0(r5)
    7934:	14400005 	stb	r17,0(r2)
    7938:	28800017 	ldw	r2,0(r5)
    793c:	10c00044 	addi	r3,r2,1
    7940:	28c00015 	stw	r3,0(r5)
    7944:	10800003 	ldbu	r2,0(r2)
    7948:	dfc00317 	ldw	ra,12(sp)
    794c:	dc400217 	ldw	r17,8(sp)
    7950:	dc000117 	ldw	r16,4(sp)
    7954:	dec00404 	addi	sp,sp,16
    7958:	f800283a 	ret
    795c:	28c00617 	ldw	r3,24(r5)
    7960:	10c00e16 	blt	r2,r3,799c <putc+0xa8>
    7964:	28800017 	ldw	r2,0(r5)
    7968:	01000284 	movi	r4,10
    796c:	14400005 	stb	r17,0(r2)
    7970:	28800017 	ldw	r2,0(r5)
    7974:	10c00003 	ldbu	r3,0(r2)
    7978:	193ff01e 	bne	r3,r4,793c <_gp+0xfffedf5c>
    797c:	280d883a 	mov	r6,r5
    7980:	180b883a 	mov	r5,r3
    7984:	00000706 	br	79a4 <putc+0xb0>
    7988:	8009883a 	mov	r4,r16
    798c:	d9400015 	stw	r5,0(sp)
    7990:	0004f840 	call	4f84 <__sinit>
    7994:	d9400017 	ldw	r5,0(sp)
    7998:	003fe106 	br	7920 <_gp+0xfffedf40>
    799c:	280d883a 	mov	r6,r5
    79a0:	880b883a 	mov	r5,r17
    79a4:	8009883a 	mov	r4,r16
    79a8:	dfc00317 	ldw	ra,12(sp)
    79ac:	dc400217 	ldw	r17,8(sp)
    79b0:	dc000117 	ldw	r16,4(sp)
    79b4:	dec00404 	addi	sp,sp,16
    79b8:	00098481 	jmpi	9848 <__swbuf_r>

000079bc <_realloc_r>:
    79bc:	defff604 	addi	sp,sp,-40
    79c0:	dc400115 	stw	r17,4(sp)
    79c4:	dfc00915 	stw	ra,36(sp)
    79c8:	df000815 	stw	fp,32(sp)
    79cc:	ddc00715 	stw	r23,28(sp)
    79d0:	dd800615 	stw	r22,24(sp)
    79d4:	dd400515 	stw	r21,20(sp)
    79d8:	dd000415 	stw	r20,16(sp)
    79dc:	dcc00315 	stw	r19,12(sp)
    79e0:	dc800215 	stw	r18,8(sp)
    79e4:	dc000015 	stw	r16,0(sp)
    79e8:	3023883a 	mov	r17,r6
    79ec:	2800b626 	beq	r5,zero,7cc8 <_realloc_r+0x30c>
    79f0:	2829883a 	mov	r20,r5
    79f4:	2025883a 	mov	r18,r4
    79f8:	000d8a80 	call	d8a8 <__malloc_lock>
    79fc:	a0ffff17 	ldw	r3,-4(r20)
    7a00:	043fff04 	movi	r16,-4
    7a04:	888002c4 	addi	r2,r17,11
    7a08:	01000584 	movi	r4,22
    7a0c:	a57ffe04 	addi	r21,r20,-8
    7a10:	1c20703a 	and	r16,r3,r16
    7a14:	2080332e 	bgeu	r4,r2,7ae4 <_realloc_r+0x128>
    7a18:	05bffe04 	movi	r22,-8
    7a1c:	15ac703a 	and	r22,r2,r22
    7a20:	b005883a 	mov	r2,r22
    7a24:	b0005716 	blt	r22,zero,7b84 <_realloc_r+0x1c8>
    7a28:	b4405636 	bltu	r22,r17,7b84 <_realloc_r+0x1c8>
    7a2c:	8080300e 	bge	r16,r2,7af0 <_realloc_r+0x134>
    7a30:	07000074 	movhi	fp,1
    7a34:	e700f404 	addi	fp,fp,976
    7a38:	e2000217 	ldw	r8,8(fp)
    7a3c:	ac09883a 	add	r4,r21,r16
    7a40:	22006126 	beq	r4,r8,7bc8 <_realloc_r+0x20c>
    7a44:	22400117 	ldw	r9,4(r4)
    7a48:	01ffff84 	movi	r7,-2
    7a4c:	49ce703a 	and	r7,r9,r7
    7a50:	21cf883a 	add	r7,r4,r7
    7a54:	39800117 	ldw	r6,4(r7)
    7a58:	3180004c 	andi	r6,r6,1
    7a5c:	30003e26 	beq	r6,zero,7b58 <_realloc_r+0x19c>
    7a60:	18c0004c 	andi	r3,r3,1
    7a64:	18008126 	beq	r3,zero,7c6c <_realloc_r+0x2b0>
    7a68:	880b883a 	mov	r5,r17
    7a6c:	9009883a 	mov	r4,r18
    7a70:	0005ce40 	call	5ce4 <_malloc_r>
    7a74:	1023883a 	mov	r17,r2
    7a78:	10011e26 	beq	r2,zero,7ef4 <_realloc_r+0x538>
    7a7c:	a0ffff17 	ldw	r3,-4(r20)
    7a80:	113ffe04 	addi	r4,r2,-8
    7a84:	00bfff84 	movi	r2,-2
    7a88:	1884703a 	and	r2,r3,r2
    7a8c:	a885883a 	add	r2,r21,r2
    7a90:	2080ee26 	beq	r4,r2,7e4c <_realloc_r+0x490>
    7a94:	81bfff04 	addi	r6,r16,-4
    7a98:	00800904 	movi	r2,36
    7a9c:	1180b836 	bltu	r2,r6,7d80 <_realloc_r+0x3c4>
    7aa0:	00c004c4 	movi	r3,19
    7aa4:	19809536 	bltu	r3,r6,7cfc <_realloc_r+0x340>
    7aa8:	8805883a 	mov	r2,r17
    7aac:	a007883a 	mov	r3,r20
    7ab0:	19000017 	ldw	r4,0(r3)
    7ab4:	11000015 	stw	r4,0(r2)
    7ab8:	19000117 	ldw	r4,4(r3)
    7abc:	11000115 	stw	r4,4(r2)
    7ac0:	18c00217 	ldw	r3,8(r3)
    7ac4:	10c00215 	stw	r3,8(r2)
    7ac8:	a00b883a 	mov	r5,r20
    7acc:	9009883a 	mov	r4,r18
    7ad0:	00050f80 	call	50f8 <_free_r>
    7ad4:	9009883a 	mov	r4,r18
    7ad8:	000d8cc0 	call	d8cc <__malloc_unlock>
    7adc:	8805883a 	mov	r2,r17
    7ae0:	00001106 	br	7b28 <_realloc_r+0x16c>
    7ae4:	00800404 	movi	r2,16
    7ae8:	102d883a 	mov	r22,r2
    7aec:	003fce06 	br	7a28 <_gp+0xfffee048>
    7af0:	a023883a 	mov	r17,r20
    7af4:	858fc83a 	sub	r7,r16,r22
    7af8:	008003c4 	movi	r2,15
    7afc:	18c0004c 	andi	r3,r3,1
    7b00:	11c02436 	bltu	r2,r7,7b94 <_realloc_r+0x1d8>
    7b04:	1c06b03a 	or	r3,r3,r16
    7b08:	a8c00115 	stw	r3,4(r21)
    7b0c:	ac21883a 	add	r16,r21,r16
    7b10:	80800117 	ldw	r2,4(r16)
    7b14:	10800054 	ori	r2,r2,1
    7b18:	80800115 	stw	r2,4(r16)
    7b1c:	9009883a 	mov	r4,r18
    7b20:	000d8cc0 	call	d8cc <__malloc_unlock>
    7b24:	8805883a 	mov	r2,r17
    7b28:	dfc00917 	ldw	ra,36(sp)
    7b2c:	df000817 	ldw	fp,32(sp)
    7b30:	ddc00717 	ldw	r23,28(sp)
    7b34:	dd800617 	ldw	r22,24(sp)
    7b38:	dd400517 	ldw	r21,20(sp)
    7b3c:	dd000417 	ldw	r20,16(sp)
    7b40:	dcc00317 	ldw	r19,12(sp)
    7b44:	dc800217 	ldw	r18,8(sp)
    7b48:	dc400117 	ldw	r17,4(sp)
    7b4c:	dc000017 	ldw	r16,0(sp)
    7b50:	dec00a04 	addi	sp,sp,40
    7b54:	f800283a 	ret
    7b58:	017fff04 	movi	r5,-4
    7b5c:	494a703a 	and	r5,r9,r5
    7b60:	814d883a 	add	r6,r16,r5
    7b64:	30801e16 	blt	r6,r2,7be0 <_realloc_r+0x224>
    7b68:	20800317 	ldw	r2,12(r4)
    7b6c:	21000217 	ldw	r4,8(r4)
    7b70:	a023883a 	mov	r17,r20
    7b74:	3021883a 	mov	r16,r6
    7b78:	20800315 	stw	r2,12(r4)
    7b7c:	11000215 	stw	r4,8(r2)
    7b80:	003fdc06 	br	7af4 <_gp+0xfffee114>
    7b84:	00800304 	movi	r2,12
    7b88:	90800015 	stw	r2,0(r18)
    7b8c:	0005883a 	mov	r2,zero
    7b90:	003fe506 	br	7b28 <_gp+0xfffee148>
    7b94:	1d86b03a 	or	r3,r3,r22
    7b98:	a8c00115 	stw	r3,4(r21)
    7b9c:	ad8b883a 	add	r5,r21,r22
    7ba0:	38c00054 	ori	r3,r7,1
    7ba4:	28c00115 	stw	r3,4(r5)
    7ba8:	29cf883a 	add	r7,r5,r7
    7bac:	38c00117 	ldw	r3,4(r7)
    7bb0:	29400204 	addi	r5,r5,8
    7bb4:	9009883a 	mov	r4,r18
    7bb8:	18800054 	ori	r2,r3,1
    7bbc:	38800115 	stw	r2,4(r7)
    7bc0:	00050f80 	call	50f8 <_free_r>
    7bc4:	003fd506 	br	7b1c <_gp+0xfffee13c>
    7bc8:	21c00117 	ldw	r7,4(r4)
    7bcc:	017fff04 	movi	r5,-4
    7bd0:	b1800404 	addi	r6,r22,16
    7bd4:	394a703a 	and	r5,r7,r5
    7bd8:	814f883a 	add	r7,r16,r5
    7bdc:	39805b0e 	bge	r7,r6,7d4c <_realloc_r+0x390>
    7be0:	18c0004c 	andi	r3,r3,1
    7be4:	183fa01e 	bne	r3,zero,7a68 <_gp+0xfffee088>
    7be8:	a4fffe17 	ldw	r19,-8(r20)
    7bec:	00ffff04 	movi	r3,-4
    7bf0:	ace7c83a 	sub	r19,r21,r19
    7bf4:	99800117 	ldw	r6,4(r19)
    7bf8:	30c6703a 	and	r3,r6,r3
    7bfc:	20002026 	beq	r4,zero,7c80 <_realloc_r+0x2c4>
    7c00:	80ef883a 	add	r23,r16,r3
    7c04:	b96f883a 	add	r23,r23,r5
    7c08:	22006126 	beq	r4,r8,7d90 <_realloc_r+0x3d4>
    7c0c:	b8801c16 	blt	r23,r2,7c80 <_realloc_r+0x2c4>
    7c10:	20800317 	ldw	r2,12(r4)
    7c14:	20c00217 	ldw	r3,8(r4)
    7c18:	81bfff04 	addi	r6,r16,-4
    7c1c:	01000904 	movi	r4,36
    7c20:	18800315 	stw	r2,12(r3)
    7c24:	10c00215 	stw	r3,8(r2)
    7c28:	98c00217 	ldw	r3,8(r19)
    7c2c:	98800317 	ldw	r2,12(r19)
    7c30:	9c400204 	addi	r17,r19,8
    7c34:	18800315 	stw	r2,12(r3)
    7c38:	10c00215 	stw	r3,8(r2)
    7c3c:	21801b36 	bltu	r4,r6,7cac <_realloc_r+0x2f0>
    7c40:	008004c4 	movi	r2,19
    7c44:	1180362e 	bgeu	r2,r6,7d20 <_realloc_r+0x364>
    7c48:	a0800017 	ldw	r2,0(r20)
    7c4c:	98800215 	stw	r2,8(r19)
    7c50:	a0800117 	ldw	r2,4(r20)
    7c54:	98800315 	stw	r2,12(r19)
    7c58:	008006c4 	movi	r2,27
    7c5c:	11808136 	bltu	r2,r6,7e64 <_realloc_r+0x4a8>
    7c60:	98800404 	addi	r2,r19,16
    7c64:	a5000204 	addi	r20,r20,8
    7c68:	00002e06 	br	7d24 <_realloc_r+0x368>
    7c6c:	a4fffe17 	ldw	r19,-8(r20)
    7c70:	00ffff04 	movi	r3,-4
    7c74:	ace7c83a 	sub	r19,r21,r19
    7c78:	99000117 	ldw	r4,4(r19)
    7c7c:	20c6703a 	and	r3,r4,r3
    7c80:	983f7926 	beq	r19,zero,7a68 <_gp+0xfffee088>
    7c84:	80ef883a 	add	r23,r16,r3
    7c88:	b8bf7716 	blt	r23,r2,7a68 <_gp+0xfffee088>
    7c8c:	98800317 	ldw	r2,12(r19)
    7c90:	98c00217 	ldw	r3,8(r19)
    7c94:	81bfff04 	addi	r6,r16,-4
    7c98:	01000904 	movi	r4,36
    7c9c:	18800315 	stw	r2,12(r3)
    7ca0:	10c00215 	stw	r3,8(r2)
    7ca4:	9c400204 	addi	r17,r19,8
    7ca8:	21bfe52e 	bgeu	r4,r6,7c40 <_gp+0xfffee260>
    7cac:	a00b883a 	mov	r5,r20
    7cb0:	8809883a 	mov	r4,r17
    7cb4:	00065d40 	call	65d4 <memmove>
    7cb8:	98c00117 	ldw	r3,4(r19)
    7cbc:	b821883a 	mov	r16,r23
    7cc0:	982b883a 	mov	r21,r19
    7cc4:	003f8b06 	br	7af4 <_gp+0xfffee114>
    7cc8:	300b883a 	mov	r5,r6
    7ccc:	dfc00917 	ldw	ra,36(sp)
    7cd0:	df000817 	ldw	fp,32(sp)
    7cd4:	ddc00717 	ldw	r23,28(sp)
    7cd8:	dd800617 	ldw	r22,24(sp)
    7cdc:	dd400517 	ldw	r21,20(sp)
    7ce0:	dd000417 	ldw	r20,16(sp)
    7ce4:	dcc00317 	ldw	r19,12(sp)
    7ce8:	dc800217 	ldw	r18,8(sp)
    7cec:	dc400117 	ldw	r17,4(sp)
    7cf0:	dc000017 	ldw	r16,0(sp)
    7cf4:	dec00a04 	addi	sp,sp,40
    7cf8:	0005ce41 	jmpi	5ce4 <_malloc_r>
    7cfc:	a0c00017 	ldw	r3,0(r20)
    7d00:	88c00015 	stw	r3,0(r17)
    7d04:	a0c00117 	ldw	r3,4(r20)
    7d08:	88c00115 	stw	r3,4(r17)
    7d0c:	00c006c4 	movi	r3,27
    7d10:	19804636 	bltu	r3,r6,7e2c <_realloc_r+0x470>
    7d14:	88800204 	addi	r2,r17,8
    7d18:	a0c00204 	addi	r3,r20,8
    7d1c:	003f6406 	br	7ab0 <_gp+0xfffee0d0>
    7d20:	8805883a 	mov	r2,r17
    7d24:	a0c00017 	ldw	r3,0(r20)
    7d28:	b821883a 	mov	r16,r23
    7d2c:	982b883a 	mov	r21,r19
    7d30:	10c00015 	stw	r3,0(r2)
    7d34:	a0c00117 	ldw	r3,4(r20)
    7d38:	10c00115 	stw	r3,4(r2)
    7d3c:	a0c00217 	ldw	r3,8(r20)
    7d40:	10c00215 	stw	r3,8(r2)
    7d44:	98c00117 	ldw	r3,4(r19)
    7d48:	003f6a06 	br	7af4 <_gp+0xfffee114>
    7d4c:	adab883a 	add	r21,r21,r22
    7d50:	3d85c83a 	sub	r2,r7,r22
    7d54:	e5400215 	stw	r21,8(fp)
    7d58:	10800054 	ori	r2,r2,1
    7d5c:	a8800115 	stw	r2,4(r21)
    7d60:	a0bfff17 	ldw	r2,-4(r20)
    7d64:	9009883a 	mov	r4,r18
    7d68:	1080004c 	andi	r2,r2,1
    7d6c:	1584b03a 	or	r2,r2,r22
    7d70:	a0bfff15 	stw	r2,-4(r20)
    7d74:	000d8cc0 	call	d8cc <__malloc_unlock>
    7d78:	a005883a 	mov	r2,r20
    7d7c:	003f6a06 	br	7b28 <_gp+0xfffee148>
    7d80:	a00b883a 	mov	r5,r20
    7d84:	8809883a 	mov	r4,r17
    7d88:	00065d40 	call	65d4 <memmove>
    7d8c:	003f4e06 	br	7ac8 <_gp+0xfffee0e8>
    7d90:	b1000404 	addi	r4,r22,16
    7d94:	b93fba16 	blt	r23,r4,7c80 <_gp+0xfffee2a0>
    7d98:	98800317 	ldw	r2,12(r19)
    7d9c:	98c00217 	ldw	r3,8(r19)
    7da0:	81bfff04 	addi	r6,r16,-4
    7da4:	01000904 	movi	r4,36
    7da8:	18800315 	stw	r2,12(r3)
    7dac:	10c00215 	stw	r3,8(r2)
    7db0:	9c400204 	addi	r17,r19,8
    7db4:	21804336 	bltu	r4,r6,7ec4 <_realloc_r+0x508>
    7db8:	008004c4 	movi	r2,19
    7dbc:	11803f2e 	bgeu	r2,r6,7ebc <_realloc_r+0x500>
    7dc0:	a0800017 	ldw	r2,0(r20)
    7dc4:	98800215 	stw	r2,8(r19)
    7dc8:	a0800117 	ldw	r2,4(r20)
    7dcc:	98800315 	stw	r2,12(r19)
    7dd0:	008006c4 	movi	r2,27
    7dd4:	11803f36 	bltu	r2,r6,7ed4 <_realloc_r+0x518>
    7dd8:	98800404 	addi	r2,r19,16
    7ddc:	a5000204 	addi	r20,r20,8
    7de0:	a0c00017 	ldw	r3,0(r20)
    7de4:	10c00015 	stw	r3,0(r2)
    7de8:	a0c00117 	ldw	r3,4(r20)
    7dec:	10c00115 	stw	r3,4(r2)
    7df0:	a0c00217 	ldw	r3,8(r20)
    7df4:	10c00215 	stw	r3,8(r2)
    7df8:	9d87883a 	add	r3,r19,r22
    7dfc:	bd85c83a 	sub	r2,r23,r22
    7e00:	e0c00215 	stw	r3,8(fp)
    7e04:	10800054 	ori	r2,r2,1
    7e08:	18800115 	stw	r2,4(r3)
    7e0c:	98800117 	ldw	r2,4(r19)
    7e10:	9009883a 	mov	r4,r18
    7e14:	1080004c 	andi	r2,r2,1
    7e18:	1584b03a 	or	r2,r2,r22
    7e1c:	98800115 	stw	r2,4(r19)
    7e20:	000d8cc0 	call	d8cc <__malloc_unlock>
    7e24:	8805883a 	mov	r2,r17
    7e28:	003f3f06 	br	7b28 <_gp+0xfffee148>
    7e2c:	a0c00217 	ldw	r3,8(r20)
    7e30:	88c00215 	stw	r3,8(r17)
    7e34:	a0c00317 	ldw	r3,12(r20)
    7e38:	88c00315 	stw	r3,12(r17)
    7e3c:	30801126 	beq	r6,r2,7e84 <_realloc_r+0x4c8>
    7e40:	88800404 	addi	r2,r17,16
    7e44:	a0c00404 	addi	r3,r20,16
    7e48:	003f1906 	br	7ab0 <_gp+0xfffee0d0>
    7e4c:	893fff17 	ldw	r4,-4(r17)
    7e50:	00bfff04 	movi	r2,-4
    7e54:	a023883a 	mov	r17,r20
    7e58:	2084703a 	and	r2,r4,r2
    7e5c:	80a1883a 	add	r16,r16,r2
    7e60:	003f2406 	br	7af4 <_gp+0xfffee114>
    7e64:	a0800217 	ldw	r2,8(r20)
    7e68:	98800415 	stw	r2,16(r19)
    7e6c:	a0800317 	ldw	r2,12(r20)
    7e70:	98800515 	stw	r2,20(r19)
    7e74:	31000a26 	beq	r6,r4,7ea0 <_realloc_r+0x4e4>
    7e78:	98800604 	addi	r2,r19,24
    7e7c:	a5000404 	addi	r20,r20,16
    7e80:	003fa806 	br	7d24 <_gp+0xfffee344>
    7e84:	a1000417 	ldw	r4,16(r20)
    7e88:	88800604 	addi	r2,r17,24
    7e8c:	a0c00604 	addi	r3,r20,24
    7e90:	89000415 	stw	r4,16(r17)
    7e94:	a1000517 	ldw	r4,20(r20)
    7e98:	89000515 	stw	r4,20(r17)
    7e9c:	003f0406 	br	7ab0 <_gp+0xfffee0d0>
    7ea0:	a0c00417 	ldw	r3,16(r20)
    7ea4:	a5000604 	addi	r20,r20,24
    7ea8:	98800804 	addi	r2,r19,32
    7eac:	98c00615 	stw	r3,24(r19)
    7eb0:	a0ffff17 	ldw	r3,-4(r20)
    7eb4:	98c00715 	stw	r3,28(r19)
    7eb8:	003f9a06 	br	7d24 <_gp+0xfffee344>
    7ebc:	8805883a 	mov	r2,r17
    7ec0:	003fc706 	br	7de0 <_gp+0xfffee400>
    7ec4:	a00b883a 	mov	r5,r20
    7ec8:	8809883a 	mov	r4,r17
    7ecc:	00065d40 	call	65d4 <memmove>
    7ed0:	003fc906 	br	7df8 <_gp+0xfffee418>
    7ed4:	a0800217 	ldw	r2,8(r20)
    7ed8:	98800415 	stw	r2,16(r19)
    7edc:	a0800317 	ldw	r2,12(r20)
    7ee0:	98800515 	stw	r2,20(r19)
    7ee4:	31000726 	beq	r6,r4,7f04 <_realloc_r+0x548>
    7ee8:	98800604 	addi	r2,r19,24
    7eec:	a5000404 	addi	r20,r20,16
    7ef0:	003fbb06 	br	7de0 <_gp+0xfffee400>
    7ef4:	9009883a 	mov	r4,r18
    7ef8:	000d8cc0 	call	d8cc <__malloc_unlock>
    7efc:	0005883a 	mov	r2,zero
    7f00:	003f0906 	br	7b28 <_gp+0xfffee148>
    7f04:	a0c00417 	ldw	r3,16(r20)
    7f08:	a5000604 	addi	r20,r20,24
    7f0c:	98800804 	addi	r2,r19,32
    7f10:	98c00615 	stw	r3,24(r19)
    7f14:	a0ffff17 	ldw	r3,-4(r20)
    7f18:	98c00715 	stw	r3,28(r19)
    7f1c:	003fb006 	br	7de0 <_gp+0xfffee400>

00007f20 <__fpclassifyd>:
    7f20:	00a00034 	movhi	r2,32768
    7f24:	10bfffc4 	addi	r2,r2,-1
    7f28:	2884703a 	and	r2,r5,r2
    7f2c:	10000726 	beq	r2,zero,7f4c <__fpclassifyd+0x2c>
    7f30:	00fffc34 	movhi	r3,65520
    7f34:	019ff834 	movhi	r6,32736
    7f38:	28c7883a 	add	r3,r5,r3
    7f3c:	31bfffc4 	addi	r6,r6,-1
    7f40:	30c00536 	bltu	r6,r3,7f58 <__fpclassifyd+0x38>
    7f44:	00800104 	movi	r2,4
    7f48:	f800283a 	ret
    7f4c:	2000021e 	bne	r4,zero,7f58 <__fpclassifyd+0x38>
    7f50:	00800084 	movi	r2,2
    7f54:	f800283a 	ret
    7f58:	00dffc34 	movhi	r3,32752
    7f5c:	019ff834 	movhi	r6,32736
    7f60:	28cb883a 	add	r5,r5,r3
    7f64:	31bfffc4 	addi	r6,r6,-1
    7f68:	317ff62e 	bgeu	r6,r5,7f44 <_gp+0xfffee564>
    7f6c:	01400434 	movhi	r5,16
    7f70:	297fffc4 	addi	r5,r5,-1
    7f74:	28800236 	bltu	r5,r2,7f80 <__fpclassifyd+0x60>
    7f78:	008000c4 	movi	r2,3
    7f7c:	f800283a 	ret
    7f80:	10c00226 	beq	r2,r3,7f8c <__fpclassifyd+0x6c>
    7f84:	0005883a 	mov	r2,zero
    7f88:	f800283a 	ret
    7f8c:	2005003a 	cmpeq	r2,r4,zero
    7f90:	f800283a 	ret

00007f94 <_sbrk_r>:
    7f94:	defffd04 	addi	sp,sp,-12
    7f98:	dc000015 	stw	r16,0(sp)
    7f9c:	04000074 	movhi	r16,1
    7fa0:	dc400115 	stw	r17,4(sp)
    7fa4:	840d4904 	addi	r16,r16,13604
    7fa8:	2023883a 	mov	r17,r4
    7fac:	2809883a 	mov	r4,r5
    7fb0:	dfc00215 	stw	ra,8(sp)
    7fb4:	80000015 	stw	zero,0(r16)
    7fb8:	000daa00 	call	daa0 <sbrk>
    7fbc:	00ffffc4 	movi	r3,-1
    7fc0:	10c00526 	beq	r2,r3,7fd8 <_sbrk_r+0x44>
    7fc4:	dfc00217 	ldw	ra,8(sp)
    7fc8:	dc400117 	ldw	r17,4(sp)
    7fcc:	dc000017 	ldw	r16,0(sp)
    7fd0:	dec00304 	addi	sp,sp,12
    7fd4:	f800283a 	ret
    7fd8:	80c00017 	ldw	r3,0(r16)
    7fdc:	183ff926 	beq	r3,zero,7fc4 <_gp+0xfffee5e4>
    7fe0:	88c00015 	stw	r3,0(r17)
    7fe4:	003ff706 	br	7fc4 <_gp+0xfffee5e4>

00007fe8 <__sread>:
    7fe8:	defffe04 	addi	sp,sp,-8
    7fec:	dc000015 	stw	r16,0(sp)
    7ff0:	2821883a 	mov	r16,r5
    7ff4:	2940038f 	ldh	r5,14(r5)
    7ff8:	dfc00115 	stw	ra,4(sp)
    7ffc:	0009f340 	call	9f34 <_read_r>
    8000:	10000716 	blt	r2,zero,8020 <__sread+0x38>
    8004:	80c01417 	ldw	r3,80(r16)
    8008:	1887883a 	add	r3,r3,r2
    800c:	80c01415 	stw	r3,80(r16)
    8010:	dfc00117 	ldw	ra,4(sp)
    8014:	dc000017 	ldw	r16,0(sp)
    8018:	dec00204 	addi	sp,sp,8
    801c:	f800283a 	ret
    8020:	80c0030b 	ldhu	r3,12(r16)
    8024:	18fbffcc 	andi	r3,r3,61439
    8028:	80c0030d 	sth	r3,12(r16)
    802c:	dfc00117 	ldw	ra,4(sp)
    8030:	dc000017 	ldw	r16,0(sp)
    8034:	dec00204 	addi	sp,sp,8
    8038:	f800283a 	ret

0000803c <__seofread>:
    803c:	0005883a 	mov	r2,zero
    8040:	f800283a 	ret

00008044 <__swrite>:
    8044:	2880030b 	ldhu	r2,12(r5)
    8048:	defffb04 	addi	sp,sp,-20
    804c:	dcc00315 	stw	r19,12(sp)
    8050:	dc800215 	stw	r18,8(sp)
    8054:	dc400115 	stw	r17,4(sp)
    8058:	dc000015 	stw	r16,0(sp)
    805c:	dfc00415 	stw	ra,16(sp)
    8060:	10c0400c 	andi	r3,r2,256
    8064:	2821883a 	mov	r16,r5
    8068:	2023883a 	mov	r17,r4
    806c:	3025883a 	mov	r18,r6
    8070:	3827883a 	mov	r19,r7
    8074:	18000526 	beq	r3,zero,808c <__swrite+0x48>
    8078:	2940038f 	ldh	r5,14(r5)
    807c:	01c00084 	movi	r7,2
    8080:	000d883a 	mov	r6,zero
    8084:	0009ed40 	call	9ed4 <_lseek_r>
    8088:	8080030b 	ldhu	r2,12(r16)
    808c:	8140038f 	ldh	r5,14(r16)
    8090:	10bbffcc 	andi	r2,r2,61439
    8094:	980f883a 	mov	r7,r19
    8098:	900d883a 	mov	r6,r18
    809c:	8809883a 	mov	r4,r17
    80a0:	8080030d 	sth	r2,12(r16)
    80a4:	dfc00417 	ldw	ra,16(sp)
    80a8:	dcc00317 	ldw	r19,12(sp)
    80ac:	dc800217 	ldw	r18,8(sp)
    80b0:	dc400117 	ldw	r17,4(sp)
    80b4:	dc000017 	ldw	r16,0(sp)
    80b8:	dec00504 	addi	sp,sp,20
    80bc:	00099a01 	jmpi	99a0 <_write_r>

000080c0 <__sseek>:
    80c0:	defffe04 	addi	sp,sp,-8
    80c4:	dc000015 	stw	r16,0(sp)
    80c8:	2821883a 	mov	r16,r5
    80cc:	2940038f 	ldh	r5,14(r5)
    80d0:	dfc00115 	stw	ra,4(sp)
    80d4:	0009ed40 	call	9ed4 <_lseek_r>
    80d8:	00ffffc4 	movi	r3,-1
    80dc:	10c00826 	beq	r2,r3,8100 <__sseek+0x40>
    80e0:	80c0030b 	ldhu	r3,12(r16)
    80e4:	80801415 	stw	r2,80(r16)
    80e8:	18c40014 	ori	r3,r3,4096
    80ec:	80c0030d 	sth	r3,12(r16)
    80f0:	dfc00117 	ldw	ra,4(sp)
    80f4:	dc000017 	ldw	r16,0(sp)
    80f8:	dec00204 	addi	sp,sp,8
    80fc:	f800283a 	ret
    8100:	80c0030b 	ldhu	r3,12(r16)
    8104:	18fbffcc 	andi	r3,r3,61439
    8108:	80c0030d 	sth	r3,12(r16)
    810c:	dfc00117 	ldw	ra,4(sp)
    8110:	dc000017 	ldw	r16,0(sp)
    8114:	dec00204 	addi	sp,sp,8
    8118:	f800283a 	ret

0000811c <__sclose>:
    811c:	2940038f 	ldh	r5,14(r5)
    8120:	0009a001 	jmpi	9a00 <_close_r>

00008124 <strcmp>:
    8124:	2144b03a 	or	r2,r4,r5
    8128:	108000cc 	andi	r2,r2,3
    812c:	1000171e 	bne	r2,zero,818c <strcmp+0x68>
    8130:	20800017 	ldw	r2,0(r4)
    8134:	28c00017 	ldw	r3,0(r5)
    8138:	10c0141e 	bne	r2,r3,818c <strcmp+0x68>
    813c:	027fbff4 	movhi	r9,65279
    8140:	4a7fbfc4 	addi	r9,r9,-257
    8144:	0086303a 	nor	r3,zero,r2
    8148:	02202074 	movhi	r8,32897
    814c:	1245883a 	add	r2,r2,r9
    8150:	42202004 	addi	r8,r8,-32640
    8154:	10c4703a 	and	r2,r2,r3
    8158:	1204703a 	and	r2,r2,r8
    815c:	10000226 	beq	r2,zero,8168 <strcmp+0x44>
    8160:	00002306 	br	81f0 <strcmp+0xcc>
    8164:	1000221e 	bne	r2,zero,81f0 <strcmp+0xcc>
    8168:	21000104 	addi	r4,r4,4
    816c:	20c00017 	ldw	r3,0(r4)
    8170:	29400104 	addi	r5,r5,4
    8174:	29800017 	ldw	r6,0(r5)
    8178:	1a4f883a 	add	r7,r3,r9
    817c:	00c4303a 	nor	r2,zero,r3
    8180:	3884703a 	and	r2,r7,r2
    8184:	1204703a 	and	r2,r2,r8
    8188:	19bff626 	beq	r3,r6,8164 <_gp+0xfffee784>
    818c:	20800003 	ldbu	r2,0(r4)
    8190:	10c03fcc 	andi	r3,r2,255
    8194:	18c0201c 	xori	r3,r3,128
    8198:	18ffe004 	addi	r3,r3,-128
    819c:	18000c26 	beq	r3,zero,81d0 <strcmp+0xac>
    81a0:	29800007 	ldb	r6,0(r5)
    81a4:	19800326 	beq	r3,r6,81b4 <strcmp+0x90>
    81a8:	00001306 	br	81f8 <strcmp+0xd4>
    81ac:	29800007 	ldb	r6,0(r5)
    81b0:	11800b1e 	bne	r2,r6,81e0 <strcmp+0xbc>
    81b4:	21000044 	addi	r4,r4,1
    81b8:	20c00003 	ldbu	r3,0(r4)
    81bc:	29400044 	addi	r5,r5,1
    81c0:	18803fcc 	andi	r2,r3,255
    81c4:	1080201c 	xori	r2,r2,128
    81c8:	10bfe004 	addi	r2,r2,-128
    81cc:	103ff71e 	bne	r2,zero,81ac <_gp+0xfffee7cc>
    81d0:	0007883a 	mov	r3,zero
    81d4:	28800003 	ldbu	r2,0(r5)
    81d8:	1885c83a 	sub	r2,r3,r2
    81dc:	f800283a 	ret
    81e0:	28800003 	ldbu	r2,0(r5)
    81e4:	18c03fcc 	andi	r3,r3,255
    81e8:	1885c83a 	sub	r2,r3,r2
    81ec:	f800283a 	ret
    81f0:	0005883a 	mov	r2,zero
    81f4:	f800283a 	ret
    81f8:	10c03fcc 	andi	r3,r2,255
    81fc:	003ff506 	br	81d4 <_gp+0xfffee7f4>

00008200 <__sprint_r.part.0>:
    8200:	28801917 	ldw	r2,100(r5)
    8204:	defff604 	addi	sp,sp,-40
    8208:	dd400515 	stw	r21,20(sp)
    820c:	dfc00915 	stw	ra,36(sp)
    8210:	df000815 	stw	fp,32(sp)
    8214:	ddc00715 	stw	r23,28(sp)
    8218:	dd800615 	stw	r22,24(sp)
    821c:	dd000415 	stw	r20,16(sp)
    8220:	dcc00315 	stw	r19,12(sp)
    8224:	dc800215 	stw	r18,8(sp)
    8228:	dc400115 	stw	r17,4(sp)
    822c:	dc000015 	stw	r16,0(sp)
    8230:	1088000c 	andi	r2,r2,8192
    8234:	302b883a 	mov	r21,r6
    8238:	10002e26 	beq	r2,zero,82f4 <__sprint_r.part.0+0xf4>
    823c:	30800217 	ldw	r2,8(r6)
    8240:	35800017 	ldw	r22,0(r6)
    8244:	10002926 	beq	r2,zero,82ec <__sprint_r.part.0+0xec>
    8248:	2827883a 	mov	r19,r5
    824c:	2029883a 	mov	r20,r4
    8250:	b5c00104 	addi	r23,r22,4
    8254:	04bfffc4 	movi	r18,-1
    8258:	bc400017 	ldw	r17,0(r23)
    825c:	b4000017 	ldw	r16,0(r22)
    8260:	0039883a 	mov	fp,zero
    8264:	8822d0ba 	srli	r17,r17,2
    8268:	8800031e 	bne	r17,zero,8278 <__sprint_r.part.0+0x78>
    826c:	00001806 	br	82d0 <__sprint_r.part.0+0xd0>
    8270:	84000104 	addi	r16,r16,4
    8274:	8f001526 	beq	r17,fp,82cc <__sprint_r.part.0+0xcc>
    8278:	81400017 	ldw	r5,0(r16)
    827c:	980d883a 	mov	r6,r19
    8280:	a009883a 	mov	r4,r20
    8284:	0009d800 	call	9d80 <_fputwc_r>
    8288:	e7000044 	addi	fp,fp,1
    828c:	14bff81e 	bne	r2,r18,8270 <_gp+0xfffee890>
    8290:	9005883a 	mov	r2,r18
    8294:	a8000215 	stw	zero,8(r21)
    8298:	a8000115 	stw	zero,4(r21)
    829c:	dfc00917 	ldw	ra,36(sp)
    82a0:	df000817 	ldw	fp,32(sp)
    82a4:	ddc00717 	ldw	r23,28(sp)
    82a8:	dd800617 	ldw	r22,24(sp)
    82ac:	dd400517 	ldw	r21,20(sp)
    82b0:	dd000417 	ldw	r20,16(sp)
    82b4:	dcc00317 	ldw	r19,12(sp)
    82b8:	dc800217 	ldw	r18,8(sp)
    82bc:	dc400117 	ldw	r17,4(sp)
    82c0:	dc000017 	ldw	r16,0(sp)
    82c4:	dec00a04 	addi	sp,sp,40
    82c8:	f800283a 	ret
    82cc:	a8800217 	ldw	r2,8(r21)
    82d0:	8c63883a 	add	r17,r17,r17
    82d4:	8c63883a 	add	r17,r17,r17
    82d8:	1445c83a 	sub	r2,r2,r17
    82dc:	a8800215 	stw	r2,8(r21)
    82e0:	b5800204 	addi	r22,r22,8
    82e4:	bdc00204 	addi	r23,r23,8
    82e8:	103fdb1e 	bne	r2,zero,8258 <_gp+0xfffee878>
    82ec:	0005883a 	mov	r2,zero
    82f0:	003fe806 	br	8294 <_gp+0xfffee8b4>
    82f4:	00054080 	call	5408 <__sfvwrite_r>
    82f8:	003fe606 	br	8294 <_gp+0xfffee8b4>

000082fc <__sprint_r>:
    82fc:	30c00217 	ldw	r3,8(r6)
    8300:	18000126 	beq	r3,zero,8308 <__sprint_r+0xc>
    8304:	00082001 	jmpi	8200 <__sprint_r.part.0>
    8308:	30000115 	stw	zero,4(r6)
    830c:	0005883a 	mov	r2,zero
    8310:	f800283a 	ret

00008314 <___vfiprintf_internal_r>:
    8314:	deffc904 	addi	sp,sp,-220
    8318:	df003515 	stw	fp,212(sp)
    831c:	dd003115 	stw	r20,196(sp)
    8320:	dfc03615 	stw	ra,216(sp)
    8324:	ddc03415 	stw	r23,208(sp)
    8328:	dd803315 	stw	r22,204(sp)
    832c:	dd403215 	stw	r21,200(sp)
    8330:	dcc03015 	stw	r19,192(sp)
    8334:	dc802f15 	stw	r18,188(sp)
    8338:	dc402e15 	stw	r17,184(sp)
    833c:	dc002d15 	stw	r16,180(sp)
    8340:	d9002015 	stw	r4,128(sp)
    8344:	d9c02215 	stw	r7,136(sp)
    8348:	2829883a 	mov	r20,r5
    834c:	3039883a 	mov	fp,r6
    8350:	20000226 	beq	r4,zero,835c <___vfiprintf_internal_r+0x48>
    8354:	20800e17 	ldw	r2,56(r4)
    8358:	1000cf26 	beq	r2,zero,8698 <___vfiprintf_internal_r+0x384>
    835c:	a080030b 	ldhu	r2,12(r20)
    8360:	10c8000c 	andi	r3,r2,8192
    8364:	1800061e 	bne	r3,zero,8380 <___vfiprintf_internal_r+0x6c>
    8368:	a1001917 	ldw	r4,100(r20)
    836c:	00f7ffc4 	movi	r3,-8193
    8370:	10880014 	ori	r2,r2,8192
    8374:	20c6703a 	and	r3,r4,r3
    8378:	a080030d 	sth	r2,12(r20)
    837c:	a0c01915 	stw	r3,100(r20)
    8380:	10c0020c 	andi	r3,r2,8
    8384:	1800a926 	beq	r3,zero,862c <___vfiprintf_internal_r+0x318>
    8388:	a0c00417 	ldw	r3,16(r20)
    838c:	1800a726 	beq	r3,zero,862c <___vfiprintf_internal_r+0x318>
    8390:	1080068c 	andi	r2,r2,26
    8394:	00c00284 	movi	r3,10
    8398:	10c0ac26 	beq	r2,r3,864c <___vfiprintf_internal_r+0x338>
    839c:	da801a04 	addi	r10,sp,104
    83a0:	da801e15 	stw	r10,120(sp)
    83a4:	d8801e17 	ldw	r2,120(sp)
    83a8:	da8019c4 	addi	r10,sp,103
    83ac:	05800074 	movhi	r22,1
    83b0:	05c00074 	movhi	r23,1
    83b4:	da801f15 	stw	r10,124(sp)
    83b8:	1295c83a 	sub	r10,r2,r10
    83bc:	b5bf7e04 	addi	r22,r22,-520
    83c0:	bdff7a04 	addi	r23,r23,-536
    83c4:	dec01a15 	stw	sp,104(sp)
    83c8:	d8001c15 	stw	zero,112(sp)
    83cc:	d8001b15 	stw	zero,108(sp)
    83d0:	d8002615 	stw	zero,152(sp)
    83d4:	d8002315 	stw	zero,140(sp)
    83d8:	da802715 	stw	r10,156(sp)
    83dc:	d811883a 	mov	r8,sp
    83e0:	dd002115 	stw	r20,132(sp)
    83e4:	e021883a 	mov	r16,fp
    83e8:	80800007 	ldb	r2,0(r16)
    83ec:	1003ea26 	beq	r2,zero,9398 <___vfiprintf_internal_r+0x1084>
    83f0:	00c00944 	movi	r3,37
    83f4:	8025883a 	mov	r18,r16
    83f8:	10c0021e 	bne	r2,r3,8404 <___vfiprintf_internal_r+0xf0>
    83fc:	00001606 	br	8458 <___vfiprintf_internal_r+0x144>
    8400:	10c00326 	beq	r2,r3,8410 <___vfiprintf_internal_r+0xfc>
    8404:	94800044 	addi	r18,r18,1
    8408:	90800007 	ldb	r2,0(r18)
    840c:	103ffc1e 	bne	r2,zero,8400 <_gp+0xfffeea20>
    8410:	9423c83a 	sub	r17,r18,r16
    8414:	88001026 	beq	r17,zero,8458 <___vfiprintf_internal_r+0x144>
    8418:	d8c01c17 	ldw	r3,112(sp)
    841c:	d8801b17 	ldw	r2,108(sp)
    8420:	44000015 	stw	r16,0(r8)
    8424:	88c7883a 	add	r3,r17,r3
    8428:	10800044 	addi	r2,r2,1
    842c:	44400115 	stw	r17,4(r8)
    8430:	d8c01c15 	stw	r3,112(sp)
    8434:	d8801b15 	stw	r2,108(sp)
    8438:	010001c4 	movi	r4,7
    843c:	2080760e 	bge	r4,r2,8618 <___vfiprintf_internal_r+0x304>
    8440:	1803821e 	bne	r3,zero,924c <___vfiprintf_internal_r+0xf38>
    8444:	da802317 	ldw	r10,140(sp)
    8448:	d8001b15 	stw	zero,108(sp)
    844c:	d811883a 	mov	r8,sp
    8450:	5455883a 	add	r10,r10,r17
    8454:	da802315 	stw	r10,140(sp)
    8458:	90800007 	ldb	r2,0(r18)
    845c:	10044626 	beq	r2,zero,9578 <___vfiprintf_internal_r+0x1264>
    8460:	90c00047 	ldb	r3,1(r18)
    8464:	94000044 	addi	r16,r18,1
    8468:	d8001d85 	stb	zero,118(sp)
    846c:	0009883a 	mov	r4,zero
    8470:	000f883a 	mov	r7,zero
    8474:	027fffc4 	movi	r9,-1
    8478:	0023883a 	mov	r17,zero
    847c:	0029883a 	mov	r20,zero
    8480:	01401604 	movi	r5,88
    8484:	01800244 	movi	r6,9
    8488:	03400a84 	movi	r13,42
    848c:	03001b04 	movi	r12,108
    8490:	84000044 	addi	r16,r16,1
    8494:	18bff804 	addi	r2,r3,-32
    8498:	28827336 	bltu	r5,r2,8e68 <___vfiprintf_internal_r+0xb54>
    849c:	100490ba 	slli	r2,r2,2
    84a0:	02800074 	movhi	r10,1
    84a4:	52a12d04 	addi	r10,r10,-31564
    84a8:	1285883a 	add	r2,r2,r10
    84ac:	10800017 	ldw	r2,0(r2)
    84b0:	1000683a 	jmp	r2
    84b4:	00008b9c 	xori	zero,zero,558
    84b8:	00008e68 	cmpgeui	zero,zero,569
    84bc:	00008e68 	cmpgeui	zero,zero,569
    84c0:	00008bbc 	xorhi	zero,zero,558
    84c4:	00008e68 	cmpgeui	zero,zero,569
    84c8:	00008e68 	cmpgeui	zero,zero,569
    84cc:	00008e68 	cmpgeui	zero,zero,569
    84d0:	00008e68 	cmpgeui	zero,zero,569
    84d4:	00008e68 	cmpgeui	zero,zero,569
    84d8:	00008e68 	cmpgeui	zero,zero,569
    84dc:	00008da4 	muli	zero,zero,566
    84e0:	00008dc0 	call	8dc <__modsi3+0x6c>
    84e4:	00008e68 	cmpgeui	zero,zero,569
    84e8:	000086a8 	cmpgeui	zero,zero,538
    84ec:	00008dd0 	cmplti	zero,zero,567
    84f0:	00008e68 	cmpgeui	zero,zero,569
    84f4:	00008bc8 	cmpgei	zero,zero,559
    84f8:	00008bd4 	movui	zero,559
    84fc:	00008bd4 	movui	zero,559
    8500:	00008bd4 	movui	zero,559
    8504:	00008bd4 	movui	zero,559
    8508:	00008bd4 	movui	zero,559
    850c:	00008bd4 	movui	zero,559
    8510:	00008bd4 	movui	zero,559
    8514:	00008bd4 	movui	zero,559
    8518:	00008bd4 	movui	zero,559
    851c:	00008e68 	cmpgeui	zero,zero,569
    8520:	00008e68 	cmpgeui	zero,zero,569
    8524:	00008e68 	cmpgeui	zero,zero,569
    8528:	00008e68 	cmpgeui	zero,zero,569
    852c:	00008e68 	cmpgeui	zero,zero,569
    8530:	00008e68 	cmpgeui	zero,zero,569
    8534:	00008e68 	cmpgeui	zero,zero,569
    8538:	00008e68 	cmpgeui	zero,zero,569
    853c:	00008e68 	cmpgeui	zero,zero,569
    8540:	00008e68 	cmpgeui	zero,zero,569
    8544:	00008c00 	call	8c0 <__modsi3+0x50>
    8548:	00008e68 	cmpgeui	zero,zero,569
    854c:	00008e68 	cmpgeui	zero,zero,569
    8550:	00008e68 	cmpgeui	zero,zero,569
    8554:	00008e68 	cmpgeui	zero,zero,569
    8558:	00008e68 	cmpgeui	zero,zero,569
    855c:	00008e68 	cmpgeui	zero,zero,569
    8560:	00008e68 	cmpgeui	zero,zero,569
    8564:	00008e68 	cmpgeui	zero,zero,569
    8568:	00008e68 	cmpgeui	zero,zero,569
    856c:	00008e68 	cmpgeui	zero,zero,569
    8570:	00008c38 	rdprs	zero,zero,560
    8574:	00008e68 	cmpgeui	zero,zero,569
    8578:	00008e68 	cmpgeui	zero,zero,569
    857c:	00008e68 	cmpgeui	zero,zero,569
    8580:	00008e68 	cmpgeui	zero,zero,569
    8584:	00008e68 	cmpgeui	zero,zero,569
    8588:	00008c90 	cmplti	zero,zero,562
    858c:	00008e68 	cmpgeui	zero,zero,569
    8590:	00008e68 	cmpgeui	zero,zero,569
    8594:	00008d00 	call	8d0 <__modsi3+0x60>
    8598:	00008e68 	cmpgeui	zero,zero,569
    859c:	00008e68 	cmpgeui	zero,zero,569
    85a0:	00008e68 	cmpgeui	zero,zero,569
    85a4:	00008e68 	cmpgeui	zero,zero,569
    85a8:	00008e68 	cmpgeui	zero,zero,569
    85ac:	00008e68 	cmpgeui	zero,zero,569
    85b0:	00008e68 	cmpgeui	zero,zero,569
    85b4:	00008e68 	cmpgeui	zero,zero,569
    85b8:	00008e68 	cmpgeui	zero,zero,569
    85bc:	00008e68 	cmpgeui	zero,zero,569
    85c0:	00008aac 	andhi	zero,zero,554
    85c4:	00008ad8 	cmpnei	zero,zero,555
    85c8:	00008e68 	cmpgeui	zero,zero,569
    85cc:	00008e68 	cmpgeui	zero,zero,569
    85d0:	00008e68 	cmpgeui	zero,zero,569
    85d4:	00008e10 	cmplti	zero,zero,568
    85d8:	00008ad8 	cmpnei	zero,zero,555
    85dc:	00008e68 	cmpgeui	zero,zero,569
    85e0:	00008e68 	cmpgeui	zero,zero,569
    85e4:	0000896c 	andhi	zero,zero,549
    85e8:	00008e68 	cmpgeui	zero,zero,569
    85ec:	0000897c 	xorhi	zero,zero,549
    85f0:	000089b8 	rdprs	zero,zero,550
    85f4:	000086b4 	movhi	zero,538
    85f8:	00008960 	cmpeqi	zero,zero,549
    85fc:	00008e68 	cmpgeui	zero,zero,569
    8600:	00008d3c 	xorhi	zero,zero,564
    8604:	00008e68 	cmpgeui	zero,zero,569
    8608:	00008d94 	movui	zero,566
    860c:	00008e68 	cmpgeui	zero,zero,569
    8610:	00008e68 	cmpgeui	zero,zero,569
    8614:	00008a58 	cmpnei	zero,zero,553
    8618:	42000204 	addi	r8,r8,8
    861c:	da802317 	ldw	r10,140(sp)
    8620:	5455883a 	add	r10,r10,r17
    8624:	da802315 	stw	r10,140(sp)
    8628:	003f8b06 	br	8458 <_gp+0xfffeea78>
    862c:	d9002017 	ldw	r4,128(sp)
    8630:	a00b883a 	mov	r5,r20
    8634:	0002fb00 	call	2fb0 <__swsetup_r>
    8638:	1003b11e 	bne	r2,zero,9500 <___vfiprintf_internal_r+0x11ec>
    863c:	a080030b 	ldhu	r2,12(r20)
    8640:	00c00284 	movi	r3,10
    8644:	1080068c 	andi	r2,r2,26
    8648:	10ff541e 	bne	r2,r3,839c <_gp+0xfffee9bc>
    864c:	a080038f 	ldh	r2,14(r20)
    8650:	103f5216 	blt	r2,zero,839c <_gp+0xfffee9bc>
    8654:	d9c02217 	ldw	r7,136(sp)
    8658:	d9002017 	ldw	r4,128(sp)
    865c:	e00d883a 	mov	r6,fp
    8660:	a00b883a 	mov	r5,r20
    8664:	000978c0 	call	978c <__sbprintf>
    8668:	dfc03617 	ldw	ra,216(sp)
    866c:	df003517 	ldw	fp,212(sp)
    8670:	ddc03417 	ldw	r23,208(sp)
    8674:	dd803317 	ldw	r22,204(sp)
    8678:	dd403217 	ldw	r21,200(sp)
    867c:	dd003117 	ldw	r20,196(sp)
    8680:	dcc03017 	ldw	r19,192(sp)
    8684:	dc802f17 	ldw	r18,188(sp)
    8688:	dc402e17 	ldw	r17,184(sp)
    868c:	dc002d17 	ldw	r16,180(sp)
    8690:	dec03704 	addi	sp,sp,220
    8694:	f800283a 	ret
    8698:	0004f840 	call	4f84 <__sinit>
    869c:	003f2f06 	br	835c <_gp+0xfffee97c>
    86a0:	0463c83a 	sub	r17,zero,r17
    86a4:	d8802215 	stw	r2,136(sp)
    86a8:	a5000114 	ori	r20,r20,4
    86ac:	80c00007 	ldb	r3,0(r16)
    86b0:	003f7706 	br	8490 <_gp+0xfffeeab0>
    86b4:	00800c04 	movi	r2,48
    86b8:	da802217 	ldw	r10,136(sp)
    86bc:	d8801d05 	stb	r2,116(sp)
    86c0:	00801e04 	movi	r2,120
    86c4:	d8801d45 	stb	r2,117(sp)
    86c8:	d8001d85 	stb	zero,118(sp)
    86cc:	50c00104 	addi	r3,r10,4
    86d0:	54800017 	ldw	r18,0(r10)
    86d4:	0027883a 	mov	r19,zero
    86d8:	a0800094 	ori	r2,r20,2
    86dc:	48030b16 	blt	r9,zero,930c <___vfiprintf_internal_r+0xff8>
    86e0:	00bfdfc4 	movi	r2,-129
    86e4:	a096703a 	and	r11,r20,r2
    86e8:	d8c02215 	stw	r3,136(sp)
    86ec:	5d000094 	ori	r20,r11,2
    86f0:	90032b1e 	bne	r18,zero,93a0 <___vfiprintf_internal_r+0x108c>
    86f4:	00800074 	movhi	r2,1
    86f8:	10bf1904 	addi	r2,r2,-924
    86fc:	d8802615 	stw	r2,152(sp)
    8700:	0039883a 	mov	fp,zero
    8704:	48017b1e 	bne	r9,zero,8cf4 <___vfiprintf_internal_r+0x9e0>
    8708:	0013883a 	mov	r9,zero
    870c:	0027883a 	mov	r19,zero
    8710:	dd401a04 	addi	r21,sp,104
    8714:	4825883a 	mov	r18,r9
    8718:	4cc0010e 	bge	r9,r19,8720 <___vfiprintf_internal_r+0x40c>
    871c:	9825883a 	mov	r18,r19
    8720:	e7003fcc 	andi	fp,fp,255
    8724:	e700201c 	xori	fp,fp,128
    8728:	e73fe004 	addi	fp,fp,-128
    872c:	e0000126 	beq	fp,zero,8734 <___vfiprintf_internal_r+0x420>
    8730:	94800044 	addi	r18,r18,1
    8734:	a380008c 	andi	r14,r20,2
    8738:	70000126 	beq	r14,zero,8740 <___vfiprintf_internal_r+0x42c>
    873c:	94800084 	addi	r18,r18,2
    8740:	a700210c 	andi	fp,r20,132
    8744:	e001df1e 	bne	fp,zero,8ec4 <___vfiprintf_internal_r+0xbb0>
    8748:	8c87c83a 	sub	r3,r17,r18
    874c:	00c1dd0e 	bge	zero,r3,8ec4 <___vfiprintf_internal_r+0xbb0>
    8750:	01c00404 	movi	r7,16
    8754:	d8801c17 	ldw	r2,112(sp)
    8758:	38c3ad0e 	bge	r7,r3,9610 <___vfiprintf_internal_r+0x12fc>
    875c:	02800074 	movhi	r10,1
    8760:	52bf7e04 	addi	r10,r10,-520
    8764:	dc002915 	stw	r16,164(sp)
    8768:	d9801b17 	ldw	r6,108(sp)
    876c:	da802415 	stw	r10,144(sp)
    8770:	03c001c4 	movi	r15,7
    8774:	da402515 	stw	r9,148(sp)
    8778:	db802815 	stw	r14,160(sp)
    877c:	1821883a 	mov	r16,r3
    8780:	00000506 	br	8798 <___vfiprintf_internal_r+0x484>
    8784:	31400084 	addi	r5,r6,2
    8788:	42000204 	addi	r8,r8,8
    878c:	200d883a 	mov	r6,r4
    8790:	843ffc04 	addi	r16,r16,-16
    8794:	3c000d0e 	bge	r7,r16,87cc <___vfiprintf_internal_r+0x4b8>
    8798:	10800404 	addi	r2,r2,16
    879c:	31000044 	addi	r4,r6,1
    87a0:	45800015 	stw	r22,0(r8)
    87a4:	41c00115 	stw	r7,4(r8)
    87a8:	d8801c15 	stw	r2,112(sp)
    87ac:	d9001b15 	stw	r4,108(sp)
    87b0:	793ff40e 	bge	r15,r4,8784 <_gp+0xfffeeda4>
    87b4:	1001b51e 	bne	r2,zero,8e8c <___vfiprintf_internal_r+0xb78>
    87b8:	843ffc04 	addi	r16,r16,-16
    87bc:	000d883a 	mov	r6,zero
    87c0:	01400044 	movi	r5,1
    87c4:	d811883a 	mov	r8,sp
    87c8:	3c3ff316 	blt	r7,r16,8798 <_gp+0xfffeedb8>
    87cc:	8007883a 	mov	r3,r16
    87d0:	da402517 	ldw	r9,148(sp)
    87d4:	db802817 	ldw	r14,160(sp)
    87d8:	dc002917 	ldw	r16,164(sp)
    87dc:	da802417 	ldw	r10,144(sp)
    87e0:	1885883a 	add	r2,r3,r2
    87e4:	40c00115 	stw	r3,4(r8)
    87e8:	42800015 	stw	r10,0(r8)
    87ec:	d8801c15 	stw	r2,112(sp)
    87f0:	d9401b15 	stw	r5,108(sp)
    87f4:	00c001c4 	movi	r3,7
    87f8:	19426016 	blt	r3,r5,917c <___vfiprintf_internal_r+0xe68>
    87fc:	d8c01d87 	ldb	r3,118(sp)
    8800:	42000204 	addi	r8,r8,8
    8804:	29000044 	addi	r4,r5,1
    8808:	1801b31e 	bne	r3,zero,8ed8 <___vfiprintf_internal_r+0xbc4>
    880c:	7001c026 	beq	r14,zero,8f10 <___vfiprintf_internal_r+0xbfc>
    8810:	d8c01d04 	addi	r3,sp,116
    8814:	10800084 	addi	r2,r2,2
    8818:	40c00015 	stw	r3,0(r8)
    881c:	00c00084 	movi	r3,2
    8820:	40c00115 	stw	r3,4(r8)
    8824:	d8801c15 	stw	r2,112(sp)
    8828:	d9001b15 	stw	r4,108(sp)
    882c:	00c001c4 	movi	r3,7
    8830:	1902650e 	bge	r3,r4,91c8 <___vfiprintf_internal_r+0xeb4>
    8834:	10029a1e 	bne	r2,zero,92a0 <___vfiprintf_internal_r+0xf8c>
    8838:	00c02004 	movi	r3,128
    883c:	01000044 	movi	r4,1
    8840:	000b883a 	mov	r5,zero
    8844:	d811883a 	mov	r8,sp
    8848:	e0c1b31e 	bne	fp,r3,8f18 <___vfiprintf_internal_r+0xc04>
    884c:	8cb9c83a 	sub	fp,r17,r18
    8850:	0701b10e 	bge	zero,fp,8f18 <___vfiprintf_internal_r+0xc04>
    8854:	01c00404 	movi	r7,16
    8858:	3f03890e 	bge	r7,fp,9680 <___vfiprintf_internal_r+0x136c>
    885c:	00c00074 	movhi	r3,1
    8860:	18ff7a04 	addi	r3,r3,-536
    8864:	d8c02415 	stw	r3,144(sp)
    8868:	8007883a 	mov	r3,r16
    886c:	034001c4 	movi	r13,7
    8870:	e021883a 	mov	r16,fp
    8874:	da402515 	stw	r9,148(sp)
    8878:	1839883a 	mov	fp,r3
    887c:	00000506 	br	8894 <___vfiprintf_internal_r+0x580>
    8880:	29800084 	addi	r6,r5,2
    8884:	42000204 	addi	r8,r8,8
    8888:	180b883a 	mov	r5,r3
    888c:	843ffc04 	addi	r16,r16,-16
    8890:	3c000d0e 	bge	r7,r16,88c8 <___vfiprintf_internal_r+0x5b4>
    8894:	10800404 	addi	r2,r2,16
    8898:	28c00044 	addi	r3,r5,1
    889c:	45c00015 	stw	r23,0(r8)
    88a0:	41c00115 	stw	r7,4(r8)
    88a4:	d8801c15 	stw	r2,112(sp)
    88a8:	d8c01b15 	stw	r3,108(sp)
    88ac:	68fff40e 	bge	r13,r3,8880 <_gp+0xfffeeea0>
    88b0:	1002241e 	bne	r2,zero,9144 <___vfiprintf_internal_r+0xe30>
    88b4:	843ffc04 	addi	r16,r16,-16
    88b8:	01800044 	movi	r6,1
    88bc:	000b883a 	mov	r5,zero
    88c0:	d811883a 	mov	r8,sp
    88c4:	3c3ff316 	blt	r7,r16,8894 <_gp+0xfffeeeb4>
    88c8:	da402517 	ldw	r9,148(sp)
    88cc:	e007883a 	mov	r3,fp
    88d0:	8039883a 	mov	fp,r16
    88d4:	1821883a 	mov	r16,r3
    88d8:	d8c02417 	ldw	r3,144(sp)
    88dc:	1705883a 	add	r2,r2,fp
    88e0:	47000115 	stw	fp,4(r8)
    88e4:	40c00015 	stw	r3,0(r8)
    88e8:	d8801c15 	stw	r2,112(sp)
    88ec:	d9801b15 	stw	r6,108(sp)
    88f0:	00c001c4 	movi	r3,7
    88f4:	19827616 	blt	r3,r6,92d0 <___vfiprintf_internal_r+0xfbc>
    88f8:	4cf9c83a 	sub	fp,r9,r19
    88fc:	42000204 	addi	r8,r8,8
    8900:	31000044 	addi	r4,r6,1
    8904:	300b883a 	mov	r5,r6
    8908:	07018516 	blt	zero,fp,8f20 <___vfiprintf_internal_r+0xc0c>
    890c:	9885883a 	add	r2,r19,r2
    8910:	45400015 	stw	r21,0(r8)
    8914:	44c00115 	stw	r19,4(r8)
    8918:	d8801c15 	stw	r2,112(sp)
    891c:	d9001b15 	stw	r4,108(sp)
    8920:	00c001c4 	movi	r3,7
    8924:	1901dd0e 	bge	r3,r4,909c <___vfiprintf_internal_r+0xd88>
    8928:	1002401e 	bne	r2,zero,922c <___vfiprintf_internal_r+0xf18>
    892c:	d8001b15 	stw	zero,108(sp)
    8930:	a2c0010c 	andi	r11,r20,4
    8934:	58000226 	beq	r11,zero,8940 <___vfiprintf_internal_r+0x62c>
    8938:	8ca7c83a 	sub	r19,r17,r18
    893c:	04c2f216 	blt	zero,r19,9508 <___vfiprintf_internal_r+0x11f4>
    8940:	8c80010e 	bge	r17,r18,8948 <___vfiprintf_internal_r+0x634>
    8944:	9023883a 	mov	r17,r18
    8948:	da802317 	ldw	r10,140(sp)
    894c:	5455883a 	add	r10,r10,r17
    8950:	da802315 	stw	r10,140(sp)
    8954:	d8001b15 	stw	zero,108(sp)
    8958:	d811883a 	mov	r8,sp
    895c:	003ea206 	br	83e8 <_gp+0xfffeea08>
    8960:	a5000814 	ori	r20,r20,32
    8964:	80c00007 	ldb	r3,0(r16)
    8968:	003ec906 	br	8490 <_gp+0xfffeeab0>
    896c:	80c00007 	ldb	r3,0(r16)
    8970:	1b030926 	beq	r3,r12,9598 <___vfiprintf_internal_r+0x1284>
    8974:	a5000414 	ori	r20,r20,16
    8978:	003ec506 	br	8490 <_gp+0xfffeeab0>
    897c:	21003fcc 	andi	r4,r4,255
    8980:	20035e1e 	bne	r4,zero,96fc <___vfiprintf_internal_r+0x13e8>
    8984:	a080080c 	andi	r2,r20,32
    8988:	1002a526 	beq	r2,zero,9420 <___vfiprintf_internal_r+0x110c>
    898c:	da802217 	ldw	r10,136(sp)
    8990:	50800017 	ldw	r2,0(r10)
    8994:	da802317 	ldw	r10,140(sp)
    8998:	5007d7fa 	srai	r3,r10,31
    899c:	da802217 	ldw	r10,136(sp)
    89a0:	10c00115 	stw	r3,4(r2)
    89a4:	52800104 	addi	r10,r10,4
    89a8:	da802215 	stw	r10,136(sp)
    89ac:	da802317 	ldw	r10,140(sp)
    89b0:	12800015 	stw	r10,0(r2)
    89b4:	003e8c06 	br	83e8 <_gp+0xfffeea08>
    89b8:	21003fcc 	andi	r4,r4,255
    89bc:	2003511e 	bne	r4,zero,9704 <___vfiprintf_internal_r+0x13f0>
    89c0:	a080080c 	andi	r2,r20,32
    89c4:	1000a126 	beq	r2,zero,8c4c <___vfiprintf_internal_r+0x938>
    89c8:	da802217 	ldw	r10,136(sp)
    89cc:	d8001d85 	stb	zero,118(sp)
    89d0:	50800204 	addi	r2,r10,8
    89d4:	54800017 	ldw	r18,0(r10)
    89d8:	54c00117 	ldw	r19,4(r10)
    89dc:	4802b416 	blt	r9,zero,94b0 <___vfiprintf_internal_r+0x119c>
    89e0:	013fdfc4 	movi	r4,-129
    89e4:	94c6b03a 	or	r3,r18,r19
    89e8:	d8802215 	stw	r2,136(sp)
    89ec:	a128703a 	and	r20,r20,r4
    89f0:	1800a226 	beq	r3,zero,8c7c <___vfiprintf_internal_r+0x968>
    89f4:	0039883a 	mov	fp,zero
    89f8:	dd401a04 	addi	r21,sp,104
    89fc:	9006d0fa 	srli	r3,r18,3
    8a00:	9808977a 	slli	r4,r19,29
    8a04:	9826d0fa 	srli	r19,r19,3
    8a08:	948001cc 	andi	r18,r18,7
    8a0c:	90800c04 	addi	r2,r18,48
    8a10:	ad7fffc4 	addi	r21,r21,-1
    8a14:	20e4b03a 	or	r18,r4,r3
    8a18:	a8800005 	stb	r2,0(r21)
    8a1c:	94c6b03a 	or	r3,r18,r19
    8a20:	183ff61e 	bne	r3,zero,89fc <_gp+0xfffef01c>
    8a24:	a0c0004c 	andi	r3,r20,1
    8a28:	18005926 	beq	r3,zero,8b90 <___vfiprintf_internal_r+0x87c>
    8a2c:	10803fcc 	andi	r2,r2,255
    8a30:	1080201c 	xori	r2,r2,128
    8a34:	10bfe004 	addi	r2,r2,-128
    8a38:	00c00c04 	movi	r3,48
    8a3c:	10c05426 	beq	r2,r3,8b90 <___vfiprintf_internal_r+0x87c>
    8a40:	da801e17 	ldw	r10,120(sp)
    8a44:	a8bfffc4 	addi	r2,r21,-1
    8a48:	a8ffffc5 	stb	r3,-1(r21)
    8a4c:	50a7c83a 	sub	r19,r10,r2
    8a50:	102b883a 	mov	r21,r2
    8a54:	003f2f06 	br	8714 <_gp+0xfffeed34>
    8a58:	21003fcc 	andi	r4,r4,255
    8a5c:	2003421e 	bne	r4,zero,9768 <___vfiprintf_internal_r+0x1454>
    8a60:	00800074 	movhi	r2,1
    8a64:	10bf1904 	addi	r2,r2,-924
    8a68:	d8802615 	stw	r2,152(sp)
    8a6c:	a080080c 	andi	r2,r20,32
    8a70:	1000aa26 	beq	r2,zero,8d1c <___vfiprintf_internal_r+0xa08>
    8a74:	da802217 	ldw	r10,136(sp)
    8a78:	54800017 	ldw	r18,0(r10)
    8a7c:	54c00117 	ldw	r19,4(r10)
    8a80:	52800204 	addi	r10,r10,8
    8a84:	da802215 	stw	r10,136(sp)
    8a88:	a080004c 	andi	r2,r20,1
    8a8c:	1001d226 	beq	r2,zero,91d8 <___vfiprintf_internal_r+0xec4>
    8a90:	94c4b03a 	or	r2,r18,r19
    8a94:	1002351e 	bne	r2,zero,936c <___vfiprintf_internal_r+0x1058>
    8a98:	d8001d85 	stb	zero,118(sp)
    8a9c:	48022216 	blt	r9,zero,9328 <___vfiprintf_internal_r+0x1014>
    8aa0:	00bfdfc4 	movi	r2,-129
    8aa4:	a0a8703a 	and	r20,r20,r2
    8aa8:	003f1506 	br	8700 <_gp+0xfffeed20>
    8aac:	da802217 	ldw	r10,136(sp)
    8ab0:	04800044 	movi	r18,1
    8ab4:	d8001d85 	stb	zero,118(sp)
    8ab8:	50800017 	ldw	r2,0(r10)
    8abc:	52800104 	addi	r10,r10,4
    8ac0:	da802215 	stw	r10,136(sp)
    8ac4:	d8801005 	stb	r2,64(sp)
    8ac8:	9027883a 	mov	r19,r18
    8acc:	dd401004 	addi	r21,sp,64
    8ad0:	0013883a 	mov	r9,zero
    8ad4:	003f1706 	br	8734 <_gp+0xfffeed54>
    8ad8:	21003fcc 	andi	r4,r4,255
    8adc:	2003201e 	bne	r4,zero,9760 <___vfiprintf_internal_r+0x144c>
    8ae0:	a080080c 	andi	r2,r20,32
    8ae4:	10004b26 	beq	r2,zero,8c14 <___vfiprintf_internal_r+0x900>
    8ae8:	da802217 	ldw	r10,136(sp)
    8aec:	50800117 	ldw	r2,4(r10)
    8af0:	54800017 	ldw	r18,0(r10)
    8af4:	52800204 	addi	r10,r10,8
    8af8:	da802215 	stw	r10,136(sp)
    8afc:	1027883a 	mov	r19,r2
    8b00:	10022c16 	blt	r2,zero,93b4 <___vfiprintf_internal_r+0x10a0>
    8b04:	df001d83 	ldbu	fp,118(sp)
    8b08:	48007216 	blt	r9,zero,8cd4 <___vfiprintf_internal_r+0x9c0>
    8b0c:	00ffdfc4 	movi	r3,-129
    8b10:	94c4b03a 	or	r2,r18,r19
    8b14:	a0e8703a 	and	r20,r20,r3
    8b18:	1000cc26 	beq	r2,zero,8e4c <___vfiprintf_internal_r+0xb38>
    8b1c:	98021026 	beq	r19,zero,9360 <___vfiprintf_internal_r+0x104c>
    8b20:	dc402415 	stw	r17,144(sp)
    8b24:	dc002515 	stw	r16,148(sp)
    8b28:	9823883a 	mov	r17,r19
    8b2c:	9021883a 	mov	r16,r18
    8b30:	dd401a04 	addi	r21,sp,104
    8b34:	4825883a 	mov	r18,r9
    8b38:	4027883a 	mov	r19,r8
    8b3c:	8009883a 	mov	r4,r16
    8b40:	880b883a 	mov	r5,r17
    8b44:	01800284 	movi	r6,10
    8b48:	000f883a 	mov	r7,zero
    8b4c:	000a6f40 	call	a6f4 <__umoddi3>
    8b50:	10800c04 	addi	r2,r2,48
    8b54:	ad7fffc4 	addi	r21,r21,-1
    8b58:	8009883a 	mov	r4,r16
    8b5c:	880b883a 	mov	r5,r17
    8b60:	a8800005 	stb	r2,0(r21)
    8b64:	01800284 	movi	r6,10
    8b68:	000f883a 	mov	r7,zero
    8b6c:	000a17c0 	call	a17c <__udivdi3>
    8b70:	1021883a 	mov	r16,r2
    8b74:	10c4b03a 	or	r2,r2,r3
    8b78:	1823883a 	mov	r17,r3
    8b7c:	103fef1e 	bne	r2,zero,8b3c <_gp+0xfffef15c>
    8b80:	dc402417 	ldw	r17,144(sp)
    8b84:	dc002517 	ldw	r16,148(sp)
    8b88:	9013883a 	mov	r9,r18
    8b8c:	9811883a 	mov	r8,r19
    8b90:	da801e17 	ldw	r10,120(sp)
    8b94:	5567c83a 	sub	r19,r10,r21
    8b98:	003ede06 	br	8714 <_gp+0xfffeed34>
    8b9c:	38803fcc 	andi	r2,r7,255
    8ba0:	1080201c 	xori	r2,r2,128
    8ba4:	10bfe004 	addi	r2,r2,-128
    8ba8:	1002371e 	bne	r2,zero,9488 <___vfiprintf_internal_r+0x1174>
    8bac:	01000044 	movi	r4,1
    8bb0:	01c00804 	movi	r7,32
    8bb4:	80c00007 	ldb	r3,0(r16)
    8bb8:	003e3506 	br	8490 <_gp+0xfffeeab0>
    8bbc:	a5000054 	ori	r20,r20,1
    8bc0:	80c00007 	ldb	r3,0(r16)
    8bc4:	003e3206 	br	8490 <_gp+0xfffeeab0>
    8bc8:	a5002014 	ori	r20,r20,128
    8bcc:	80c00007 	ldb	r3,0(r16)
    8bd0:	003e2f06 	br	8490 <_gp+0xfffeeab0>
    8bd4:	8015883a 	mov	r10,r16
    8bd8:	0023883a 	mov	r17,zero
    8bdc:	18bff404 	addi	r2,r3,-48
    8be0:	50c00007 	ldb	r3,0(r10)
    8be4:	8c4002a4 	muli	r17,r17,10
    8be8:	84000044 	addi	r16,r16,1
    8bec:	8015883a 	mov	r10,r16
    8bf0:	1463883a 	add	r17,r2,r17
    8bf4:	18bff404 	addi	r2,r3,-48
    8bf8:	30bff92e 	bgeu	r6,r2,8be0 <_gp+0xfffef200>
    8bfc:	003e2506 	br	8494 <_gp+0xfffeeab4>
    8c00:	21003fcc 	andi	r4,r4,255
    8c04:	2002d41e 	bne	r4,zero,9758 <___vfiprintf_internal_r+0x1444>
    8c08:	a5000414 	ori	r20,r20,16
    8c0c:	a080080c 	andi	r2,r20,32
    8c10:	103fb51e 	bne	r2,zero,8ae8 <_gp+0xfffef108>
    8c14:	a080040c 	andi	r2,r20,16
    8c18:	1001f826 	beq	r2,zero,93fc <___vfiprintf_internal_r+0x10e8>
    8c1c:	da802217 	ldw	r10,136(sp)
    8c20:	54800017 	ldw	r18,0(r10)
    8c24:	52800104 	addi	r10,r10,4
    8c28:	da802215 	stw	r10,136(sp)
    8c2c:	9027d7fa 	srai	r19,r18,31
    8c30:	9805883a 	mov	r2,r19
    8c34:	003fb206 	br	8b00 <_gp+0xfffef120>
    8c38:	21003fcc 	andi	r4,r4,255
    8c3c:	2002c41e 	bne	r4,zero,9750 <___vfiprintf_internal_r+0x143c>
    8c40:	a5000414 	ori	r20,r20,16
    8c44:	a080080c 	andi	r2,r20,32
    8c48:	103f5f1e 	bne	r2,zero,89c8 <_gp+0xfffeefe8>
    8c4c:	a080040c 	andi	r2,r20,16
    8c50:	10020f26 	beq	r2,zero,9490 <___vfiprintf_internal_r+0x117c>
    8c54:	da802217 	ldw	r10,136(sp)
    8c58:	d8001d85 	stb	zero,118(sp)
    8c5c:	0027883a 	mov	r19,zero
    8c60:	50800104 	addi	r2,r10,4
    8c64:	54800017 	ldw	r18,0(r10)
    8c68:	48021116 	blt	r9,zero,94b0 <___vfiprintf_internal_r+0x119c>
    8c6c:	00ffdfc4 	movi	r3,-129
    8c70:	d8802215 	stw	r2,136(sp)
    8c74:	a0e8703a 	and	r20,r20,r3
    8c78:	903f5e1e 	bne	r18,zero,89f4 <_gp+0xfffef014>
    8c7c:	0039883a 	mov	fp,zero
    8c80:	4802a626 	beq	r9,zero,971c <___vfiprintf_internal_r+0x1408>
    8c84:	0025883a 	mov	r18,zero
    8c88:	0027883a 	mov	r19,zero
    8c8c:	003f5a06 	br	89f8 <_gp+0xfffef018>
    8c90:	21003fcc 	andi	r4,r4,255
    8c94:	20029f1e 	bne	r4,zero,9714 <___vfiprintf_internal_r+0x1400>
    8c98:	a5000414 	ori	r20,r20,16
    8c9c:	a080080c 	andi	r2,r20,32
    8ca0:	10005e1e 	bne	r2,zero,8e1c <___vfiprintf_internal_r+0xb08>
    8ca4:	a080040c 	andi	r2,r20,16
    8ca8:	1001a21e 	bne	r2,zero,9334 <___vfiprintf_internal_r+0x1020>
    8cac:	a080100c 	andi	r2,r20,64
    8cb0:	d8001d85 	stb	zero,118(sp)
    8cb4:	da802217 	ldw	r10,136(sp)
    8cb8:	1002231e 	bne	r2,zero,9548 <___vfiprintf_internal_r+0x1234>
    8cbc:	50800104 	addi	r2,r10,4
    8cc0:	54800017 	ldw	r18,0(r10)
    8cc4:	0027883a 	mov	r19,zero
    8cc8:	4801a00e 	bge	r9,zero,934c <___vfiprintf_internal_r+0x1038>
    8ccc:	d8802215 	stw	r2,136(sp)
    8cd0:	0039883a 	mov	fp,zero
    8cd4:	94c4b03a 	or	r2,r18,r19
    8cd8:	103f901e 	bne	r2,zero,8b1c <_gp+0xfffef13c>
    8cdc:	00800044 	movi	r2,1
    8ce0:	10803fcc 	andi	r2,r2,255
    8ce4:	00c00044 	movi	r3,1
    8ce8:	10c05926 	beq	r2,r3,8e50 <___vfiprintf_internal_r+0xb3c>
    8cec:	00c00084 	movi	r3,2
    8cf0:	10ffe41e 	bne	r2,r3,8c84 <_gp+0xfffef2a4>
    8cf4:	0025883a 	mov	r18,zero
    8cf8:	0027883a 	mov	r19,zero
    8cfc:	00013d06 	br	91f4 <___vfiprintf_internal_r+0xee0>
    8d00:	21003fcc 	andi	r4,r4,255
    8d04:	2002811e 	bne	r4,zero,970c <___vfiprintf_internal_r+0x13f8>
    8d08:	00800074 	movhi	r2,1
    8d0c:	10bf1404 	addi	r2,r2,-944
    8d10:	d8802615 	stw	r2,152(sp)
    8d14:	a080080c 	andi	r2,r20,32
    8d18:	103f561e 	bne	r2,zero,8a74 <_gp+0xfffef094>
    8d1c:	a080040c 	andi	r2,r20,16
    8d20:	1001d126 	beq	r2,zero,9468 <___vfiprintf_internal_r+0x1154>
    8d24:	da802217 	ldw	r10,136(sp)
    8d28:	0027883a 	mov	r19,zero
    8d2c:	54800017 	ldw	r18,0(r10)
    8d30:	52800104 	addi	r10,r10,4
    8d34:	da802215 	stw	r10,136(sp)
    8d38:	003f5306 	br	8a88 <_gp+0xfffef0a8>
    8d3c:	da802217 	ldw	r10,136(sp)
    8d40:	d8001d85 	stb	zero,118(sp)
    8d44:	55400017 	ldw	r21,0(r10)
    8d48:	50c00104 	addi	r3,r10,4
    8d4c:	a8024226 	beq	r21,zero,9658 <___vfiprintf_internal_r+0x1344>
    8d50:	48021816 	blt	r9,zero,95b4 <___vfiprintf_internal_r+0x12a0>
    8d54:	480d883a 	mov	r6,r9
    8d58:	000b883a 	mov	r5,zero
    8d5c:	a809883a 	mov	r4,r21
    8d60:	d8c02a15 	stw	r3,168(sp)
    8d64:	da002b15 	stw	r8,172(sp)
    8d68:	da402c15 	stw	r9,176(sp)
    8d6c:	00064f00 	call	64f0 <memchr>
    8d70:	d8c02a17 	ldw	r3,168(sp)
    8d74:	da002b17 	ldw	r8,172(sp)
    8d78:	da402c17 	ldw	r9,176(sp)
    8d7c:	10024826 	beq	r2,zero,96a0 <___vfiprintf_internal_r+0x138c>
    8d80:	1567c83a 	sub	r19,r2,r21
    8d84:	df001d83 	ldbu	fp,118(sp)
    8d88:	d8c02215 	stw	r3,136(sp)
    8d8c:	0013883a 	mov	r9,zero
    8d90:	003e6006 	br	8714 <_gp+0xfffeed34>
    8d94:	21003fcc 	andi	r4,r4,255
    8d98:	203fc026 	beq	r4,zero,8c9c <_gp+0xfffef2bc>
    8d9c:	d9c01d85 	stb	r7,118(sp)
    8da0:	003fbe06 	br	8c9c <_gp+0xfffef2bc>
    8da4:	da802217 	ldw	r10,136(sp)
    8da8:	54400017 	ldw	r17,0(r10)
    8dac:	50800104 	addi	r2,r10,4
    8db0:	883e3b16 	blt	r17,zero,86a0 <_gp+0xfffeecc0>
    8db4:	d8802215 	stw	r2,136(sp)
    8db8:	80c00007 	ldb	r3,0(r16)
    8dbc:	003db406 	br	8490 <_gp+0xfffeeab0>
    8dc0:	01000044 	movi	r4,1
    8dc4:	01c00ac4 	movi	r7,43
    8dc8:	80c00007 	ldb	r3,0(r16)
    8dcc:	003db006 	br	8490 <_gp+0xfffeeab0>
    8dd0:	80c00007 	ldb	r3,0(r16)
    8dd4:	82800044 	addi	r10,r16,1
    8dd8:	1b423c26 	beq	r3,r13,96cc <___vfiprintf_internal_r+0x13b8>
    8ddc:	18bff404 	addi	r2,r3,-48
    8de0:	0013883a 	mov	r9,zero
    8de4:	30822b36 	bltu	r6,r2,9694 <___vfiprintf_internal_r+0x1380>
    8de8:	50c00007 	ldb	r3,0(r10)
    8dec:	4a4002a4 	muli	r9,r9,10
    8df0:	54000044 	addi	r16,r10,1
    8df4:	8015883a 	mov	r10,r16
    8df8:	4893883a 	add	r9,r9,r2
    8dfc:	18bff404 	addi	r2,r3,-48
    8e00:	30bff92e 	bgeu	r6,r2,8de8 <_gp+0xfffef408>
    8e04:	483da30e 	bge	r9,zero,8494 <_gp+0xfffeeab4>
    8e08:	027fffc4 	movi	r9,-1
    8e0c:	003da106 	br	8494 <_gp+0xfffeeab4>
    8e10:	a5001014 	ori	r20,r20,64
    8e14:	80c00007 	ldb	r3,0(r16)
    8e18:	003d9d06 	br	8490 <_gp+0xfffeeab0>
    8e1c:	da802217 	ldw	r10,136(sp)
    8e20:	d8001d85 	stb	zero,118(sp)
    8e24:	50c00204 	addi	r3,r10,8
    8e28:	54800017 	ldw	r18,0(r10)
    8e2c:	54c00117 	ldw	r19,4(r10)
    8e30:	4801ca16 	blt	r9,zero,955c <___vfiprintf_internal_r+0x1248>
    8e34:	013fdfc4 	movi	r4,-129
    8e38:	94c4b03a 	or	r2,r18,r19
    8e3c:	d8c02215 	stw	r3,136(sp)
    8e40:	a128703a 	and	r20,r20,r4
    8e44:	0039883a 	mov	fp,zero
    8e48:	103f341e 	bne	r2,zero,8b1c <_gp+0xfffef13c>
    8e4c:	483e2e26 	beq	r9,zero,8708 <_gp+0xfffeed28>
    8e50:	0025883a 	mov	r18,zero
    8e54:	94800c04 	addi	r18,r18,48
    8e58:	dc8019c5 	stb	r18,103(sp)
    8e5c:	dcc02717 	ldw	r19,156(sp)
    8e60:	dd4019c4 	addi	r21,sp,103
    8e64:	003e2b06 	br	8714 <_gp+0xfffeed34>
    8e68:	21003fcc 	andi	r4,r4,255
    8e6c:	2002361e 	bne	r4,zero,9748 <___vfiprintf_internal_r+0x1434>
    8e70:	1801c126 	beq	r3,zero,9578 <___vfiprintf_internal_r+0x1264>
    8e74:	04800044 	movi	r18,1
    8e78:	d8c01005 	stb	r3,64(sp)
    8e7c:	d8001d85 	stb	zero,118(sp)
    8e80:	9027883a 	mov	r19,r18
    8e84:	dd401004 	addi	r21,sp,64
    8e88:	003f1106 	br	8ad0 <_gp+0xfffef0f0>
    8e8c:	d9402117 	ldw	r5,132(sp)
    8e90:	d9002017 	ldw	r4,128(sp)
    8e94:	d9801a04 	addi	r6,sp,104
    8e98:	d9c02b15 	stw	r7,172(sp)
    8e9c:	dbc02a15 	stw	r15,168(sp)
    8ea0:	00082000 	call	8200 <__sprint_r.part.0>
    8ea4:	d9c02b17 	ldw	r7,172(sp)
    8ea8:	dbc02a17 	ldw	r15,168(sp)
    8eac:	10006d1e 	bne	r2,zero,9064 <___vfiprintf_internal_r+0xd50>
    8eb0:	d9801b17 	ldw	r6,108(sp)
    8eb4:	d8801c17 	ldw	r2,112(sp)
    8eb8:	d811883a 	mov	r8,sp
    8ebc:	31400044 	addi	r5,r6,1
    8ec0:	003e3306 	br	8790 <_gp+0xfffeedb0>
    8ec4:	d9401b17 	ldw	r5,108(sp)
    8ec8:	d8801c17 	ldw	r2,112(sp)
    8ecc:	29000044 	addi	r4,r5,1
    8ed0:	d8c01d87 	ldb	r3,118(sp)
    8ed4:	183e4d26 	beq	r3,zero,880c <_gp+0xfffeee2c>
    8ed8:	00c00044 	movi	r3,1
    8edc:	d9401d84 	addi	r5,sp,118
    8ee0:	10c5883a 	add	r2,r2,r3
    8ee4:	41400015 	stw	r5,0(r8)
    8ee8:	40c00115 	stw	r3,4(r8)
    8eec:	d8801c15 	stw	r2,112(sp)
    8ef0:	d9001b15 	stw	r4,108(sp)
    8ef4:	014001c4 	movi	r5,7
    8ef8:	2900a90e 	bge	r5,r4,91a0 <___vfiprintf_internal_r+0xe8c>
    8efc:	1000da1e 	bne	r2,zero,9268 <___vfiprintf_internal_r+0xf54>
    8f00:	7000ab1e 	bne	r14,zero,91b0 <___vfiprintf_internal_r+0xe9c>
    8f04:	000b883a 	mov	r5,zero
    8f08:	1809883a 	mov	r4,r3
    8f0c:	d811883a 	mov	r8,sp
    8f10:	00c02004 	movi	r3,128
    8f14:	e0fe4d26 	beq	fp,r3,884c <_gp+0xfffeee6c>
    8f18:	4cf9c83a 	sub	fp,r9,r19
    8f1c:	073e7b0e 	bge	zero,fp,890c <_gp+0xfffeef2c>
    8f20:	01c00404 	movi	r7,16
    8f24:	3f01900e 	bge	r7,fp,9568 <___vfiprintf_internal_r+0x1254>
    8f28:	00c00074 	movhi	r3,1
    8f2c:	18ff7a04 	addi	r3,r3,-536
    8f30:	d8c02415 	stw	r3,144(sp)
    8f34:	034001c4 	movi	r13,7
    8f38:	00000506 	br	8f50 <___vfiprintf_internal_r+0xc3c>
    8f3c:	29000084 	addi	r4,r5,2
    8f40:	42000204 	addi	r8,r8,8
    8f44:	180b883a 	mov	r5,r3
    8f48:	e73ffc04 	addi	fp,fp,-16
    8f4c:	3f000d0e 	bge	r7,fp,8f84 <___vfiprintf_internal_r+0xc70>
    8f50:	10800404 	addi	r2,r2,16
    8f54:	28c00044 	addi	r3,r5,1
    8f58:	45c00015 	stw	r23,0(r8)
    8f5c:	41c00115 	stw	r7,4(r8)
    8f60:	d8801c15 	stw	r2,112(sp)
    8f64:	d8c01b15 	stw	r3,108(sp)
    8f68:	68fff40e 	bge	r13,r3,8f3c <_gp+0xfffef55c>
    8f6c:	1000101e 	bne	r2,zero,8fb0 <___vfiprintf_internal_r+0xc9c>
    8f70:	e73ffc04 	addi	fp,fp,-16
    8f74:	01000044 	movi	r4,1
    8f78:	000b883a 	mov	r5,zero
    8f7c:	d811883a 	mov	r8,sp
    8f80:	3f3ff316 	blt	r7,fp,8f50 <_gp+0xfffef570>
    8f84:	da802417 	ldw	r10,144(sp)
    8f88:	1705883a 	add	r2,r2,fp
    8f8c:	47000115 	stw	fp,4(r8)
    8f90:	42800015 	stw	r10,0(r8)
    8f94:	d8801c15 	stw	r2,112(sp)
    8f98:	d9001b15 	stw	r4,108(sp)
    8f9c:	00c001c4 	movi	r3,7
    8fa0:	19003616 	blt	r3,r4,907c <___vfiprintf_internal_r+0xd68>
    8fa4:	42000204 	addi	r8,r8,8
    8fa8:	21000044 	addi	r4,r4,1
    8fac:	003e5706 	br	890c <_gp+0xfffeef2c>
    8fb0:	d9402117 	ldw	r5,132(sp)
    8fb4:	d9002017 	ldw	r4,128(sp)
    8fb8:	d9801a04 	addi	r6,sp,104
    8fbc:	d9c02b15 	stw	r7,172(sp)
    8fc0:	db402a15 	stw	r13,168(sp)
    8fc4:	00082000 	call	8200 <__sprint_r.part.0>
    8fc8:	d9c02b17 	ldw	r7,172(sp)
    8fcc:	db402a17 	ldw	r13,168(sp)
    8fd0:	1000241e 	bne	r2,zero,9064 <___vfiprintf_internal_r+0xd50>
    8fd4:	d9401b17 	ldw	r5,108(sp)
    8fd8:	d8801c17 	ldw	r2,112(sp)
    8fdc:	d811883a 	mov	r8,sp
    8fe0:	29000044 	addi	r4,r5,1
    8fe4:	003fd806 	br	8f48 <_gp+0xfffef568>
    8fe8:	d9401b17 	ldw	r5,108(sp)
    8fec:	00c00074 	movhi	r3,1
    8ff0:	18ff7e04 	addi	r3,r3,-520
    8ff4:	d8c02415 	stw	r3,144(sp)
    8ff8:	29400044 	addi	r5,r5,1
    8ffc:	d8c02417 	ldw	r3,144(sp)
    9000:	14c5883a 	add	r2,r2,r19
    9004:	44c00115 	stw	r19,4(r8)
    9008:	40c00015 	stw	r3,0(r8)
    900c:	d8801c15 	stw	r2,112(sp)
    9010:	d9401b15 	stw	r5,108(sp)
    9014:	00c001c4 	movi	r3,7
    9018:	1940070e 	bge	r3,r5,9038 <___vfiprintf_internal_r+0xd24>
    901c:	103e4826 	beq	r2,zero,8940 <_gp+0xfffeef60>
    9020:	d9402117 	ldw	r5,132(sp)
    9024:	d9002017 	ldw	r4,128(sp)
    9028:	d9801a04 	addi	r6,sp,104
    902c:	00082000 	call	8200 <__sprint_r.part.0>
    9030:	10000c1e 	bne	r2,zero,9064 <___vfiprintf_internal_r+0xd50>
    9034:	d8801c17 	ldw	r2,112(sp)
    9038:	8c80010e 	bge	r17,r18,9040 <___vfiprintf_internal_r+0xd2c>
    903c:	9023883a 	mov	r17,r18
    9040:	da802317 	ldw	r10,140(sp)
    9044:	5455883a 	add	r10,r10,r17
    9048:	da802315 	stw	r10,140(sp)
    904c:	103e4126 	beq	r2,zero,8954 <_gp+0xfffeef74>
    9050:	d9402117 	ldw	r5,132(sp)
    9054:	d9002017 	ldw	r4,128(sp)
    9058:	d9801a04 	addi	r6,sp,104
    905c:	00082000 	call	8200 <__sprint_r.part.0>
    9060:	103e3c26 	beq	r2,zero,8954 <_gp+0xfffeef74>
    9064:	dd002117 	ldw	r20,132(sp)
    9068:	a080030b 	ldhu	r2,12(r20)
    906c:	1080100c 	andi	r2,r2,64
    9070:	1001231e 	bne	r2,zero,9500 <___vfiprintf_internal_r+0x11ec>
    9074:	d8802317 	ldw	r2,140(sp)
    9078:	003d7b06 	br	8668 <_gp+0xfffeec88>
    907c:	1000991e 	bne	r2,zero,92e4 <___vfiprintf_internal_r+0xfd0>
    9080:	00c00044 	movi	r3,1
    9084:	9805883a 	mov	r2,r19
    9088:	dd400015 	stw	r21,0(sp)
    908c:	dcc00115 	stw	r19,4(sp)
    9090:	dcc01c15 	stw	r19,112(sp)
    9094:	d8c01b15 	stw	r3,108(sp)
    9098:	d811883a 	mov	r8,sp
    909c:	42000204 	addi	r8,r8,8
    90a0:	a2c0010c 	andi	r11,r20,4
    90a4:	583fe426 	beq	r11,zero,9038 <_gp+0xfffef658>
    90a8:	8ca7c83a 	sub	r19,r17,r18
    90ac:	04ffe20e 	bge	zero,r19,9038 <_gp+0xfffef658>
    90b0:	01c00404 	movi	r7,16
    90b4:	3cffcc0e 	bge	r7,r19,8fe8 <_gp+0xfffef608>
    90b8:	02800074 	movhi	r10,1
    90bc:	52bf7e04 	addi	r10,r10,-520
    90c0:	d9001b17 	ldw	r4,108(sp)
    90c4:	da802415 	stw	r10,144(sp)
    90c8:	382b883a 	mov	r21,r7
    90cc:	050001c4 	movi	r20,7
    90d0:	df002017 	ldw	fp,128(sp)
    90d4:	00000506 	br	90ec <___vfiprintf_internal_r+0xdd8>
    90d8:	21400084 	addi	r5,r4,2
    90dc:	42000204 	addi	r8,r8,8
    90e0:	1809883a 	mov	r4,r3
    90e4:	9cfffc04 	addi	r19,r19,-16
    90e8:	acffc40e 	bge	r21,r19,8ffc <_gp+0xfffef61c>
    90ec:	10800404 	addi	r2,r2,16
    90f0:	20c00044 	addi	r3,r4,1
    90f4:	45800015 	stw	r22,0(r8)
    90f8:	45400115 	stw	r21,4(r8)
    90fc:	d8801c15 	stw	r2,112(sp)
    9100:	d8c01b15 	stw	r3,108(sp)
    9104:	a0fff40e 	bge	r20,r3,90d8 <_gp+0xfffef6f8>
    9108:	1000041e 	bne	r2,zero,911c <___vfiprintf_internal_r+0xe08>
    910c:	01400044 	movi	r5,1
    9110:	0009883a 	mov	r4,zero
    9114:	d811883a 	mov	r8,sp
    9118:	003ff206 	br	90e4 <_gp+0xfffef704>
    911c:	d9402117 	ldw	r5,132(sp)
    9120:	d9801a04 	addi	r6,sp,104
    9124:	e009883a 	mov	r4,fp
    9128:	00082000 	call	8200 <__sprint_r.part.0>
    912c:	103fcd1e 	bne	r2,zero,9064 <_gp+0xfffef684>
    9130:	d9001b17 	ldw	r4,108(sp)
    9134:	d8801c17 	ldw	r2,112(sp)
    9138:	d811883a 	mov	r8,sp
    913c:	21400044 	addi	r5,r4,1
    9140:	003fe806 	br	90e4 <_gp+0xfffef704>
    9144:	d9402117 	ldw	r5,132(sp)
    9148:	d9002017 	ldw	r4,128(sp)
    914c:	d9801a04 	addi	r6,sp,104
    9150:	d9c02b15 	stw	r7,172(sp)
    9154:	db402a15 	stw	r13,168(sp)
    9158:	00082000 	call	8200 <__sprint_r.part.0>
    915c:	d9c02b17 	ldw	r7,172(sp)
    9160:	db402a17 	ldw	r13,168(sp)
    9164:	103fbf1e 	bne	r2,zero,9064 <_gp+0xfffef684>
    9168:	d9401b17 	ldw	r5,108(sp)
    916c:	d8801c17 	ldw	r2,112(sp)
    9170:	d811883a 	mov	r8,sp
    9174:	29800044 	addi	r6,r5,1
    9178:	003dc406 	br	888c <_gp+0xfffeeeac>
    917c:	1000d21e 	bne	r2,zero,94c8 <___vfiprintf_internal_r+0x11b4>
    9180:	d8c01d87 	ldb	r3,118(sp)
    9184:	18009526 	beq	r3,zero,93dc <___vfiprintf_internal_r+0x10c8>
    9188:	00800044 	movi	r2,1
    918c:	d8c01d84 	addi	r3,sp,118
    9190:	1009883a 	mov	r4,r2
    9194:	d8c00015 	stw	r3,0(sp)
    9198:	d8800115 	stw	r2,4(sp)
    919c:	d811883a 	mov	r8,sp
    91a0:	200b883a 	mov	r5,r4
    91a4:	42000204 	addi	r8,r8,8
    91a8:	21000044 	addi	r4,r4,1
    91ac:	003d9706 	br	880c <_gp+0xfffeee2c>
    91b0:	d9001d04 	addi	r4,sp,116
    91b4:	00800084 	movi	r2,2
    91b8:	d9000015 	stw	r4,0(sp)
    91bc:	d8800115 	stw	r2,4(sp)
    91c0:	1809883a 	mov	r4,r3
    91c4:	d811883a 	mov	r8,sp
    91c8:	200b883a 	mov	r5,r4
    91cc:	42000204 	addi	r8,r8,8
    91d0:	21000044 	addi	r4,r4,1
    91d4:	003f4e06 	br	8f10 <_gp+0xfffef530>
    91d8:	d8001d85 	stb	zero,118(sp)
    91dc:	48005016 	blt	r9,zero,9320 <___vfiprintf_internal_r+0x100c>
    91e0:	00ffdfc4 	movi	r3,-129
    91e4:	94c4b03a 	or	r2,r18,r19
    91e8:	a0e8703a 	and	r20,r20,r3
    91ec:	103d4426 	beq	r2,zero,8700 <_gp+0xfffeed20>
    91f0:	0039883a 	mov	fp,zero
    91f4:	d9002617 	ldw	r4,152(sp)
    91f8:	dd401a04 	addi	r21,sp,104
    91fc:	908003cc 	andi	r2,r18,15
    9200:	9806973a 	slli	r3,r19,28
    9204:	2085883a 	add	r2,r4,r2
    9208:	9024d13a 	srli	r18,r18,4
    920c:	10800003 	ldbu	r2,0(r2)
    9210:	9826d13a 	srli	r19,r19,4
    9214:	ad7fffc4 	addi	r21,r21,-1
    9218:	1ca4b03a 	or	r18,r3,r18
    921c:	a8800005 	stb	r2,0(r21)
    9220:	94c4b03a 	or	r2,r18,r19
    9224:	103ff51e 	bne	r2,zero,91fc <_gp+0xfffef81c>
    9228:	003e5906 	br	8b90 <_gp+0xfffef1b0>
    922c:	d9402117 	ldw	r5,132(sp)
    9230:	d9002017 	ldw	r4,128(sp)
    9234:	d9801a04 	addi	r6,sp,104
    9238:	00082000 	call	8200 <__sprint_r.part.0>
    923c:	103f891e 	bne	r2,zero,9064 <_gp+0xfffef684>
    9240:	d8801c17 	ldw	r2,112(sp)
    9244:	d811883a 	mov	r8,sp
    9248:	003f9506 	br	90a0 <_gp+0xfffef6c0>
    924c:	d9402117 	ldw	r5,132(sp)
    9250:	d9002017 	ldw	r4,128(sp)
    9254:	d9801a04 	addi	r6,sp,104
    9258:	00082000 	call	8200 <__sprint_r.part.0>
    925c:	103f811e 	bne	r2,zero,9064 <_gp+0xfffef684>
    9260:	d811883a 	mov	r8,sp
    9264:	003ced06 	br	861c <_gp+0xfffeec3c>
    9268:	d9402117 	ldw	r5,132(sp)
    926c:	d9002017 	ldw	r4,128(sp)
    9270:	d9801a04 	addi	r6,sp,104
    9274:	da402c15 	stw	r9,176(sp)
    9278:	db802a15 	stw	r14,168(sp)
    927c:	00082000 	call	8200 <__sprint_r.part.0>
    9280:	da402c17 	ldw	r9,176(sp)
    9284:	db802a17 	ldw	r14,168(sp)
    9288:	103f761e 	bne	r2,zero,9064 <_gp+0xfffef684>
    928c:	d9401b17 	ldw	r5,108(sp)
    9290:	d8801c17 	ldw	r2,112(sp)
    9294:	d811883a 	mov	r8,sp
    9298:	29000044 	addi	r4,r5,1
    929c:	003d5b06 	br	880c <_gp+0xfffeee2c>
    92a0:	d9402117 	ldw	r5,132(sp)
    92a4:	d9002017 	ldw	r4,128(sp)
    92a8:	d9801a04 	addi	r6,sp,104
    92ac:	da402c15 	stw	r9,176(sp)
    92b0:	00082000 	call	8200 <__sprint_r.part.0>
    92b4:	da402c17 	ldw	r9,176(sp)
    92b8:	103f6a1e 	bne	r2,zero,9064 <_gp+0xfffef684>
    92bc:	d9401b17 	ldw	r5,108(sp)
    92c0:	d8801c17 	ldw	r2,112(sp)
    92c4:	d811883a 	mov	r8,sp
    92c8:	29000044 	addi	r4,r5,1
    92cc:	003f1006 	br	8f10 <_gp+0xfffef530>
    92d0:	1000c31e 	bne	r2,zero,95e0 <___vfiprintf_internal_r+0x12cc>
    92d4:	01000044 	movi	r4,1
    92d8:	000b883a 	mov	r5,zero
    92dc:	d811883a 	mov	r8,sp
    92e0:	003f0d06 	br	8f18 <_gp+0xfffef538>
    92e4:	d9402117 	ldw	r5,132(sp)
    92e8:	d9002017 	ldw	r4,128(sp)
    92ec:	d9801a04 	addi	r6,sp,104
    92f0:	00082000 	call	8200 <__sprint_r.part.0>
    92f4:	103f5b1e 	bne	r2,zero,9064 <_gp+0xfffef684>
    92f8:	d9001b17 	ldw	r4,108(sp)
    92fc:	d8801c17 	ldw	r2,112(sp)
    9300:	d811883a 	mov	r8,sp
    9304:	21000044 	addi	r4,r4,1
    9308:	003d8006 	br	890c <_gp+0xfffeef2c>
    930c:	01000074 	movhi	r4,1
    9310:	213f1904 	addi	r4,r4,-924
    9314:	d9002615 	stw	r4,152(sp)
    9318:	d8c02215 	stw	r3,136(sp)
    931c:	1029883a 	mov	r20,r2
    9320:	94c4b03a 	or	r2,r18,r19
    9324:	103fb21e 	bne	r2,zero,91f0 <_gp+0xfffef810>
    9328:	0039883a 	mov	fp,zero
    932c:	00800084 	movi	r2,2
    9330:	003e6b06 	br	8ce0 <_gp+0xfffef300>
    9334:	da802217 	ldw	r10,136(sp)
    9338:	d8001d85 	stb	zero,118(sp)
    933c:	0027883a 	mov	r19,zero
    9340:	50800104 	addi	r2,r10,4
    9344:	54800017 	ldw	r18,0(r10)
    9348:	483e6016 	blt	r9,zero,8ccc <_gp+0xfffef2ec>
    934c:	00ffdfc4 	movi	r3,-129
    9350:	d8802215 	stw	r2,136(sp)
    9354:	a0e8703a 	and	r20,r20,r3
    9358:	0039883a 	mov	fp,zero
    935c:	903ebb26 	beq	r18,zero,8e4c <_gp+0xfffef46c>
    9360:	00800244 	movi	r2,9
    9364:	14bdee36 	bltu	r2,r18,8b20 <_gp+0xfffef140>
    9368:	003eba06 	br	8e54 <_gp+0xfffef474>
    936c:	00800c04 	movi	r2,48
    9370:	d8c01d45 	stb	r3,117(sp)
    9374:	d8801d05 	stb	r2,116(sp)
    9378:	d8001d85 	stb	zero,118(sp)
    937c:	a0c00094 	ori	r3,r20,2
    9380:	4800a916 	blt	r9,zero,9628 <___vfiprintf_internal_r+0x1314>
    9384:	00bfdfc4 	movi	r2,-129
    9388:	a096703a 	and	r11,r20,r2
    938c:	5d000094 	ori	r20,r11,2
    9390:	0039883a 	mov	fp,zero
    9394:	003f9706 	br	91f4 <_gp+0xfffef814>
    9398:	8025883a 	mov	r18,r16
    939c:	003c2e06 	br	8458 <_gp+0xfffeea78>
    93a0:	00800074 	movhi	r2,1
    93a4:	10bf1904 	addi	r2,r2,-924
    93a8:	0039883a 	mov	fp,zero
    93ac:	d8802615 	stw	r2,152(sp)
    93b0:	003f9006 	br	91f4 <_gp+0xfffef814>
    93b4:	04a5c83a 	sub	r18,zero,r18
    93b8:	07000b44 	movi	fp,45
    93bc:	9004c03a 	cmpne	r2,r18,zero
    93c0:	04e7c83a 	sub	r19,zero,r19
    93c4:	df001d85 	stb	fp,118(sp)
    93c8:	98a7c83a 	sub	r19,r19,r2
    93cc:	48009f16 	blt	r9,zero,964c <___vfiprintf_internal_r+0x1338>
    93d0:	00bfdfc4 	movi	r2,-129
    93d4:	a0a8703a 	and	r20,r20,r2
    93d8:	003dd006 	br	8b1c <_gp+0xfffef13c>
    93dc:	70004c26 	beq	r14,zero,9510 <___vfiprintf_internal_r+0x11fc>
    93e0:	00800084 	movi	r2,2
    93e4:	d8c01d04 	addi	r3,sp,116
    93e8:	d8c00015 	stw	r3,0(sp)
    93ec:	d8800115 	stw	r2,4(sp)
    93f0:	01000044 	movi	r4,1
    93f4:	d811883a 	mov	r8,sp
    93f8:	003f7306 	br	91c8 <_gp+0xfffef7e8>
    93fc:	a080100c 	andi	r2,r20,64
    9400:	da802217 	ldw	r10,136(sp)
    9404:	103e0626 	beq	r2,zero,8c20 <_gp+0xfffef240>
    9408:	5480000f 	ldh	r18,0(r10)
    940c:	52800104 	addi	r10,r10,4
    9410:	da802215 	stw	r10,136(sp)
    9414:	9027d7fa 	srai	r19,r18,31
    9418:	9805883a 	mov	r2,r19
    941c:	003db806 	br	8b00 <_gp+0xfffef120>
    9420:	a080040c 	andi	r2,r20,16
    9424:	1000091e 	bne	r2,zero,944c <___vfiprintf_internal_r+0x1138>
    9428:	a2c0100c 	andi	r11,r20,64
    942c:	58000726 	beq	r11,zero,944c <___vfiprintf_internal_r+0x1138>
    9430:	da802217 	ldw	r10,136(sp)
    9434:	50800017 	ldw	r2,0(r10)
    9438:	52800104 	addi	r10,r10,4
    943c:	da802215 	stw	r10,136(sp)
    9440:	da802317 	ldw	r10,140(sp)
    9444:	1280000d 	sth	r10,0(r2)
    9448:	003be706 	br	83e8 <_gp+0xfffeea08>
    944c:	da802217 	ldw	r10,136(sp)
    9450:	50800017 	ldw	r2,0(r10)
    9454:	52800104 	addi	r10,r10,4
    9458:	da802215 	stw	r10,136(sp)
    945c:	da802317 	ldw	r10,140(sp)
    9460:	12800015 	stw	r10,0(r2)
    9464:	003be006 	br	83e8 <_gp+0xfffeea08>
    9468:	a080100c 	andi	r2,r20,64
    946c:	da802217 	ldw	r10,136(sp)
    9470:	10003026 	beq	r2,zero,9534 <___vfiprintf_internal_r+0x1220>
    9474:	5480000b 	ldhu	r18,0(r10)
    9478:	52800104 	addi	r10,r10,4
    947c:	0027883a 	mov	r19,zero
    9480:	da802215 	stw	r10,136(sp)
    9484:	003d8006 	br	8a88 <_gp+0xfffef0a8>
    9488:	80c00007 	ldb	r3,0(r16)
    948c:	003c0006 	br	8490 <_gp+0xfffeeab0>
    9490:	a080100c 	andi	r2,r20,64
    9494:	d8001d85 	stb	zero,118(sp)
    9498:	da802217 	ldw	r10,136(sp)
    949c:	1000201e 	bne	r2,zero,9520 <___vfiprintf_internal_r+0x120c>
    94a0:	50800104 	addi	r2,r10,4
    94a4:	54800017 	ldw	r18,0(r10)
    94a8:	0027883a 	mov	r19,zero
    94ac:	483def0e 	bge	r9,zero,8c6c <_gp+0xfffef28c>
    94b0:	94c6b03a 	or	r3,r18,r19
    94b4:	d8802215 	stw	r2,136(sp)
    94b8:	183d4e1e 	bne	r3,zero,89f4 <_gp+0xfffef014>
    94bc:	0039883a 	mov	fp,zero
    94c0:	0005883a 	mov	r2,zero
    94c4:	003e0606 	br	8ce0 <_gp+0xfffef300>
    94c8:	d9402117 	ldw	r5,132(sp)
    94cc:	d9002017 	ldw	r4,128(sp)
    94d0:	d9801a04 	addi	r6,sp,104
    94d4:	da402c15 	stw	r9,176(sp)
    94d8:	db802a15 	stw	r14,168(sp)
    94dc:	00082000 	call	8200 <__sprint_r.part.0>
    94e0:	da402c17 	ldw	r9,176(sp)
    94e4:	db802a17 	ldw	r14,168(sp)
    94e8:	103ede1e 	bne	r2,zero,9064 <_gp+0xfffef684>
    94ec:	d9401b17 	ldw	r5,108(sp)
    94f0:	d8801c17 	ldw	r2,112(sp)
    94f4:	d811883a 	mov	r8,sp
    94f8:	29000044 	addi	r4,r5,1
    94fc:	003e7406 	br	8ed0 <_gp+0xfffef4f0>
    9500:	00bfffc4 	movi	r2,-1
    9504:	003c5806 	br	8668 <_gp+0xfffeec88>
    9508:	d811883a 	mov	r8,sp
    950c:	003ee806 	br	90b0 <_gp+0xfffef6d0>
    9510:	000b883a 	mov	r5,zero
    9514:	01000044 	movi	r4,1
    9518:	d811883a 	mov	r8,sp
    951c:	003e7c06 	br	8f10 <_gp+0xfffef530>
    9520:	50800104 	addi	r2,r10,4
    9524:	5480000b 	ldhu	r18,0(r10)
    9528:	0027883a 	mov	r19,zero
    952c:	483dcf0e 	bge	r9,zero,8c6c <_gp+0xfffef28c>
    9530:	003fdf06 	br	94b0 <_gp+0xfffefad0>
    9534:	54800017 	ldw	r18,0(r10)
    9538:	52800104 	addi	r10,r10,4
    953c:	0027883a 	mov	r19,zero
    9540:	da802215 	stw	r10,136(sp)
    9544:	003d5006 	br	8a88 <_gp+0xfffef0a8>
    9548:	50800104 	addi	r2,r10,4
    954c:	5480000b 	ldhu	r18,0(r10)
    9550:	0027883a 	mov	r19,zero
    9554:	483f7d0e 	bge	r9,zero,934c <_gp+0xfffef96c>
    9558:	003ddc06 	br	8ccc <_gp+0xfffef2ec>
    955c:	d8c02215 	stw	r3,136(sp)
    9560:	0039883a 	mov	fp,zero
    9564:	003ddb06 	br	8cd4 <_gp+0xfffef2f4>
    9568:	02800074 	movhi	r10,1
    956c:	52bf7a04 	addi	r10,r10,-536
    9570:	da802415 	stw	r10,144(sp)
    9574:	003e8306 	br	8f84 <_gp+0xfffef5a4>
    9578:	d8801c17 	ldw	r2,112(sp)
    957c:	dd002117 	ldw	r20,132(sp)
    9580:	103eb926 	beq	r2,zero,9068 <_gp+0xfffef688>
    9584:	d9002017 	ldw	r4,128(sp)
    9588:	d9801a04 	addi	r6,sp,104
    958c:	a00b883a 	mov	r5,r20
    9590:	00082000 	call	8200 <__sprint_r.part.0>
    9594:	003eb406 	br	9068 <_gp+0xfffef688>
    9598:	80c00043 	ldbu	r3,1(r16)
    959c:	a5000814 	ori	r20,r20,32
    95a0:	84000044 	addi	r16,r16,1
    95a4:	18c03fcc 	andi	r3,r3,255
    95a8:	18c0201c 	xori	r3,r3,128
    95ac:	18ffe004 	addi	r3,r3,-128
    95b0:	003bb706 	br	8490 <_gp+0xfffeeab0>
    95b4:	a809883a 	mov	r4,r21
    95b8:	d8c02a15 	stw	r3,168(sp)
    95bc:	da002b15 	stw	r8,172(sp)
    95c0:	0000c480 	call	c48 <strlen>
    95c4:	d8c02a17 	ldw	r3,168(sp)
    95c8:	1027883a 	mov	r19,r2
    95cc:	df001d83 	ldbu	fp,118(sp)
    95d0:	d8c02215 	stw	r3,136(sp)
    95d4:	0013883a 	mov	r9,zero
    95d8:	da002b17 	ldw	r8,172(sp)
    95dc:	003c4d06 	br	8714 <_gp+0xfffeed34>
    95e0:	d9402117 	ldw	r5,132(sp)
    95e4:	d9002017 	ldw	r4,128(sp)
    95e8:	d9801a04 	addi	r6,sp,104
    95ec:	da402c15 	stw	r9,176(sp)
    95f0:	00082000 	call	8200 <__sprint_r.part.0>
    95f4:	da402c17 	ldw	r9,176(sp)
    95f8:	103e9a1e 	bne	r2,zero,9064 <_gp+0xfffef684>
    95fc:	d9401b17 	ldw	r5,108(sp)
    9600:	d8801c17 	ldw	r2,112(sp)
    9604:	d811883a 	mov	r8,sp
    9608:	29000044 	addi	r4,r5,1
    960c:	003e4206 	br	8f18 <_gp+0xfffef538>
    9610:	d9401b17 	ldw	r5,108(sp)
    9614:	01000074 	movhi	r4,1
    9618:	213f7e04 	addi	r4,r4,-520
    961c:	d9002415 	stw	r4,144(sp)
    9620:	29400044 	addi	r5,r5,1
    9624:	003c6d06 	br	87dc <_gp+0xfffeedfc>
    9628:	0039883a 	mov	fp,zero
    962c:	00800084 	movi	r2,2
    9630:	10803fcc 	andi	r2,r2,255
    9634:	01000044 	movi	r4,1
    9638:	11001e26 	beq	r2,r4,96b4 <___vfiprintf_internal_r+0x13a0>
    963c:	01000084 	movi	r4,2
    9640:	11001e1e 	bne	r2,r4,96bc <___vfiprintf_internal_r+0x13a8>
    9644:	1829883a 	mov	r20,r3
    9648:	003eea06 	br	91f4 <_gp+0xfffef814>
    964c:	a007883a 	mov	r3,r20
    9650:	00800044 	movi	r2,1
    9654:	003ff606 	br	9630 <_gp+0xfffefc50>
    9658:	00800184 	movi	r2,6
    965c:	1240012e 	bgeu	r2,r9,9664 <___vfiprintf_internal_r+0x1350>
    9660:	1013883a 	mov	r9,r2
    9664:	4827883a 	mov	r19,r9
    9668:	4825883a 	mov	r18,r9
    966c:	48001516 	blt	r9,zero,96c4 <___vfiprintf_internal_r+0x13b0>
    9670:	05400074 	movhi	r21,1
    9674:	d8c02215 	stw	r3,136(sp)
    9678:	ad7f1e04 	addi	r21,r21,-904
    967c:	003d1406 	br	8ad0 <_gp+0xfffef0f0>
    9680:	02800074 	movhi	r10,1
    9684:	52bf7a04 	addi	r10,r10,-536
    9688:	da802415 	stw	r10,144(sp)
    968c:	200d883a 	mov	r6,r4
    9690:	003c9106 	br	88d8 <_gp+0xfffeeef8>
    9694:	5021883a 	mov	r16,r10
    9698:	0013883a 	mov	r9,zero
    969c:	003b7d06 	br	8494 <_gp+0xfffeeab4>
    96a0:	4827883a 	mov	r19,r9
    96a4:	df001d83 	ldbu	fp,118(sp)
    96a8:	d8c02215 	stw	r3,136(sp)
    96ac:	0013883a 	mov	r9,zero
    96b0:	003c1806 	br	8714 <_gp+0xfffeed34>
    96b4:	1829883a 	mov	r20,r3
    96b8:	003d1806 	br	8b1c <_gp+0xfffef13c>
    96bc:	1829883a 	mov	r20,r3
    96c0:	003ccd06 	br	89f8 <_gp+0xfffef018>
    96c4:	0025883a 	mov	r18,zero
    96c8:	003fe906 	br	9670 <_gp+0xfffefc90>
    96cc:	d8802217 	ldw	r2,136(sp)
    96d0:	80c00043 	ldbu	r3,1(r16)
    96d4:	5021883a 	mov	r16,r10
    96d8:	12400017 	ldw	r9,0(r2)
    96dc:	10800104 	addi	r2,r2,4
    96e0:	d8802215 	stw	r2,136(sp)
    96e4:	483faf0e 	bge	r9,zero,95a4 <_gp+0xfffefbc4>
    96e8:	18c03fcc 	andi	r3,r3,255
    96ec:	18c0201c 	xori	r3,r3,128
    96f0:	027fffc4 	movi	r9,-1
    96f4:	18ffe004 	addi	r3,r3,-128
    96f8:	003b6506 	br	8490 <_gp+0xfffeeab0>
    96fc:	d9c01d85 	stb	r7,118(sp)
    9700:	003ca006 	br	8984 <_gp+0xfffeefa4>
    9704:	d9c01d85 	stb	r7,118(sp)
    9708:	003cad06 	br	89c0 <_gp+0xfffeefe0>
    970c:	d9c01d85 	stb	r7,118(sp)
    9710:	003d7d06 	br	8d08 <_gp+0xfffef328>
    9714:	d9c01d85 	stb	r7,118(sp)
    9718:	003d5f06 	br	8c98 <_gp+0xfffef2b8>
    971c:	a080004c 	andi	r2,r20,1
    9720:	0039883a 	mov	fp,zero
    9724:	10000526 	beq	r2,zero,973c <___vfiprintf_internal_r+0x1428>
    9728:	00800c04 	movi	r2,48
    972c:	d88019c5 	stb	r2,103(sp)
    9730:	dcc02717 	ldw	r19,156(sp)
    9734:	dd4019c4 	addi	r21,sp,103
    9738:	003bf606 	br	8714 <_gp+0xfffeed34>
    973c:	0027883a 	mov	r19,zero
    9740:	dd401a04 	addi	r21,sp,104
    9744:	003bf306 	br	8714 <_gp+0xfffeed34>
    9748:	d9c01d85 	stb	r7,118(sp)
    974c:	003dc806 	br	8e70 <_gp+0xfffef490>
    9750:	d9c01d85 	stb	r7,118(sp)
    9754:	003d3a06 	br	8c40 <_gp+0xfffef260>
    9758:	d9c01d85 	stb	r7,118(sp)
    975c:	003d2a06 	br	8c08 <_gp+0xfffef228>
    9760:	d9c01d85 	stb	r7,118(sp)
    9764:	003cde06 	br	8ae0 <_gp+0xfffef100>
    9768:	d9c01d85 	stb	r7,118(sp)
    976c:	003cbc06 	br	8a60 <_gp+0xfffef080>

00009770 <__vfiprintf_internal>:
    9770:	00800074 	movhi	r2,1
    9774:	10867904 	addi	r2,r2,6628
    9778:	300f883a 	mov	r7,r6
    977c:	280d883a 	mov	r6,r5
    9780:	200b883a 	mov	r5,r4
    9784:	11000017 	ldw	r4,0(r2)
    9788:	00083141 	jmpi	8314 <___vfiprintf_internal_r>

0000978c <__sbprintf>:
    978c:	2880030b 	ldhu	r2,12(r5)
    9790:	2ac01917 	ldw	r11,100(r5)
    9794:	2a80038b 	ldhu	r10,14(r5)
    9798:	2a400717 	ldw	r9,28(r5)
    979c:	2a000917 	ldw	r8,36(r5)
    97a0:	defee204 	addi	sp,sp,-1144
    97a4:	00c10004 	movi	r3,1024
    97a8:	dc011a15 	stw	r16,1128(sp)
    97ac:	10bfff4c 	andi	r2,r2,65533
    97b0:	2821883a 	mov	r16,r5
    97b4:	d8cb883a 	add	r5,sp,r3
    97b8:	dc811c15 	stw	r18,1136(sp)
    97bc:	dc411b15 	stw	r17,1132(sp)
    97c0:	dfc11d15 	stw	ra,1140(sp)
    97c4:	2025883a 	mov	r18,r4
    97c8:	d881030d 	sth	r2,1036(sp)
    97cc:	dac11915 	stw	r11,1124(sp)
    97d0:	da81038d 	sth	r10,1038(sp)
    97d4:	da410715 	stw	r9,1052(sp)
    97d8:	da010915 	stw	r8,1060(sp)
    97dc:	dec10015 	stw	sp,1024(sp)
    97e0:	dec10415 	stw	sp,1040(sp)
    97e4:	d8c10215 	stw	r3,1032(sp)
    97e8:	d8c10515 	stw	r3,1044(sp)
    97ec:	d8010615 	stw	zero,1048(sp)
    97f0:	00083140 	call	8314 <___vfiprintf_internal_r>
    97f4:	1023883a 	mov	r17,r2
    97f8:	10000416 	blt	r2,zero,980c <__sbprintf+0x80>
    97fc:	d9410004 	addi	r5,sp,1024
    9800:	9009883a 	mov	r4,r18
    9804:	0004ba80 	call	4ba8 <_fflush_r>
    9808:	10000d1e 	bne	r2,zero,9840 <__sbprintf+0xb4>
    980c:	d881030b 	ldhu	r2,1036(sp)
    9810:	1080100c 	andi	r2,r2,64
    9814:	10000326 	beq	r2,zero,9824 <__sbprintf+0x98>
    9818:	8080030b 	ldhu	r2,12(r16)
    981c:	10801014 	ori	r2,r2,64
    9820:	8080030d 	sth	r2,12(r16)
    9824:	8805883a 	mov	r2,r17
    9828:	dfc11d17 	ldw	ra,1140(sp)
    982c:	dc811c17 	ldw	r18,1136(sp)
    9830:	dc411b17 	ldw	r17,1132(sp)
    9834:	dc011a17 	ldw	r16,1128(sp)
    9838:	dec11e04 	addi	sp,sp,1144
    983c:	f800283a 	ret
    9840:	047fffc4 	movi	r17,-1
    9844:	003ff106 	br	980c <_gp+0xfffefe2c>

00009848 <__swbuf_r>:
    9848:	defffb04 	addi	sp,sp,-20
    984c:	dcc00315 	stw	r19,12(sp)
    9850:	dc800215 	stw	r18,8(sp)
    9854:	dc000015 	stw	r16,0(sp)
    9858:	dfc00415 	stw	ra,16(sp)
    985c:	dc400115 	stw	r17,4(sp)
    9860:	2025883a 	mov	r18,r4
    9864:	2827883a 	mov	r19,r5
    9868:	3021883a 	mov	r16,r6
    986c:	20000226 	beq	r4,zero,9878 <__swbuf_r+0x30>
    9870:	20800e17 	ldw	r2,56(r4)
    9874:	10004226 	beq	r2,zero,9980 <__swbuf_r+0x138>
    9878:	80800617 	ldw	r2,24(r16)
    987c:	8100030b 	ldhu	r4,12(r16)
    9880:	80800215 	stw	r2,8(r16)
    9884:	2080020c 	andi	r2,r4,8
    9888:	10003626 	beq	r2,zero,9964 <__swbuf_r+0x11c>
    988c:	80c00417 	ldw	r3,16(r16)
    9890:	18003426 	beq	r3,zero,9964 <__swbuf_r+0x11c>
    9894:	2088000c 	andi	r2,r4,8192
    9898:	9c403fcc 	andi	r17,r19,255
    989c:	10001a26 	beq	r2,zero,9908 <__swbuf_r+0xc0>
    98a0:	80800017 	ldw	r2,0(r16)
    98a4:	81000517 	ldw	r4,20(r16)
    98a8:	10c7c83a 	sub	r3,r2,r3
    98ac:	1900200e 	bge	r3,r4,9930 <__swbuf_r+0xe8>
    98b0:	18c00044 	addi	r3,r3,1
    98b4:	81000217 	ldw	r4,8(r16)
    98b8:	11400044 	addi	r5,r2,1
    98bc:	81400015 	stw	r5,0(r16)
    98c0:	213fffc4 	addi	r4,r4,-1
    98c4:	81000215 	stw	r4,8(r16)
    98c8:	14c00005 	stb	r19,0(r2)
    98cc:	80800517 	ldw	r2,20(r16)
    98d0:	10c01e26 	beq	r2,r3,994c <__swbuf_r+0x104>
    98d4:	8080030b 	ldhu	r2,12(r16)
    98d8:	1080004c 	andi	r2,r2,1
    98dc:	10000226 	beq	r2,zero,98e8 <__swbuf_r+0xa0>
    98e0:	00800284 	movi	r2,10
    98e4:	88801926 	beq	r17,r2,994c <__swbuf_r+0x104>
    98e8:	8805883a 	mov	r2,r17
    98ec:	dfc00417 	ldw	ra,16(sp)
    98f0:	dcc00317 	ldw	r19,12(sp)
    98f4:	dc800217 	ldw	r18,8(sp)
    98f8:	dc400117 	ldw	r17,4(sp)
    98fc:	dc000017 	ldw	r16,0(sp)
    9900:	dec00504 	addi	sp,sp,20
    9904:	f800283a 	ret
    9908:	81401917 	ldw	r5,100(r16)
    990c:	00b7ffc4 	movi	r2,-8193
    9910:	21080014 	ori	r4,r4,8192
    9914:	2884703a 	and	r2,r5,r2
    9918:	80801915 	stw	r2,100(r16)
    991c:	80800017 	ldw	r2,0(r16)
    9920:	8100030d 	sth	r4,12(r16)
    9924:	81000517 	ldw	r4,20(r16)
    9928:	10c7c83a 	sub	r3,r2,r3
    992c:	193fe016 	blt	r3,r4,98b0 <_gp+0xfffefed0>
    9930:	800b883a 	mov	r5,r16
    9934:	9009883a 	mov	r4,r18
    9938:	0004ba80 	call	4ba8 <_fflush_r>
    993c:	1000071e 	bne	r2,zero,995c <__swbuf_r+0x114>
    9940:	80800017 	ldw	r2,0(r16)
    9944:	00c00044 	movi	r3,1
    9948:	003fda06 	br	98b4 <_gp+0xfffefed4>
    994c:	800b883a 	mov	r5,r16
    9950:	9009883a 	mov	r4,r18
    9954:	0004ba80 	call	4ba8 <_fflush_r>
    9958:	103fe326 	beq	r2,zero,98e8 <_gp+0xfffeff08>
    995c:	00bfffc4 	movi	r2,-1
    9960:	003fe206 	br	98ec <_gp+0xfffeff0c>
    9964:	800b883a 	mov	r5,r16
    9968:	9009883a 	mov	r4,r18
    996c:	0002fb00 	call	2fb0 <__swsetup_r>
    9970:	103ffa1e 	bne	r2,zero,995c <_gp+0xfffeff7c>
    9974:	8100030b 	ldhu	r4,12(r16)
    9978:	80c00417 	ldw	r3,16(r16)
    997c:	003fc506 	br	9894 <_gp+0xfffefeb4>
    9980:	0004f840 	call	4f84 <__sinit>
    9984:	003fbc06 	br	9878 <_gp+0xfffefe98>

00009988 <__swbuf>:
    9988:	00800074 	movhi	r2,1
    998c:	10867904 	addi	r2,r2,6628
    9990:	280d883a 	mov	r6,r5
    9994:	200b883a 	mov	r5,r4
    9998:	11000017 	ldw	r4,0(r2)
    999c:	00098481 	jmpi	9848 <__swbuf_r>

000099a0 <_write_r>:
    99a0:	defffd04 	addi	sp,sp,-12
    99a4:	2805883a 	mov	r2,r5
    99a8:	dc000015 	stw	r16,0(sp)
    99ac:	04000074 	movhi	r16,1
    99b0:	dc400115 	stw	r17,4(sp)
    99b4:	300b883a 	mov	r5,r6
    99b8:	840d4904 	addi	r16,r16,13604
    99bc:	2023883a 	mov	r17,r4
    99c0:	380d883a 	mov	r6,r7
    99c4:	1009883a 	mov	r4,r2
    99c8:	dfc00215 	stw	ra,8(sp)
    99cc:	80000015 	stw	zero,0(r16)
    99d0:	000dba00 	call	dba0 <write>
    99d4:	00ffffc4 	movi	r3,-1
    99d8:	10c00526 	beq	r2,r3,99f0 <_write_r+0x50>
    99dc:	dfc00217 	ldw	ra,8(sp)
    99e0:	dc400117 	ldw	r17,4(sp)
    99e4:	dc000017 	ldw	r16,0(sp)
    99e8:	dec00304 	addi	sp,sp,12
    99ec:	f800283a 	ret
    99f0:	80c00017 	ldw	r3,0(r16)
    99f4:	183ff926 	beq	r3,zero,99dc <_gp+0xfffefffc>
    99f8:	88c00015 	stw	r3,0(r17)
    99fc:	003ff706 	br	99dc <_gp+0xfffefffc>

00009a00 <_close_r>:
    9a00:	defffd04 	addi	sp,sp,-12
    9a04:	dc000015 	stw	r16,0(sp)
    9a08:	04000074 	movhi	r16,1
    9a0c:	dc400115 	stw	r17,4(sp)
    9a10:	840d4904 	addi	r16,r16,13604
    9a14:	2023883a 	mov	r17,r4
    9a18:	2809883a 	mov	r4,r5
    9a1c:	dfc00215 	stw	ra,8(sp)
    9a20:	80000015 	stw	zero,0(r16)
    9a24:	000d2e40 	call	d2e4 <close>
    9a28:	00ffffc4 	movi	r3,-1
    9a2c:	10c00526 	beq	r2,r3,9a44 <_close_r+0x44>
    9a30:	dfc00217 	ldw	ra,8(sp)
    9a34:	dc400117 	ldw	r17,4(sp)
    9a38:	dc000017 	ldw	r16,0(sp)
    9a3c:	dec00304 	addi	sp,sp,12
    9a40:	f800283a 	ret
    9a44:	80c00017 	ldw	r3,0(r16)
    9a48:	183ff926 	beq	r3,zero,9a30 <_gp+0xffff0050>
    9a4c:	88c00015 	stw	r3,0(r17)
    9a50:	003ff706 	br	9a30 <_gp+0xffff0050>

00009a54 <_calloc_r>:
    9a54:	298b383a 	mul	r5,r5,r6
    9a58:	defffe04 	addi	sp,sp,-8
    9a5c:	dfc00115 	stw	ra,4(sp)
    9a60:	dc000015 	stw	r16,0(sp)
    9a64:	0005ce40 	call	5ce4 <_malloc_r>
    9a68:	10002926 	beq	r2,zero,9b10 <_calloc_r+0xbc>
    9a6c:	11bfff17 	ldw	r6,-4(r2)
    9a70:	1021883a 	mov	r16,r2
    9a74:	00bfff04 	movi	r2,-4
    9a78:	308c703a 	and	r6,r6,r2
    9a7c:	00c00904 	movi	r3,36
    9a80:	308d883a 	add	r6,r6,r2
    9a84:	19801636 	bltu	r3,r6,9ae0 <_calloc_r+0x8c>
    9a88:	008004c4 	movi	r2,19
    9a8c:	11800b2e 	bgeu	r2,r6,9abc <_calloc_r+0x68>
    9a90:	80000015 	stw	zero,0(r16)
    9a94:	80000115 	stw	zero,4(r16)
    9a98:	008006c4 	movi	r2,27
    9a9c:	11801a2e 	bgeu	r2,r6,9b08 <_calloc_r+0xb4>
    9aa0:	80000215 	stw	zero,8(r16)
    9aa4:	80000315 	stw	zero,12(r16)
    9aa8:	30c0151e 	bne	r6,r3,9b00 <_calloc_r+0xac>
    9aac:	80000415 	stw	zero,16(r16)
    9ab0:	80800604 	addi	r2,r16,24
    9ab4:	80000515 	stw	zero,20(r16)
    9ab8:	00000106 	br	9ac0 <_calloc_r+0x6c>
    9abc:	8005883a 	mov	r2,r16
    9ac0:	10000015 	stw	zero,0(r2)
    9ac4:	10000115 	stw	zero,4(r2)
    9ac8:	10000215 	stw	zero,8(r2)
    9acc:	8005883a 	mov	r2,r16
    9ad0:	dfc00117 	ldw	ra,4(sp)
    9ad4:	dc000017 	ldw	r16,0(sp)
    9ad8:	dec00204 	addi	sp,sp,8
    9adc:	f800283a 	ret
    9ae0:	000b883a 	mov	r5,zero
    9ae4:	8009883a 	mov	r4,r16
    9ae8:	00067300 	call	6730 <memset>
    9aec:	8005883a 	mov	r2,r16
    9af0:	dfc00117 	ldw	ra,4(sp)
    9af4:	dc000017 	ldw	r16,0(sp)
    9af8:	dec00204 	addi	sp,sp,8
    9afc:	f800283a 	ret
    9b00:	80800404 	addi	r2,r16,16
    9b04:	003fee06 	br	9ac0 <_gp+0xffff00e0>
    9b08:	80800204 	addi	r2,r16,8
    9b0c:	003fec06 	br	9ac0 <_gp+0xffff00e0>
    9b10:	0005883a 	mov	r2,zero
    9b14:	003fee06 	br	9ad0 <_gp+0xffff00f0>

00009b18 <_fclose_r>:
    9b18:	28003926 	beq	r5,zero,9c00 <_fclose_r+0xe8>
    9b1c:	defffc04 	addi	sp,sp,-16
    9b20:	dc400115 	stw	r17,4(sp)
    9b24:	dc000015 	stw	r16,0(sp)
    9b28:	dfc00315 	stw	ra,12(sp)
    9b2c:	dc800215 	stw	r18,8(sp)
    9b30:	2023883a 	mov	r17,r4
    9b34:	2821883a 	mov	r16,r5
    9b38:	20000226 	beq	r4,zero,9b44 <_fclose_r+0x2c>
    9b3c:	20800e17 	ldw	r2,56(r4)
    9b40:	10002726 	beq	r2,zero,9be0 <_fclose_r+0xc8>
    9b44:	8080030f 	ldh	r2,12(r16)
    9b48:	1000071e 	bne	r2,zero,9b68 <_fclose_r+0x50>
    9b4c:	0005883a 	mov	r2,zero
    9b50:	dfc00317 	ldw	ra,12(sp)
    9b54:	dc800217 	ldw	r18,8(sp)
    9b58:	dc400117 	ldw	r17,4(sp)
    9b5c:	dc000017 	ldw	r16,0(sp)
    9b60:	dec00404 	addi	sp,sp,16
    9b64:	f800283a 	ret
    9b68:	800b883a 	mov	r5,r16
    9b6c:	8809883a 	mov	r4,r17
    9b70:	000498c0 	call	498c <__sflush_r>
    9b74:	1025883a 	mov	r18,r2
    9b78:	80800b17 	ldw	r2,44(r16)
    9b7c:	10000426 	beq	r2,zero,9b90 <_fclose_r+0x78>
    9b80:	81400717 	ldw	r5,28(r16)
    9b84:	8809883a 	mov	r4,r17
    9b88:	103ee83a 	callr	r2
    9b8c:	10001616 	blt	r2,zero,9be8 <_fclose_r+0xd0>
    9b90:	8080030b 	ldhu	r2,12(r16)
    9b94:	1080200c 	andi	r2,r2,128
    9b98:	1000151e 	bne	r2,zero,9bf0 <_fclose_r+0xd8>
    9b9c:	81400c17 	ldw	r5,48(r16)
    9ba0:	28000526 	beq	r5,zero,9bb8 <_fclose_r+0xa0>
    9ba4:	80801004 	addi	r2,r16,64
    9ba8:	28800226 	beq	r5,r2,9bb4 <_fclose_r+0x9c>
    9bac:	8809883a 	mov	r4,r17
    9bb0:	00050f80 	call	50f8 <_free_r>
    9bb4:	80000c15 	stw	zero,48(r16)
    9bb8:	81401117 	ldw	r5,68(r16)
    9bbc:	28000326 	beq	r5,zero,9bcc <_fclose_r+0xb4>
    9bc0:	8809883a 	mov	r4,r17
    9bc4:	00050f80 	call	50f8 <_free_r>
    9bc8:	80001115 	stw	zero,68(r16)
    9bcc:	0004f940 	call	4f94 <__sfp_lock_acquire>
    9bd0:	8000030d 	sth	zero,12(r16)
    9bd4:	0004f980 	call	4f98 <__sfp_lock_release>
    9bd8:	9005883a 	mov	r2,r18
    9bdc:	003fdc06 	br	9b50 <_gp+0xffff0170>
    9be0:	0004f840 	call	4f84 <__sinit>
    9be4:	003fd706 	br	9b44 <_gp+0xffff0164>
    9be8:	04bfffc4 	movi	r18,-1
    9bec:	003fe806 	br	9b90 <_gp+0xffff01b0>
    9bf0:	81400417 	ldw	r5,16(r16)
    9bf4:	8809883a 	mov	r4,r17
    9bf8:	00050f80 	call	50f8 <_free_r>
    9bfc:	003fe706 	br	9b9c <_gp+0xffff01bc>
    9c00:	0005883a 	mov	r2,zero
    9c04:	f800283a 	ret

00009c08 <fclose>:
    9c08:	00800074 	movhi	r2,1
    9c0c:	10867904 	addi	r2,r2,6628
    9c10:	200b883a 	mov	r5,r4
    9c14:	11000017 	ldw	r4,0(r2)
    9c18:	0009b181 	jmpi	9b18 <_fclose_r>

00009c1c <__fputwc>:
    9c1c:	defff804 	addi	sp,sp,-32
    9c20:	dcc00415 	stw	r19,16(sp)
    9c24:	dc800315 	stw	r18,12(sp)
    9c28:	dc000115 	stw	r16,4(sp)
    9c2c:	dfc00715 	stw	ra,28(sp)
    9c30:	dd400615 	stw	r21,24(sp)
    9c34:	dd000515 	stw	r20,20(sp)
    9c38:	dc400215 	stw	r17,8(sp)
    9c3c:	2027883a 	mov	r19,r4
    9c40:	2825883a 	mov	r18,r5
    9c44:	3021883a 	mov	r16,r6
    9c48:	0005ad40 	call	5ad4 <__locale_mb_cur_max>
    9c4c:	00c00044 	movi	r3,1
    9c50:	10c03e26 	beq	r2,r3,9d4c <__fputwc+0x130>
    9c54:	81c01704 	addi	r7,r16,92
    9c58:	900d883a 	mov	r6,r18
    9c5c:	d80b883a 	mov	r5,sp
    9c60:	9809883a 	mov	r4,r19
    9c64:	0009f940 	call	9f94 <_wcrtomb_r>
    9c68:	1029883a 	mov	r20,r2
    9c6c:	00bfffc4 	movi	r2,-1
    9c70:	a0802026 	beq	r20,r2,9cf4 <__fputwc+0xd8>
    9c74:	d9400003 	ldbu	r5,0(sp)
    9c78:	a0001c26 	beq	r20,zero,9cec <__fputwc+0xd0>
    9c7c:	0023883a 	mov	r17,zero
    9c80:	05400284 	movi	r21,10
    9c84:	00000906 	br	9cac <__fputwc+0x90>
    9c88:	80800017 	ldw	r2,0(r16)
    9c8c:	11400005 	stb	r5,0(r2)
    9c90:	80c00017 	ldw	r3,0(r16)
    9c94:	18c00044 	addi	r3,r3,1
    9c98:	80c00015 	stw	r3,0(r16)
    9c9c:	8c400044 	addi	r17,r17,1
    9ca0:	dc45883a 	add	r2,sp,r17
    9ca4:	8d00112e 	bgeu	r17,r20,9cec <__fputwc+0xd0>
    9ca8:	11400003 	ldbu	r5,0(r2)
    9cac:	80c00217 	ldw	r3,8(r16)
    9cb0:	18ffffc4 	addi	r3,r3,-1
    9cb4:	80c00215 	stw	r3,8(r16)
    9cb8:	183ff30e 	bge	r3,zero,9c88 <_gp+0xffff02a8>
    9cbc:	80800617 	ldw	r2,24(r16)
    9cc0:	18801916 	blt	r3,r2,9d28 <__fputwc+0x10c>
    9cc4:	80800017 	ldw	r2,0(r16)
    9cc8:	11400005 	stb	r5,0(r2)
    9ccc:	80800017 	ldw	r2,0(r16)
    9cd0:	10c00003 	ldbu	r3,0(r2)
    9cd4:	10800044 	addi	r2,r2,1
    9cd8:	1d402326 	beq	r3,r21,9d68 <__fputwc+0x14c>
    9cdc:	80800015 	stw	r2,0(r16)
    9ce0:	8c400044 	addi	r17,r17,1
    9ce4:	dc45883a 	add	r2,sp,r17
    9ce8:	8d3fef36 	bltu	r17,r20,9ca8 <_gp+0xffff02c8>
    9cec:	9005883a 	mov	r2,r18
    9cf0:	00000406 	br	9d04 <__fputwc+0xe8>
    9cf4:	80c0030b 	ldhu	r3,12(r16)
    9cf8:	a005883a 	mov	r2,r20
    9cfc:	18c01014 	ori	r3,r3,64
    9d00:	80c0030d 	sth	r3,12(r16)
    9d04:	dfc00717 	ldw	ra,28(sp)
    9d08:	dd400617 	ldw	r21,24(sp)
    9d0c:	dd000517 	ldw	r20,20(sp)
    9d10:	dcc00417 	ldw	r19,16(sp)
    9d14:	dc800317 	ldw	r18,12(sp)
    9d18:	dc400217 	ldw	r17,8(sp)
    9d1c:	dc000117 	ldw	r16,4(sp)
    9d20:	dec00804 	addi	sp,sp,32
    9d24:	f800283a 	ret
    9d28:	800d883a 	mov	r6,r16
    9d2c:	29403fcc 	andi	r5,r5,255
    9d30:	9809883a 	mov	r4,r19
    9d34:	00098480 	call	9848 <__swbuf_r>
    9d38:	10bfffe0 	cmpeqi	r2,r2,-1
    9d3c:	10803fcc 	andi	r2,r2,255
    9d40:	103fd626 	beq	r2,zero,9c9c <_gp+0xffff02bc>
    9d44:	00bfffc4 	movi	r2,-1
    9d48:	003fee06 	br	9d04 <_gp+0xffff0324>
    9d4c:	90ffffc4 	addi	r3,r18,-1
    9d50:	01003f84 	movi	r4,254
    9d54:	20ffbf36 	bltu	r4,r3,9c54 <_gp+0xffff0274>
    9d58:	900b883a 	mov	r5,r18
    9d5c:	dc800005 	stb	r18,0(sp)
    9d60:	1029883a 	mov	r20,r2
    9d64:	003fc506 	br	9c7c <_gp+0xffff029c>
    9d68:	800d883a 	mov	r6,r16
    9d6c:	a80b883a 	mov	r5,r21
    9d70:	9809883a 	mov	r4,r19
    9d74:	00098480 	call	9848 <__swbuf_r>
    9d78:	10bfffe0 	cmpeqi	r2,r2,-1
    9d7c:	003fef06 	br	9d3c <_gp+0xffff035c>

00009d80 <_fputwc_r>:
    9d80:	3080030b 	ldhu	r2,12(r6)
    9d84:	10c8000c 	andi	r3,r2,8192
    9d88:	1800051e 	bne	r3,zero,9da0 <_fputwc_r+0x20>
    9d8c:	30c01917 	ldw	r3,100(r6)
    9d90:	10880014 	ori	r2,r2,8192
    9d94:	3080030d 	sth	r2,12(r6)
    9d98:	18880014 	ori	r2,r3,8192
    9d9c:	30801915 	stw	r2,100(r6)
    9da0:	0009c1c1 	jmpi	9c1c <__fputwc>

00009da4 <fputwc>:
    9da4:	00800074 	movhi	r2,1
    9da8:	defffc04 	addi	sp,sp,-16
    9dac:	10867904 	addi	r2,r2,6628
    9db0:	dc000115 	stw	r16,4(sp)
    9db4:	14000017 	ldw	r16,0(r2)
    9db8:	dc400215 	stw	r17,8(sp)
    9dbc:	dfc00315 	stw	ra,12(sp)
    9dc0:	2023883a 	mov	r17,r4
    9dc4:	80000226 	beq	r16,zero,9dd0 <fputwc+0x2c>
    9dc8:	80800e17 	ldw	r2,56(r16)
    9dcc:	10001026 	beq	r2,zero,9e10 <fputwc+0x6c>
    9dd0:	2880030b 	ldhu	r2,12(r5)
    9dd4:	10c8000c 	andi	r3,r2,8192
    9dd8:	1800051e 	bne	r3,zero,9df0 <fputwc+0x4c>
    9ddc:	28c01917 	ldw	r3,100(r5)
    9de0:	10880014 	ori	r2,r2,8192
    9de4:	2880030d 	sth	r2,12(r5)
    9de8:	18880014 	ori	r2,r3,8192
    9dec:	28801915 	stw	r2,100(r5)
    9df0:	280d883a 	mov	r6,r5
    9df4:	8009883a 	mov	r4,r16
    9df8:	880b883a 	mov	r5,r17
    9dfc:	dfc00317 	ldw	ra,12(sp)
    9e00:	dc400217 	ldw	r17,8(sp)
    9e04:	dc000117 	ldw	r16,4(sp)
    9e08:	dec00404 	addi	sp,sp,16
    9e0c:	0009c1c1 	jmpi	9c1c <__fputwc>
    9e10:	8009883a 	mov	r4,r16
    9e14:	d9400015 	stw	r5,0(sp)
    9e18:	0004f840 	call	4f84 <__sinit>
    9e1c:	d9400017 	ldw	r5,0(sp)
    9e20:	003feb06 	br	9dd0 <_gp+0xffff03f0>

00009e24 <_fstat_r>:
    9e24:	defffd04 	addi	sp,sp,-12
    9e28:	2805883a 	mov	r2,r5
    9e2c:	dc000015 	stw	r16,0(sp)
    9e30:	04000074 	movhi	r16,1
    9e34:	dc400115 	stw	r17,4(sp)
    9e38:	840d4904 	addi	r16,r16,13604
    9e3c:	2023883a 	mov	r17,r4
    9e40:	300b883a 	mov	r5,r6
    9e44:	1009883a 	mov	r4,r2
    9e48:	dfc00215 	stw	ra,8(sp)
    9e4c:	80000015 	stw	zero,0(r16)
    9e50:	000d4780 	call	d478 <fstat>
    9e54:	00ffffc4 	movi	r3,-1
    9e58:	10c00526 	beq	r2,r3,9e70 <_fstat_r+0x4c>
    9e5c:	dfc00217 	ldw	ra,8(sp)
    9e60:	dc400117 	ldw	r17,4(sp)
    9e64:	dc000017 	ldw	r16,0(sp)
    9e68:	dec00304 	addi	sp,sp,12
    9e6c:	f800283a 	ret
    9e70:	80c00017 	ldw	r3,0(r16)
    9e74:	183ff926 	beq	r3,zero,9e5c <_gp+0xffff047c>
    9e78:	88c00015 	stw	r3,0(r17)
    9e7c:	003ff706 	br	9e5c <_gp+0xffff047c>

00009e80 <_isatty_r>:
    9e80:	defffd04 	addi	sp,sp,-12
    9e84:	dc000015 	stw	r16,0(sp)
    9e88:	04000074 	movhi	r16,1
    9e8c:	dc400115 	stw	r17,4(sp)
    9e90:	840d4904 	addi	r16,r16,13604
    9e94:	2023883a 	mov	r17,r4
    9e98:	2809883a 	mov	r4,r5
    9e9c:	dfc00215 	stw	ra,8(sp)
    9ea0:	80000015 	stw	zero,0(r16)
    9ea4:	000d5780 	call	d578 <isatty>
    9ea8:	00ffffc4 	movi	r3,-1
    9eac:	10c00526 	beq	r2,r3,9ec4 <_isatty_r+0x44>
    9eb0:	dfc00217 	ldw	ra,8(sp)
    9eb4:	dc400117 	ldw	r17,4(sp)
    9eb8:	dc000017 	ldw	r16,0(sp)
    9ebc:	dec00304 	addi	sp,sp,12
    9ec0:	f800283a 	ret
    9ec4:	80c00017 	ldw	r3,0(r16)
    9ec8:	183ff926 	beq	r3,zero,9eb0 <_gp+0xffff04d0>
    9ecc:	88c00015 	stw	r3,0(r17)
    9ed0:	003ff706 	br	9eb0 <_gp+0xffff04d0>

00009ed4 <_lseek_r>:
    9ed4:	defffd04 	addi	sp,sp,-12
    9ed8:	2805883a 	mov	r2,r5
    9edc:	dc000015 	stw	r16,0(sp)
    9ee0:	04000074 	movhi	r16,1
    9ee4:	dc400115 	stw	r17,4(sp)
    9ee8:	300b883a 	mov	r5,r6
    9eec:	840d4904 	addi	r16,r16,13604
    9ef0:	2023883a 	mov	r17,r4
    9ef4:	380d883a 	mov	r6,r7
    9ef8:	1009883a 	mov	r4,r2
    9efc:	dfc00215 	stw	ra,8(sp)
    9f00:	80000015 	stw	zero,0(r16)
    9f04:	000d7580 	call	d758 <lseek>
    9f08:	00ffffc4 	movi	r3,-1
    9f0c:	10c00526 	beq	r2,r3,9f24 <_lseek_r+0x50>
    9f10:	dfc00217 	ldw	ra,8(sp)
    9f14:	dc400117 	ldw	r17,4(sp)
    9f18:	dc000017 	ldw	r16,0(sp)
    9f1c:	dec00304 	addi	sp,sp,12
    9f20:	f800283a 	ret
    9f24:	80c00017 	ldw	r3,0(r16)
    9f28:	183ff926 	beq	r3,zero,9f10 <_gp+0xffff0530>
    9f2c:	88c00015 	stw	r3,0(r17)
    9f30:	003ff706 	br	9f10 <_gp+0xffff0530>

00009f34 <_read_r>:
    9f34:	defffd04 	addi	sp,sp,-12
    9f38:	2805883a 	mov	r2,r5
    9f3c:	dc000015 	stw	r16,0(sp)
    9f40:	04000074 	movhi	r16,1
    9f44:	dc400115 	stw	r17,4(sp)
    9f48:	300b883a 	mov	r5,r6
    9f4c:	840d4904 	addi	r16,r16,13604
    9f50:	2023883a 	mov	r17,r4
    9f54:	380d883a 	mov	r6,r7
    9f58:	1009883a 	mov	r4,r2
    9f5c:	dfc00215 	stw	ra,8(sp)
    9f60:	80000015 	stw	zero,0(r16)
    9f64:	000d9400 	call	d940 <read>
    9f68:	00ffffc4 	movi	r3,-1
    9f6c:	10c00526 	beq	r2,r3,9f84 <_read_r+0x50>
    9f70:	dfc00217 	ldw	ra,8(sp)
    9f74:	dc400117 	ldw	r17,4(sp)
    9f78:	dc000017 	ldw	r16,0(sp)
    9f7c:	dec00304 	addi	sp,sp,12
    9f80:	f800283a 	ret
    9f84:	80c00017 	ldw	r3,0(r16)
    9f88:	183ff926 	beq	r3,zero,9f70 <_gp+0xffff0590>
    9f8c:	88c00015 	stw	r3,0(r17)
    9f90:	003ff706 	br	9f70 <_gp+0xffff0590>

00009f94 <_wcrtomb_r>:
    9f94:	defff604 	addi	sp,sp,-40
    9f98:	00800074 	movhi	r2,1
    9f9c:	dc800815 	stw	r18,32(sp)
    9fa0:	dc400715 	stw	r17,28(sp)
    9fa4:	dc000615 	stw	r16,24(sp)
    9fa8:	10867d04 	addi	r2,r2,6644
    9fac:	dfc00915 	stw	ra,36(sp)
    9fb0:	2021883a 	mov	r16,r4
    9fb4:	3823883a 	mov	r17,r7
    9fb8:	14800017 	ldw	r18,0(r2)
    9fbc:	28001426 	beq	r5,zero,a010 <_wcrtomb_r+0x7c>
    9fc0:	d9400415 	stw	r5,16(sp)
    9fc4:	d9800515 	stw	r6,20(sp)
    9fc8:	0005ac80 	call	5ac8 <__locale_charset>
    9fcc:	d9800517 	ldw	r6,20(sp)
    9fd0:	d9400417 	ldw	r5,16(sp)
    9fd4:	100f883a 	mov	r7,r2
    9fd8:	dc400015 	stw	r17,0(sp)
    9fdc:	8009883a 	mov	r4,r16
    9fe0:	903ee83a 	callr	r18
    9fe4:	00ffffc4 	movi	r3,-1
    9fe8:	10c0031e 	bne	r2,r3,9ff8 <_wcrtomb_r+0x64>
    9fec:	88000015 	stw	zero,0(r17)
    9ff0:	00c02284 	movi	r3,138
    9ff4:	80c00015 	stw	r3,0(r16)
    9ff8:	dfc00917 	ldw	ra,36(sp)
    9ffc:	dc800817 	ldw	r18,32(sp)
    a000:	dc400717 	ldw	r17,28(sp)
    a004:	dc000617 	ldw	r16,24(sp)
    a008:	dec00a04 	addi	sp,sp,40
    a00c:	f800283a 	ret
    a010:	0005ac80 	call	5ac8 <__locale_charset>
    a014:	100f883a 	mov	r7,r2
    a018:	dc400015 	stw	r17,0(sp)
    a01c:	000d883a 	mov	r6,zero
    a020:	d9400104 	addi	r5,sp,4
    a024:	8009883a 	mov	r4,r16
    a028:	903ee83a 	callr	r18
    a02c:	003fed06 	br	9fe4 <_gp+0xffff0604>

0000a030 <wcrtomb>:
    a030:	defff604 	addi	sp,sp,-40
    a034:	00800074 	movhi	r2,1
    a038:	dc800615 	stw	r18,24(sp)
    a03c:	dc400515 	stw	r17,20(sp)
    a040:	10867904 	addi	r2,r2,6628
    a044:	dfc00915 	stw	ra,36(sp)
    a048:	dd000815 	stw	r20,32(sp)
    a04c:	dcc00715 	stw	r19,28(sp)
    a050:	dc000415 	stw	r16,16(sp)
    a054:	3025883a 	mov	r18,r6
    a058:	14400017 	ldw	r17,0(r2)
    a05c:	20001926 	beq	r4,zero,a0c4 <wcrtomb+0x94>
    a060:	00800074 	movhi	r2,1
    a064:	10867d04 	addi	r2,r2,6644
    a068:	15000017 	ldw	r20,0(r2)
    a06c:	2021883a 	mov	r16,r4
    a070:	2827883a 	mov	r19,r5
    a074:	0005ac80 	call	5ac8 <__locale_charset>
    a078:	100f883a 	mov	r7,r2
    a07c:	dc800015 	stw	r18,0(sp)
    a080:	980d883a 	mov	r6,r19
    a084:	800b883a 	mov	r5,r16
    a088:	8809883a 	mov	r4,r17
    a08c:	a03ee83a 	callr	r20
    a090:	00ffffc4 	movi	r3,-1
    a094:	10c0031e 	bne	r2,r3,a0a4 <wcrtomb+0x74>
    a098:	90000015 	stw	zero,0(r18)
    a09c:	00c02284 	movi	r3,138
    a0a0:	88c00015 	stw	r3,0(r17)
    a0a4:	dfc00917 	ldw	ra,36(sp)
    a0a8:	dd000817 	ldw	r20,32(sp)
    a0ac:	dcc00717 	ldw	r19,28(sp)
    a0b0:	dc800617 	ldw	r18,24(sp)
    a0b4:	dc400517 	ldw	r17,20(sp)
    a0b8:	dc000417 	ldw	r16,16(sp)
    a0bc:	dec00a04 	addi	sp,sp,40
    a0c0:	f800283a 	ret
    a0c4:	00800074 	movhi	r2,1
    a0c8:	10867d04 	addi	r2,r2,6644
    a0cc:	14000017 	ldw	r16,0(r2)
    a0d0:	0005ac80 	call	5ac8 <__locale_charset>
    a0d4:	100f883a 	mov	r7,r2
    a0d8:	dc800015 	stw	r18,0(sp)
    a0dc:	000d883a 	mov	r6,zero
    a0e0:	d9400104 	addi	r5,sp,4
    a0e4:	8809883a 	mov	r4,r17
    a0e8:	803ee83a 	callr	r16
    a0ec:	003fe806 	br	a090 <_gp+0xffff06b0>

0000a0f0 <__ascii_wctomb>:
    a0f0:	28000526 	beq	r5,zero,a108 <__ascii_wctomb+0x18>
    a0f4:	00803fc4 	movi	r2,255
    a0f8:	11800536 	bltu	r2,r6,a110 <__ascii_wctomb+0x20>
    a0fc:	29800005 	stb	r6,0(r5)
    a100:	00800044 	movi	r2,1
    a104:	f800283a 	ret
    a108:	0005883a 	mov	r2,zero
    a10c:	f800283a 	ret
    a110:	00802284 	movi	r2,138
    a114:	20800015 	stw	r2,0(r4)
    a118:	00bfffc4 	movi	r2,-1
    a11c:	f800283a 	ret

0000a120 <_wctomb_r>:
    a120:	00800074 	movhi	r2,1
    a124:	defff904 	addi	sp,sp,-28
    a128:	10867d04 	addi	r2,r2,6644
    a12c:	dfc00615 	stw	ra,24(sp)
    a130:	dc400515 	stw	r17,20(sp)
    a134:	dc000415 	stw	r16,16(sp)
    a138:	3823883a 	mov	r17,r7
    a13c:	14000017 	ldw	r16,0(r2)
    a140:	d9000115 	stw	r4,4(sp)
    a144:	d9400215 	stw	r5,8(sp)
    a148:	d9800315 	stw	r6,12(sp)
    a14c:	0005ac80 	call	5ac8 <__locale_charset>
    a150:	d9800317 	ldw	r6,12(sp)
    a154:	d9400217 	ldw	r5,8(sp)
    a158:	d9000117 	ldw	r4,4(sp)
    a15c:	100f883a 	mov	r7,r2
    a160:	dc400015 	stw	r17,0(sp)
    a164:	803ee83a 	callr	r16
    a168:	dfc00617 	ldw	ra,24(sp)
    a16c:	dc400517 	ldw	r17,20(sp)
    a170:	dc000417 	ldw	r16,16(sp)
    a174:	dec00704 	addi	sp,sp,28
    a178:	f800283a 	ret

0000a17c <__udivdi3>:
    a17c:	defff504 	addi	sp,sp,-44
    a180:	dcc00415 	stw	r19,16(sp)
    a184:	dc000115 	stw	r16,4(sp)
    a188:	dfc00a15 	stw	ra,40(sp)
    a18c:	df000915 	stw	fp,36(sp)
    a190:	ddc00815 	stw	r23,32(sp)
    a194:	dd800715 	stw	r22,28(sp)
    a198:	dd400615 	stw	r21,24(sp)
    a19c:	dd000515 	stw	r20,20(sp)
    a1a0:	dc800315 	stw	r18,12(sp)
    a1a4:	dc400215 	stw	r17,8(sp)
    a1a8:	2027883a 	mov	r19,r4
    a1ac:	2821883a 	mov	r16,r5
    a1b0:	3800411e 	bne	r7,zero,a2b8 <__udivdi3+0x13c>
    a1b4:	3023883a 	mov	r17,r6
    a1b8:	2025883a 	mov	r18,r4
    a1bc:	2980522e 	bgeu	r5,r6,a308 <__udivdi3+0x18c>
    a1c0:	00bfffd4 	movui	r2,65535
    a1c4:	282d883a 	mov	r22,r5
    a1c8:	1180a836 	bltu	r2,r6,a46c <__udivdi3+0x2f0>
    a1cc:	00803fc4 	movi	r2,255
    a1d0:	1185803a 	cmpltu	r2,r2,r6
    a1d4:	100490fa 	slli	r2,r2,3
    a1d8:	3086d83a 	srl	r3,r6,r2
    a1dc:	01000074 	movhi	r4,1
    a1e0:	213f8204 	addi	r4,r4,-504
    a1e4:	20c7883a 	add	r3,r4,r3
    a1e8:	18c00003 	ldbu	r3,0(r3)
    a1ec:	1885883a 	add	r2,r3,r2
    a1f0:	00c00804 	movi	r3,32
    a1f4:	1887c83a 	sub	r3,r3,r2
    a1f8:	18000526 	beq	r3,zero,a210 <__udivdi3+0x94>
    a1fc:	80e0983a 	sll	r16,r16,r3
    a200:	9884d83a 	srl	r2,r19,r2
    a204:	30e2983a 	sll	r17,r6,r3
    a208:	98e4983a 	sll	r18,r19,r3
    a20c:	142cb03a 	or	r22,r2,r16
    a210:	882ad43a 	srli	r21,r17,16
    a214:	b009883a 	mov	r4,r22
    a218:	8d3fffcc 	andi	r20,r17,65535
    a21c:	a80b883a 	mov	r5,r21
    a220:	00009480 	call	948 <__umodsi3>
    a224:	b009883a 	mov	r4,r22
    a228:	a80b883a 	mov	r5,r21
    a22c:	1027883a 	mov	r19,r2
    a230:	00008e40 	call	8e4 <__udivsi3>
    a234:	102d883a 	mov	r22,r2
    a238:	9826943a 	slli	r19,r19,16
    a23c:	9004d43a 	srli	r2,r18,16
    a240:	a5a1383a 	mul	r16,r20,r22
    a244:	14c4b03a 	or	r2,r2,r19
    a248:	1400052e 	bgeu	r2,r16,a260 <__udivdi3+0xe4>
    a24c:	1445883a 	add	r2,r2,r17
    a250:	b0ffffc4 	addi	r3,r22,-1
    a254:	14400136 	bltu	r2,r17,a25c <__udivdi3+0xe0>
    a258:	14012336 	bltu	r2,r16,a6e8 <__udivdi3+0x56c>
    a25c:	182d883a 	mov	r22,r3
    a260:	1421c83a 	sub	r16,r2,r16
    a264:	a80b883a 	mov	r5,r21
    a268:	8009883a 	mov	r4,r16
    a26c:	00009480 	call	948 <__umodsi3>
    a270:	1027883a 	mov	r19,r2
    a274:	a80b883a 	mov	r5,r21
    a278:	8009883a 	mov	r4,r16
    a27c:	00008e40 	call	8e4 <__udivsi3>
    a280:	9826943a 	slli	r19,r19,16
    a284:	a0a9383a 	mul	r20,r20,r2
    a288:	94bfffcc 	andi	r18,r18,65535
    a28c:	94e4b03a 	or	r18,r18,r19
    a290:	9500052e 	bgeu	r18,r20,a2a8 <__udivdi3+0x12c>
    a294:	8ca5883a 	add	r18,r17,r18
    a298:	10ffffc4 	addi	r3,r2,-1
    a29c:	9440f136 	bltu	r18,r17,a664 <__udivdi3+0x4e8>
    a2a0:	9500f02e 	bgeu	r18,r20,a664 <__udivdi3+0x4e8>
    a2a4:	10bfff84 	addi	r2,r2,-2
    a2a8:	b00c943a 	slli	r6,r22,16
    a2ac:	0007883a 	mov	r3,zero
    a2b0:	3084b03a 	or	r2,r6,r2
    a2b4:	00005906 	br	a41c <__udivdi3+0x2a0>
    a2b8:	29c05636 	bltu	r5,r7,a414 <__udivdi3+0x298>
    a2bc:	00bfffd4 	movui	r2,65535
    a2c0:	11c0622e 	bgeu	r2,r7,a44c <__udivdi3+0x2d0>
    a2c4:	00804034 	movhi	r2,256
    a2c8:	10bfffc4 	addi	r2,r2,-1
    a2cc:	11c0ee36 	bltu	r2,r7,a688 <__udivdi3+0x50c>
    a2d0:	00800404 	movi	r2,16
    a2d4:	3886d83a 	srl	r3,r7,r2
    a2d8:	01000074 	movhi	r4,1
    a2dc:	213f8204 	addi	r4,r4,-504
    a2e0:	20c7883a 	add	r3,r4,r3
    a2e4:	18c00003 	ldbu	r3,0(r3)
    a2e8:	05400804 	movi	r21,32
    a2ec:	1885883a 	add	r2,r3,r2
    a2f0:	a8abc83a 	sub	r21,r21,r2
    a2f4:	a800621e 	bne	r21,zero,a480 <__udivdi3+0x304>
    a2f8:	3c00e936 	bltu	r7,r16,a6a0 <__udivdi3+0x524>
    a2fc:	9985403a 	cmpgeu	r2,r19,r6
    a300:	0007883a 	mov	r3,zero
    a304:	00004506 	br	a41c <__udivdi3+0x2a0>
    a308:	3000041e 	bne	r6,zero,a31c <__udivdi3+0x1a0>
    a30c:	000b883a 	mov	r5,zero
    a310:	01000044 	movi	r4,1
    a314:	00008e40 	call	8e4 <__udivsi3>
    a318:	1023883a 	mov	r17,r2
    a31c:	00bfffd4 	movui	r2,65535
    a320:	14404e2e 	bgeu	r2,r17,a45c <__udivdi3+0x2e0>
    a324:	00804034 	movhi	r2,256
    a328:	10bfffc4 	addi	r2,r2,-1
    a32c:	1440d836 	bltu	r2,r17,a690 <__udivdi3+0x514>
    a330:	00800404 	movi	r2,16
    a334:	8886d83a 	srl	r3,r17,r2
    a338:	01000074 	movhi	r4,1
    a33c:	213f8204 	addi	r4,r4,-504
    a340:	20c7883a 	add	r3,r4,r3
    a344:	18c00003 	ldbu	r3,0(r3)
    a348:	1885883a 	add	r2,r3,r2
    a34c:	00c00804 	movi	r3,32
    a350:	1887c83a 	sub	r3,r3,r2
    a354:	18008f1e 	bne	r3,zero,a594 <__udivdi3+0x418>
    a358:	882ad43a 	srli	r21,r17,16
    a35c:	8461c83a 	sub	r16,r16,r17
    a360:	8d3fffcc 	andi	r20,r17,65535
    a364:	00c00044 	movi	r3,1
    a368:	8009883a 	mov	r4,r16
    a36c:	a80b883a 	mov	r5,r21
    a370:	d8c00015 	stw	r3,0(sp)
    a374:	00009480 	call	948 <__umodsi3>
    a378:	8009883a 	mov	r4,r16
    a37c:	a80b883a 	mov	r5,r21
    a380:	1027883a 	mov	r19,r2
    a384:	00008e40 	call	8e4 <__udivsi3>
    a388:	9826943a 	slli	r19,r19,16
    a38c:	9008d43a 	srli	r4,r18,16
    a390:	1521383a 	mul	r16,r2,r20
    a394:	102d883a 	mov	r22,r2
    a398:	24c8b03a 	or	r4,r4,r19
    a39c:	d8c00017 	ldw	r3,0(sp)
    a3a0:	2400052e 	bgeu	r4,r16,a3b8 <__udivdi3+0x23c>
    a3a4:	2449883a 	add	r4,r4,r17
    a3a8:	b0bfffc4 	addi	r2,r22,-1
    a3ac:	24400136 	bltu	r4,r17,a3b4 <__udivdi3+0x238>
    a3b0:	2400ca36 	bltu	r4,r16,a6dc <__udivdi3+0x560>
    a3b4:	102d883a 	mov	r22,r2
    a3b8:	2421c83a 	sub	r16,r4,r16
    a3bc:	a80b883a 	mov	r5,r21
    a3c0:	8009883a 	mov	r4,r16
    a3c4:	d8c00015 	stw	r3,0(sp)
    a3c8:	00009480 	call	948 <__umodsi3>
    a3cc:	1027883a 	mov	r19,r2
    a3d0:	a80b883a 	mov	r5,r21
    a3d4:	8009883a 	mov	r4,r16
    a3d8:	00008e40 	call	8e4 <__udivsi3>
    a3dc:	9826943a 	slli	r19,r19,16
    a3e0:	1529383a 	mul	r20,r2,r20
    a3e4:	94bfffcc 	andi	r18,r18,65535
    a3e8:	94e4b03a 	or	r18,r18,r19
    a3ec:	d8c00017 	ldw	r3,0(sp)
    a3f0:	9500052e 	bgeu	r18,r20,a408 <__udivdi3+0x28c>
    a3f4:	8ca5883a 	add	r18,r17,r18
    a3f8:	113fffc4 	addi	r4,r2,-1
    a3fc:	94409736 	bltu	r18,r17,a65c <__udivdi3+0x4e0>
    a400:	9500962e 	bgeu	r18,r20,a65c <__udivdi3+0x4e0>
    a404:	10bfff84 	addi	r2,r2,-2
    a408:	b00c943a 	slli	r6,r22,16
    a40c:	3084b03a 	or	r2,r6,r2
    a410:	00000206 	br	a41c <__udivdi3+0x2a0>
    a414:	0007883a 	mov	r3,zero
    a418:	0005883a 	mov	r2,zero
    a41c:	dfc00a17 	ldw	ra,40(sp)
    a420:	df000917 	ldw	fp,36(sp)
    a424:	ddc00817 	ldw	r23,32(sp)
    a428:	dd800717 	ldw	r22,28(sp)
    a42c:	dd400617 	ldw	r21,24(sp)
    a430:	dd000517 	ldw	r20,20(sp)
    a434:	dcc00417 	ldw	r19,16(sp)
    a438:	dc800317 	ldw	r18,12(sp)
    a43c:	dc400217 	ldw	r17,8(sp)
    a440:	dc000117 	ldw	r16,4(sp)
    a444:	dec00b04 	addi	sp,sp,44
    a448:	f800283a 	ret
    a44c:	00803fc4 	movi	r2,255
    a450:	11c5803a 	cmpltu	r2,r2,r7
    a454:	100490fa 	slli	r2,r2,3
    a458:	003f9e06 	br	a2d4 <_gp+0xffff08f4>
    a45c:	00803fc4 	movi	r2,255
    a460:	1445803a 	cmpltu	r2,r2,r17
    a464:	100490fa 	slli	r2,r2,3
    a468:	003fb206 	br	a334 <_gp+0xffff0954>
    a46c:	00804034 	movhi	r2,256
    a470:	10bfffc4 	addi	r2,r2,-1
    a474:	11808836 	bltu	r2,r6,a698 <__udivdi3+0x51c>
    a478:	00800404 	movi	r2,16
    a47c:	003f5606 	br	a1d8 <_gp+0xffff07f8>
    a480:	30aed83a 	srl	r23,r6,r2
    a484:	3d4e983a 	sll	r7,r7,r21
    a488:	80acd83a 	srl	r22,r16,r2
    a48c:	9884d83a 	srl	r2,r19,r2
    a490:	3deeb03a 	or	r23,r7,r23
    a494:	b824d43a 	srli	r18,r23,16
    a498:	8560983a 	sll	r16,r16,r21
    a49c:	b009883a 	mov	r4,r22
    a4a0:	900b883a 	mov	r5,r18
    a4a4:	3568983a 	sll	r20,r6,r21
    a4a8:	1420b03a 	or	r16,r2,r16
    a4ac:	00009480 	call	948 <__umodsi3>
    a4b0:	b009883a 	mov	r4,r22
    a4b4:	900b883a 	mov	r5,r18
    a4b8:	1023883a 	mov	r17,r2
    a4bc:	00008e40 	call	8e4 <__udivsi3>
    a4c0:	8808943a 	slli	r4,r17,16
    a4c4:	bf3fffcc 	andi	fp,r23,65535
    a4c8:	8006d43a 	srli	r3,r16,16
    a4cc:	e0a3383a 	mul	r17,fp,r2
    a4d0:	100d883a 	mov	r6,r2
    a4d4:	1906b03a 	or	r3,r3,r4
    a4d8:	1c40042e 	bgeu	r3,r17,a4ec <__udivdi3+0x370>
    a4dc:	1dc7883a 	add	r3,r3,r23
    a4e0:	10bfffc4 	addi	r2,r2,-1
    a4e4:	1dc0752e 	bgeu	r3,r23,a6bc <__udivdi3+0x540>
    a4e8:	100d883a 	mov	r6,r2
    a4ec:	1c63c83a 	sub	r17,r3,r17
    a4f0:	900b883a 	mov	r5,r18
    a4f4:	8809883a 	mov	r4,r17
    a4f8:	d9800015 	stw	r6,0(sp)
    a4fc:	00009480 	call	948 <__umodsi3>
    a500:	102d883a 	mov	r22,r2
    a504:	8809883a 	mov	r4,r17
    a508:	900b883a 	mov	r5,r18
    a50c:	00008e40 	call	8e4 <__udivsi3>
    a510:	b02c943a 	slli	r22,r22,16
    a514:	e089383a 	mul	r4,fp,r2
    a518:	843fffcc 	andi	r16,r16,65535
    a51c:	85a0b03a 	or	r16,r16,r22
    a520:	d9800017 	ldw	r6,0(sp)
    a524:	8100042e 	bgeu	r16,r4,a538 <__udivdi3+0x3bc>
    a528:	85e1883a 	add	r16,r16,r23
    a52c:	10ffffc4 	addi	r3,r2,-1
    a530:	85c05e2e 	bgeu	r16,r23,a6ac <__udivdi3+0x530>
    a534:	1805883a 	mov	r2,r3
    a538:	300c943a 	slli	r6,r6,16
    a53c:	a17fffcc 	andi	r5,r20,65535
    a540:	a028d43a 	srli	r20,r20,16
    a544:	3084b03a 	or	r2,r6,r2
    a548:	10ffffcc 	andi	r3,r2,65535
    a54c:	100cd43a 	srli	r6,r2,16
    a550:	194f383a 	mul	r7,r3,r5
    a554:	1d07383a 	mul	r3,r3,r20
    a558:	314b383a 	mul	r5,r6,r5
    a55c:	3810d43a 	srli	r8,r7,16
    a560:	8121c83a 	sub	r16,r16,r4
    a564:	1947883a 	add	r3,r3,r5
    a568:	40c7883a 	add	r3,r8,r3
    a56c:	350d383a 	mul	r6,r6,r20
    a570:	1940022e 	bgeu	r3,r5,a57c <__udivdi3+0x400>
    a574:	01000074 	movhi	r4,1
    a578:	310d883a 	add	r6,r6,r4
    a57c:	1828d43a 	srli	r20,r3,16
    a580:	a18d883a 	add	r6,r20,r6
    a584:	81803e36 	bltu	r16,r6,a680 <__udivdi3+0x504>
    a588:	81803826 	beq	r16,r6,a66c <__udivdi3+0x4f0>
    a58c:	0007883a 	mov	r3,zero
    a590:	003fa206 	br	a41c <_gp+0xffff0a3c>
    a594:	88e2983a 	sll	r17,r17,r3
    a598:	80a8d83a 	srl	r20,r16,r2
    a59c:	80e0983a 	sll	r16,r16,r3
    a5a0:	882ad43a 	srli	r21,r17,16
    a5a4:	9884d83a 	srl	r2,r19,r2
    a5a8:	a009883a 	mov	r4,r20
    a5ac:	a80b883a 	mov	r5,r21
    a5b0:	142eb03a 	or	r23,r2,r16
    a5b4:	98e4983a 	sll	r18,r19,r3
    a5b8:	00009480 	call	948 <__umodsi3>
    a5bc:	a009883a 	mov	r4,r20
    a5c0:	a80b883a 	mov	r5,r21
    a5c4:	1021883a 	mov	r16,r2
    a5c8:	00008e40 	call	8e4 <__udivsi3>
    a5cc:	1039883a 	mov	fp,r2
    a5d0:	8d3fffcc 	andi	r20,r17,65535
    a5d4:	8020943a 	slli	r16,r16,16
    a5d8:	b804d43a 	srli	r2,r23,16
    a5dc:	a72d383a 	mul	r22,r20,fp
    a5e0:	1404b03a 	or	r2,r2,r16
    a5e4:	1580062e 	bgeu	r2,r22,a600 <__udivdi3+0x484>
    a5e8:	1445883a 	add	r2,r2,r17
    a5ec:	e0ffffc4 	addi	r3,fp,-1
    a5f0:	14403836 	bltu	r2,r17,a6d4 <__udivdi3+0x558>
    a5f4:	1580372e 	bgeu	r2,r22,a6d4 <__udivdi3+0x558>
    a5f8:	e73fff84 	addi	fp,fp,-2
    a5fc:	1445883a 	add	r2,r2,r17
    a600:	15adc83a 	sub	r22,r2,r22
    a604:	a80b883a 	mov	r5,r21
    a608:	b009883a 	mov	r4,r22
    a60c:	00009480 	call	948 <__umodsi3>
    a610:	1027883a 	mov	r19,r2
    a614:	b009883a 	mov	r4,r22
    a618:	a80b883a 	mov	r5,r21
    a61c:	00008e40 	call	8e4 <__udivsi3>
    a620:	9826943a 	slli	r19,r19,16
    a624:	a0a1383a 	mul	r16,r20,r2
    a628:	b93fffcc 	andi	r4,r23,65535
    a62c:	24c8b03a 	or	r4,r4,r19
    a630:	2400062e 	bgeu	r4,r16,a64c <__udivdi3+0x4d0>
    a634:	2449883a 	add	r4,r4,r17
    a638:	10ffffc4 	addi	r3,r2,-1
    a63c:	24402336 	bltu	r4,r17,a6cc <__udivdi3+0x550>
    a640:	2400222e 	bgeu	r4,r16,a6cc <__udivdi3+0x550>
    a644:	10bfff84 	addi	r2,r2,-2
    a648:	2449883a 	add	r4,r4,r17
    a64c:	e038943a 	slli	fp,fp,16
    a650:	2421c83a 	sub	r16,r4,r16
    a654:	e086b03a 	or	r3,fp,r2
    a658:	003f4306 	br	a368 <_gp+0xffff0988>
    a65c:	2005883a 	mov	r2,r4
    a660:	003f6906 	br	a408 <_gp+0xffff0a28>
    a664:	1805883a 	mov	r2,r3
    a668:	003f0f06 	br	a2a8 <_gp+0xffff08c8>
    a66c:	1806943a 	slli	r3,r3,16
    a670:	9d66983a 	sll	r19,r19,r21
    a674:	39ffffcc 	andi	r7,r7,65535
    a678:	19c7883a 	add	r3,r3,r7
    a67c:	98ffc32e 	bgeu	r19,r3,a58c <_gp+0xffff0bac>
    a680:	10bfffc4 	addi	r2,r2,-1
    a684:	003fc106 	br	a58c <_gp+0xffff0bac>
    a688:	00800604 	movi	r2,24
    a68c:	003f1106 	br	a2d4 <_gp+0xffff08f4>
    a690:	00800604 	movi	r2,24
    a694:	003f2706 	br	a334 <_gp+0xffff0954>
    a698:	00800604 	movi	r2,24
    a69c:	003ece06 	br	a1d8 <_gp+0xffff07f8>
    a6a0:	0007883a 	mov	r3,zero
    a6a4:	00800044 	movi	r2,1
    a6a8:	003f5c06 	br	a41c <_gp+0xffff0a3c>
    a6ac:	813fa12e 	bgeu	r16,r4,a534 <_gp+0xffff0b54>
    a6b0:	10bfff84 	addi	r2,r2,-2
    a6b4:	85e1883a 	add	r16,r16,r23
    a6b8:	003f9f06 	br	a538 <_gp+0xffff0b58>
    a6bc:	1c7f8a2e 	bgeu	r3,r17,a4e8 <_gp+0xffff0b08>
    a6c0:	31bfff84 	addi	r6,r6,-2
    a6c4:	1dc7883a 	add	r3,r3,r23
    a6c8:	003f8806 	br	a4ec <_gp+0xffff0b0c>
    a6cc:	1805883a 	mov	r2,r3
    a6d0:	003fde06 	br	a64c <_gp+0xffff0c6c>
    a6d4:	1839883a 	mov	fp,r3
    a6d8:	003fc906 	br	a600 <_gp+0xffff0c20>
    a6dc:	b5bfff84 	addi	r22,r22,-2
    a6e0:	2449883a 	add	r4,r4,r17
    a6e4:	003f3406 	br	a3b8 <_gp+0xffff09d8>
    a6e8:	b5bfff84 	addi	r22,r22,-2
    a6ec:	1445883a 	add	r2,r2,r17
    a6f0:	003edb06 	br	a260 <_gp+0xffff0880>

0000a6f4 <__umoddi3>:
    a6f4:	defff404 	addi	sp,sp,-48
    a6f8:	df000a15 	stw	fp,40(sp)
    a6fc:	dc400315 	stw	r17,12(sp)
    a700:	dc000215 	stw	r16,8(sp)
    a704:	dfc00b15 	stw	ra,44(sp)
    a708:	ddc00915 	stw	r23,36(sp)
    a70c:	dd800815 	stw	r22,32(sp)
    a710:	dd400715 	stw	r21,28(sp)
    a714:	dd000615 	stw	r20,24(sp)
    a718:	dcc00515 	stw	r19,20(sp)
    a71c:	dc800415 	stw	r18,16(sp)
    a720:	2021883a 	mov	r16,r4
    a724:	2823883a 	mov	r17,r5
    a728:	2839883a 	mov	fp,r5
    a72c:	38003c1e 	bne	r7,zero,a820 <__umoddi3+0x12c>
    a730:	3027883a 	mov	r19,r6
    a734:	2029883a 	mov	r20,r4
    a738:	2980512e 	bgeu	r5,r6,a880 <__umoddi3+0x18c>
    a73c:	00bfffd4 	movui	r2,65535
    a740:	11809a36 	bltu	r2,r6,a9ac <__umoddi3+0x2b8>
    a744:	01003fc4 	movi	r4,255
    a748:	2189803a 	cmpltu	r4,r4,r6
    a74c:	200890fa 	slli	r4,r4,3
    a750:	3104d83a 	srl	r2,r6,r4
    a754:	00c00074 	movhi	r3,1
    a758:	18ff8204 	addi	r3,r3,-504
    a75c:	1885883a 	add	r2,r3,r2
    a760:	10c00003 	ldbu	r3,0(r2)
    a764:	00800804 	movi	r2,32
    a768:	1909883a 	add	r4,r3,r4
    a76c:	1125c83a 	sub	r18,r2,r4
    a770:	90000526 	beq	r18,zero,a788 <__umoddi3+0x94>
    a774:	8ca2983a 	sll	r17,r17,r18
    a778:	8108d83a 	srl	r4,r16,r4
    a77c:	34a6983a 	sll	r19,r6,r18
    a780:	84a8983a 	sll	r20,r16,r18
    a784:	2478b03a 	or	fp,r4,r17
    a788:	982ed43a 	srli	r23,r19,16
    a78c:	e009883a 	mov	r4,fp
    a790:	9dbfffcc 	andi	r22,r19,65535
    a794:	b80b883a 	mov	r5,r23
    a798:	00009480 	call	948 <__umodsi3>
    a79c:	e009883a 	mov	r4,fp
    a7a0:	b80b883a 	mov	r5,r23
    a7a4:	102b883a 	mov	r21,r2
    a7a8:	00008e40 	call	8e4 <__udivsi3>
    a7ac:	a806943a 	slli	r3,r21,16
    a7b0:	a008d43a 	srli	r4,r20,16
    a7b4:	b085383a 	mul	r2,r22,r2
    a7b8:	20c8b03a 	or	r4,r4,r3
    a7bc:	2080032e 	bgeu	r4,r2,a7cc <__umoddi3+0xd8>
    a7c0:	24c9883a 	add	r4,r4,r19
    a7c4:	24c00136 	bltu	r4,r19,a7cc <__umoddi3+0xd8>
    a7c8:	20811036 	bltu	r4,r2,ac0c <__umoddi3+0x518>
    a7cc:	20abc83a 	sub	r21,r4,r2
    a7d0:	b80b883a 	mov	r5,r23
    a7d4:	a809883a 	mov	r4,r21
    a7d8:	00009480 	call	948 <__umodsi3>
    a7dc:	1023883a 	mov	r17,r2
    a7e0:	b80b883a 	mov	r5,r23
    a7e4:	a809883a 	mov	r4,r21
    a7e8:	00008e40 	call	8e4 <__udivsi3>
    a7ec:	8822943a 	slli	r17,r17,16
    a7f0:	b085383a 	mul	r2,r22,r2
    a7f4:	a0ffffcc 	andi	r3,r20,65535
    a7f8:	1c46b03a 	or	r3,r3,r17
    a7fc:	1880042e 	bgeu	r3,r2,a810 <__umoddi3+0x11c>
    a800:	1cc7883a 	add	r3,r3,r19
    a804:	1cc00236 	bltu	r3,r19,a810 <__umoddi3+0x11c>
    a808:	1880012e 	bgeu	r3,r2,a810 <__umoddi3+0x11c>
    a80c:	1cc7883a 	add	r3,r3,r19
    a810:	1885c83a 	sub	r2,r3,r2
    a814:	1484d83a 	srl	r2,r2,r18
    a818:	0007883a 	mov	r3,zero
    a81c:	00004f06 	br	a95c <__umoddi3+0x268>
    a820:	29c04c36 	bltu	r5,r7,a954 <__umoddi3+0x260>
    a824:	00bfffd4 	movui	r2,65535
    a828:	11c0582e 	bgeu	r2,r7,a98c <__umoddi3+0x298>
    a82c:	00804034 	movhi	r2,256
    a830:	10bfffc4 	addi	r2,r2,-1
    a834:	11c0e736 	bltu	r2,r7,abd4 <__umoddi3+0x4e0>
    a838:	01000404 	movi	r4,16
    a83c:	3904d83a 	srl	r2,r7,r4
    a840:	00c00074 	movhi	r3,1
    a844:	18ff8204 	addi	r3,r3,-504
    a848:	1885883a 	add	r2,r3,r2
    a84c:	14c00003 	ldbu	r19,0(r2)
    a850:	00c00804 	movi	r3,32
    a854:	9927883a 	add	r19,r19,r4
    a858:	1ce9c83a 	sub	r20,r3,r19
    a85c:	a000581e 	bne	r20,zero,a9c0 <__umoddi3+0x2cc>
    a860:	3c400136 	bltu	r7,r17,a868 <__umoddi3+0x174>
    a864:	8180eb36 	bltu	r16,r6,ac14 <__umoddi3+0x520>
    a868:	8185c83a 	sub	r2,r16,r6
    a86c:	89e3c83a 	sub	r17,r17,r7
    a870:	8089803a 	cmpltu	r4,r16,r2
    a874:	8939c83a 	sub	fp,r17,r4
    a878:	e007883a 	mov	r3,fp
    a87c:	00003706 	br	a95c <__umoddi3+0x268>
    a880:	3000041e 	bne	r6,zero,a894 <__umoddi3+0x1a0>
    a884:	000b883a 	mov	r5,zero
    a888:	01000044 	movi	r4,1
    a88c:	00008e40 	call	8e4 <__udivsi3>
    a890:	1027883a 	mov	r19,r2
    a894:	00bfffd4 	movui	r2,65535
    a898:	14c0402e 	bgeu	r2,r19,a99c <__umoddi3+0x2a8>
    a89c:	00804034 	movhi	r2,256
    a8a0:	10bfffc4 	addi	r2,r2,-1
    a8a4:	14c0cd36 	bltu	r2,r19,abdc <__umoddi3+0x4e8>
    a8a8:	00800404 	movi	r2,16
    a8ac:	9886d83a 	srl	r3,r19,r2
    a8b0:	01000074 	movhi	r4,1
    a8b4:	213f8204 	addi	r4,r4,-504
    a8b8:	20c7883a 	add	r3,r4,r3
    a8bc:	18c00003 	ldbu	r3,0(r3)
    a8c0:	1887883a 	add	r3,r3,r2
    a8c4:	00800804 	movi	r2,32
    a8c8:	10e5c83a 	sub	r18,r2,r3
    a8cc:	9000901e 	bne	r18,zero,ab10 <__umoddi3+0x41c>
    a8d0:	982cd43a 	srli	r22,r19,16
    a8d4:	8ce3c83a 	sub	r17,r17,r19
    a8d8:	9d7fffcc 	andi	r21,r19,65535
    a8dc:	b00b883a 	mov	r5,r22
    a8e0:	8809883a 	mov	r4,r17
    a8e4:	00009480 	call	948 <__umodsi3>
    a8e8:	8809883a 	mov	r4,r17
    a8ec:	b00b883a 	mov	r5,r22
    a8f0:	1021883a 	mov	r16,r2
    a8f4:	00008e40 	call	8e4 <__udivsi3>
    a8f8:	8006943a 	slli	r3,r16,16
    a8fc:	a008d43a 	srli	r4,r20,16
    a900:	1545383a 	mul	r2,r2,r21
    a904:	20c8b03a 	or	r4,r4,r3
    a908:	2080042e 	bgeu	r4,r2,a91c <__umoddi3+0x228>
    a90c:	24c9883a 	add	r4,r4,r19
    a910:	24c00236 	bltu	r4,r19,a91c <__umoddi3+0x228>
    a914:	2080012e 	bgeu	r4,r2,a91c <__umoddi3+0x228>
    a918:	24c9883a 	add	r4,r4,r19
    a91c:	20a1c83a 	sub	r16,r4,r2
    a920:	b00b883a 	mov	r5,r22
    a924:	8009883a 	mov	r4,r16
    a928:	00009480 	call	948 <__umodsi3>
    a92c:	1023883a 	mov	r17,r2
    a930:	b00b883a 	mov	r5,r22
    a934:	8009883a 	mov	r4,r16
    a938:	00008e40 	call	8e4 <__udivsi3>
    a93c:	8822943a 	slli	r17,r17,16
    a940:	1545383a 	mul	r2,r2,r21
    a944:	a53fffcc 	andi	r20,r20,65535
    a948:	a446b03a 	or	r3,r20,r17
    a94c:	18bfb02e 	bgeu	r3,r2,a810 <_gp+0xffff0e30>
    a950:	003fab06 	br	a800 <_gp+0xffff0e20>
    a954:	2005883a 	mov	r2,r4
    a958:	2807883a 	mov	r3,r5
    a95c:	dfc00b17 	ldw	ra,44(sp)
    a960:	df000a17 	ldw	fp,40(sp)
    a964:	ddc00917 	ldw	r23,36(sp)
    a968:	dd800817 	ldw	r22,32(sp)
    a96c:	dd400717 	ldw	r21,28(sp)
    a970:	dd000617 	ldw	r20,24(sp)
    a974:	dcc00517 	ldw	r19,20(sp)
    a978:	dc800417 	ldw	r18,16(sp)
    a97c:	dc400317 	ldw	r17,12(sp)
    a980:	dc000217 	ldw	r16,8(sp)
    a984:	dec00c04 	addi	sp,sp,48
    a988:	f800283a 	ret
    a98c:	04c03fc4 	movi	r19,255
    a990:	99c9803a 	cmpltu	r4,r19,r7
    a994:	200890fa 	slli	r4,r4,3
    a998:	003fa806 	br	a83c <_gp+0xffff0e5c>
    a99c:	00803fc4 	movi	r2,255
    a9a0:	14c5803a 	cmpltu	r2,r2,r19
    a9a4:	100490fa 	slli	r2,r2,3
    a9a8:	003fc006 	br	a8ac <_gp+0xffff0ecc>
    a9ac:	00804034 	movhi	r2,256
    a9b0:	10bfffc4 	addi	r2,r2,-1
    a9b4:	11808b36 	bltu	r2,r6,abe4 <__umoddi3+0x4f0>
    a9b8:	01000404 	movi	r4,16
    a9bc:	003f6406 	br	a750 <_gp+0xffff0d70>
    a9c0:	34c4d83a 	srl	r2,r6,r19
    a9c4:	3d0e983a 	sll	r7,r7,r20
    a9c8:	8cf8d83a 	srl	fp,r17,r19
    a9cc:	8d10983a 	sll	r8,r17,r20
    a9d0:	38aab03a 	or	r21,r7,r2
    a9d4:	a82cd43a 	srli	r22,r21,16
    a9d8:	84e2d83a 	srl	r17,r16,r19
    a9dc:	e009883a 	mov	r4,fp
    a9e0:	b00b883a 	mov	r5,r22
    a9e4:	8a22b03a 	or	r17,r17,r8
    a9e8:	3524983a 	sll	r18,r6,r20
    a9ec:	00009480 	call	948 <__umodsi3>
    a9f0:	e009883a 	mov	r4,fp
    a9f4:	b00b883a 	mov	r5,r22
    a9f8:	102f883a 	mov	r23,r2
    a9fc:	00008e40 	call	8e4 <__udivsi3>
    aa00:	100d883a 	mov	r6,r2
    aa04:	b808943a 	slli	r4,r23,16
    aa08:	aa3fffcc 	andi	r8,r21,65535
    aa0c:	8804d43a 	srli	r2,r17,16
    aa10:	41af383a 	mul	r23,r8,r6
    aa14:	8520983a 	sll	r16,r16,r20
    aa18:	1104b03a 	or	r2,r2,r4
    aa1c:	15c0042e 	bgeu	r2,r23,aa30 <__umoddi3+0x33c>
    aa20:	1545883a 	add	r2,r2,r21
    aa24:	30ffffc4 	addi	r3,r6,-1
    aa28:	1540742e 	bgeu	r2,r21,abfc <__umoddi3+0x508>
    aa2c:	180d883a 	mov	r6,r3
    aa30:	15efc83a 	sub	r23,r2,r23
    aa34:	b00b883a 	mov	r5,r22
    aa38:	b809883a 	mov	r4,r23
    aa3c:	d9800115 	stw	r6,4(sp)
    aa40:	da000015 	stw	r8,0(sp)
    aa44:	00009480 	call	948 <__umodsi3>
    aa48:	b00b883a 	mov	r5,r22
    aa4c:	b809883a 	mov	r4,r23
    aa50:	1039883a 	mov	fp,r2
    aa54:	00008e40 	call	8e4 <__udivsi3>
    aa58:	da000017 	ldw	r8,0(sp)
    aa5c:	e038943a 	slli	fp,fp,16
    aa60:	100b883a 	mov	r5,r2
    aa64:	4089383a 	mul	r4,r8,r2
    aa68:	8a3fffcc 	andi	r8,r17,65535
    aa6c:	4710b03a 	or	r8,r8,fp
    aa70:	d9800117 	ldw	r6,4(sp)
    aa74:	4100042e 	bgeu	r8,r4,aa88 <__umoddi3+0x394>
    aa78:	4551883a 	add	r8,r8,r21
    aa7c:	10bfffc4 	addi	r2,r2,-1
    aa80:	45405a2e 	bgeu	r8,r21,abec <__umoddi3+0x4f8>
    aa84:	100b883a 	mov	r5,r2
    aa88:	300c943a 	slli	r6,r6,16
    aa8c:	91ffffcc 	andi	r7,r18,65535
    aa90:	9004d43a 	srli	r2,r18,16
    aa94:	314cb03a 	or	r6,r6,r5
    aa98:	317fffcc 	andi	r5,r6,65535
    aa9c:	300cd43a 	srli	r6,r6,16
    aaa0:	29d3383a 	mul	r9,r5,r7
    aaa4:	288b383a 	mul	r5,r5,r2
    aaa8:	31cf383a 	mul	r7,r6,r7
    aaac:	4806d43a 	srli	r3,r9,16
    aab0:	4111c83a 	sub	r8,r8,r4
    aab4:	29cb883a 	add	r5,r5,r7
    aab8:	194b883a 	add	r5,r3,r5
    aabc:	3085383a 	mul	r2,r6,r2
    aac0:	29c0022e 	bgeu	r5,r7,aacc <__umoddi3+0x3d8>
    aac4:	00c00074 	movhi	r3,1
    aac8:	10c5883a 	add	r2,r2,r3
    aacc:	2808d43a 	srli	r4,r5,16
    aad0:	280a943a 	slli	r5,r5,16
    aad4:	4a7fffcc 	andi	r9,r9,65535
    aad8:	2085883a 	add	r2,r4,r2
    aadc:	2a4b883a 	add	r5,r5,r9
    aae0:	40803636 	bltu	r8,r2,abbc <__umoddi3+0x4c8>
    aae4:	40804d26 	beq	r8,r2,ac1c <__umoddi3+0x528>
    aae8:	4089c83a 	sub	r4,r8,r2
    aaec:	280f883a 	mov	r7,r5
    aaf0:	81cfc83a 	sub	r7,r16,r7
    aaf4:	81c7803a 	cmpltu	r3,r16,r7
    aaf8:	20c7c83a 	sub	r3,r4,r3
    aafc:	1cc4983a 	sll	r2,r3,r19
    ab00:	3d0ed83a 	srl	r7,r7,r20
    ab04:	1d06d83a 	srl	r3,r3,r20
    ab08:	11c4b03a 	or	r2,r2,r7
    ab0c:	003f9306 	br	a95c <_gp+0xffff0f7c>
    ab10:	9ca6983a 	sll	r19,r19,r18
    ab14:	88e8d83a 	srl	r20,r17,r3
    ab18:	80c4d83a 	srl	r2,r16,r3
    ab1c:	982cd43a 	srli	r22,r19,16
    ab20:	8ca2983a 	sll	r17,r17,r18
    ab24:	a009883a 	mov	r4,r20
    ab28:	b00b883a 	mov	r5,r22
    ab2c:	1478b03a 	or	fp,r2,r17
    ab30:	00009480 	call	948 <__umodsi3>
    ab34:	a009883a 	mov	r4,r20
    ab38:	b00b883a 	mov	r5,r22
    ab3c:	1023883a 	mov	r17,r2
    ab40:	00008e40 	call	8e4 <__udivsi3>
    ab44:	9d7fffcc 	andi	r21,r19,65535
    ab48:	880a943a 	slli	r5,r17,16
    ab4c:	e008d43a 	srli	r4,fp,16
    ab50:	a885383a 	mul	r2,r21,r2
    ab54:	84a8983a 	sll	r20,r16,r18
    ab58:	2148b03a 	or	r4,r4,r5
    ab5c:	2080042e 	bgeu	r4,r2,ab70 <__umoddi3+0x47c>
    ab60:	24c9883a 	add	r4,r4,r19
    ab64:	24c00236 	bltu	r4,r19,ab70 <__umoddi3+0x47c>
    ab68:	2080012e 	bgeu	r4,r2,ab70 <__umoddi3+0x47c>
    ab6c:	24c9883a 	add	r4,r4,r19
    ab70:	20a3c83a 	sub	r17,r4,r2
    ab74:	b00b883a 	mov	r5,r22
    ab78:	8809883a 	mov	r4,r17
    ab7c:	00009480 	call	948 <__umodsi3>
    ab80:	102f883a 	mov	r23,r2
    ab84:	8809883a 	mov	r4,r17
    ab88:	b00b883a 	mov	r5,r22
    ab8c:	00008e40 	call	8e4 <__udivsi3>
    ab90:	b82e943a 	slli	r23,r23,16
    ab94:	a885383a 	mul	r2,r21,r2
    ab98:	e13fffcc 	andi	r4,fp,65535
    ab9c:	25c8b03a 	or	r4,r4,r23
    aba0:	2080042e 	bgeu	r4,r2,abb4 <__umoddi3+0x4c0>
    aba4:	24c9883a 	add	r4,r4,r19
    aba8:	24c00236 	bltu	r4,r19,abb4 <__umoddi3+0x4c0>
    abac:	2080012e 	bgeu	r4,r2,abb4 <__umoddi3+0x4c0>
    abb0:	24c9883a 	add	r4,r4,r19
    abb4:	20a3c83a 	sub	r17,r4,r2
    abb8:	003f4806 	br	a8dc <_gp+0xffff0efc>
    abbc:	2c8fc83a 	sub	r7,r5,r18
    abc0:	1545c83a 	sub	r2,r2,r21
    abc4:	29cb803a 	cmpltu	r5,r5,r7
    abc8:	1145c83a 	sub	r2,r2,r5
    abcc:	4089c83a 	sub	r4,r8,r2
    abd0:	003fc706 	br	aaf0 <_gp+0xffff1110>
    abd4:	01000604 	movi	r4,24
    abd8:	003f1806 	br	a83c <_gp+0xffff0e5c>
    abdc:	00800604 	movi	r2,24
    abe0:	003f3206 	br	a8ac <_gp+0xffff0ecc>
    abe4:	01000604 	movi	r4,24
    abe8:	003ed906 	br	a750 <_gp+0xffff0d70>
    abec:	413fa52e 	bgeu	r8,r4,aa84 <_gp+0xffff10a4>
    abf0:	297fff84 	addi	r5,r5,-2
    abf4:	4551883a 	add	r8,r8,r21
    abf8:	003fa306 	br	aa88 <_gp+0xffff10a8>
    abfc:	15ff8b2e 	bgeu	r2,r23,aa2c <_gp+0xffff104c>
    ac00:	31bfff84 	addi	r6,r6,-2
    ac04:	1545883a 	add	r2,r2,r21
    ac08:	003f8906 	br	aa30 <_gp+0xffff1050>
    ac0c:	24c9883a 	add	r4,r4,r19
    ac10:	003eee06 	br	a7cc <_gp+0xffff0dec>
    ac14:	8005883a 	mov	r2,r16
    ac18:	003f1706 	br	a878 <_gp+0xffff0e98>
    ac1c:	817fe736 	bltu	r16,r5,abbc <_gp+0xffff11dc>
    ac20:	280f883a 	mov	r7,r5
    ac24:	0009883a 	mov	r4,zero
    ac28:	003fb106 	br	aaf0 <_gp+0xffff1110>

0000ac2c <__adddf3>:
    ac2c:	02c00434 	movhi	r11,16
    ac30:	5affffc4 	addi	r11,r11,-1
    ac34:	2806d7fa 	srli	r3,r5,31
    ac38:	2ad4703a 	and	r10,r5,r11
    ac3c:	3ad2703a 	and	r9,r7,r11
    ac40:	3804d53a 	srli	r2,r7,20
    ac44:	3018d77a 	srli	r12,r6,29
    ac48:	280ad53a 	srli	r5,r5,20
    ac4c:	501490fa 	slli	r10,r10,3
    ac50:	2010d77a 	srli	r8,r4,29
    ac54:	481290fa 	slli	r9,r9,3
    ac58:	380ed7fa 	srli	r7,r7,31
    ac5c:	defffb04 	addi	sp,sp,-20
    ac60:	dc800215 	stw	r18,8(sp)
    ac64:	dc400115 	stw	r17,4(sp)
    ac68:	dc000015 	stw	r16,0(sp)
    ac6c:	dfc00415 	stw	ra,16(sp)
    ac70:	dcc00315 	stw	r19,12(sp)
    ac74:	1c803fcc 	andi	r18,r3,255
    ac78:	2c01ffcc 	andi	r16,r5,2047
    ac7c:	5210b03a 	or	r8,r10,r8
    ac80:	202290fa 	slli	r17,r4,3
    ac84:	1081ffcc 	andi	r2,r2,2047
    ac88:	4b12b03a 	or	r9,r9,r12
    ac8c:	300c90fa 	slli	r6,r6,3
    ac90:	91c07526 	beq	r18,r7,ae68 <__adddf3+0x23c>
    ac94:	8087c83a 	sub	r3,r16,r2
    ac98:	00c0ab0e 	bge	zero,r3,af48 <__adddf3+0x31c>
    ac9c:	10002a1e 	bne	r2,zero,ad48 <__adddf3+0x11c>
    aca0:	4984b03a 	or	r2,r9,r6
    aca4:	1000961e 	bne	r2,zero,af00 <__adddf3+0x2d4>
    aca8:	888001cc 	andi	r2,r17,7
    acac:	10000726 	beq	r2,zero,accc <__adddf3+0xa0>
    acb0:	888003cc 	andi	r2,r17,15
    acb4:	00c00104 	movi	r3,4
    acb8:	10c00426 	beq	r2,r3,accc <__adddf3+0xa0>
    acbc:	88c7883a 	add	r3,r17,r3
    acc0:	1c63803a 	cmpltu	r17,r3,r17
    acc4:	4451883a 	add	r8,r8,r17
    acc8:	1823883a 	mov	r17,r3
    accc:	4080202c 	andhi	r2,r8,128
    acd0:	10005926 	beq	r2,zero,ae38 <__adddf3+0x20c>
    acd4:	84000044 	addi	r16,r16,1
    acd8:	0081ffc4 	movi	r2,2047
    acdc:	8080ba26 	beq	r16,r2,afc8 <__adddf3+0x39c>
    ace0:	00bfe034 	movhi	r2,65408
    ace4:	10bfffc4 	addi	r2,r2,-1
    ace8:	4090703a 	and	r8,r8,r2
    acec:	4004977a 	slli	r2,r8,29
    acf0:	4010927a 	slli	r8,r8,9
    acf4:	8822d0fa 	srli	r17,r17,3
    acf8:	8401ffcc 	andi	r16,r16,2047
    acfc:	4010d33a 	srli	r8,r8,12
    ad00:	9007883a 	mov	r3,r18
    ad04:	1444b03a 	or	r2,r2,r17
    ad08:	8401ffcc 	andi	r16,r16,2047
    ad0c:	8020953a 	slli	r16,r16,20
    ad10:	18c03fcc 	andi	r3,r3,255
    ad14:	01000434 	movhi	r4,16
    ad18:	213fffc4 	addi	r4,r4,-1
    ad1c:	180697fa 	slli	r3,r3,31
    ad20:	4110703a 	and	r8,r8,r4
    ad24:	4410b03a 	or	r8,r8,r16
    ad28:	40c6b03a 	or	r3,r8,r3
    ad2c:	dfc00417 	ldw	ra,16(sp)
    ad30:	dcc00317 	ldw	r19,12(sp)
    ad34:	dc800217 	ldw	r18,8(sp)
    ad38:	dc400117 	ldw	r17,4(sp)
    ad3c:	dc000017 	ldw	r16,0(sp)
    ad40:	dec00504 	addi	sp,sp,20
    ad44:	f800283a 	ret
    ad48:	0081ffc4 	movi	r2,2047
    ad4c:	80bfd626 	beq	r16,r2,aca8 <_gp+0xffff12c8>
    ad50:	4a402034 	orhi	r9,r9,128
    ad54:	00800e04 	movi	r2,56
    ad58:	10c09f16 	blt	r2,r3,afd8 <__adddf3+0x3ac>
    ad5c:	008007c4 	movi	r2,31
    ad60:	10c0c216 	blt	r2,r3,b06c <__adddf3+0x440>
    ad64:	00800804 	movi	r2,32
    ad68:	10c5c83a 	sub	r2,r2,r3
    ad6c:	488a983a 	sll	r5,r9,r2
    ad70:	30c8d83a 	srl	r4,r6,r3
    ad74:	3084983a 	sll	r2,r6,r2
    ad78:	48c6d83a 	srl	r3,r9,r3
    ad7c:	290cb03a 	or	r6,r5,r4
    ad80:	1004c03a 	cmpne	r2,r2,zero
    ad84:	308cb03a 	or	r6,r6,r2
    ad88:	898dc83a 	sub	r6,r17,r6
    ad8c:	89a3803a 	cmpltu	r17,r17,r6
    ad90:	40d1c83a 	sub	r8,r8,r3
    ad94:	4451c83a 	sub	r8,r8,r17
    ad98:	3023883a 	mov	r17,r6
    ad9c:	4080202c 	andhi	r2,r8,128
    ada0:	10002326 	beq	r2,zero,ae30 <__adddf3+0x204>
    ada4:	04c02034 	movhi	r19,128
    ada8:	9cffffc4 	addi	r19,r19,-1
    adac:	44e6703a 	and	r19,r8,r19
    adb0:	98007626 	beq	r19,zero,af8c <__adddf3+0x360>
    adb4:	9809883a 	mov	r4,r19
    adb8:	000d2300 	call	d230 <__clzsi2>
    adbc:	10fffe04 	addi	r3,r2,-8
    adc0:	010007c4 	movi	r4,31
    adc4:	20c07716 	blt	r4,r3,afa4 <__adddf3+0x378>
    adc8:	00800804 	movi	r2,32
    adcc:	10c5c83a 	sub	r2,r2,r3
    add0:	8884d83a 	srl	r2,r17,r2
    add4:	98d0983a 	sll	r8,r19,r3
    add8:	88e2983a 	sll	r17,r17,r3
    addc:	1204b03a 	or	r2,r2,r8
    ade0:	1c007416 	blt	r3,r16,afb4 <__adddf3+0x388>
    ade4:	1c21c83a 	sub	r16,r3,r16
    ade8:	82000044 	addi	r8,r16,1
    adec:	00c007c4 	movi	r3,31
    adf0:	1a009116 	blt	r3,r8,b038 <__adddf3+0x40c>
    adf4:	00c00804 	movi	r3,32
    adf8:	1a07c83a 	sub	r3,r3,r8
    adfc:	8a08d83a 	srl	r4,r17,r8
    ae00:	88e2983a 	sll	r17,r17,r3
    ae04:	10c6983a 	sll	r3,r2,r3
    ae08:	1210d83a 	srl	r8,r2,r8
    ae0c:	8804c03a 	cmpne	r2,r17,zero
    ae10:	1906b03a 	or	r3,r3,r4
    ae14:	18a2b03a 	or	r17,r3,r2
    ae18:	0021883a 	mov	r16,zero
    ae1c:	003fa206 	br	aca8 <_gp+0xffff12c8>
    ae20:	1890b03a 	or	r8,r3,r2
    ae24:	40017d26 	beq	r8,zero,b41c <__adddf3+0x7f0>
    ae28:	1011883a 	mov	r8,r2
    ae2c:	1823883a 	mov	r17,r3
    ae30:	888001cc 	andi	r2,r17,7
    ae34:	103f9e1e 	bne	r2,zero,acb0 <_gp+0xffff12d0>
    ae38:	4004977a 	slli	r2,r8,29
    ae3c:	8822d0fa 	srli	r17,r17,3
    ae40:	4010d0fa 	srli	r8,r8,3
    ae44:	9007883a 	mov	r3,r18
    ae48:	1444b03a 	or	r2,r2,r17
    ae4c:	0101ffc4 	movi	r4,2047
    ae50:	81002426 	beq	r16,r4,aee4 <__adddf3+0x2b8>
    ae54:	8120703a 	and	r16,r16,r4
    ae58:	01000434 	movhi	r4,16
    ae5c:	213fffc4 	addi	r4,r4,-1
    ae60:	4110703a 	and	r8,r8,r4
    ae64:	003fa806 	br	ad08 <_gp+0xffff1328>
    ae68:	8089c83a 	sub	r4,r16,r2
    ae6c:	01005e0e 	bge	zero,r4,afe8 <__adddf3+0x3bc>
    ae70:	10002b26 	beq	r2,zero,af20 <__adddf3+0x2f4>
    ae74:	0081ffc4 	movi	r2,2047
    ae78:	80bf8b26 	beq	r16,r2,aca8 <_gp+0xffff12c8>
    ae7c:	4a402034 	orhi	r9,r9,128
    ae80:	00800e04 	movi	r2,56
    ae84:	1100a40e 	bge	r2,r4,b118 <__adddf3+0x4ec>
    ae88:	498cb03a 	or	r6,r9,r6
    ae8c:	300ac03a 	cmpne	r5,r6,zero
    ae90:	0013883a 	mov	r9,zero
    ae94:	2c4b883a 	add	r5,r5,r17
    ae98:	2c63803a 	cmpltu	r17,r5,r17
    ae9c:	4a11883a 	add	r8,r9,r8
    aea0:	8a11883a 	add	r8,r17,r8
    aea4:	2823883a 	mov	r17,r5
    aea8:	4080202c 	andhi	r2,r8,128
    aeac:	103fe026 	beq	r2,zero,ae30 <_gp+0xffff1450>
    aeb0:	84000044 	addi	r16,r16,1
    aeb4:	0081ffc4 	movi	r2,2047
    aeb8:	8080d226 	beq	r16,r2,b204 <__adddf3+0x5d8>
    aebc:	00bfe034 	movhi	r2,65408
    aec0:	10bfffc4 	addi	r2,r2,-1
    aec4:	4090703a 	and	r8,r8,r2
    aec8:	880ad07a 	srli	r5,r17,1
    aecc:	400897fa 	slli	r4,r8,31
    aed0:	88c0004c 	andi	r3,r17,1
    aed4:	28e2b03a 	or	r17,r5,r3
    aed8:	4010d07a 	srli	r8,r8,1
    aedc:	2462b03a 	or	r17,r4,r17
    aee0:	003f7106 	br	aca8 <_gp+0xffff12c8>
    aee4:	4088b03a 	or	r4,r8,r2
    aee8:	20014526 	beq	r4,zero,b400 <__adddf3+0x7d4>
    aeec:	01000434 	movhi	r4,16
    aef0:	42000234 	orhi	r8,r8,8
    aef4:	213fffc4 	addi	r4,r4,-1
    aef8:	4110703a 	and	r8,r8,r4
    aefc:	003f8206 	br	ad08 <_gp+0xffff1328>
    af00:	18ffffc4 	addi	r3,r3,-1
    af04:	1800491e 	bne	r3,zero,b02c <__adddf3+0x400>
    af08:	898bc83a 	sub	r5,r17,r6
    af0c:	8963803a 	cmpltu	r17,r17,r5
    af10:	4251c83a 	sub	r8,r8,r9
    af14:	4451c83a 	sub	r8,r8,r17
    af18:	2823883a 	mov	r17,r5
    af1c:	003f9f06 	br	ad9c <_gp+0xffff13bc>
    af20:	4984b03a 	or	r2,r9,r6
    af24:	103f6026 	beq	r2,zero,aca8 <_gp+0xffff12c8>
    af28:	213fffc4 	addi	r4,r4,-1
    af2c:	2000931e 	bne	r4,zero,b17c <__adddf3+0x550>
    af30:	898d883a 	add	r6,r17,r6
    af34:	3463803a 	cmpltu	r17,r6,r17
    af38:	4251883a 	add	r8,r8,r9
    af3c:	8a11883a 	add	r8,r17,r8
    af40:	3023883a 	mov	r17,r6
    af44:	003fd806 	br	aea8 <_gp+0xffff14c8>
    af48:	1800541e 	bne	r3,zero,b09c <__adddf3+0x470>
    af4c:	80800044 	addi	r2,r16,1
    af50:	1081ffcc 	andi	r2,r2,2047
    af54:	00c00044 	movi	r3,1
    af58:	1880a00e 	bge	r3,r2,b1dc <__adddf3+0x5b0>
    af5c:	8989c83a 	sub	r4,r17,r6
    af60:	8905803a 	cmpltu	r2,r17,r4
    af64:	4267c83a 	sub	r19,r8,r9
    af68:	98a7c83a 	sub	r19,r19,r2
    af6c:	9880202c 	andhi	r2,r19,128
    af70:	10006326 	beq	r2,zero,b100 <__adddf3+0x4d4>
    af74:	3463c83a 	sub	r17,r6,r17
    af78:	4a07c83a 	sub	r3,r9,r8
    af7c:	344d803a 	cmpltu	r6,r6,r17
    af80:	19a7c83a 	sub	r19,r3,r6
    af84:	3825883a 	mov	r18,r7
    af88:	983f8a1e 	bne	r19,zero,adb4 <_gp+0xffff13d4>
    af8c:	8809883a 	mov	r4,r17
    af90:	000d2300 	call	d230 <__clzsi2>
    af94:	10800804 	addi	r2,r2,32
    af98:	10fffe04 	addi	r3,r2,-8
    af9c:	010007c4 	movi	r4,31
    afa0:	20ff890e 	bge	r4,r3,adc8 <_gp+0xffff13e8>
    afa4:	10bff604 	addi	r2,r2,-40
    afa8:	8884983a 	sll	r2,r17,r2
    afac:	0023883a 	mov	r17,zero
    afb0:	1c3f8c0e 	bge	r3,r16,ade4 <_gp+0xffff1404>
    afb4:	023fe034 	movhi	r8,65408
    afb8:	423fffc4 	addi	r8,r8,-1
    afbc:	80e1c83a 	sub	r16,r16,r3
    afc0:	1210703a 	and	r8,r2,r8
    afc4:	003f3806 	br	aca8 <_gp+0xffff12c8>
    afc8:	9007883a 	mov	r3,r18
    afcc:	0011883a 	mov	r8,zero
    afd0:	0005883a 	mov	r2,zero
    afd4:	003f4c06 	br	ad08 <_gp+0xffff1328>
    afd8:	498cb03a 	or	r6,r9,r6
    afdc:	300cc03a 	cmpne	r6,r6,zero
    afe0:	0007883a 	mov	r3,zero
    afe4:	003f6806 	br	ad88 <_gp+0xffff13a8>
    afe8:	20009c1e 	bne	r4,zero,b25c <__adddf3+0x630>
    afec:	80800044 	addi	r2,r16,1
    aff0:	1141ffcc 	andi	r5,r2,2047
    aff4:	01000044 	movi	r4,1
    aff8:	2140670e 	bge	r4,r5,b198 <__adddf3+0x56c>
    affc:	0101ffc4 	movi	r4,2047
    b000:	11007f26 	beq	r2,r4,b200 <__adddf3+0x5d4>
    b004:	898d883a 	add	r6,r17,r6
    b008:	4247883a 	add	r3,r8,r9
    b00c:	3451803a 	cmpltu	r8,r6,r17
    b010:	40d1883a 	add	r8,r8,r3
    b014:	402297fa 	slli	r17,r8,31
    b018:	300cd07a 	srli	r6,r6,1
    b01c:	4010d07a 	srli	r8,r8,1
    b020:	1021883a 	mov	r16,r2
    b024:	89a2b03a 	or	r17,r17,r6
    b028:	003f1f06 	br	aca8 <_gp+0xffff12c8>
    b02c:	0081ffc4 	movi	r2,2047
    b030:	80bf481e 	bne	r16,r2,ad54 <_gp+0xffff1374>
    b034:	003f1c06 	br	aca8 <_gp+0xffff12c8>
    b038:	843ff844 	addi	r16,r16,-31
    b03c:	01000804 	movi	r4,32
    b040:	1406d83a 	srl	r3,r2,r16
    b044:	41005026 	beq	r8,r4,b188 <__adddf3+0x55c>
    b048:	01001004 	movi	r4,64
    b04c:	2211c83a 	sub	r8,r4,r8
    b050:	1204983a 	sll	r2,r2,r8
    b054:	88a2b03a 	or	r17,r17,r2
    b058:	8822c03a 	cmpne	r17,r17,zero
    b05c:	1c62b03a 	or	r17,r3,r17
    b060:	0011883a 	mov	r8,zero
    b064:	0021883a 	mov	r16,zero
    b068:	003f7106 	br	ae30 <_gp+0xffff1450>
    b06c:	193ff804 	addi	r4,r3,-32
    b070:	00800804 	movi	r2,32
    b074:	4908d83a 	srl	r4,r9,r4
    b078:	18804526 	beq	r3,r2,b190 <__adddf3+0x564>
    b07c:	00801004 	movi	r2,64
    b080:	10c5c83a 	sub	r2,r2,r3
    b084:	4886983a 	sll	r3,r9,r2
    b088:	198cb03a 	or	r6,r3,r6
    b08c:	300cc03a 	cmpne	r6,r6,zero
    b090:	218cb03a 	or	r6,r4,r6
    b094:	0007883a 	mov	r3,zero
    b098:	003f3b06 	br	ad88 <_gp+0xffff13a8>
    b09c:	80002a26 	beq	r16,zero,b148 <__adddf3+0x51c>
    b0a0:	0101ffc4 	movi	r4,2047
    b0a4:	11006826 	beq	r2,r4,b248 <__adddf3+0x61c>
    b0a8:	00c7c83a 	sub	r3,zero,r3
    b0ac:	42002034 	orhi	r8,r8,128
    b0b0:	01000e04 	movi	r4,56
    b0b4:	20c07c16 	blt	r4,r3,b2a8 <__adddf3+0x67c>
    b0b8:	010007c4 	movi	r4,31
    b0bc:	20c0da16 	blt	r4,r3,b428 <__adddf3+0x7fc>
    b0c0:	01000804 	movi	r4,32
    b0c4:	20c9c83a 	sub	r4,r4,r3
    b0c8:	4114983a 	sll	r10,r8,r4
    b0cc:	88cad83a 	srl	r5,r17,r3
    b0d0:	8908983a 	sll	r4,r17,r4
    b0d4:	40c6d83a 	srl	r3,r8,r3
    b0d8:	5162b03a 	or	r17,r10,r5
    b0dc:	2008c03a 	cmpne	r4,r4,zero
    b0e0:	8922b03a 	or	r17,r17,r4
    b0e4:	3463c83a 	sub	r17,r6,r17
    b0e8:	48c7c83a 	sub	r3,r9,r3
    b0ec:	344d803a 	cmpltu	r6,r6,r17
    b0f0:	1991c83a 	sub	r8,r3,r6
    b0f4:	1021883a 	mov	r16,r2
    b0f8:	3825883a 	mov	r18,r7
    b0fc:	003f2706 	br	ad9c <_gp+0xffff13bc>
    b100:	24d0b03a 	or	r8,r4,r19
    b104:	40001b1e 	bne	r8,zero,b174 <__adddf3+0x548>
    b108:	0005883a 	mov	r2,zero
    b10c:	0007883a 	mov	r3,zero
    b110:	0021883a 	mov	r16,zero
    b114:	003f4d06 	br	ae4c <_gp+0xffff146c>
    b118:	008007c4 	movi	r2,31
    b11c:	11003c16 	blt	r2,r4,b210 <__adddf3+0x5e4>
    b120:	00800804 	movi	r2,32
    b124:	1105c83a 	sub	r2,r2,r4
    b128:	488e983a 	sll	r7,r9,r2
    b12c:	310ad83a 	srl	r5,r6,r4
    b130:	3084983a 	sll	r2,r6,r2
    b134:	4912d83a 	srl	r9,r9,r4
    b138:	394ab03a 	or	r5,r7,r5
    b13c:	1004c03a 	cmpne	r2,r2,zero
    b140:	288ab03a 	or	r5,r5,r2
    b144:	003f5306 	br	ae94 <_gp+0xffff14b4>
    b148:	4448b03a 	or	r4,r8,r17
    b14c:	20003e26 	beq	r4,zero,b248 <__adddf3+0x61c>
    b150:	00c6303a 	nor	r3,zero,r3
    b154:	18003a1e 	bne	r3,zero,b240 <__adddf3+0x614>
    b158:	3463c83a 	sub	r17,r6,r17
    b15c:	4a07c83a 	sub	r3,r9,r8
    b160:	344d803a 	cmpltu	r6,r6,r17
    b164:	1991c83a 	sub	r8,r3,r6
    b168:	1021883a 	mov	r16,r2
    b16c:	3825883a 	mov	r18,r7
    b170:	003f0a06 	br	ad9c <_gp+0xffff13bc>
    b174:	2023883a 	mov	r17,r4
    b178:	003f0d06 	br	adb0 <_gp+0xffff13d0>
    b17c:	0081ffc4 	movi	r2,2047
    b180:	80bf3f1e 	bne	r16,r2,ae80 <_gp+0xffff14a0>
    b184:	003ec806 	br	aca8 <_gp+0xffff12c8>
    b188:	0005883a 	mov	r2,zero
    b18c:	003fb106 	br	b054 <_gp+0xffff1674>
    b190:	0007883a 	mov	r3,zero
    b194:	003fbc06 	br	b088 <_gp+0xffff16a8>
    b198:	4444b03a 	or	r2,r8,r17
    b19c:	8000871e 	bne	r16,zero,b3bc <__adddf3+0x790>
    b1a0:	1000ba26 	beq	r2,zero,b48c <__adddf3+0x860>
    b1a4:	4984b03a 	or	r2,r9,r6
    b1a8:	103ebf26 	beq	r2,zero,aca8 <_gp+0xffff12c8>
    b1ac:	8985883a 	add	r2,r17,r6
    b1b0:	4247883a 	add	r3,r8,r9
    b1b4:	1451803a 	cmpltu	r8,r2,r17
    b1b8:	40d1883a 	add	r8,r8,r3
    b1bc:	40c0202c 	andhi	r3,r8,128
    b1c0:	1023883a 	mov	r17,r2
    b1c4:	183f1a26 	beq	r3,zero,ae30 <_gp+0xffff1450>
    b1c8:	00bfe034 	movhi	r2,65408
    b1cc:	10bfffc4 	addi	r2,r2,-1
    b1d0:	2021883a 	mov	r16,r4
    b1d4:	4090703a 	and	r8,r8,r2
    b1d8:	003eb306 	br	aca8 <_gp+0xffff12c8>
    b1dc:	4444b03a 	or	r2,r8,r17
    b1e0:	8000291e 	bne	r16,zero,b288 <__adddf3+0x65c>
    b1e4:	10004b1e 	bne	r2,zero,b314 <__adddf3+0x6e8>
    b1e8:	4990b03a 	or	r8,r9,r6
    b1ec:	40008b26 	beq	r8,zero,b41c <__adddf3+0x7f0>
    b1f0:	4811883a 	mov	r8,r9
    b1f4:	3023883a 	mov	r17,r6
    b1f8:	3825883a 	mov	r18,r7
    b1fc:	003eaa06 	br	aca8 <_gp+0xffff12c8>
    b200:	1021883a 	mov	r16,r2
    b204:	0011883a 	mov	r8,zero
    b208:	0005883a 	mov	r2,zero
    b20c:	003f0f06 	br	ae4c <_gp+0xffff146c>
    b210:	217ff804 	addi	r5,r4,-32
    b214:	00800804 	movi	r2,32
    b218:	494ad83a 	srl	r5,r9,r5
    b21c:	20807d26 	beq	r4,r2,b414 <__adddf3+0x7e8>
    b220:	00801004 	movi	r2,64
    b224:	1109c83a 	sub	r4,r2,r4
    b228:	4912983a 	sll	r9,r9,r4
    b22c:	498cb03a 	or	r6,r9,r6
    b230:	300cc03a 	cmpne	r6,r6,zero
    b234:	298ab03a 	or	r5,r5,r6
    b238:	0013883a 	mov	r9,zero
    b23c:	003f1506 	br	ae94 <_gp+0xffff14b4>
    b240:	0101ffc4 	movi	r4,2047
    b244:	113f9a1e 	bne	r2,r4,b0b0 <_gp+0xffff16d0>
    b248:	4811883a 	mov	r8,r9
    b24c:	3023883a 	mov	r17,r6
    b250:	1021883a 	mov	r16,r2
    b254:	3825883a 	mov	r18,r7
    b258:	003e9306 	br	aca8 <_gp+0xffff12c8>
    b25c:	8000161e 	bne	r16,zero,b2b8 <__adddf3+0x68c>
    b260:	444ab03a 	or	r5,r8,r17
    b264:	28005126 	beq	r5,zero,b3ac <__adddf3+0x780>
    b268:	0108303a 	nor	r4,zero,r4
    b26c:	20004d1e 	bne	r4,zero,b3a4 <__adddf3+0x778>
    b270:	89a3883a 	add	r17,r17,r6
    b274:	4253883a 	add	r9,r8,r9
    b278:	898d803a 	cmpltu	r6,r17,r6
    b27c:	3251883a 	add	r8,r6,r9
    b280:	1021883a 	mov	r16,r2
    b284:	003f0806 	br	aea8 <_gp+0xffff14c8>
    b288:	1000301e 	bne	r2,zero,b34c <__adddf3+0x720>
    b28c:	4984b03a 	or	r2,r9,r6
    b290:	10007126 	beq	r2,zero,b458 <__adddf3+0x82c>
    b294:	4811883a 	mov	r8,r9
    b298:	3023883a 	mov	r17,r6
    b29c:	3825883a 	mov	r18,r7
    b2a0:	0401ffc4 	movi	r16,2047
    b2a4:	003e8006 	br	aca8 <_gp+0xffff12c8>
    b2a8:	4462b03a 	or	r17,r8,r17
    b2ac:	8822c03a 	cmpne	r17,r17,zero
    b2b0:	0007883a 	mov	r3,zero
    b2b4:	003f8b06 	br	b0e4 <_gp+0xffff1704>
    b2b8:	0141ffc4 	movi	r5,2047
    b2bc:	11403b26 	beq	r2,r5,b3ac <__adddf3+0x780>
    b2c0:	0109c83a 	sub	r4,zero,r4
    b2c4:	42002034 	orhi	r8,r8,128
    b2c8:	01400e04 	movi	r5,56
    b2cc:	29006716 	blt	r5,r4,b46c <__adddf3+0x840>
    b2d0:	014007c4 	movi	r5,31
    b2d4:	29007016 	blt	r5,r4,b498 <__adddf3+0x86c>
    b2d8:	01400804 	movi	r5,32
    b2dc:	290bc83a 	sub	r5,r5,r4
    b2e0:	4154983a 	sll	r10,r8,r5
    b2e4:	890ed83a 	srl	r7,r17,r4
    b2e8:	894a983a 	sll	r5,r17,r5
    b2ec:	4108d83a 	srl	r4,r8,r4
    b2f0:	51e2b03a 	or	r17,r10,r7
    b2f4:	280ac03a 	cmpne	r5,r5,zero
    b2f8:	8962b03a 	or	r17,r17,r5
    b2fc:	89a3883a 	add	r17,r17,r6
    b300:	2253883a 	add	r9,r4,r9
    b304:	898d803a 	cmpltu	r6,r17,r6
    b308:	3251883a 	add	r8,r6,r9
    b30c:	1021883a 	mov	r16,r2
    b310:	003ee506 	br	aea8 <_gp+0xffff14c8>
    b314:	4984b03a 	or	r2,r9,r6
    b318:	103e6326 	beq	r2,zero,aca8 <_gp+0xffff12c8>
    b31c:	8987c83a 	sub	r3,r17,r6
    b320:	88c9803a 	cmpltu	r4,r17,r3
    b324:	4245c83a 	sub	r2,r8,r9
    b328:	1105c83a 	sub	r2,r2,r4
    b32c:	1100202c 	andhi	r4,r2,128
    b330:	203ebb26 	beq	r4,zero,ae20 <_gp+0xffff1440>
    b334:	3463c83a 	sub	r17,r6,r17
    b338:	4a07c83a 	sub	r3,r9,r8
    b33c:	344d803a 	cmpltu	r6,r6,r17
    b340:	1991c83a 	sub	r8,r3,r6
    b344:	3825883a 	mov	r18,r7
    b348:	003e5706 	br	aca8 <_gp+0xffff12c8>
    b34c:	4984b03a 	or	r2,r9,r6
    b350:	10002e26 	beq	r2,zero,b40c <__adddf3+0x7e0>
    b354:	4004d0fa 	srli	r2,r8,3
    b358:	8822d0fa 	srli	r17,r17,3
    b35c:	4010977a 	slli	r8,r8,29
    b360:	10c0022c 	andhi	r3,r2,8
    b364:	4462b03a 	or	r17,r8,r17
    b368:	18000826 	beq	r3,zero,b38c <__adddf3+0x760>
    b36c:	4808d0fa 	srli	r4,r9,3
    b370:	20c0022c 	andhi	r3,r4,8
    b374:	1800051e 	bne	r3,zero,b38c <__adddf3+0x760>
    b378:	300cd0fa 	srli	r6,r6,3
    b37c:	4806977a 	slli	r3,r9,29
    b380:	2005883a 	mov	r2,r4
    b384:	3825883a 	mov	r18,r7
    b388:	19a2b03a 	or	r17,r3,r6
    b38c:	8810d77a 	srli	r8,r17,29
    b390:	100490fa 	slli	r2,r2,3
    b394:	882290fa 	slli	r17,r17,3
    b398:	0401ffc4 	movi	r16,2047
    b39c:	4090b03a 	or	r8,r8,r2
    b3a0:	003e4106 	br	aca8 <_gp+0xffff12c8>
    b3a4:	0141ffc4 	movi	r5,2047
    b3a8:	117fc71e 	bne	r2,r5,b2c8 <_gp+0xffff18e8>
    b3ac:	4811883a 	mov	r8,r9
    b3b0:	3023883a 	mov	r17,r6
    b3b4:	1021883a 	mov	r16,r2
    b3b8:	003e3b06 	br	aca8 <_gp+0xffff12c8>
    b3bc:	10002f26 	beq	r2,zero,b47c <__adddf3+0x850>
    b3c0:	4984b03a 	or	r2,r9,r6
    b3c4:	10001126 	beq	r2,zero,b40c <__adddf3+0x7e0>
    b3c8:	4004d0fa 	srli	r2,r8,3
    b3cc:	8822d0fa 	srli	r17,r17,3
    b3d0:	4010977a 	slli	r8,r8,29
    b3d4:	10c0022c 	andhi	r3,r2,8
    b3d8:	4462b03a 	or	r17,r8,r17
    b3dc:	183feb26 	beq	r3,zero,b38c <_gp+0xffff19ac>
    b3e0:	4808d0fa 	srli	r4,r9,3
    b3e4:	20c0022c 	andhi	r3,r4,8
    b3e8:	183fe81e 	bne	r3,zero,b38c <_gp+0xffff19ac>
    b3ec:	300cd0fa 	srli	r6,r6,3
    b3f0:	4806977a 	slli	r3,r9,29
    b3f4:	2005883a 	mov	r2,r4
    b3f8:	19a2b03a 	or	r17,r3,r6
    b3fc:	003fe306 	br	b38c <_gp+0xffff19ac>
    b400:	0011883a 	mov	r8,zero
    b404:	0005883a 	mov	r2,zero
    b408:	003e3f06 	br	ad08 <_gp+0xffff1328>
    b40c:	0401ffc4 	movi	r16,2047
    b410:	003e2506 	br	aca8 <_gp+0xffff12c8>
    b414:	0013883a 	mov	r9,zero
    b418:	003f8406 	br	b22c <_gp+0xffff184c>
    b41c:	0005883a 	mov	r2,zero
    b420:	0007883a 	mov	r3,zero
    b424:	003e8906 	br	ae4c <_gp+0xffff146c>
    b428:	197ff804 	addi	r5,r3,-32
    b42c:	01000804 	movi	r4,32
    b430:	414ad83a 	srl	r5,r8,r5
    b434:	19002426 	beq	r3,r4,b4c8 <__adddf3+0x89c>
    b438:	01001004 	movi	r4,64
    b43c:	20c7c83a 	sub	r3,r4,r3
    b440:	40c6983a 	sll	r3,r8,r3
    b444:	1c46b03a 	or	r3,r3,r17
    b448:	1806c03a 	cmpne	r3,r3,zero
    b44c:	28e2b03a 	or	r17,r5,r3
    b450:	0007883a 	mov	r3,zero
    b454:	003f2306 	br	b0e4 <_gp+0xffff1704>
    b458:	0007883a 	mov	r3,zero
    b45c:	5811883a 	mov	r8,r11
    b460:	00bfffc4 	movi	r2,-1
    b464:	0401ffc4 	movi	r16,2047
    b468:	003e7806 	br	ae4c <_gp+0xffff146c>
    b46c:	4462b03a 	or	r17,r8,r17
    b470:	8822c03a 	cmpne	r17,r17,zero
    b474:	0009883a 	mov	r4,zero
    b478:	003fa006 	br	b2fc <_gp+0xffff191c>
    b47c:	4811883a 	mov	r8,r9
    b480:	3023883a 	mov	r17,r6
    b484:	0401ffc4 	movi	r16,2047
    b488:	003e0706 	br	aca8 <_gp+0xffff12c8>
    b48c:	4811883a 	mov	r8,r9
    b490:	3023883a 	mov	r17,r6
    b494:	003e0406 	br	aca8 <_gp+0xffff12c8>
    b498:	21fff804 	addi	r7,r4,-32
    b49c:	01400804 	movi	r5,32
    b4a0:	41ced83a 	srl	r7,r8,r7
    b4a4:	21400a26 	beq	r4,r5,b4d0 <__adddf3+0x8a4>
    b4a8:	01401004 	movi	r5,64
    b4ac:	2909c83a 	sub	r4,r5,r4
    b4b0:	4108983a 	sll	r4,r8,r4
    b4b4:	2448b03a 	or	r4,r4,r17
    b4b8:	2008c03a 	cmpne	r4,r4,zero
    b4bc:	3922b03a 	or	r17,r7,r4
    b4c0:	0009883a 	mov	r4,zero
    b4c4:	003f8d06 	br	b2fc <_gp+0xffff191c>
    b4c8:	0007883a 	mov	r3,zero
    b4cc:	003fdd06 	br	b444 <_gp+0xffff1a64>
    b4d0:	0009883a 	mov	r4,zero
    b4d4:	003ff706 	br	b4b4 <_gp+0xffff1ad4>

0000b4d8 <__divdf3>:
    b4d8:	defff204 	addi	sp,sp,-56
    b4dc:	dd400915 	stw	r21,36(sp)
    b4e0:	282ad53a 	srli	r21,r5,20
    b4e4:	dd000815 	stw	r20,32(sp)
    b4e8:	2828d7fa 	srli	r20,r5,31
    b4ec:	dc000415 	stw	r16,16(sp)
    b4f0:	04000434 	movhi	r16,16
    b4f4:	df000c15 	stw	fp,48(sp)
    b4f8:	843fffc4 	addi	r16,r16,-1
    b4fc:	dfc00d15 	stw	ra,52(sp)
    b500:	ddc00b15 	stw	r23,44(sp)
    b504:	dd800a15 	stw	r22,40(sp)
    b508:	dcc00715 	stw	r19,28(sp)
    b50c:	dc800615 	stw	r18,24(sp)
    b510:	dc400515 	stw	r17,20(sp)
    b514:	ad41ffcc 	andi	r21,r21,2047
    b518:	2c20703a 	and	r16,r5,r16
    b51c:	a7003fcc 	andi	fp,r20,255
    b520:	a8006126 	beq	r21,zero,b6a8 <__divdf3+0x1d0>
    b524:	0081ffc4 	movi	r2,2047
    b528:	2025883a 	mov	r18,r4
    b52c:	a8803726 	beq	r21,r2,b60c <__divdf3+0x134>
    b530:	80c00434 	orhi	r3,r16,16
    b534:	180690fa 	slli	r3,r3,3
    b538:	2020d77a 	srli	r16,r4,29
    b53c:	202490fa 	slli	r18,r4,3
    b540:	ad7f0044 	addi	r21,r21,-1023
    b544:	80e0b03a 	or	r16,r16,r3
    b548:	0027883a 	mov	r19,zero
    b54c:	0013883a 	mov	r9,zero
    b550:	3808d53a 	srli	r4,r7,20
    b554:	382cd7fa 	srli	r22,r7,31
    b558:	04400434 	movhi	r17,16
    b55c:	8c7fffc4 	addi	r17,r17,-1
    b560:	2101ffcc 	andi	r4,r4,2047
    b564:	3011883a 	mov	r8,r6
    b568:	3c62703a 	and	r17,r7,r17
    b56c:	b5c03fcc 	andi	r23,r22,255
    b570:	20006c26 	beq	r4,zero,b724 <__divdf3+0x24c>
    b574:	0081ffc4 	movi	r2,2047
    b578:	20806426 	beq	r4,r2,b70c <__divdf3+0x234>
    b57c:	88c00434 	orhi	r3,r17,16
    b580:	180690fa 	slli	r3,r3,3
    b584:	3022d77a 	srli	r17,r6,29
    b588:	301090fa 	slli	r8,r6,3
    b58c:	213f0044 	addi	r4,r4,-1023
    b590:	88e2b03a 	or	r17,r17,r3
    b594:	000d883a 	mov	r6,zero
    b598:	a584f03a 	xor	r2,r20,r22
    b59c:	34cab03a 	or	r5,r6,r19
    b5a0:	1007883a 	mov	r3,r2
    b5a4:	14c03fcc 	andi	r19,r2,255
    b5a8:	008003c4 	movi	r2,15
    b5ac:	a92bc83a 	sub	r21,r21,r4
    b5b0:	11409036 	bltu	r2,r5,b7f4 <__divdf3+0x31c>
    b5b4:	280a90ba 	slli	r5,r5,2
    b5b8:	00800074 	movhi	r2,1
    b5bc:	10ad7304 	addi	r2,r2,-18996
    b5c0:	288b883a 	add	r5,r5,r2
    b5c4:	28800017 	ldw	r2,0(r5)
    b5c8:	1000683a 	jmp	r2
    b5cc:	0000b7f4 	movhi	zero,735
    b5d0:	0000b644 	movi	zero,729
    b5d4:	0000b7e4 	muli	zero,zero,735
    b5d8:	0000b638 	rdprs	zero,zero,728
    b5dc:	0000b7e4 	muli	zero,zero,735
    b5e0:	0000b7b8 	rdprs	zero,zero,734
    b5e4:	0000b7e4 	muli	zero,zero,735
    b5e8:	0000b638 	rdprs	zero,zero,728
    b5ec:	0000b644 	movi	zero,729
    b5f0:	0000b644 	movi	zero,729
    b5f4:	0000b7b8 	rdprs	zero,zero,734
    b5f8:	0000b638 	rdprs	zero,zero,728
    b5fc:	0000b628 	cmpgeui	zero,zero,728
    b600:	0000b628 	cmpgeui	zero,zero,728
    b604:	0000b628 	cmpgeui	zero,zero,728
    b608:	0000bad8 	cmpnei	zero,zero,747
    b60c:	2404b03a 	or	r2,r4,r16
    b610:	1000661e 	bne	r2,zero,b7ac <__divdf3+0x2d4>
    b614:	04c00204 	movi	r19,8
    b618:	0021883a 	mov	r16,zero
    b61c:	0025883a 	mov	r18,zero
    b620:	02400084 	movi	r9,2
    b624:	003fca06 	br	b550 <_gp+0xffff1b70>
    b628:	8023883a 	mov	r17,r16
    b62c:	9011883a 	mov	r8,r18
    b630:	e02f883a 	mov	r23,fp
    b634:	480d883a 	mov	r6,r9
    b638:	00800084 	movi	r2,2
    b63c:	3081311e 	bne	r6,r2,bb04 <__divdf3+0x62c>
    b640:	b827883a 	mov	r19,r23
    b644:	98c0004c 	andi	r3,r19,1
    b648:	0081ffc4 	movi	r2,2047
    b64c:	000b883a 	mov	r5,zero
    b650:	0025883a 	mov	r18,zero
    b654:	1004953a 	slli	r2,r2,20
    b658:	18c03fcc 	andi	r3,r3,255
    b65c:	04400434 	movhi	r17,16
    b660:	8c7fffc4 	addi	r17,r17,-1
    b664:	180697fa 	slli	r3,r3,31
    b668:	2c4a703a 	and	r5,r5,r17
    b66c:	288ab03a 	or	r5,r5,r2
    b670:	28c6b03a 	or	r3,r5,r3
    b674:	9005883a 	mov	r2,r18
    b678:	dfc00d17 	ldw	ra,52(sp)
    b67c:	df000c17 	ldw	fp,48(sp)
    b680:	ddc00b17 	ldw	r23,44(sp)
    b684:	dd800a17 	ldw	r22,40(sp)
    b688:	dd400917 	ldw	r21,36(sp)
    b68c:	dd000817 	ldw	r20,32(sp)
    b690:	dcc00717 	ldw	r19,28(sp)
    b694:	dc800617 	ldw	r18,24(sp)
    b698:	dc400517 	ldw	r17,20(sp)
    b69c:	dc000417 	ldw	r16,16(sp)
    b6a0:	dec00e04 	addi	sp,sp,56
    b6a4:	f800283a 	ret
    b6a8:	2404b03a 	or	r2,r4,r16
    b6ac:	2027883a 	mov	r19,r4
    b6b0:	10003926 	beq	r2,zero,b798 <__divdf3+0x2c0>
    b6b4:	80012e26 	beq	r16,zero,bb70 <__divdf3+0x698>
    b6b8:	8009883a 	mov	r4,r16
    b6bc:	d9800315 	stw	r6,12(sp)
    b6c0:	d9c00215 	stw	r7,8(sp)
    b6c4:	000d2300 	call	d230 <__clzsi2>
    b6c8:	d9800317 	ldw	r6,12(sp)
    b6cc:	d9c00217 	ldw	r7,8(sp)
    b6d0:	10fffd44 	addi	r3,r2,-11
    b6d4:	01000704 	movi	r4,28
    b6d8:	20c12116 	blt	r4,r3,bb60 <__divdf3+0x688>
    b6dc:	01000744 	movi	r4,29
    b6e0:	147ffe04 	addi	r17,r2,-8
    b6e4:	20c9c83a 	sub	r4,r4,r3
    b6e8:	8460983a 	sll	r16,r16,r17
    b6ec:	9908d83a 	srl	r4,r19,r4
    b6f0:	9c64983a 	sll	r18,r19,r17
    b6f4:	2420b03a 	or	r16,r4,r16
    b6f8:	057f0084 	movi	r21,-1022
    b6fc:	a8ebc83a 	sub	r21,r21,r3
    b700:	0027883a 	mov	r19,zero
    b704:	0013883a 	mov	r9,zero
    b708:	003f9106 	br	b550 <_gp+0xffff1b70>
    b70c:	3444b03a 	or	r2,r6,r17
    b710:	10001f1e 	bne	r2,zero,b790 <__divdf3+0x2b8>
    b714:	0023883a 	mov	r17,zero
    b718:	0011883a 	mov	r8,zero
    b71c:	01800084 	movi	r6,2
    b720:	003f9d06 	br	b598 <_gp+0xffff1bb8>
    b724:	3444b03a 	or	r2,r6,r17
    b728:	10001526 	beq	r2,zero,b780 <__divdf3+0x2a8>
    b72c:	88011b26 	beq	r17,zero,bb9c <__divdf3+0x6c4>
    b730:	8809883a 	mov	r4,r17
    b734:	d9800315 	stw	r6,12(sp)
    b738:	da400115 	stw	r9,4(sp)
    b73c:	000d2300 	call	d230 <__clzsi2>
    b740:	d9800317 	ldw	r6,12(sp)
    b744:	da400117 	ldw	r9,4(sp)
    b748:	10fffd44 	addi	r3,r2,-11
    b74c:	01000704 	movi	r4,28
    b750:	20c10e16 	blt	r4,r3,bb8c <__divdf3+0x6b4>
    b754:	01000744 	movi	r4,29
    b758:	123ffe04 	addi	r8,r2,-8
    b75c:	20c9c83a 	sub	r4,r4,r3
    b760:	8a22983a 	sll	r17,r17,r8
    b764:	3108d83a 	srl	r4,r6,r4
    b768:	3210983a 	sll	r8,r6,r8
    b76c:	2462b03a 	or	r17,r4,r17
    b770:	013f0084 	movi	r4,-1022
    b774:	20c9c83a 	sub	r4,r4,r3
    b778:	000d883a 	mov	r6,zero
    b77c:	003f8606 	br	b598 <_gp+0xffff1bb8>
    b780:	0023883a 	mov	r17,zero
    b784:	0011883a 	mov	r8,zero
    b788:	01800044 	movi	r6,1
    b78c:	003f8206 	br	b598 <_gp+0xffff1bb8>
    b790:	018000c4 	movi	r6,3
    b794:	003f8006 	br	b598 <_gp+0xffff1bb8>
    b798:	04c00104 	movi	r19,4
    b79c:	0021883a 	mov	r16,zero
    b7a0:	0025883a 	mov	r18,zero
    b7a4:	02400044 	movi	r9,1
    b7a8:	003f6906 	br	b550 <_gp+0xffff1b70>
    b7ac:	04c00304 	movi	r19,12
    b7b0:	024000c4 	movi	r9,3
    b7b4:	003f6606 	br	b550 <_gp+0xffff1b70>
    b7b8:	01400434 	movhi	r5,16
    b7bc:	0007883a 	mov	r3,zero
    b7c0:	297fffc4 	addi	r5,r5,-1
    b7c4:	04bfffc4 	movi	r18,-1
    b7c8:	0081ffc4 	movi	r2,2047
    b7cc:	003fa106 	br	b654 <_gp+0xffff1c74>
    b7d0:	00c00044 	movi	r3,1
    b7d4:	1887c83a 	sub	r3,r3,r2
    b7d8:	01000e04 	movi	r4,56
    b7dc:	20c1210e 	bge	r4,r3,bc64 <__divdf3+0x78c>
    b7e0:	98c0004c 	andi	r3,r19,1
    b7e4:	0005883a 	mov	r2,zero
    b7e8:	000b883a 	mov	r5,zero
    b7ec:	0025883a 	mov	r18,zero
    b7f0:	003f9806 	br	b654 <_gp+0xffff1c74>
    b7f4:	8c00fd36 	bltu	r17,r16,bbec <__divdf3+0x714>
    b7f8:	8440fb26 	beq	r16,r17,bbe8 <__divdf3+0x710>
    b7fc:	8007883a 	mov	r3,r16
    b800:	ad7fffc4 	addi	r21,r21,-1
    b804:	0021883a 	mov	r16,zero
    b808:	400ad63a 	srli	r5,r8,24
    b80c:	8822923a 	slli	r17,r17,8
    b810:	1809883a 	mov	r4,r3
    b814:	402c923a 	slli	r22,r8,8
    b818:	8978b03a 	or	fp,r17,r5
    b81c:	e028d43a 	srli	r20,fp,16
    b820:	d8c00015 	stw	r3,0(sp)
    b824:	e5ffffcc 	andi	r23,fp,65535
    b828:	a00b883a 	mov	r5,r20
    b82c:	00008e40 	call	8e4 <__udivsi3>
    b830:	d8c00017 	ldw	r3,0(sp)
    b834:	a00b883a 	mov	r5,r20
    b838:	d8800315 	stw	r2,12(sp)
    b83c:	1809883a 	mov	r4,r3
    b840:	00009480 	call	948 <__umodsi3>
    b844:	d9800317 	ldw	r6,12(sp)
    b848:	1006943a 	slli	r3,r2,16
    b84c:	9004d43a 	srli	r2,r18,16
    b850:	b9a3383a 	mul	r17,r23,r6
    b854:	10c4b03a 	or	r2,r2,r3
    b858:	1440062e 	bgeu	r2,r17,b874 <__divdf3+0x39c>
    b85c:	1705883a 	add	r2,r2,fp
    b860:	30ffffc4 	addi	r3,r6,-1
    b864:	1700ee36 	bltu	r2,fp,bc20 <__divdf3+0x748>
    b868:	1440ed2e 	bgeu	r2,r17,bc20 <__divdf3+0x748>
    b86c:	31bfff84 	addi	r6,r6,-2
    b870:	1705883a 	add	r2,r2,fp
    b874:	1463c83a 	sub	r17,r2,r17
    b878:	a00b883a 	mov	r5,r20
    b87c:	8809883a 	mov	r4,r17
    b880:	d9800315 	stw	r6,12(sp)
    b884:	00008e40 	call	8e4 <__udivsi3>
    b888:	a00b883a 	mov	r5,r20
    b88c:	8809883a 	mov	r4,r17
    b890:	d8800215 	stw	r2,8(sp)
    b894:	00009480 	call	948 <__umodsi3>
    b898:	d9c00217 	ldw	r7,8(sp)
    b89c:	1004943a 	slli	r2,r2,16
    b8a0:	94bfffcc 	andi	r18,r18,65535
    b8a4:	b9d1383a 	mul	r8,r23,r7
    b8a8:	90a4b03a 	or	r18,r18,r2
    b8ac:	d9800317 	ldw	r6,12(sp)
    b8b0:	9200062e 	bgeu	r18,r8,b8cc <__divdf3+0x3f4>
    b8b4:	9725883a 	add	r18,r18,fp
    b8b8:	38bfffc4 	addi	r2,r7,-1
    b8bc:	9700d636 	bltu	r18,fp,bc18 <__divdf3+0x740>
    b8c0:	9200d52e 	bgeu	r18,r8,bc18 <__divdf3+0x740>
    b8c4:	39ffff84 	addi	r7,r7,-2
    b8c8:	9725883a 	add	r18,r18,fp
    b8cc:	3004943a 	slli	r2,r6,16
    b8d0:	b012d43a 	srli	r9,r22,16
    b8d4:	b1bfffcc 	andi	r6,r22,65535
    b8d8:	11e2b03a 	or	r17,r2,r7
    b8dc:	8806d43a 	srli	r3,r17,16
    b8e0:	893fffcc 	andi	r4,r17,65535
    b8e4:	218b383a 	mul	r5,r4,r6
    b8e8:	30c5383a 	mul	r2,r6,r3
    b8ec:	2249383a 	mul	r4,r4,r9
    b8f0:	280ed43a 	srli	r7,r5,16
    b8f4:	9225c83a 	sub	r18,r18,r8
    b8f8:	2089883a 	add	r4,r4,r2
    b8fc:	3909883a 	add	r4,r7,r4
    b900:	1a47383a 	mul	r3,r3,r9
    b904:	2080022e 	bgeu	r4,r2,b910 <__divdf3+0x438>
    b908:	00800074 	movhi	r2,1
    b90c:	1887883a 	add	r3,r3,r2
    b910:	2004d43a 	srli	r2,r4,16
    b914:	2008943a 	slli	r4,r4,16
    b918:	297fffcc 	andi	r5,r5,65535
    b91c:	10c7883a 	add	r3,r2,r3
    b920:	2149883a 	add	r4,r4,r5
    b924:	90c0a536 	bltu	r18,r3,bbbc <__divdf3+0x6e4>
    b928:	90c0bf26 	beq	r18,r3,bc28 <__divdf3+0x750>
    b92c:	90c7c83a 	sub	r3,r18,r3
    b930:	810fc83a 	sub	r7,r16,r4
    b934:	81e5803a 	cmpltu	r18,r16,r7
    b938:	1ca5c83a 	sub	r18,r3,r18
    b93c:	e480c126 	beq	fp,r18,bc44 <__divdf3+0x76c>
    b940:	a00b883a 	mov	r5,r20
    b944:	9009883a 	mov	r4,r18
    b948:	d9800315 	stw	r6,12(sp)
    b94c:	d9c00215 	stw	r7,8(sp)
    b950:	da400115 	stw	r9,4(sp)
    b954:	00008e40 	call	8e4 <__udivsi3>
    b958:	a00b883a 	mov	r5,r20
    b95c:	9009883a 	mov	r4,r18
    b960:	d8800015 	stw	r2,0(sp)
    b964:	00009480 	call	948 <__umodsi3>
    b968:	d9c00217 	ldw	r7,8(sp)
    b96c:	da000017 	ldw	r8,0(sp)
    b970:	1006943a 	slli	r3,r2,16
    b974:	3804d43a 	srli	r2,r7,16
    b978:	ba21383a 	mul	r16,r23,r8
    b97c:	d9800317 	ldw	r6,12(sp)
    b980:	10c4b03a 	or	r2,r2,r3
    b984:	da400117 	ldw	r9,4(sp)
    b988:	1400062e 	bgeu	r2,r16,b9a4 <__divdf3+0x4cc>
    b98c:	1705883a 	add	r2,r2,fp
    b990:	40ffffc4 	addi	r3,r8,-1
    b994:	1700ad36 	bltu	r2,fp,bc4c <__divdf3+0x774>
    b998:	1400ac2e 	bgeu	r2,r16,bc4c <__divdf3+0x774>
    b99c:	423fff84 	addi	r8,r8,-2
    b9a0:	1705883a 	add	r2,r2,fp
    b9a4:	1421c83a 	sub	r16,r2,r16
    b9a8:	a00b883a 	mov	r5,r20
    b9ac:	8009883a 	mov	r4,r16
    b9b0:	d9800315 	stw	r6,12(sp)
    b9b4:	d9c00215 	stw	r7,8(sp)
    b9b8:	da000015 	stw	r8,0(sp)
    b9bc:	da400115 	stw	r9,4(sp)
    b9c0:	00008e40 	call	8e4 <__udivsi3>
    b9c4:	8009883a 	mov	r4,r16
    b9c8:	a00b883a 	mov	r5,r20
    b9cc:	1025883a 	mov	r18,r2
    b9d0:	00009480 	call	948 <__umodsi3>
    b9d4:	d9c00217 	ldw	r7,8(sp)
    b9d8:	1004943a 	slli	r2,r2,16
    b9dc:	bcaf383a 	mul	r23,r23,r18
    b9e0:	393fffcc 	andi	r4,r7,65535
    b9e4:	2088b03a 	or	r4,r4,r2
    b9e8:	d9800317 	ldw	r6,12(sp)
    b9ec:	da000017 	ldw	r8,0(sp)
    b9f0:	da400117 	ldw	r9,4(sp)
    b9f4:	25c0062e 	bgeu	r4,r23,ba10 <__divdf3+0x538>
    b9f8:	2709883a 	add	r4,r4,fp
    b9fc:	90bfffc4 	addi	r2,r18,-1
    ba00:	27009436 	bltu	r4,fp,bc54 <__divdf3+0x77c>
    ba04:	25c0932e 	bgeu	r4,r23,bc54 <__divdf3+0x77c>
    ba08:	94bfff84 	addi	r18,r18,-2
    ba0c:	2709883a 	add	r4,r4,fp
    ba10:	4004943a 	slli	r2,r8,16
    ba14:	25efc83a 	sub	r23,r4,r23
    ba18:	1490b03a 	or	r8,r2,r18
    ba1c:	4008d43a 	srli	r4,r8,16
    ba20:	40ffffcc 	andi	r3,r8,65535
    ba24:	30c5383a 	mul	r2,r6,r3
    ba28:	1a47383a 	mul	r3,r3,r9
    ba2c:	310d383a 	mul	r6,r6,r4
    ba30:	100ad43a 	srli	r5,r2,16
    ba34:	4913383a 	mul	r9,r9,r4
    ba38:	1987883a 	add	r3,r3,r6
    ba3c:	28c7883a 	add	r3,r5,r3
    ba40:	1980022e 	bgeu	r3,r6,ba4c <__divdf3+0x574>
    ba44:	01000074 	movhi	r4,1
    ba48:	4913883a 	add	r9,r9,r4
    ba4c:	1808d43a 	srli	r4,r3,16
    ba50:	1806943a 	slli	r3,r3,16
    ba54:	10bfffcc 	andi	r2,r2,65535
    ba58:	2253883a 	add	r9,r4,r9
    ba5c:	1887883a 	add	r3,r3,r2
    ba60:	ba403836 	bltu	r23,r9,bb44 <__divdf3+0x66c>
    ba64:	ba403626 	beq	r23,r9,bb40 <__divdf3+0x668>
    ba68:	42000054 	ori	r8,r8,1
    ba6c:	a880ffc4 	addi	r2,r21,1023
    ba70:	00bf570e 	bge	zero,r2,b7d0 <_gp+0xffff1df0>
    ba74:	40c001cc 	andi	r3,r8,7
    ba78:	18000726 	beq	r3,zero,ba98 <__divdf3+0x5c0>
    ba7c:	40c003cc 	andi	r3,r8,15
    ba80:	01000104 	movi	r4,4
    ba84:	19000426 	beq	r3,r4,ba98 <__divdf3+0x5c0>
    ba88:	4107883a 	add	r3,r8,r4
    ba8c:	1a11803a 	cmpltu	r8,r3,r8
    ba90:	8a23883a 	add	r17,r17,r8
    ba94:	1811883a 	mov	r8,r3
    ba98:	88c0402c 	andhi	r3,r17,256
    ba9c:	18000426 	beq	r3,zero,bab0 <__divdf3+0x5d8>
    baa0:	00ffc034 	movhi	r3,65280
    baa4:	18ffffc4 	addi	r3,r3,-1
    baa8:	a8810004 	addi	r2,r21,1024
    baac:	88e2703a 	and	r17,r17,r3
    bab0:	00c1ff84 	movi	r3,2046
    bab4:	18bee316 	blt	r3,r2,b644 <_gp+0xffff1c64>
    bab8:	8824977a 	slli	r18,r17,29
    babc:	4010d0fa 	srli	r8,r8,3
    bac0:	8822927a 	slli	r17,r17,9
    bac4:	1081ffcc 	andi	r2,r2,2047
    bac8:	9224b03a 	or	r18,r18,r8
    bacc:	880ad33a 	srli	r5,r17,12
    bad0:	98c0004c 	andi	r3,r19,1
    bad4:	003edf06 	br	b654 <_gp+0xffff1c74>
    bad8:	8080022c 	andhi	r2,r16,8
    badc:	10001226 	beq	r2,zero,bb28 <__divdf3+0x650>
    bae0:	8880022c 	andhi	r2,r17,8
    bae4:	1000101e 	bne	r2,zero,bb28 <__divdf3+0x650>
    bae8:	00800434 	movhi	r2,16
    baec:	89400234 	orhi	r5,r17,8
    baf0:	10bfffc4 	addi	r2,r2,-1
    baf4:	b007883a 	mov	r3,r22
    baf8:	288a703a 	and	r5,r5,r2
    bafc:	4025883a 	mov	r18,r8
    bb00:	003f3106 	br	b7c8 <_gp+0xffff1de8>
    bb04:	008000c4 	movi	r2,3
    bb08:	3080a626 	beq	r6,r2,bda4 <__divdf3+0x8cc>
    bb0c:	00800044 	movi	r2,1
    bb10:	3080521e 	bne	r6,r2,bc5c <__divdf3+0x784>
    bb14:	b807883a 	mov	r3,r23
    bb18:	0005883a 	mov	r2,zero
    bb1c:	000b883a 	mov	r5,zero
    bb20:	0025883a 	mov	r18,zero
    bb24:	003ecb06 	br	b654 <_gp+0xffff1c74>
    bb28:	00800434 	movhi	r2,16
    bb2c:	81400234 	orhi	r5,r16,8
    bb30:	10bfffc4 	addi	r2,r2,-1
    bb34:	a007883a 	mov	r3,r20
    bb38:	288a703a 	and	r5,r5,r2
    bb3c:	003f2206 	br	b7c8 <_gp+0xffff1de8>
    bb40:	183fca26 	beq	r3,zero,ba6c <_gp+0xffff208c>
    bb44:	e5ef883a 	add	r23,fp,r23
    bb48:	40bfffc4 	addi	r2,r8,-1
    bb4c:	bf00392e 	bgeu	r23,fp,bc34 <__divdf3+0x75c>
    bb50:	1011883a 	mov	r8,r2
    bb54:	ba7fc41e 	bne	r23,r9,ba68 <_gp+0xffff2088>
    bb58:	b0ffc31e 	bne	r22,r3,ba68 <_gp+0xffff2088>
    bb5c:	003fc306 	br	ba6c <_gp+0xffff208c>
    bb60:	10bff604 	addi	r2,r2,-40
    bb64:	98a0983a 	sll	r16,r19,r2
    bb68:	0025883a 	mov	r18,zero
    bb6c:	003ee206 	br	b6f8 <_gp+0xffff1d18>
    bb70:	d9800315 	stw	r6,12(sp)
    bb74:	d9c00215 	stw	r7,8(sp)
    bb78:	000d2300 	call	d230 <__clzsi2>
    bb7c:	10800804 	addi	r2,r2,32
    bb80:	d9c00217 	ldw	r7,8(sp)
    bb84:	d9800317 	ldw	r6,12(sp)
    bb88:	003ed106 	br	b6d0 <_gp+0xffff1cf0>
    bb8c:	10bff604 	addi	r2,r2,-40
    bb90:	30a2983a 	sll	r17,r6,r2
    bb94:	0011883a 	mov	r8,zero
    bb98:	003ef506 	br	b770 <_gp+0xffff1d90>
    bb9c:	3009883a 	mov	r4,r6
    bba0:	d9800315 	stw	r6,12(sp)
    bba4:	da400115 	stw	r9,4(sp)
    bba8:	000d2300 	call	d230 <__clzsi2>
    bbac:	10800804 	addi	r2,r2,32
    bbb0:	da400117 	ldw	r9,4(sp)
    bbb4:	d9800317 	ldw	r6,12(sp)
    bbb8:	003ee306 	br	b748 <_gp+0xffff1d68>
    bbbc:	85a1883a 	add	r16,r16,r22
    bbc0:	8585803a 	cmpltu	r2,r16,r22
    bbc4:	1705883a 	add	r2,r2,fp
    bbc8:	14a5883a 	add	r18,r2,r18
    bbcc:	88bfffc4 	addi	r2,r17,-1
    bbd0:	e4800c2e 	bgeu	fp,r18,bc04 <__divdf3+0x72c>
    bbd4:	90c03e36 	bltu	r18,r3,bcd0 <__divdf3+0x7f8>
    bbd8:	1c806926 	beq	r3,r18,bd80 <__divdf3+0x8a8>
    bbdc:	90c7c83a 	sub	r3,r18,r3
    bbe0:	1023883a 	mov	r17,r2
    bbe4:	003f5206 	br	b930 <_gp+0xffff1f50>
    bbe8:	923f0436 	bltu	r18,r8,b7fc <_gp+0xffff1e1c>
    bbec:	800897fa 	slli	r4,r16,31
    bbf0:	9004d07a 	srli	r2,r18,1
    bbf4:	8006d07a 	srli	r3,r16,1
    bbf8:	902097fa 	slli	r16,r18,31
    bbfc:	20a4b03a 	or	r18,r4,r2
    bc00:	003f0106 	br	b808 <_gp+0xffff1e28>
    bc04:	e4bff51e 	bne	fp,r18,bbdc <_gp+0xffff21fc>
    bc08:	85bff22e 	bgeu	r16,r22,bbd4 <_gp+0xffff21f4>
    bc0c:	e0c7c83a 	sub	r3,fp,r3
    bc10:	1023883a 	mov	r17,r2
    bc14:	003f4606 	br	b930 <_gp+0xffff1f50>
    bc18:	100f883a 	mov	r7,r2
    bc1c:	003f2b06 	br	b8cc <_gp+0xffff1eec>
    bc20:	180d883a 	mov	r6,r3
    bc24:	003f1306 	br	b874 <_gp+0xffff1e94>
    bc28:	813fe436 	bltu	r16,r4,bbbc <_gp+0xffff21dc>
    bc2c:	0007883a 	mov	r3,zero
    bc30:	003f3f06 	br	b930 <_gp+0xffff1f50>
    bc34:	ba402c36 	bltu	r23,r9,bce8 <__divdf3+0x810>
    bc38:	4dc05426 	beq	r9,r23,bd8c <__divdf3+0x8b4>
    bc3c:	1011883a 	mov	r8,r2
    bc40:	003f8906 	br	ba68 <_gp+0xffff2088>
    bc44:	023fffc4 	movi	r8,-1
    bc48:	003f8806 	br	ba6c <_gp+0xffff208c>
    bc4c:	1811883a 	mov	r8,r3
    bc50:	003f5406 	br	b9a4 <_gp+0xffff1fc4>
    bc54:	1025883a 	mov	r18,r2
    bc58:	003f6d06 	br	ba10 <_gp+0xffff2030>
    bc5c:	b827883a 	mov	r19,r23
    bc60:	003f8206 	br	ba6c <_gp+0xffff208c>
    bc64:	010007c4 	movi	r4,31
    bc68:	20c02616 	blt	r4,r3,bd04 <__divdf3+0x82c>
    bc6c:	00800804 	movi	r2,32
    bc70:	10c5c83a 	sub	r2,r2,r3
    bc74:	888a983a 	sll	r5,r17,r2
    bc78:	40c8d83a 	srl	r4,r8,r3
    bc7c:	4084983a 	sll	r2,r8,r2
    bc80:	88e2d83a 	srl	r17,r17,r3
    bc84:	2906b03a 	or	r3,r5,r4
    bc88:	1004c03a 	cmpne	r2,r2,zero
    bc8c:	1886b03a 	or	r3,r3,r2
    bc90:	188001cc 	andi	r2,r3,7
    bc94:	10000726 	beq	r2,zero,bcb4 <__divdf3+0x7dc>
    bc98:	188003cc 	andi	r2,r3,15
    bc9c:	01000104 	movi	r4,4
    bca0:	11000426 	beq	r2,r4,bcb4 <__divdf3+0x7dc>
    bca4:	1805883a 	mov	r2,r3
    bca8:	10c00104 	addi	r3,r2,4
    bcac:	1885803a 	cmpltu	r2,r3,r2
    bcb0:	88a3883a 	add	r17,r17,r2
    bcb4:	8880202c 	andhi	r2,r17,128
    bcb8:	10002726 	beq	r2,zero,bd58 <__divdf3+0x880>
    bcbc:	98c0004c 	andi	r3,r19,1
    bcc0:	00800044 	movi	r2,1
    bcc4:	000b883a 	mov	r5,zero
    bcc8:	0025883a 	mov	r18,zero
    bccc:	003e6106 	br	b654 <_gp+0xffff1c74>
    bcd0:	85a1883a 	add	r16,r16,r22
    bcd4:	8585803a 	cmpltu	r2,r16,r22
    bcd8:	1705883a 	add	r2,r2,fp
    bcdc:	14a5883a 	add	r18,r2,r18
    bce0:	8c7fff84 	addi	r17,r17,-2
    bce4:	003f1106 	br	b92c <_gp+0xffff1f4c>
    bce8:	b589883a 	add	r4,r22,r22
    bcec:	25ad803a 	cmpltu	r22,r4,r22
    bcf0:	b739883a 	add	fp,r22,fp
    bcf4:	40bfff84 	addi	r2,r8,-2
    bcf8:	bf2f883a 	add	r23,r23,fp
    bcfc:	202d883a 	mov	r22,r4
    bd00:	003f9306 	br	bb50 <_gp+0xffff2170>
    bd04:	013ff844 	movi	r4,-31
    bd08:	2085c83a 	sub	r2,r4,r2
    bd0c:	8888d83a 	srl	r4,r17,r2
    bd10:	00800804 	movi	r2,32
    bd14:	18802126 	beq	r3,r2,bd9c <__divdf3+0x8c4>
    bd18:	00801004 	movi	r2,64
    bd1c:	10c5c83a 	sub	r2,r2,r3
    bd20:	8884983a 	sll	r2,r17,r2
    bd24:	1204b03a 	or	r2,r2,r8
    bd28:	1004c03a 	cmpne	r2,r2,zero
    bd2c:	2084b03a 	or	r2,r4,r2
    bd30:	144001cc 	andi	r17,r2,7
    bd34:	88000d1e 	bne	r17,zero,bd6c <__divdf3+0x894>
    bd38:	000b883a 	mov	r5,zero
    bd3c:	1024d0fa 	srli	r18,r2,3
    bd40:	98c0004c 	andi	r3,r19,1
    bd44:	0005883a 	mov	r2,zero
    bd48:	9464b03a 	or	r18,r18,r17
    bd4c:	003e4106 	br	b654 <_gp+0xffff1c74>
    bd50:	1007883a 	mov	r3,r2
    bd54:	0023883a 	mov	r17,zero
    bd58:	880a927a 	slli	r5,r17,9
    bd5c:	1805883a 	mov	r2,r3
    bd60:	8822977a 	slli	r17,r17,29
    bd64:	280ad33a 	srli	r5,r5,12
    bd68:	003ff406 	br	bd3c <_gp+0xffff235c>
    bd6c:	10c003cc 	andi	r3,r2,15
    bd70:	01000104 	movi	r4,4
    bd74:	193ff626 	beq	r3,r4,bd50 <_gp+0xffff2370>
    bd78:	0023883a 	mov	r17,zero
    bd7c:	003fca06 	br	bca8 <_gp+0xffff22c8>
    bd80:	813fd336 	bltu	r16,r4,bcd0 <_gp+0xffff22f0>
    bd84:	1023883a 	mov	r17,r2
    bd88:	003fa806 	br	bc2c <_gp+0xffff224c>
    bd8c:	b0ffd636 	bltu	r22,r3,bce8 <_gp+0xffff2308>
    bd90:	1011883a 	mov	r8,r2
    bd94:	b0ff341e 	bne	r22,r3,ba68 <_gp+0xffff2088>
    bd98:	003f3406 	br	ba6c <_gp+0xffff208c>
    bd9c:	0005883a 	mov	r2,zero
    bda0:	003fe006 	br	bd24 <_gp+0xffff2344>
    bda4:	00800434 	movhi	r2,16
    bda8:	89400234 	orhi	r5,r17,8
    bdac:	10bfffc4 	addi	r2,r2,-1
    bdb0:	b807883a 	mov	r3,r23
    bdb4:	288a703a 	and	r5,r5,r2
    bdb8:	4025883a 	mov	r18,r8
    bdbc:	003e8206 	br	b7c8 <_gp+0xffff1de8>

0000bdc0 <__eqdf2>:
    bdc0:	2804d53a 	srli	r2,r5,20
    bdc4:	3806d53a 	srli	r3,r7,20
    bdc8:	02000434 	movhi	r8,16
    bdcc:	423fffc4 	addi	r8,r8,-1
    bdd0:	1081ffcc 	andi	r2,r2,2047
    bdd4:	0281ffc4 	movi	r10,2047
    bdd8:	2a12703a 	and	r9,r5,r8
    bddc:	18c1ffcc 	andi	r3,r3,2047
    bde0:	3a10703a 	and	r8,r7,r8
    bde4:	280ad7fa 	srli	r5,r5,31
    bde8:	380ed7fa 	srli	r7,r7,31
    bdec:	12801026 	beq	r2,r10,be30 <__eqdf2+0x70>
    bdf0:	0281ffc4 	movi	r10,2047
    bdf4:	1a800a26 	beq	r3,r10,be20 <__eqdf2+0x60>
    bdf8:	10c00226 	beq	r2,r3,be04 <__eqdf2+0x44>
    bdfc:	00800044 	movi	r2,1
    be00:	f800283a 	ret
    be04:	4a3ffd1e 	bne	r9,r8,bdfc <_gp+0xffff241c>
    be08:	21bffc1e 	bne	r4,r6,bdfc <_gp+0xffff241c>
    be0c:	29c00c26 	beq	r5,r7,be40 <__eqdf2+0x80>
    be10:	103ffa1e 	bne	r2,zero,bdfc <_gp+0xffff241c>
    be14:	2244b03a 	or	r2,r4,r9
    be18:	1004c03a 	cmpne	r2,r2,zero
    be1c:	f800283a 	ret
    be20:	3214b03a 	or	r10,r6,r8
    be24:	503ff426 	beq	r10,zero,bdf8 <_gp+0xffff2418>
    be28:	00800044 	movi	r2,1
    be2c:	f800283a 	ret
    be30:	2254b03a 	or	r10,r4,r9
    be34:	503fee26 	beq	r10,zero,bdf0 <_gp+0xffff2410>
    be38:	00800044 	movi	r2,1
    be3c:	f800283a 	ret
    be40:	0005883a 	mov	r2,zero
    be44:	f800283a 	ret

0000be48 <__gedf2>:
    be48:	2804d53a 	srli	r2,r5,20
    be4c:	3806d53a 	srli	r3,r7,20
    be50:	02000434 	movhi	r8,16
    be54:	423fffc4 	addi	r8,r8,-1
    be58:	1081ffcc 	andi	r2,r2,2047
    be5c:	0241ffc4 	movi	r9,2047
    be60:	2a14703a 	and	r10,r5,r8
    be64:	18c1ffcc 	andi	r3,r3,2047
    be68:	3a10703a 	and	r8,r7,r8
    be6c:	280ad7fa 	srli	r5,r5,31
    be70:	380ed7fa 	srli	r7,r7,31
    be74:	12401d26 	beq	r2,r9,beec <__gedf2+0xa4>
    be78:	0241ffc4 	movi	r9,2047
    be7c:	1a401226 	beq	r3,r9,bec8 <__gedf2+0x80>
    be80:	1000081e 	bne	r2,zero,bea4 <__gedf2+0x5c>
    be84:	2296b03a 	or	r11,r4,r10
    be88:	5813003a 	cmpeq	r9,r11,zero
    be8c:	1800091e 	bne	r3,zero,beb4 <__gedf2+0x6c>
    be90:	3218b03a 	or	r12,r6,r8
    be94:	6000071e 	bne	r12,zero,beb4 <__gedf2+0x6c>
    be98:	0005883a 	mov	r2,zero
    be9c:	5800101e 	bne	r11,zero,bee0 <__gedf2+0x98>
    bea0:	f800283a 	ret
    bea4:	18000c1e 	bne	r3,zero,bed8 <__gedf2+0x90>
    bea8:	3212b03a 	or	r9,r6,r8
    beac:	48000c26 	beq	r9,zero,bee0 <__gedf2+0x98>
    beb0:	0013883a 	mov	r9,zero
    beb4:	39c03fcc 	andi	r7,r7,255
    beb8:	48000826 	beq	r9,zero,bedc <__gedf2+0x94>
    bebc:	38000926 	beq	r7,zero,bee4 <__gedf2+0x9c>
    bec0:	00800044 	movi	r2,1
    bec4:	f800283a 	ret
    bec8:	3212b03a 	or	r9,r6,r8
    becc:	483fec26 	beq	r9,zero,be80 <_gp+0xffff24a0>
    bed0:	00bfff84 	movi	r2,-2
    bed4:	f800283a 	ret
    bed8:	39c03fcc 	andi	r7,r7,255
    bedc:	29c00626 	beq	r5,r7,bef8 <__gedf2+0xb0>
    bee0:	283ff726 	beq	r5,zero,bec0 <_gp+0xffff24e0>
    bee4:	00bfffc4 	movi	r2,-1
    bee8:	f800283a 	ret
    beec:	2292b03a 	or	r9,r4,r10
    bef0:	483fe126 	beq	r9,zero,be78 <_gp+0xffff2498>
    bef4:	003ff606 	br	bed0 <_gp+0xffff24f0>
    bef8:	18bff916 	blt	r3,r2,bee0 <_gp+0xffff2500>
    befc:	10c00316 	blt	r2,r3,bf0c <__gedf2+0xc4>
    bf00:	42bff736 	bltu	r8,r10,bee0 <_gp+0xffff2500>
    bf04:	52000326 	beq	r10,r8,bf14 <__gedf2+0xcc>
    bf08:	5200042e 	bgeu	r10,r8,bf1c <__gedf2+0xd4>
    bf0c:	283fec1e 	bne	r5,zero,bec0 <_gp+0xffff24e0>
    bf10:	003ff406 	br	bee4 <_gp+0xffff2504>
    bf14:	313ff236 	bltu	r6,r4,bee0 <_gp+0xffff2500>
    bf18:	21bffc36 	bltu	r4,r6,bf0c <_gp+0xffff252c>
    bf1c:	0005883a 	mov	r2,zero
    bf20:	f800283a 	ret

0000bf24 <__ledf2>:
    bf24:	2804d53a 	srli	r2,r5,20
    bf28:	3810d53a 	srli	r8,r7,20
    bf2c:	00c00434 	movhi	r3,16
    bf30:	18ffffc4 	addi	r3,r3,-1
    bf34:	1081ffcc 	andi	r2,r2,2047
    bf38:	0241ffc4 	movi	r9,2047
    bf3c:	28d4703a 	and	r10,r5,r3
    bf40:	4201ffcc 	andi	r8,r8,2047
    bf44:	38c6703a 	and	r3,r7,r3
    bf48:	280ad7fa 	srli	r5,r5,31
    bf4c:	380ed7fa 	srli	r7,r7,31
    bf50:	12401f26 	beq	r2,r9,bfd0 <__ledf2+0xac>
    bf54:	0241ffc4 	movi	r9,2047
    bf58:	42401426 	beq	r8,r9,bfac <__ledf2+0x88>
    bf5c:	1000091e 	bne	r2,zero,bf84 <__ledf2+0x60>
    bf60:	2296b03a 	or	r11,r4,r10
    bf64:	5813003a 	cmpeq	r9,r11,zero
    bf68:	29403fcc 	andi	r5,r5,255
    bf6c:	40000a1e 	bne	r8,zero,bf98 <__ledf2+0x74>
    bf70:	30d8b03a 	or	r12,r6,r3
    bf74:	6000081e 	bne	r12,zero,bf98 <__ledf2+0x74>
    bf78:	0005883a 	mov	r2,zero
    bf7c:	5800111e 	bne	r11,zero,bfc4 <__ledf2+0xa0>
    bf80:	f800283a 	ret
    bf84:	29403fcc 	andi	r5,r5,255
    bf88:	40000c1e 	bne	r8,zero,bfbc <__ledf2+0x98>
    bf8c:	30d2b03a 	or	r9,r6,r3
    bf90:	48000c26 	beq	r9,zero,bfc4 <__ledf2+0xa0>
    bf94:	0013883a 	mov	r9,zero
    bf98:	39c03fcc 	andi	r7,r7,255
    bf9c:	48000826 	beq	r9,zero,bfc0 <__ledf2+0x9c>
    bfa0:	38001126 	beq	r7,zero,bfe8 <__ledf2+0xc4>
    bfa4:	00800044 	movi	r2,1
    bfa8:	f800283a 	ret
    bfac:	30d2b03a 	or	r9,r6,r3
    bfb0:	483fea26 	beq	r9,zero,bf5c <_gp+0xffff257c>
    bfb4:	00800084 	movi	r2,2
    bfb8:	f800283a 	ret
    bfbc:	39c03fcc 	andi	r7,r7,255
    bfc0:	39400726 	beq	r7,r5,bfe0 <__ledf2+0xbc>
    bfc4:	2800081e 	bne	r5,zero,bfe8 <__ledf2+0xc4>
    bfc8:	00800044 	movi	r2,1
    bfcc:	f800283a 	ret
    bfd0:	2292b03a 	or	r9,r4,r10
    bfd4:	483fdf26 	beq	r9,zero,bf54 <_gp+0xffff2574>
    bfd8:	00800084 	movi	r2,2
    bfdc:	f800283a 	ret
    bfe0:	4080030e 	bge	r8,r2,bff0 <__ledf2+0xcc>
    bfe4:	383fef26 	beq	r7,zero,bfa4 <_gp+0xffff25c4>
    bfe8:	00bfffc4 	movi	r2,-1
    bfec:	f800283a 	ret
    bff0:	123feb16 	blt	r2,r8,bfa0 <_gp+0xffff25c0>
    bff4:	1abff336 	bltu	r3,r10,bfc4 <_gp+0xffff25e4>
    bff8:	50c00326 	beq	r10,r3,c008 <__ledf2+0xe4>
    bffc:	50c0042e 	bgeu	r10,r3,c010 <__ledf2+0xec>
    c000:	283fe81e 	bne	r5,zero,bfa4 <_gp+0xffff25c4>
    c004:	003ff806 	br	bfe8 <_gp+0xffff2608>
    c008:	313fee36 	bltu	r6,r4,bfc4 <_gp+0xffff25e4>
    c00c:	21bffc36 	bltu	r4,r6,c000 <_gp+0xffff2620>
    c010:	0005883a 	mov	r2,zero
    c014:	f800283a 	ret

0000c018 <__muldf3>:
    c018:	defff304 	addi	sp,sp,-52
    c01c:	dd400815 	stw	r21,32(sp)
    c020:	282ad53a 	srli	r21,r5,20
    c024:	dd800915 	stw	r22,36(sp)
    c028:	282cd7fa 	srli	r22,r5,31
    c02c:	dc000315 	stw	r16,12(sp)
    c030:	04000434 	movhi	r16,16
    c034:	dd000715 	stw	r20,28(sp)
    c038:	843fffc4 	addi	r16,r16,-1
    c03c:	dfc00c15 	stw	ra,48(sp)
    c040:	df000b15 	stw	fp,44(sp)
    c044:	ddc00a15 	stw	r23,40(sp)
    c048:	dcc00615 	stw	r19,24(sp)
    c04c:	dc800515 	stw	r18,20(sp)
    c050:	dc400415 	stw	r17,16(sp)
    c054:	ad41ffcc 	andi	r21,r21,2047
    c058:	2c20703a 	and	r16,r5,r16
    c05c:	b029883a 	mov	r20,r22
    c060:	b2403fcc 	andi	r9,r22,255
    c064:	a8006026 	beq	r21,zero,c1e8 <__muldf3+0x1d0>
    c068:	0081ffc4 	movi	r2,2047
    c06c:	2027883a 	mov	r19,r4
    c070:	a8803626 	beq	r21,r2,c14c <__muldf3+0x134>
    c074:	80c00434 	orhi	r3,r16,16
    c078:	180690fa 	slli	r3,r3,3
    c07c:	2020d77a 	srli	r16,r4,29
    c080:	202690fa 	slli	r19,r4,3
    c084:	ad7f0044 	addi	r21,r21,-1023
    c088:	80e0b03a 	or	r16,r16,r3
    c08c:	0025883a 	mov	r18,zero
    c090:	0039883a 	mov	fp,zero
    c094:	3808d53a 	srli	r4,r7,20
    c098:	382ed7fa 	srli	r23,r7,31
    c09c:	04400434 	movhi	r17,16
    c0a0:	8c7fffc4 	addi	r17,r17,-1
    c0a4:	2101ffcc 	andi	r4,r4,2047
    c0a8:	3011883a 	mov	r8,r6
    c0ac:	3c62703a 	and	r17,r7,r17
    c0b0:	ba803fcc 	andi	r10,r23,255
    c0b4:	20006d26 	beq	r4,zero,c26c <__muldf3+0x254>
    c0b8:	0081ffc4 	movi	r2,2047
    c0bc:	20806526 	beq	r4,r2,c254 <__muldf3+0x23c>
    c0c0:	88c00434 	orhi	r3,r17,16
    c0c4:	180690fa 	slli	r3,r3,3
    c0c8:	3022d77a 	srli	r17,r6,29
    c0cc:	301090fa 	slli	r8,r6,3
    c0d0:	213f0044 	addi	r4,r4,-1023
    c0d4:	88e2b03a 	or	r17,r17,r3
    c0d8:	000b883a 	mov	r5,zero
    c0dc:	a909883a 	add	r4,r21,r4
    c0e0:	2c84b03a 	or	r2,r5,r18
    c0e4:	00c003c4 	movi	r3,15
    c0e8:	bdacf03a 	xor	r22,r23,r22
    c0ec:	22c00044 	addi	r11,r4,1
    c0f0:	18809936 	bltu	r3,r2,c358 <__muldf3+0x340>
    c0f4:	100490ba 	slli	r2,r2,2
    c0f8:	00c00074 	movhi	r3,1
    c0fc:	18f04304 	addi	r3,r3,-16116
    c100:	10c5883a 	add	r2,r2,r3
    c104:	10800017 	ldw	r2,0(r2)
    c108:	1000683a 	jmp	r2
    c10c:	0000c358 	cmpnei	zero,zero,781
    c110:	0000c16c 	andhi	zero,zero,773
    c114:	0000c16c 	andhi	zero,zero,773
    c118:	0000c168 	cmpgeui	zero,zero,773
    c11c:	0000c334 	movhi	zero,780
    c120:	0000c334 	movhi	zero,780
    c124:	0000c31c 	xori	zero,zero,780
    c128:	0000c168 	cmpgeui	zero,zero,773
    c12c:	0000c334 	movhi	zero,780
    c130:	0000c31c 	xori	zero,zero,780
    c134:	0000c334 	movhi	zero,780
    c138:	0000c168 	cmpgeui	zero,zero,773
    c13c:	0000c344 	movi	zero,781
    c140:	0000c344 	movi	zero,781
    c144:	0000c344 	movi	zero,781
    c148:	0000c560 	cmpeqi	zero,zero,789
    c14c:	2404b03a 	or	r2,r4,r16
    c150:	10006f1e 	bne	r2,zero,c310 <__muldf3+0x2f8>
    c154:	04800204 	movi	r18,8
    c158:	0021883a 	mov	r16,zero
    c15c:	0027883a 	mov	r19,zero
    c160:	07000084 	movi	fp,2
    c164:	003fcb06 	br	c094 <_gp+0xffff26b4>
    c168:	502d883a 	mov	r22,r10
    c16c:	00800084 	movi	r2,2
    c170:	28805726 	beq	r5,r2,c2d0 <__muldf3+0x2b8>
    c174:	008000c4 	movi	r2,3
    c178:	28816626 	beq	r5,r2,c714 <__muldf3+0x6fc>
    c17c:	00800044 	movi	r2,1
    c180:	2881411e 	bne	r5,r2,c688 <__muldf3+0x670>
    c184:	b029883a 	mov	r20,r22
    c188:	0005883a 	mov	r2,zero
    c18c:	000b883a 	mov	r5,zero
    c190:	0027883a 	mov	r19,zero
    c194:	1004953a 	slli	r2,r2,20
    c198:	a0c03fcc 	andi	r3,r20,255
    c19c:	04400434 	movhi	r17,16
    c1a0:	8c7fffc4 	addi	r17,r17,-1
    c1a4:	180697fa 	slli	r3,r3,31
    c1a8:	2c4a703a 	and	r5,r5,r17
    c1ac:	288ab03a 	or	r5,r5,r2
    c1b0:	28c6b03a 	or	r3,r5,r3
    c1b4:	9805883a 	mov	r2,r19
    c1b8:	dfc00c17 	ldw	ra,48(sp)
    c1bc:	df000b17 	ldw	fp,44(sp)
    c1c0:	ddc00a17 	ldw	r23,40(sp)
    c1c4:	dd800917 	ldw	r22,36(sp)
    c1c8:	dd400817 	ldw	r21,32(sp)
    c1cc:	dd000717 	ldw	r20,28(sp)
    c1d0:	dcc00617 	ldw	r19,24(sp)
    c1d4:	dc800517 	ldw	r18,20(sp)
    c1d8:	dc400417 	ldw	r17,16(sp)
    c1dc:	dc000317 	ldw	r16,12(sp)
    c1e0:	dec00d04 	addi	sp,sp,52
    c1e4:	f800283a 	ret
    c1e8:	2404b03a 	or	r2,r4,r16
    c1ec:	2025883a 	mov	r18,r4
    c1f0:	10004226 	beq	r2,zero,c2fc <__muldf3+0x2e4>
    c1f4:	8000fc26 	beq	r16,zero,c5e8 <__muldf3+0x5d0>
    c1f8:	8009883a 	mov	r4,r16
    c1fc:	d9800215 	stw	r6,8(sp)
    c200:	d9c00015 	stw	r7,0(sp)
    c204:	da400115 	stw	r9,4(sp)
    c208:	000d2300 	call	d230 <__clzsi2>
    c20c:	d9800217 	ldw	r6,8(sp)
    c210:	d9c00017 	ldw	r7,0(sp)
    c214:	da400117 	ldw	r9,4(sp)
    c218:	10fffd44 	addi	r3,r2,-11
    c21c:	01000704 	movi	r4,28
    c220:	20c0ed16 	blt	r4,r3,c5d8 <__muldf3+0x5c0>
    c224:	01000744 	movi	r4,29
    c228:	147ffe04 	addi	r17,r2,-8
    c22c:	20c9c83a 	sub	r4,r4,r3
    c230:	8460983a 	sll	r16,r16,r17
    c234:	9108d83a 	srl	r4,r18,r4
    c238:	9466983a 	sll	r19,r18,r17
    c23c:	2420b03a 	or	r16,r4,r16
    c240:	013f0084 	movi	r4,-1022
    c244:	20ebc83a 	sub	r21,r4,r3
    c248:	0025883a 	mov	r18,zero
    c24c:	0039883a 	mov	fp,zero
    c250:	003f9006 	br	c094 <_gp+0xffff26b4>
    c254:	3444b03a 	or	r2,r6,r17
    c258:	1000261e 	bne	r2,zero,c2f4 <__muldf3+0x2dc>
    c25c:	0023883a 	mov	r17,zero
    c260:	0011883a 	mov	r8,zero
    c264:	01400084 	movi	r5,2
    c268:	003f9c06 	br	c0dc <_gp+0xffff26fc>
    c26c:	3444b03a 	or	r2,r6,r17
    c270:	10001c26 	beq	r2,zero,c2e4 <__muldf3+0x2cc>
    c274:	8800ce26 	beq	r17,zero,c5b0 <__muldf3+0x598>
    c278:	8809883a 	mov	r4,r17
    c27c:	d9800215 	stw	r6,8(sp)
    c280:	da400115 	stw	r9,4(sp)
    c284:	da800015 	stw	r10,0(sp)
    c288:	000d2300 	call	d230 <__clzsi2>
    c28c:	d9800217 	ldw	r6,8(sp)
    c290:	da400117 	ldw	r9,4(sp)
    c294:	da800017 	ldw	r10,0(sp)
    c298:	113ffd44 	addi	r4,r2,-11
    c29c:	00c00704 	movi	r3,28
    c2a0:	1900bf16 	blt	r3,r4,c5a0 <__muldf3+0x588>
    c2a4:	00c00744 	movi	r3,29
    c2a8:	123ffe04 	addi	r8,r2,-8
    c2ac:	1907c83a 	sub	r3,r3,r4
    c2b0:	8a22983a 	sll	r17,r17,r8
    c2b4:	30c6d83a 	srl	r3,r6,r3
    c2b8:	3210983a 	sll	r8,r6,r8
    c2bc:	1c62b03a 	or	r17,r3,r17
    c2c0:	017f0084 	movi	r5,-1022
    c2c4:	2909c83a 	sub	r4,r5,r4
    c2c8:	000b883a 	mov	r5,zero
    c2cc:	003f8306 	br	c0dc <_gp+0xffff26fc>
    c2d0:	b029883a 	mov	r20,r22
    c2d4:	0081ffc4 	movi	r2,2047
    c2d8:	000b883a 	mov	r5,zero
    c2dc:	0027883a 	mov	r19,zero
    c2e0:	003fac06 	br	c194 <_gp+0xffff27b4>
    c2e4:	0023883a 	mov	r17,zero
    c2e8:	0011883a 	mov	r8,zero
    c2ec:	01400044 	movi	r5,1
    c2f0:	003f7a06 	br	c0dc <_gp+0xffff26fc>
    c2f4:	014000c4 	movi	r5,3
    c2f8:	003f7806 	br	c0dc <_gp+0xffff26fc>
    c2fc:	04800104 	movi	r18,4
    c300:	0021883a 	mov	r16,zero
    c304:	0027883a 	mov	r19,zero
    c308:	07000044 	movi	fp,1
    c30c:	003f6106 	br	c094 <_gp+0xffff26b4>
    c310:	04800304 	movi	r18,12
    c314:	070000c4 	movi	fp,3
    c318:	003f5e06 	br	c094 <_gp+0xffff26b4>
    c31c:	01400434 	movhi	r5,16
    c320:	0029883a 	mov	r20,zero
    c324:	297fffc4 	addi	r5,r5,-1
    c328:	04ffffc4 	movi	r19,-1
    c32c:	0081ffc4 	movi	r2,2047
    c330:	003f9806 	br	c194 <_gp+0xffff27b4>
    c334:	8023883a 	mov	r17,r16
    c338:	9811883a 	mov	r8,r19
    c33c:	e00b883a 	mov	r5,fp
    c340:	003f8a06 	br	c16c <_gp+0xffff278c>
    c344:	8023883a 	mov	r17,r16
    c348:	9811883a 	mov	r8,r19
    c34c:	482d883a 	mov	r22,r9
    c350:	e00b883a 	mov	r5,fp
    c354:	003f8506 	br	c16c <_gp+0xffff278c>
    c358:	980ad43a 	srli	r5,r19,16
    c35c:	401ad43a 	srli	r13,r8,16
    c360:	9cffffcc 	andi	r19,r19,65535
    c364:	423fffcc 	andi	r8,r8,65535
    c368:	44d9383a 	mul	r12,r8,r19
    c36c:	4145383a 	mul	r2,r8,r5
    c370:	6ccd383a 	mul	r6,r13,r19
    c374:	6006d43a 	srli	r3,r12,16
    c378:	2b5d383a 	mul	r14,r5,r13
    c37c:	308d883a 	add	r6,r6,r2
    c380:	198d883a 	add	r6,r3,r6
    c384:	3080022e 	bgeu	r6,r2,c390 <__muldf3+0x378>
    c388:	00800074 	movhi	r2,1
    c38c:	709d883a 	add	r14,r14,r2
    c390:	8828d43a 	srli	r20,r17,16
    c394:	8bffffcc 	andi	r15,r17,65535
    c398:	7ce3383a 	mul	r17,r15,r19
    c39c:	7945383a 	mul	r2,r15,r5
    c3a0:	a4e7383a 	mul	r19,r20,r19
    c3a4:	8814d43a 	srli	r10,r17,16
    c3a8:	3012943a 	slli	r9,r6,16
    c3ac:	98a7883a 	add	r19,r19,r2
    c3b0:	633fffcc 	andi	r12,r12,65535
    c3b4:	54d5883a 	add	r10,r10,r19
    c3b8:	3006d43a 	srli	r3,r6,16
    c3bc:	4b13883a 	add	r9,r9,r12
    c3c0:	2d0b383a 	mul	r5,r5,r20
    c3c4:	5080022e 	bgeu	r10,r2,c3d0 <__muldf3+0x3b8>
    c3c8:	00800074 	movhi	r2,1
    c3cc:	288b883a 	add	r5,r5,r2
    c3d0:	802ad43a 	srli	r21,r16,16
    c3d4:	843fffcc 	andi	r16,r16,65535
    c3d8:	440d383a 	mul	r6,r8,r16
    c3dc:	4565383a 	mul	r18,r8,r21
    c3e0:	8359383a 	mul	r12,r16,r13
    c3e4:	500e943a 	slli	r7,r10,16
    c3e8:	3010d43a 	srli	r8,r6,16
    c3ec:	5026d43a 	srli	r19,r10,16
    c3f0:	6499883a 	add	r12,r12,r18
    c3f4:	8abfffcc 	andi	r10,r17,65535
    c3f8:	3a95883a 	add	r10,r7,r10
    c3fc:	4319883a 	add	r12,r8,r12
    c400:	9967883a 	add	r19,r19,r5
    c404:	1a87883a 	add	r3,r3,r10
    c408:	6d5b383a 	mul	r13,r13,r21
    c40c:	6480022e 	bgeu	r12,r18,c418 <__muldf3+0x400>
    c410:	00800074 	movhi	r2,1
    c414:	689b883a 	add	r13,r13,r2
    c418:	7c25383a 	mul	r18,r15,r16
    c41c:	7d4b383a 	mul	r5,r15,r21
    c420:	850f383a 	mul	r7,r16,r20
    c424:	901ed43a 	srli	r15,r18,16
    c428:	6004d43a 	srli	r2,r12,16
    c42c:	6010943a 	slli	r8,r12,16
    c430:	394f883a 	add	r7,r7,r5
    c434:	333fffcc 	andi	r12,r6,65535
    c438:	79df883a 	add	r15,r15,r7
    c43c:	135b883a 	add	r13,r2,r13
    c440:	a563383a 	mul	r17,r20,r21
    c444:	4305883a 	add	r2,r8,r12
    c448:	7940022e 	bgeu	r15,r5,c454 <__muldf3+0x43c>
    c44c:	01400074 	movhi	r5,1
    c450:	8963883a 	add	r17,r17,r5
    c454:	780a943a 	slli	r5,r15,16
    c458:	91bfffcc 	andi	r6,r18,65535
    c45c:	70c7883a 	add	r3,r14,r3
    c460:	298d883a 	add	r6,r5,r6
    c464:	1a8f803a 	cmpltu	r7,r3,r10
    c468:	34cb883a 	add	r5,r6,r19
    c46c:	10c7883a 	add	r3,r2,r3
    c470:	3955883a 	add	r10,r7,r5
    c474:	1885803a 	cmpltu	r2,r3,r2
    c478:	6a91883a 	add	r8,r13,r10
    c47c:	780cd43a 	srli	r6,r15,16
    c480:	1219883a 	add	r12,r2,r8
    c484:	2ccb803a 	cmpltu	r5,r5,r19
    c488:	51cf803a 	cmpltu	r7,r10,r7
    c48c:	29ceb03a 	or	r7,r5,r7
    c490:	4351803a 	cmpltu	r8,r8,r13
    c494:	608b803a 	cmpltu	r5,r12,r2
    c498:	4144b03a 	or	r2,r8,r5
    c49c:	398f883a 	add	r7,r7,r6
    c4a0:	3885883a 	add	r2,r7,r2
    c4a4:	1810927a 	slli	r8,r3,9
    c4a8:	1445883a 	add	r2,r2,r17
    c4ac:	1004927a 	slli	r2,r2,9
    c4b0:	6022d5fa 	srli	r17,r12,23
    c4b4:	1806d5fa 	srli	r3,r3,23
    c4b8:	4252b03a 	or	r9,r8,r9
    c4bc:	600a927a 	slli	r5,r12,9
    c4c0:	4810c03a 	cmpne	r8,r9,zero
    c4c4:	1462b03a 	or	r17,r2,r17
    c4c8:	40c6b03a 	or	r3,r8,r3
    c4cc:	8880402c 	andhi	r2,r17,256
    c4d0:	1950b03a 	or	r8,r3,r5
    c4d4:	10000726 	beq	r2,zero,c4f4 <__muldf3+0x4dc>
    c4d8:	4006d07a 	srli	r3,r8,1
    c4dc:	880497fa 	slli	r2,r17,31
    c4e0:	4200004c 	andi	r8,r8,1
    c4e4:	8822d07a 	srli	r17,r17,1
    c4e8:	1a10b03a 	or	r8,r3,r8
    c4ec:	1210b03a 	or	r8,r2,r8
    c4f0:	5809883a 	mov	r4,r11
    c4f4:	2080ffc4 	addi	r2,r4,1023
    c4f8:	0080440e 	bge	zero,r2,c60c <__muldf3+0x5f4>
    c4fc:	40c001cc 	andi	r3,r8,7
    c500:	18000726 	beq	r3,zero,c520 <__muldf3+0x508>
    c504:	40c003cc 	andi	r3,r8,15
    c508:	01400104 	movi	r5,4
    c50c:	19400426 	beq	r3,r5,c520 <__muldf3+0x508>
    c510:	4147883a 	add	r3,r8,r5
    c514:	1a11803a 	cmpltu	r8,r3,r8
    c518:	8a23883a 	add	r17,r17,r8
    c51c:	1811883a 	mov	r8,r3
    c520:	88c0402c 	andhi	r3,r17,256
    c524:	18000426 	beq	r3,zero,c538 <__muldf3+0x520>
    c528:	00ffc034 	movhi	r3,65280
    c52c:	18ffffc4 	addi	r3,r3,-1
    c530:	20810004 	addi	r2,r4,1024
    c534:	88e2703a 	and	r17,r17,r3
    c538:	00c1ff84 	movi	r3,2046
    c53c:	18bf6416 	blt	r3,r2,c2d0 <_gp+0xffff28f0>
    c540:	8826977a 	slli	r19,r17,29
    c544:	4010d0fa 	srli	r8,r8,3
    c548:	8822927a 	slli	r17,r17,9
    c54c:	1081ffcc 	andi	r2,r2,2047
    c550:	9a26b03a 	or	r19,r19,r8
    c554:	880ad33a 	srli	r5,r17,12
    c558:	b029883a 	mov	r20,r22
    c55c:	003f0d06 	br	c194 <_gp+0xffff27b4>
    c560:	8080022c 	andhi	r2,r16,8
    c564:	10000926 	beq	r2,zero,c58c <__muldf3+0x574>
    c568:	8880022c 	andhi	r2,r17,8
    c56c:	1000071e 	bne	r2,zero,c58c <__muldf3+0x574>
    c570:	00800434 	movhi	r2,16
    c574:	89400234 	orhi	r5,r17,8
    c578:	10bfffc4 	addi	r2,r2,-1
    c57c:	b829883a 	mov	r20,r23
    c580:	288a703a 	and	r5,r5,r2
    c584:	4027883a 	mov	r19,r8
    c588:	003f6806 	br	c32c <_gp+0xffff294c>
    c58c:	00800434 	movhi	r2,16
    c590:	81400234 	orhi	r5,r16,8
    c594:	10bfffc4 	addi	r2,r2,-1
    c598:	288a703a 	and	r5,r5,r2
    c59c:	003f6306 	br	c32c <_gp+0xffff294c>
    c5a0:	10bff604 	addi	r2,r2,-40
    c5a4:	30a2983a 	sll	r17,r6,r2
    c5a8:	0011883a 	mov	r8,zero
    c5ac:	003f4406 	br	c2c0 <_gp+0xffff28e0>
    c5b0:	3009883a 	mov	r4,r6
    c5b4:	d9800215 	stw	r6,8(sp)
    c5b8:	da400115 	stw	r9,4(sp)
    c5bc:	da800015 	stw	r10,0(sp)
    c5c0:	000d2300 	call	d230 <__clzsi2>
    c5c4:	10800804 	addi	r2,r2,32
    c5c8:	da800017 	ldw	r10,0(sp)
    c5cc:	da400117 	ldw	r9,4(sp)
    c5d0:	d9800217 	ldw	r6,8(sp)
    c5d4:	003f3006 	br	c298 <_gp+0xffff28b8>
    c5d8:	10bff604 	addi	r2,r2,-40
    c5dc:	90a0983a 	sll	r16,r18,r2
    c5e0:	0027883a 	mov	r19,zero
    c5e4:	003f1606 	br	c240 <_gp+0xffff2860>
    c5e8:	d9800215 	stw	r6,8(sp)
    c5ec:	d9c00015 	stw	r7,0(sp)
    c5f0:	da400115 	stw	r9,4(sp)
    c5f4:	000d2300 	call	d230 <__clzsi2>
    c5f8:	10800804 	addi	r2,r2,32
    c5fc:	da400117 	ldw	r9,4(sp)
    c600:	d9c00017 	ldw	r7,0(sp)
    c604:	d9800217 	ldw	r6,8(sp)
    c608:	003f0306 	br	c218 <_gp+0xffff2838>
    c60c:	00c00044 	movi	r3,1
    c610:	1887c83a 	sub	r3,r3,r2
    c614:	01000e04 	movi	r4,56
    c618:	20feda16 	blt	r4,r3,c184 <_gp+0xffff27a4>
    c61c:	010007c4 	movi	r4,31
    c620:	20c01b16 	blt	r4,r3,c690 <__muldf3+0x678>
    c624:	00800804 	movi	r2,32
    c628:	10c5c83a 	sub	r2,r2,r3
    c62c:	888a983a 	sll	r5,r17,r2
    c630:	40c8d83a 	srl	r4,r8,r3
    c634:	4084983a 	sll	r2,r8,r2
    c638:	88e2d83a 	srl	r17,r17,r3
    c63c:	2906b03a 	or	r3,r5,r4
    c640:	1004c03a 	cmpne	r2,r2,zero
    c644:	1886b03a 	or	r3,r3,r2
    c648:	188001cc 	andi	r2,r3,7
    c64c:	10000726 	beq	r2,zero,c66c <__muldf3+0x654>
    c650:	188003cc 	andi	r2,r3,15
    c654:	01000104 	movi	r4,4
    c658:	11000426 	beq	r2,r4,c66c <__muldf3+0x654>
    c65c:	1805883a 	mov	r2,r3
    c660:	10c00104 	addi	r3,r2,4
    c664:	1885803a 	cmpltu	r2,r3,r2
    c668:	88a3883a 	add	r17,r17,r2
    c66c:	8880202c 	andhi	r2,r17,128
    c670:	10001c26 	beq	r2,zero,c6e4 <__muldf3+0x6cc>
    c674:	b029883a 	mov	r20,r22
    c678:	00800044 	movi	r2,1
    c67c:	000b883a 	mov	r5,zero
    c680:	0027883a 	mov	r19,zero
    c684:	003ec306 	br	c194 <_gp+0xffff27b4>
    c688:	5809883a 	mov	r4,r11
    c68c:	003f9906 	br	c4f4 <_gp+0xffff2b14>
    c690:	013ff844 	movi	r4,-31
    c694:	2085c83a 	sub	r2,r4,r2
    c698:	8888d83a 	srl	r4,r17,r2
    c69c:	00800804 	movi	r2,32
    c6a0:	18801a26 	beq	r3,r2,c70c <__muldf3+0x6f4>
    c6a4:	00801004 	movi	r2,64
    c6a8:	10c5c83a 	sub	r2,r2,r3
    c6ac:	8884983a 	sll	r2,r17,r2
    c6b0:	1204b03a 	or	r2,r2,r8
    c6b4:	1004c03a 	cmpne	r2,r2,zero
    c6b8:	2084b03a 	or	r2,r4,r2
    c6bc:	144001cc 	andi	r17,r2,7
    c6c0:	88000d1e 	bne	r17,zero,c6f8 <__muldf3+0x6e0>
    c6c4:	000b883a 	mov	r5,zero
    c6c8:	1026d0fa 	srli	r19,r2,3
    c6cc:	b029883a 	mov	r20,r22
    c6d0:	0005883a 	mov	r2,zero
    c6d4:	9c66b03a 	or	r19,r19,r17
    c6d8:	003eae06 	br	c194 <_gp+0xffff27b4>
    c6dc:	1007883a 	mov	r3,r2
    c6e0:	0023883a 	mov	r17,zero
    c6e4:	880a927a 	slli	r5,r17,9
    c6e8:	1805883a 	mov	r2,r3
    c6ec:	8822977a 	slli	r17,r17,29
    c6f0:	280ad33a 	srli	r5,r5,12
    c6f4:	003ff406 	br	c6c8 <_gp+0xffff2ce8>
    c6f8:	10c003cc 	andi	r3,r2,15
    c6fc:	01000104 	movi	r4,4
    c700:	193ff626 	beq	r3,r4,c6dc <_gp+0xffff2cfc>
    c704:	0023883a 	mov	r17,zero
    c708:	003fd506 	br	c660 <_gp+0xffff2c80>
    c70c:	0005883a 	mov	r2,zero
    c710:	003fe706 	br	c6b0 <_gp+0xffff2cd0>
    c714:	00800434 	movhi	r2,16
    c718:	89400234 	orhi	r5,r17,8
    c71c:	10bfffc4 	addi	r2,r2,-1
    c720:	b029883a 	mov	r20,r22
    c724:	288a703a 	and	r5,r5,r2
    c728:	4027883a 	mov	r19,r8
    c72c:	003eff06 	br	c32c <_gp+0xffff294c>

0000c730 <__subdf3>:
    c730:	02000434 	movhi	r8,16
    c734:	423fffc4 	addi	r8,r8,-1
    c738:	defffb04 	addi	sp,sp,-20
    c73c:	2a14703a 	and	r10,r5,r8
    c740:	3812d53a 	srli	r9,r7,20
    c744:	3a10703a 	and	r8,r7,r8
    c748:	2006d77a 	srli	r3,r4,29
    c74c:	3004d77a 	srli	r2,r6,29
    c750:	dc000015 	stw	r16,0(sp)
    c754:	501490fa 	slli	r10,r10,3
    c758:	2820d53a 	srli	r16,r5,20
    c75c:	401090fa 	slli	r8,r8,3
    c760:	dc800215 	stw	r18,8(sp)
    c764:	dc400115 	stw	r17,4(sp)
    c768:	dfc00415 	stw	ra,16(sp)
    c76c:	202290fa 	slli	r17,r4,3
    c770:	dcc00315 	stw	r19,12(sp)
    c774:	4a41ffcc 	andi	r9,r9,2047
    c778:	0101ffc4 	movi	r4,2047
    c77c:	2824d7fa 	srli	r18,r5,31
    c780:	8401ffcc 	andi	r16,r16,2047
    c784:	50c6b03a 	or	r3,r10,r3
    c788:	380ed7fa 	srli	r7,r7,31
    c78c:	408ab03a 	or	r5,r8,r2
    c790:	300c90fa 	slli	r6,r6,3
    c794:	49009626 	beq	r9,r4,c9f0 <__subdf3+0x2c0>
    c798:	39c0005c 	xori	r7,r7,1
    c79c:	8245c83a 	sub	r2,r16,r9
    c7a0:	3c807426 	beq	r7,r18,c974 <__subdf3+0x244>
    c7a4:	0080af0e 	bge	zero,r2,ca64 <__subdf3+0x334>
    c7a8:	48002a1e 	bne	r9,zero,c854 <__subdf3+0x124>
    c7ac:	2988b03a 	or	r4,r5,r6
    c7b0:	20009a1e 	bne	r4,zero,ca1c <__subdf3+0x2ec>
    c7b4:	888001cc 	andi	r2,r17,7
    c7b8:	10000726 	beq	r2,zero,c7d8 <__subdf3+0xa8>
    c7bc:	888003cc 	andi	r2,r17,15
    c7c0:	01000104 	movi	r4,4
    c7c4:	11000426 	beq	r2,r4,c7d8 <__subdf3+0xa8>
    c7c8:	890b883a 	add	r5,r17,r4
    c7cc:	2c63803a 	cmpltu	r17,r5,r17
    c7d0:	1c47883a 	add	r3,r3,r17
    c7d4:	2823883a 	mov	r17,r5
    c7d8:	1880202c 	andhi	r2,r3,128
    c7dc:	10005926 	beq	r2,zero,c944 <__subdf3+0x214>
    c7e0:	84000044 	addi	r16,r16,1
    c7e4:	0081ffc4 	movi	r2,2047
    c7e8:	8080be26 	beq	r16,r2,cae4 <__subdf3+0x3b4>
    c7ec:	017fe034 	movhi	r5,65408
    c7f0:	297fffc4 	addi	r5,r5,-1
    c7f4:	1946703a 	and	r3,r3,r5
    c7f8:	1804977a 	slli	r2,r3,29
    c7fc:	1806927a 	slli	r3,r3,9
    c800:	8822d0fa 	srli	r17,r17,3
    c804:	8401ffcc 	andi	r16,r16,2047
    c808:	180ad33a 	srli	r5,r3,12
    c80c:	9100004c 	andi	r4,r18,1
    c810:	1444b03a 	or	r2,r2,r17
    c814:	80c1ffcc 	andi	r3,r16,2047
    c818:	1820953a 	slli	r16,r3,20
    c81c:	20c03fcc 	andi	r3,r4,255
    c820:	180897fa 	slli	r4,r3,31
    c824:	00c00434 	movhi	r3,16
    c828:	18ffffc4 	addi	r3,r3,-1
    c82c:	28c6703a 	and	r3,r5,r3
    c830:	1c06b03a 	or	r3,r3,r16
    c834:	1906b03a 	or	r3,r3,r4
    c838:	dfc00417 	ldw	ra,16(sp)
    c83c:	dcc00317 	ldw	r19,12(sp)
    c840:	dc800217 	ldw	r18,8(sp)
    c844:	dc400117 	ldw	r17,4(sp)
    c848:	dc000017 	ldw	r16,0(sp)
    c84c:	dec00504 	addi	sp,sp,20
    c850:	f800283a 	ret
    c854:	0101ffc4 	movi	r4,2047
    c858:	813fd626 	beq	r16,r4,c7b4 <_gp+0xffff2dd4>
    c85c:	29402034 	orhi	r5,r5,128
    c860:	01000e04 	movi	r4,56
    c864:	2080a316 	blt	r4,r2,caf4 <__subdf3+0x3c4>
    c868:	010007c4 	movi	r4,31
    c86c:	2080c616 	blt	r4,r2,cb88 <__subdf3+0x458>
    c870:	01000804 	movi	r4,32
    c874:	2089c83a 	sub	r4,r4,r2
    c878:	2910983a 	sll	r8,r5,r4
    c87c:	308ed83a 	srl	r7,r6,r2
    c880:	3108983a 	sll	r4,r6,r4
    c884:	2884d83a 	srl	r2,r5,r2
    c888:	41ccb03a 	or	r6,r8,r7
    c88c:	2008c03a 	cmpne	r4,r4,zero
    c890:	310cb03a 	or	r6,r6,r4
    c894:	898dc83a 	sub	r6,r17,r6
    c898:	89a3803a 	cmpltu	r17,r17,r6
    c89c:	1887c83a 	sub	r3,r3,r2
    c8a0:	1c47c83a 	sub	r3,r3,r17
    c8a4:	3023883a 	mov	r17,r6
    c8a8:	1880202c 	andhi	r2,r3,128
    c8ac:	10002326 	beq	r2,zero,c93c <__subdf3+0x20c>
    c8b0:	04c02034 	movhi	r19,128
    c8b4:	9cffffc4 	addi	r19,r19,-1
    c8b8:	1ce6703a 	and	r19,r3,r19
    c8bc:	98007a26 	beq	r19,zero,caa8 <__subdf3+0x378>
    c8c0:	9809883a 	mov	r4,r19
    c8c4:	000d2300 	call	d230 <__clzsi2>
    c8c8:	113ffe04 	addi	r4,r2,-8
    c8cc:	00c007c4 	movi	r3,31
    c8d0:	19007b16 	blt	r3,r4,cac0 <__subdf3+0x390>
    c8d4:	00800804 	movi	r2,32
    c8d8:	1105c83a 	sub	r2,r2,r4
    c8dc:	8884d83a 	srl	r2,r17,r2
    c8e0:	9906983a 	sll	r3,r19,r4
    c8e4:	8922983a 	sll	r17,r17,r4
    c8e8:	10c4b03a 	or	r2,r2,r3
    c8ec:	24007816 	blt	r4,r16,cad0 <__subdf3+0x3a0>
    c8f0:	2421c83a 	sub	r16,r4,r16
    c8f4:	80c00044 	addi	r3,r16,1
    c8f8:	010007c4 	movi	r4,31
    c8fc:	20c09516 	blt	r4,r3,cb54 <__subdf3+0x424>
    c900:	01400804 	movi	r5,32
    c904:	28cbc83a 	sub	r5,r5,r3
    c908:	88c8d83a 	srl	r4,r17,r3
    c90c:	8962983a 	sll	r17,r17,r5
    c910:	114a983a 	sll	r5,r2,r5
    c914:	10c6d83a 	srl	r3,r2,r3
    c918:	8804c03a 	cmpne	r2,r17,zero
    c91c:	290ab03a 	or	r5,r5,r4
    c920:	28a2b03a 	or	r17,r5,r2
    c924:	0021883a 	mov	r16,zero
    c928:	003fa206 	br	c7b4 <_gp+0xffff2dd4>
    c92c:	2090b03a 	or	r8,r4,r2
    c930:	40018e26 	beq	r8,zero,cf6c <__subdf3+0x83c>
    c934:	1007883a 	mov	r3,r2
    c938:	2023883a 	mov	r17,r4
    c93c:	888001cc 	andi	r2,r17,7
    c940:	103f9e1e 	bne	r2,zero,c7bc <_gp+0xffff2ddc>
    c944:	1804977a 	slli	r2,r3,29
    c948:	8822d0fa 	srli	r17,r17,3
    c94c:	1810d0fa 	srli	r8,r3,3
    c950:	9100004c 	andi	r4,r18,1
    c954:	1444b03a 	or	r2,r2,r17
    c958:	00c1ffc4 	movi	r3,2047
    c95c:	80c02826 	beq	r16,r3,ca00 <__subdf3+0x2d0>
    c960:	01400434 	movhi	r5,16
    c964:	297fffc4 	addi	r5,r5,-1
    c968:	80e0703a 	and	r16,r16,r3
    c96c:	414a703a 	and	r5,r8,r5
    c970:	003fa806 	br	c814 <_gp+0xffff2e34>
    c974:	0080630e 	bge	zero,r2,cb04 <__subdf3+0x3d4>
    c978:	48003026 	beq	r9,zero,ca3c <__subdf3+0x30c>
    c97c:	0101ffc4 	movi	r4,2047
    c980:	813f8c26 	beq	r16,r4,c7b4 <_gp+0xffff2dd4>
    c984:	29402034 	orhi	r5,r5,128
    c988:	01000e04 	movi	r4,56
    c98c:	2080a90e 	bge	r4,r2,cc34 <__subdf3+0x504>
    c990:	298cb03a 	or	r6,r5,r6
    c994:	3012c03a 	cmpne	r9,r6,zero
    c998:	0005883a 	mov	r2,zero
    c99c:	4c53883a 	add	r9,r9,r17
    c9a0:	4c63803a 	cmpltu	r17,r9,r17
    c9a4:	10c7883a 	add	r3,r2,r3
    c9a8:	88c7883a 	add	r3,r17,r3
    c9ac:	4823883a 	mov	r17,r9
    c9b0:	1880202c 	andhi	r2,r3,128
    c9b4:	1000d026 	beq	r2,zero,ccf8 <__subdf3+0x5c8>
    c9b8:	84000044 	addi	r16,r16,1
    c9bc:	0081ffc4 	movi	r2,2047
    c9c0:	8080fe26 	beq	r16,r2,cdbc <__subdf3+0x68c>
    c9c4:	00bfe034 	movhi	r2,65408
    c9c8:	10bfffc4 	addi	r2,r2,-1
    c9cc:	1886703a 	and	r3,r3,r2
    c9d0:	880ad07a 	srli	r5,r17,1
    c9d4:	180497fa 	slli	r2,r3,31
    c9d8:	8900004c 	andi	r4,r17,1
    c9dc:	2922b03a 	or	r17,r5,r4
    c9e0:	1806d07a 	srli	r3,r3,1
    c9e4:	1462b03a 	or	r17,r2,r17
    c9e8:	3825883a 	mov	r18,r7
    c9ec:	003f7106 	br	c7b4 <_gp+0xffff2dd4>
    c9f0:	2984b03a 	or	r2,r5,r6
    c9f4:	103f6826 	beq	r2,zero,c798 <_gp+0xffff2db8>
    c9f8:	39c03fcc 	andi	r7,r7,255
    c9fc:	003f6706 	br	c79c <_gp+0xffff2dbc>
    ca00:	4086b03a 	or	r3,r8,r2
    ca04:	18015226 	beq	r3,zero,cf50 <__subdf3+0x820>
    ca08:	00c00434 	movhi	r3,16
    ca0c:	41400234 	orhi	r5,r8,8
    ca10:	18ffffc4 	addi	r3,r3,-1
    ca14:	28ca703a 	and	r5,r5,r3
    ca18:	003f7e06 	br	c814 <_gp+0xffff2e34>
    ca1c:	10bfffc4 	addi	r2,r2,-1
    ca20:	1000491e 	bne	r2,zero,cb48 <__subdf3+0x418>
    ca24:	898fc83a 	sub	r7,r17,r6
    ca28:	89e3803a 	cmpltu	r17,r17,r7
    ca2c:	1947c83a 	sub	r3,r3,r5
    ca30:	1c47c83a 	sub	r3,r3,r17
    ca34:	3823883a 	mov	r17,r7
    ca38:	003f9b06 	br	c8a8 <_gp+0xffff2ec8>
    ca3c:	2988b03a 	or	r4,r5,r6
    ca40:	203f5c26 	beq	r4,zero,c7b4 <_gp+0xffff2dd4>
    ca44:	10bfffc4 	addi	r2,r2,-1
    ca48:	1000931e 	bne	r2,zero,cc98 <__subdf3+0x568>
    ca4c:	898d883a 	add	r6,r17,r6
    ca50:	3463803a 	cmpltu	r17,r6,r17
    ca54:	1947883a 	add	r3,r3,r5
    ca58:	88c7883a 	add	r3,r17,r3
    ca5c:	3023883a 	mov	r17,r6
    ca60:	003fd306 	br	c9b0 <_gp+0xffff2fd0>
    ca64:	1000541e 	bne	r2,zero,cbb8 <__subdf3+0x488>
    ca68:	80800044 	addi	r2,r16,1
    ca6c:	1081ffcc 	andi	r2,r2,2047
    ca70:	01000044 	movi	r4,1
    ca74:	2080a20e 	bge	r4,r2,cd00 <__subdf3+0x5d0>
    ca78:	8989c83a 	sub	r4,r17,r6
    ca7c:	8905803a 	cmpltu	r2,r17,r4
    ca80:	1967c83a 	sub	r19,r3,r5
    ca84:	98a7c83a 	sub	r19,r19,r2
    ca88:	9880202c 	andhi	r2,r19,128
    ca8c:	10006326 	beq	r2,zero,cc1c <__subdf3+0x4ec>
    ca90:	3463c83a 	sub	r17,r6,r17
    ca94:	28c7c83a 	sub	r3,r5,r3
    ca98:	344d803a 	cmpltu	r6,r6,r17
    ca9c:	19a7c83a 	sub	r19,r3,r6
    caa0:	3825883a 	mov	r18,r7
    caa4:	983f861e 	bne	r19,zero,c8c0 <_gp+0xffff2ee0>
    caa8:	8809883a 	mov	r4,r17
    caac:	000d2300 	call	d230 <__clzsi2>
    cab0:	10800804 	addi	r2,r2,32
    cab4:	113ffe04 	addi	r4,r2,-8
    cab8:	00c007c4 	movi	r3,31
    cabc:	193f850e 	bge	r3,r4,c8d4 <_gp+0xffff2ef4>
    cac0:	10bff604 	addi	r2,r2,-40
    cac4:	8884983a 	sll	r2,r17,r2
    cac8:	0023883a 	mov	r17,zero
    cacc:	243f880e 	bge	r4,r16,c8f0 <_gp+0xffff2f10>
    cad0:	00ffe034 	movhi	r3,65408
    cad4:	18ffffc4 	addi	r3,r3,-1
    cad8:	8121c83a 	sub	r16,r16,r4
    cadc:	10c6703a 	and	r3,r2,r3
    cae0:	003f3406 	br	c7b4 <_gp+0xffff2dd4>
    cae4:	9100004c 	andi	r4,r18,1
    cae8:	000b883a 	mov	r5,zero
    caec:	0005883a 	mov	r2,zero
    caf0:	003f4806 	br	c814 <_gp+0xffff2e34>
    caf4:	298cb03a 	or	r6,r5,r6
    caf8:	300cc03a 	cmpne	r6,r6,zero
    cafc:	0005883a 	mov	r2,zero
    cb00:	003f6406 	br	c894 <_gp+0xffff2eb4>
    cb04:	10009a1e 	bne	r2,zero,cd70 <__subdf3+0x640>
    cb08:	82400044 	addi	r9,r16,1
    cb0c:	4881ffcc 	andi	r2,r9,2047
    cb10:	02800044 	movi	r10,1
    cb14:	5080670e 	bge	r10,r2,ccb4 <__subdf3+0x584>
    cb18:	0081ffc4 	movi	r2,2047
    cb1c:	4880af26 	beq	r9,r2,cddc <__subdf3+0x6ac>
    cb20:	898d883a 	add	r6,r17,r6
    cb24:	1945883a 	add	r2,r3,r5
    cb28:	3447803a 	cmpltu	r3,r6,r17
    cb2c:	1887883a 	add	r3,r3,r2
    cb30:	182297fa 	slli	r17,r3,31
    cb34:	300cd07a 	srli	r6,r6,1
    cb38:	1806d07a 	srli	r3,r3,1
    cb3c:	4821883a 	mov	r16,r9
    cb40:	89a2b03a 	or	r17,r17,r6
    cb44:	003f1b06 	br	c7b4 <_gp+0xffff2dd4>
    cb48:	0101ffc4 	movi	r4,2047
    cb4c:	813f441e 	bne	r16,r4,c860 <_gp+0xffff2e80>
    cb50:	003f1806 	br	c7b4 <_gp+0xffff2dd4>
    cb54:	843ff844 	addi	r16,r16,-31
    cb58:	01400804 	movi	r5,32
    cb5c:	1408d83a 	srl	r4,r2,r16
    cb60:	19405026 	beq	r3,r5,cca4 <__subdf3+0x574>
    cb64:	01401004 	movi	r5,64
    cb68:	28c7c83a 	sub	r3,r5,r3
    cb6c:	10c4983a 	sll	r2,r2,r3
    cb70:	88a2b03a 	or	r17,r17,r2
    cb74:	8822c03a 	cmpne	r17,r17,zero
    cb78:	2462b03a 	or	r17,r4,r17
    cb7c:	0007883a 	mov	r3,zero
    cb80:	0021883a 	mov	r16,zero
    cb84:	003f6d06 	br	c93c <_gp+0xffff2f5c>
    cb88:	11fff804 	addi	r7,r2,-32
    cb8c:	01000804 	movi	r4,32
    cb90:	29ced83a 	srl	r7,r5,r7
    cb94:	11004526 	beq	r2,r4,ccac <__subdf3+0x57c>
    cb98:	01001004 	movi	r4,64
    cb9c:	2089c83a 	sub	r4,r4,r2
    cba0:	2904983a 	sll	r2,r5,r4
    cba4:	118cb03a 	or	r6,r2,r6
    cba8:	300cc03a 	cmpne	r6,r6,zero
    cbac:	398cb03a 	or	r6,r7,r6
    cbb0:	0005883a 	mov	r2,zero
    cbb4:	003f3706 	br	c894 <_gp+0xffff2eb4>
    cbb8:	80002a26 	beq	r16,zero,cc64 <__subdf3+0x534>
    cbbc:	0101ffc4 	movi	r4,2047
    cbc0:	49006626 	beq	r9,r4,cd5c <__subdf3+0x62c>
    cbc4:	0085c83a 	sub	r2,zero,r2
    cbc8:	18c02034 	orhi	r3,r3,128
    cbcc:	01000e04 	movi	r4,56
    cbd0:	20807e16 	blt	r4,r2,cdcc <__subdf3+0x69c>
    cbd4:	010007c4 	movi	r4,31
    cbd8:	2080e716 	blt	r4,r2,cf78 <__subdf3+0x848>
    cbdc:	01000804 	movi	r4,32
    cbe0:	2089c83a 	sub	r4,r4,r2
    cbe4:	1914983a 	sll	r10,r3,r4
    cbe8:	8890d83a 	srl	r8,r17,r2
    cbec:	8908983a 	sll	r4,r17,r4
    cbf0:	1884d83a 	srl	r2,r3,r2
    cbf4:	5222b03a 	or	r17,r10,r8
    cbf8:	2006c03a 	cmpne	r3,r4,zero
    cbfc:	88e2b03a 	or	r17,r17,r3
    cc00:	3463c83a 	sub	r17,r6,r17
    cc04:	2885c83a 	sub	r2,r5,r2
    cc08:	344d803a 	cmpltu	r6,r6,r17
    cc0c:	1187c83a 	sub	r3,r2,r6
    cc10:	4821883a 	mov	r16,r9
    cc14:	3825883a 	mov	r18,r7
    cc18:	003f2306 	br	c8a8 <_gp+0xffff2ec8>
    cc1c:	24d0b03a 	or	r8,r4,r19
    cc20:	40001b1e 	bne	r8,zero,cc90 <__subdf3+0x560>
    cc24:	0005883a 	mov	r2,zero
    cc28:	0009883a 	mov	r4,zero
    cc2c:	0021883a 	mov	r16,zero
    cc30:	003f4906 	br	c958 <_gp+0xffff2f78>
    cc34:	010007c4 	movi	r4,31
    cc38:	20803a16 	blt	r4,r2,cd24 <__subdf3+0x5f4>
    cc3c:	01000804 	movi	r4,32
    cc40:	2089c83a 	sub	r4,r4,r2
    cc44:	2912983a 	sll	r9,r5,r4
    cc48:	3090d83a 	srl	r8,r6,r2
    cc4c:	3108983a 	sll	r4,r6,r4
    cc50:	2884d83a 	srl	r2,r5,r2
    cc54:	4a12b03a 	or	r9,r9,r8
    cc58:	2008c03a 	cmpne	r4,r4,zero
    cc5c:	4912b03a 	or	r9,r9,r4
    cc60:	003f4e06 	br	c99c <_gp+0xffff2fbc>
    cc64:	1c48b03a 	or	r4,r3,r17
    cc68:	20003c26 	beq	r4,zero,cd5c <__subdf3+0x62c>
    cc6c:	0084303a 	nor	r2,zero,r2
    cc70:	1000381e 	bne	r2,zero,cd54 <__subdf3+0x624>
    cc74:	3463c83a 	sub	r17,r6,r17
    cc78:	28c5c83a 	sub	r2,r5,r3
    cc7c:	344d803a 	cmpltu	r6,r6,r17
    cc80:	1187c83a 	sub	r3,r2,r6
    cc84:	4821883a 	mov	r16,r9
    cc88:	3825883a 	mov	r18,r7
    cc8c:	003f0606 	br	c8a8 <_gp+0xffff2ec8>
    cc90:	2023883a 	mov	r17,r4
    cc94:	003f0906 	br	c8bc <_gp+0xffff2edc>
    cc98:	0101ffc4 	movi	r4,2047
    cc9c:	813f3a1e 	bne	r16,r4,c988 <_gp+0xffff2fa8>
    cca0:	003ec406 	br	c7b4 <_gp+0xffff2dd4>
    cca4:	0005883a 	mov	r2,zero
    cca8:	003fb106 	br	cb70 <_gp+0xffff3190>
    ccac:	0005883a 	mov	r2,zero
    ccb0:	003fbc06 	br	cba4 <_gp+0xffff31c4>
    ccb4:	1c44b03a 	or	r2,r3,r17
    ccb8:	80008e1e 	bne	r16,zero,cef4 <__subdf3+0x7c4>
    ccbc:	1000c826 	beq	r2,zero,cfe0 <__subdf3+0x8b0>
    ccc0:	2984b03a 	or	r2,r5,r6
    ccc4:	103ebb26 	beq	r2,zero,c7b4 <_gp+0xffff2dd4>
    ccc8:	8989883a 	add	r4,r17,r6
    cccc:	1945883a 	add	r2,r3,r5
    ccd0:	2447803a 	cmpltu	r3,r4,r17
    ccd4:	1887883a 	add	r3,r3,r2
    ccd8:	1880202c 	andhi	r2,r3,128
    ccdc:	2023883a 	mov	r17,r4
    cce0:	103f1626 	beq	r2,zero,c93c <_gp+0xffff2f5c>
    cce4:	00bfe034 	movhi	r2,65408
    cce8:	10bfffc4 	addi	r2,r2,-1
    ccec:	5021883a 	mov	r16,r10
    ccf0:	1886703a 	and	r3,r3,r2
    ccf4:	003eaf06 	br	c7b4 <_gp+0xffff2dd4>
    ccf8:	3825883a 	mov	r18,r7
    ccfc:	003f0f06 	br	c93c <_gp+0xffff2f5c>
    cd00:	1c44b03a 	or	r2,r3,r17
    cd04:	8000251e 	bne	r16,zero,cd9c <__subdf3+0x66c>
    cd08:	1000661e 	bne	r2,zero,cea4 <__subdf3+0x774>
    cd0c:	2990b03a 	or	r8,r5,r6
    cd10:	40009626 	beq	r8,zero,cf6c <__subdf3+0x83c>
    cd14:	2807883a 	mov	r3,r5
    cd18:	3023883a 	mov	r17,r6
    cd1c:	3825883a 	mov	r18,r7
    cd20:	003ea406 	br	c7b4 <_gp+0xffff2dd4>
    cd24:	127ff804 	addi	r9,r2,-32
    cd28:	01000804 	movi	r4,32
    cd2c:	2a52d83a 	srl	r9,r5,r9
    cd30:	11008c26 	beq	r2,r4,cf64 <__subdf3+0x834>
    cd34:	01001004 	movi	r4,64
    cd38:	2085c83a 	sub	r2,r4,r2
    cd3c:	2884983a 	sll	r2,r5,r2
    cd40:	118cb03a 	or	r6,r2,r6
    cd44:	300cc03a 	cmpne	r6,r6,zero
    cd48:	4992b03a 	or	r9,r9,r6
    cd4c:	0005883a 	mov	r2,zero
    cd50:	003f1206 	br	c99c <_gp+0xffff2fbc>
    cd54:	0101ffc4 	movi	r4,2047
    cd58:	493f9c1e 	bne	r9,r4,cbcc <_gp+0xffff31ec>
    cd5c:	2807883a 	mov	r3,r5
    cd60:	3023883a 	mov	r17,r6
    cd64:	4821883a 	mov	r16,r9
    cd68:	3825883a 	mov	r18,r7
    cd6c:	003e9106 	br	c7b4 <_gp+0xffff2dd4>
    cd70:	80001f1e 	bne	r16,zero,cdf0 <__subdf3+0x6c0>
    cd74:	1c48b03a 	or	r4,r3,r17
    cd78:	20005a26 	beq	r4,zero,cee4 <__subdf3+0x7b4>
    cd7c:	0084303a 	nor	r2,zero,r2
    cd80:	1000561e 	bne	r2,zero,cedc <__subdf3+0x7ac>
    cd84:	89a3883a 	add	r17,r17,r6
    cd88:	1945883a 	add	r2,r3,r5
    cd8c:	898d803a 	cmpltu	r6,r17,r6
    cd90:	3087883a 	add	r3,r6,r2
    cd94:	4821883a 	mov	r16,r9
    cd98:	003f0506 	br	c9b0 <_gp+0xffff2fd0>
    cd9c:	10002b1e 	bne	r2,zero,ce4c <__subdf3+0x71c>
    cda0:	2984b03a 	or	r2,r5,r6
    cda4:	10008026 	beq	r2,zero,cfa8 <__subdf3+0x878>
    cda8:	2807883a 	mov	r3,r5
    cdac:	3023883a 	mov	r17,r6
    cdb0:	3825883a 	mov	r18,r7
    cdb4:	0401ffc4 	movi	r16,2047
    cdb8:	003e7e06 	br	c7b4 <_gp+0xffff2dd4>
    cdbc:	3809883a 	mov	r4,r7
    cdc0:	0011883a 	mov	r8,zero
    cdc4:	0005883a 	mov	r2,zero
    cdc8:	003ee306 	br	c958 <_gp+0xffff2f78>
    cdcc:	1c62b03a 	or	r17,r3,r17
    cdd0:	8822c03a 	cmpne	r17,r17,zero
    cdd4:	0005883a 	mov	r2,zero
    cdd8:	003f8906 	br	cc00 <_gp+0xffff3220>
    cddc:	3809883a 	mov	r4,r7
    cde0:	4821883a 	mov	r16,r9
    cde4:	0011883a 	mov	r8,zero
    cde8:	0005883a 	mov	r2,zero
    cdec:	003eda06 	br	c958 <_gp+0xffff2f78>
    cdf0:	0101ffc4 	movi	r4,2047
    cdf4:	49003b26 	beq	r9,r4,cee4 <__subdf3+0x7b4>
    cdf8:	0085c83a 	sub	r2,zero,r2
    cdfc:	18c02034 	orhi	r3,r3,128
    ce00:	01000e04 	movi	r4,56
    ce04:	20806e16 	blt	r4,r2,cfc0 <__subdf3+0x890>
    ce08:	010007c4 	movi	r4,31
    ce0c:	20807716 	blt	r4,r2,cfec <__subdf3+0x8bc>
    ce10:	01000804 	movi	r4,32
    ce14:	2089c83a 	sub	r4,r4,r2
    ce18:	1914983a 	sll	r10,r3,r4
    ce1c:	8890d83a 	srl	r8,r17,r2
    ce20:	8908983a 	sll	r4,r17,r4
    ce24:	1884d83a 	srl	r2,r3,r2
    ce28:	5222b03a 	or	r17,r10,r8
    ce2c:	2006c03a 	cmpne	r3,r4,zero
    ce30:	88e2b03a 	or	r17,r17,r3
    ce34:	89a3883a 	add	r17,r17,r6
    ce38:	1145883a 	add	r2,r2,r5
    ce3c:	898d803a 	cmpltu	r6,r17,r6
    ce40:	3087883a 	add	r3,r6,r2
    ce44:	4821883a 	mov	r16,r9
    ce48:	003ed906 	br	c9b0 <_gp+0xffff2fd0>
    ce4c:	2984b03a 	or	r2,r5,r6
    ce50:	10004226 	beq	r2,zero,cf5c <__subdf3+0x82c>
    ce54:	1808d0fa 	srli	r4,r3,3
    ce58:	8822d0fa 	srli	r17,r17,3
    ce5c:	1806977a 	slli	r3,r3,29
    ce60:	2080022c 	andhi	r2,r4,8
    ce64:	1c62b03a 	or	r17,r3,r17
    ce68:	10000826 	beq	r2,zero,ce8c <__subdf3+0x75c>
    ce6c:	2812d0fa 	srli	r9,r5,3
    ce70:	4880022c 	andhi	r2,r9,8
    ce74:	1000051e 	bne	r2,zero,ce8c <__subdf3+0x75c>
    ce78:	300cd0fa 	srli	r6,r6,3
    ce7c:	2804977a 	slli	r2,r5,29
    ce80:	4809883a 	mov	r4,r9
    ce84:	3825883a 	mov	r18,r7
    ce88:	11a2b03a 	or	r17,r2,r6
    ce8c:	8806d77a 	srli	r3,r17,29
    ce90:	200890fa 	slli	r4,r4,3
    ce94:	882290fa 	slli	r17,r17,3
    ce98:	0401ffc4 	movi	r16,2047
    ce9c:	1906b03a 	or	r3,r3,r4
    cea0:	003e4406 	br	c7b4 <_gp+0xffff2dd4>
    cea4:	2984b03a 	or	r2,r5,r6
    cea8:	103e4226 	beq	r2,zero,c7b4 <_gp+0xffff2dd4>
    ceac:	8989c83a 	sub	r4,r17,r6
    ceb0:	8911803a 	cmpltu	r8,r17,r4
    ceb4:	1945c83a 	sub	r2,r3,r5
    ceb8:	1205c83a 	sub	r2,r2,r8
    cebc:	1200202c 	andhi	r8,r2,128
    cec0:	403e9a26 	beq	r8,zero,c92c <_gp+0xffff2f4c>
    cec4:	3463c83a 	sub	r17,r6,r17
    cec8:	28c5c83a 	sub	r2,r5,r3
    cecc:	344d803a 	cmpltu	r6,r6,r17
    ced0:	1187c83a 	sub	r3,r2,r6
    ced4:	3825883a 	mov	r18,r7
    ced8:	003e3606 	br	c7b4 <_gp+0xffff2dd4>
    cedc:	0101ffc4 	movi	r4,2047
    cee0:	493fc71e 	bne	r9,r4,ce00 <_gp+0xffff3420>
    cee4:	2807883a 	mov	r3,r5
    cee8:	3023883a 	mov	r17,r6
    ceec:	4821883a 	mov	r16,r9
    cef0:	003e3006 	br	c7b4 <_gp+0xffff2dd4>
    cef4:	10003626 	beq	r2,zero,cfd0 <__subdf3+0x8a0>
    cef8:	2984b03a 	or	r2,r5,r6
    cefc:	10001726 	beq	r2,zero,cf5c <__subdf3+0x82c>
    cf00:	1808d0fa 	srli	r4,r3,3
    cf04:	8822d0fa 	srli	r17,r17,3
    cf08:	1806977a 	slli	r3,r3,29
    cf0c:	2080022c 	andhi	r2,r4,8
    cf10:	1c62b03a 	or	r17,r3,r17
    cf14:	10000726 	beq	r2,zero,cf34 <__subdf3+0x804>
    cf18:	2812d0fa 	srli	r9,r5,3
    cf1c:	4880022c 	andhi	r2,r9,8
    cf20:	1000041e 	bne	r2,zero,cf34 <__subdf3+0x804>
    cf24:	300cd0fa 	srli	r6,r6,3
    cf28:	2804977a 	slli	r2,r5,29
    cf2c:	4809883a 	mov	r4,r9
    cf30:	11a2b03a 	or	r17,r2,r6
    cf34:	8806d77a 	srli	r3,r17,29
    cf38:	200890fa 	slli	r4,r4,3
    cf3c:	882290fa 	slli	r17,r17,3
    cf40:	3825883a 	mov	r18,r7
    cf44:	1906b03a 	or	r3,r3,r4
    cf48:	0401ffc4 	movi	r16,2047
    cf4c:	003e1906 	br	c7b4 <_gp+0xffff2dd4>
    cf50:	000b883a 	mov	r5,zero
    cf54:	0005883a 	mov	r2,zero
    cf58:	003e2e06 	br	c814 <_gp+0xffff2e34>
    cf5c:	0401ffc4 	movi	r16,2047
    cf60:	003e1406 	br	c7b4 <_gp+0xffff2dd4>
    cf64:	0005883a 	mov	r2,zero
    cf68:	003f7506 	br	cd40 <_gp+0xffff3360>
    cf6c:	0005883a 	mov	r2,zero
    cf70:	0009883a 	mov	r4,zero
    cf74:	003e7806 	br	c958 <_gp+0xffff2f78>
    cf78:	123ff804 	addi	r8,r2,-32
    cf7c:	01000804 	movi	r4,32
    cf80:	1a10d83a 	srl	r8,r3,r8
    cf84:	11002526 	beq	r2,r4,d01c <__subdf3+0x8ec>
    cf88:	01001004 	movi	r4,64
    cf8c:	2085c83a 	sub	r2,r4,r2
    cf90:	1884983a 	sll	r2,r3,r2
    cf94:	1444b03a 	or	r2,r2,r17
    cf98:	1004c03a 	cmpne	r2,r2,zero
    cf9c:	40a2b03a 	or	r17,r8,r2
    cfa0:	0005883a 	mov	r2,zero
    cfa4:	003f1606 	br	cc00 <_gp+0xffff3220>
    cfa8:	02000434 	movhi	r8,16
    cfac:	0009883a 	mov	r4,zero
    cfb0:	423fffc4 	addi	r8,r8,-1
    cfb4:	00bfffc4 	movi	r2,-1
    cfb8:	0401ffc4 	movi	r16,2047
    cfbc:	003e6606 	br	c958 <_gp+0xffff2f78>
    cfc0:	1c62b03a 	or	r17,r3,r17
    cfc4:	8822c03a 	cmpne	r17,r17,zero
    cfc8:	0005883a 	mov	r2,zero
    cfcc:	003f9906 	br	ce34 <_gp+0xffff3454>
    cfd0:	2807883a 	mov	r3,r5
    cfd4:	3023883a 	mov	r17,r6
    cfd8:	0401ffc4 	movi	r16,2047
    cfdc:	003df506 	br	c7b4 <_gp+0xffff2dd4>
    cfe0:	2807883a 	mov	r3,r5
    cfe4:	3023883a 	mov	r17,r6
    cfe8:	003df206 	br	c7b4 <_gp+0xffff2dd4>
    cfec:	123ff804 	addi	r8,r2,-32
    cff0:	01000804 	movi	r4,32
    cff4:	1a10d83a 	srl	r8,r3,r8
    cff8:	11000a26 	beq	r2,r4,d024 <__subdf3+0x8f4>
    cffc:	01001004 	movi	r4,64
    d000:	2085c83a 	sub	r2,r4,r2
    d004:	1884983a 	sll	r2,r3,r2
    d008:	1444b03a 	or	r2,r2,r17
    d00c:	1004c03a 	cmpne	r2,r2,zero
    d010:	40a2b03a 	or	r17,r8,r2
    d014:	0005883a 	mov	r2,zero
    d018:	003f8606 	br	ce34 <_gp+0xffff3454>
    d01c:	0005883a 	mov	r2,zero
    d020:	003fdc06 	br	cf94 <_gp+0xffff35b4>
    d024:	0005883a 	mov	r2,zero
    d028:	003ff706 	br	d008 <_gp+0xffff3628>

0000d02c <__fixdfsi>:
    d02c:	280cd53a 	srli	r6,r5,20
    d030:	00c00434 	movhi	r3,16
    d034:	18ffffc4 	addi	r3,r3,-1
    d038:	3181ffcc 	andi	r6,r6,2047
    d03c:	01c0ff84 	movi	r7,1022
    d040:	28c6703a 	and	r3,r5,r3
    d044:	280ad7fa 	srli	r5,r5,31
    d048:	3980120e 	bge	r7,r6,d094 <__fixdfsi+0x68>
    d04c:	00810744 	movi	r2,1053
    d050:	11800c16 	blt	r2,r6,d084 <__fixdfsi+0x58>
    d054:	00810cc4 	movi	r2,1075
    d058:	1185c83a 	sub	r2,r2,r6
    d05c:	01c007c4 	movi	r7,31
    d060:	18c00434 	orhi	r3,r3,16
    d064:	38800d16 	blt	r7,r2,d09c <__fixdfsi+0x70>
    d068:	31befb44 	addi	r6,r6,-1043
    d06c:	2084d83a 	srl	r2,r4,r2
    d070:	1986983a 	sll	r3,r3,r6
    d074:	1884b03a 	or	r2,r3,r2
    d078:	28000726 	beq	r5,zero,d098 <__fixdfsi+0x6c>
    d07c:	0085c83a 	sub	r2,zero,r2
    d080:	f800283a 	ret
    d084:	00a00034 	movhi	r2,32768
    d088:	10bfffc4 	addi	r2,r2,-1
    d08c:	2885883a 	add	r2,r5,r2
    d090:	f800283a 	ret
    d094:	0005883a 	mov	r2,zero
    d098:	f800283a 	ret
    d09c:	008104c4 	movi	r2,1043
    d0a0:	1185c83a 	sub	r2,r2,r6
    d0a4:	1884d83a 	srl	r2,r3,r2
    d0a8:	003ff306 	br	d078 <_gp+0xffff3698>

0000d0ac <__floatsidf>:
    d0ac:	defffd04 	addi	sp,sp,-12
    d0b0:	dfc00215 	stw	ra,8(sp)
    d0b4:	dc400115 	stw	r17,4(sp)
    d0b8:	dc000015 	stw	r16,0(sp)
    d0bc:	20002b26 	beq	r4,zero,d16c <__floatsidf+0xc0>
    d0c0:	2023883a 	mov	r17,r4
    d0c4:	2020d7fa 	srli	r16,r4,31
    d0c8:	20002d16 	blt	r4,zero,d180 <__floatsidf+0xd4>
    d0cc:	8809883a 	mov	r4,r17
    d0d0:	000d2300 	call	d230 <__clzsi2>
    d0d4:	01410784 	movi	r5,1054
    d0d8:	288bc83a 	sub	r5,r5,r2
    d0dc:	01010cc4 	movi	r4,1075
    d0e0:	2149c83a 	sub	r4,r4,r5
    d0e4:	00c007c4 	movi	r3,31
    d0e8:	1900160e 	bge	r3,r4,d144 <__floatsidf+0x98>
    d0ec:	00c104c4 	movi	r3,1043
    d0f0:	1947c83a 	sub	r3,r3,r5
    d0f4:	88c6983a 	sll	r3,r17,r3
    d0f8:	00800434 	movhi	r2,16
    d0fc:	10bfffc4 	addi	r2,r2,-1
    d100:	1886703a 	and	r3,r3,r2
    d104:	2941ffcc 	andi	r5,r5,2047
    d108:	800d883a 	mov	r6,r16
    d10c:	0005883a 	mov	r2,zero
    d110:	280a953a 	slli	r5,r5,20
    d114:	31803fcc 	andi	r6,r6,255
    d118:	01000434 	movhi	r4,16
    d11c:	300c97fa 	slli	r6,r6,31
    d120:	213fffc4 	addi	r4,r4,-1
    d124:	1906703a 	and	r3,r3,r4
    d128:	1946b03a 	or	r3,r3,r5
    d12c:	1986b03a 	or	r3,r3,r6
    d130:	dfc00217 	ldw	ra,8(sp)
    d134:	dc400117 	ldw	r17,4(sp)
    d138:	dc000017 	ldw	r16,0(sp)
    d13c:	dec00304 	addi	sp,sp,12
    d140:	f800283a 	ret
    d144:	00c002c4 	movi	r3,11
    d148:	1887c83a 	sub	r3,r3,r2
    d14c:	88c6d83a 	srl	r3,r17,r3
    d150:	8904983a 	sll	r2,r17,r4
    d154:	01000434 	movhi	r4,16
    d158:	213fffc4 	addi	r4,r4,-1
    d15c:	2941ffcc 	andi	r5,r5,2047
    d160:	1906703a 	and	r3,r3,r4
    d164:	800d883a 	mov	r6,r16
    d168:	003fe906 	br	d110 <_gp+0xffff3730>
    d16c:	000d883a 	mov	r6,zero
    d170:	000b883a 	mov	r5,zero
    d174:	0007883a 	mov	r3,zero
    d178:	0005883a 	mov	r2,zero
    d17c:	003fe406 	br	d110 <_gp+0xffff3730>
    d180:	0123c83a 	sub	r17,zero,r4
    d184:	003fd106 	br	d0cc <_gp+0xffff36ec>

0000d188 <__floatunsidf>:
    d188:	defffe04 	addi	sp,sp,-8
    d18c:	dc000015 	stw	r16,0(sp)
    d190:	dfc00115 	stw	ra,4(sp)
    d194:	2021883a 	mov	r16,r4
    d198:	20002226 	beq	r4,zero,d224 <__floatunsidf+0x9c>
    d19c:	000d2300 	call	d230 <__clzsi2>
    d1a0:	01010784 	movi	r4,1054
    d1a4:	2089c83a 	sub	r4,r4,r2
    d1a8:	01810cc4 	movi	r6,1075
    d1ac:	310dc83a 	sub	r6,r6,r4
    d1b0:	00c007c4 	movi	r3,31
    d1b4:	1980120e 	bge	r3,r6,d200 <__floatunsidf+0x78>
    d1b8:	00c104c4 	movi	r3,1043
    d1bc:	1907c83a 	sub	r3,r3,r4
    d1c0:	80ca983a 	sll	r5,r16,r3
    d1c4:	00800434 	movhi	r2,16
    d1c8:	10bfffc4 	addi	r2,r2,-1
    d1cc:	2101ffcc 	andi	r4,r4,2047
    d1d0:	0021883a 	mov	r16,zero
    d1d4:	288a703a 	and	r5,r5,r2
    d1d8:	2008953a 	slli	r4,r4,20
    d1dc:	00c00434 	movhi	r3,16
    d1e0:	18ffffc4 	addi	r3,r3,-1
    d1e4:	28c6703a 	and	r3,r5,r3
    d1e8:	8005883a 	mov	r2,r16
    d1ec:	1906b03a 	or	r3,r3,r4
    d1f0:	dfc00117 	ldw	ra,4(sp)
    d1f4:	dc000017 	ldw	r16,0(sp)
    d1f8:	dec00204 	addi	sp,sp,8
    d1fc:	f800283a 	ret
    d200:	00c002c4 	movi	r3,11
    d204:	188bc83a 	sub	r5,r3,r2
    d208:	814ad83a 	srl	r5,r16,r5
    d20c:	00c00434 	movhi	r3,16
    d210:	18ffffc4 	addi	r3,r3,-1
    d214:	81a0983a 	sll	r16,r16,r6
    d218:	2101ffcc 	andi	r4,r4,2047
    d21c:	28ca703a 	and	r5,r5,r3
    d220:	003fed06 	br	d1d8 <_gp+0xffff37f8>
    d224:	0009883a 	mov	r4,zero
    d228:	000b883a 	mov	r5,zero
    d22c:	003fea06 	br	d1d8 <_gp+0xffff37f8>

0000d230 <__clzsi2>:
    d230:	00bfffd4 	movui	r2,65535
    d234:	11000536 	bltu	r2,r4,d24c <__clzsi2+0x1c>
    d238:	00803fc4 	movi	r2,255
    d23c:	11000f36 	bltu	r2,r4,d27c <__clzsi2+0x4c>
    d240:	00800804 	movi	r2,32
    d244:	0007883a 	mov	r3,zero
    d248:	00000506 	br	d260 <__clzsi2+0x30>
    d24c:	00804034 	movhi	r2,256
    d250:	10bfffc4 	addi	r2,r2,-1
    d254:	11000c2e 	bgeu	r2,r4,d288 <__clzsi2+0x58>
    d258:	00800204 	movi	r2,8
    d25c:	00c00604 	movi	r3,24
    d260:	20c8d83a 	srl	r4,r4,r3
    d264:	00c00074 	movhi	r3,1
    d268:	18ff8204 	addi	r3,r3,-504
    d26c:	1909883a 	add	r4,r3,r4
    d270:	20c00003 	ldbu	r3,0(r4)
    d274:	10c5c83a 	sub	r2,r2,r3
    d278:	f800283a 	ret
    d27c:	00800604 	movi	r2,24
    d280:	00c00204 	movi	r3,8
    d284:	003ff606 	br	d260 <_gp+0xffff3880>
    d288:	00800404 	movi	r2,16
    d28c:	1007883a 	mov	r3,r2
    d290:	003ff306 	br	d260 <_gp+0xffff3880>

0000d294 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d294:	defffe04 	addi	sp,sp,-8
    d298:	dfc00115 	stw	ra,4(sp)
    d29c:	df000015 	stw	fp,0(sp)
    d2a0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d2a4:	00800074 	movhi	r2,1
    d2a8:	10868304 	addi	r2,r2,6668
    d2ac:	10800017 	ldw	r2,0(r2)
    d2b0:	10000526 	beq	r2,zero,d2c8 <alt_get_errno+0x34>
    d2b4:	00800074 	movhi	r2,1
    d2b8:	10868304 	addi	r2,r2,6668
    d2bc:	10800017 	ldw	r2,0(r2)
    d2c0:	103ee83a 	callr	r2
    d2c4:	00000206 	br	d2d0 <alt_get_errno+0x3c>
    d2c8:	00800074 	movhi	r2,1
    d2cc:	108d4904 	addi	r2,r2,13604
}
    d2d0:	e037883a 	mov	sp,fp
    d2d4:	dfc00117 	ldw	ra,4(sp)
    d2d8:	df000017 	ldw	fp,0(sp)
    d2dc:	dec00204 	addi	sp,sp,8
    d2e0:	f800283a 	ret

0000d2e4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    d2e4:	defffb04 	addi	sp,sp,-20
    d2e8:	dfc00415 	stw	ra,16(sp)
    d2ec:	df000315 	stw	fp,12(sp)
    d2f0:	df000304 	addi	fp,sp,12
    d2f4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    d2f8:	e0bfff17 	ldw	r2,-4(fp)
    d2fc:	10000616 	blt	r2,zero,d318 <close+0x34>
    d300:	e0bfff17 	ldw	r2,-4(fp)
    d304:	10c00324 	muli	r3,r2,12
    d308:	00800074 	movhi	r2,1
    d30c:	10820004 	addi	r2,r2,2048
    d310:	1885883a 	add	r2,r3,r2
    d314:	00000106 	br	d31c <close+0x38>
    d318:	0005883a 	mov	r2,zero
    d31c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    d320:	e0bffd17 	ldw	r2,-12(fp)
    d324:	10001926 	beq	r2,zero,d38c <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    d328:	e0bffd17 	ldw	r2,-12(fp)
    d32c:	10800017 	ldw	r2,0(r2)
    d330:	10800417 	ldw	r2,16(r2)
    d334:	10000626 	beq	r2,zero,d350 <close+0x6c>
    d338:	e0bffd17 	ldw	r2,-12(fp)
    d33c:	10800017 	ldw	r2,0(r2)
    d340:	10800417 	ldw	r2,16(r2)
    d344:	e13ffd17 	ldw	r4,-12(fp)
    d348:	103ee83a 	callr	r2
    d34c:	00000106 	br	d354 <close+0x70>
    d350:	0005883a 	mov	r2,zero
    d354:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    d358:	e13fff17 	ldw	r4,-4(fp)
    d35c:	000da3c0 	call	da3c <alt_release_fd>
    if (rval < 0)
    d360:	e0bffe17 	ldw	r2,-8(fp)
    d364:	1000070e 	bge	r2,zero,d384 <close+0xa0>
    {
      ALT_ERRNO = -rval;
    d368:	000d2940 	call	d294 <alt_get_errno>
    d36c:	1007883a 	mov	r3,r2
    d370:	e0bffe17 	ldw	r2,-8(fp)
    d374:	0085c83a 	sub	r2,zero,r2
    d378:	18800015 	stw	r2,0(r3)
      return -1;
    d37c:	00bfffc4 	movi	r2,-1
    d380:	00000706 	br	d3a0 <close+0xbc>
    }
    return 0;
    d384:	0005883a 	mov	r2,zero
    d388:	00000506 	br	d3a0 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    d38c:	000d2940 	call	d294 <alt_get_errno>
    d390:	1007883a 	mov	r3,r2
    d394:	00801444 	movi	r2,81
    d398:	18800015 	stw	r2,0(r3)
    return -1;
    d39c:	00bfffc4 	movi	r2,-1
  }
}
    d3a0:	e037883a 	mov	sp,fp
    d3a4:	dfc00117 	ldw	ra,4(sp)
    d3a8:	df000017 	ldw	fp,0(sp)
    d3ac:	dec00204 	addi	sp,sp,8
    d3b0:	f800283a 	ret

0000d3b4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    d3b4:	defffe04 	addi	sp,sp,-8
    d3b8:	df000115 	stw	fp,4(sp)
    d3bc:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    d3c0:	e03fff15 	stw	zero,-4(fp)
    d3c4:	00000506 	br	d3dc <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
    d3c8:	e0bfff17 	ldw	r2,-4(fp)
    d3cc:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    d3d0:	e0bfff17 	ldw	r2,-4(fp)
    d3d4:	10800804 	addi	r2,r2,32
    d3d8:	e0bfff15 	stw	r2,-4(fp)
    d3dc:	e0bfff17 	ldw	r2,-4(fp)
    d3e0:	10820030 	cmpltui	r2,r2,2048
    d3e4:	103ff81e 	bne	r2,zero,d3c8 <_gp+0xffff39e8>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    d3e8:	0001883a 	nop
    d3ec:	e037883a 	mov	sp,fp
    d3f0:	df000017 	ldw	fp,0(sp)
    d3f4:	dec00104 	addi	sp,sp,4
    d3f8:	f800283a 	ret

0000d3fc <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    d3fc:	defffc04 	addi	sp,sp,-16
    d400:	df000315 	stw	fp,12(sp)
    d404:	df000304 	addi	fp,sp,12
    d408:	e13ffd15 	stw	r4,-12(fp)
    d40c:	e17ffe15 	stw	r5,-8(fp)
    d410:	e1bfff15 	stw	r6,-4(fp)
  return len;
    d414:	e0bfff17 	ldw	r2,-4(fp)
}
    d418:	e037883a 	mov	sp,fp
    d41c:	df000017 	ldw	fp,0(sp)
    d420:	dec00104 	addi	sp,sp,4
    d424:	f800283a 	ret

0000d428 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d428:	defffe04 	addi	sp,sp,-8
    d42c:	dfc00115 	stw	ra,4(sp)
    d430:	df000015 	stw	fp,0(sp)
    d434:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d438:	00800074 	movhi	r2,1
    d43c:	10868304 	addi	r2,r2,6668
    d440:	10800017 	ldw	r2,0(r2)
    d444:	10000526 	beq	r2,zero,d45c <alt_get_errno+0x34>
    d448:	00800074 	movhi	r2,1
    d44c:	10868304 	addi	r2,r2,6668
    d450:	10800017 	ldw	r2,0(r2)
    d454:	103ee83a 	callr	r2
    d458:	00000206 	br	d464 <alt_get_errno+0x3c>
    d45c:	00800074 	movhi	r2,1
    d460:	108d4904 	addi	r2,r2,13604
}
    d464:	e037883a 	mov	sp,fp
    d468:	dfc00117 	ldw	ra,4(sp)
    d46c:	df000017 	ldw	fp,0(sp)
    d470:	dec00204 	addi	sp,sp,8
    d474:	f800283a 	ret

0000d478 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    d478:	defffb04 	addi	sp,sp,-20
    d47c:	dfc00415 	stw	ra,16(sp)
    d480:	df000315 	stw	fp,12(sp)
    d484:	df000304 	addi	fp,sp,12
    d488:	e13ffe15 	stw	r4,-8(fp)
    d48c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d490:	e0bffe17 	ldw	r2,-8(fp)
    d494:	10000616 	blt	r2,zero,d4b0 <fstat+0x38>
    d498:	e0bffe17 	ldw	r2,-8(fp)
    d49c:	10c00324 	muli	r3,r2,12
    d4a0:	00800074 	movhi	r2,1
    d4a4:	10820004 	addi	r2,r2,2048
    d4a8:	1885883a 	add	r2,r3,r2
    d4ac:	00000106 	br	d4b4 <fstat+0x3c>
    d4b0:	0005883a 	mov	r2,zero
    d4b4:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    d4b8:	e0bffd17 	ldw	r2,-12(fp)
    d4bc:	10001026 	beq	r2,zero,d500 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    d4c0:	e0bffd17 	ldw	r2,-12(fp)
    d4c4:	10800017 	ldw	r2,0(r2)
    d4c8:	10800817 	ldw	r2,32(r2)
    d4cc:	10000726 	beq	r2,zero,d4ec <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
    d4d0:	e0bffd17 	ldw	r2,-12(fp)
    d4d4:	10800017 	ldw	r2,0(r2)
    d4d8:	10800817 	ldw	r2,32(r2)
    d4dc:	e17fff17 	ldw	r5,-4(fp)
    d4e0:	e13ffd17 	ldw	r4,-12(fp)
    d4e4:	103ee83a 	callr	r2
    d4e8:	00000a06 	br	d514 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    d4ec:	e0bfff17 	ldw	r2,-4(fp)
    d4f0:	00c80004 	movi	r3,8192
    d4f4:	10c00115 	stw	r3,4(r2)
      return 0;
    d4f8:	0005883a 	mov	r2,zero
    d4fc:	00000506 	br	d514 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    d500:	000d4280 	call	d428 <alt_get_errno>
    d504:	1007883a 	mov	r3,r2
    d508:	00801444 	movi	r2,81
    d50c:	18800015 	stw	r2,0(r3)
    return -1;
    d510:	00bfffc4 	movi	r2,-1
  }
}
    d514:	e037883a 	mov	sp,fp
    d518:	dfc00117 	ldw	ra,4(sp)
    d51c:	df000017 	ldw	fp,0(sp)
    d520:	dec00204 	addi	sp,sp,8
    d524:	f800283a 	ret

0000d528 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d528:	defffe04 	addi	sp,sp,-8
    d52c:	dfc00115 	stw	ra,4(sp)
    d530:	df000015 	stw	fp,0(sp)
    d534:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d538:	00800074 	movhi	r2,1
    d53c:	10868304 	addi	r2,r2,6668
    d540:	10800017 	ldw	r2,0(r2)
    d544:	10000526 	beq	r2,zero,d55c <alt_get_errno+0x34>
    d548:	00800074 	movhi	r2,1
    d54c:	10868304 	addi	r2,r2,6668
    d550:	10800017 	ldw	r2,0(r2)
    d554:	103ee83a 	callr	r2
    d558:	00000206 	br	d564 <alt_get_errno+0x3c>
    d55c:	00800074 	movhi	r2,1
    d560:	108d4904 	addi	r2,r2,13604
}
    d564:	e037883a 	mov	sp,fp
    d568:	dfc00117 	ldw	ra,4(sp)
    d56c:	df000017 	ldw	fp,0(sp)
    d570:	dec00204 	addi	sp,sp,8
    d574:	f800283a 	ret

0000d578 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    d578:	deffed04 	addi	sp,sp,-76
    d57c:	dfc01215 	stw	ra,72(sp)
    d580:	df001115 	stw	fp,68(sp)
    d584:	df001104 	addi	fp,sp,68
    d588:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d58c:	e0bfff17 	ldw	r2,-4(fp)
    d590:	10000616 	blt	r2,zero,d5ac <isatty+0x34>
    d594:	e0bfff17 	ldw	r2,-4(fp)
    d598:	10c00324 	muli	r3,r2,12
    d59c:	00800074 	movhi	r2,1
    d5a0:	10820004 	addi	r2,r2,2048
    d5a4:	1885883a 	add	r2,r3,r2
    d5a8:	00000106 	br	d5b0 <isatty+0x38>
    d5ac:	0005883a 	mov	r2,zero
    d5b0:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    d5b4:	e0bfef17 	ldw	r2,-68(fp)
    d5b8:	10000e26 	beq	r2,zero,d5f4 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    d5bc:	e0bfef17 	ldw	r2,-68(fp)
    d5c0:	10800017 	ldw	r2,0(r2)
    d5c4:	10800817 	ldw	r2,32(r2)
    d5c8:	1000021e 	bne	r2,zero,d5d4 <isatty+0x5c>
    {
      return 1;
    d5cc:	00800044 	movi	r2,1
    d5d0:	00000d06 	br	d608 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    d5d4:	e0bff004 	addi	r2,fp,-64
    d5d8:	100b883a 	mov	r5,r2
    d5dc:	e13fff17 	ldw	r4,-4(fp)
    d5e0:	000d4780 	call	d478 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    d5e4:	e0bff117 	ldw	r2,-60(fp)
    d5e8:	10880020 	cmpeqi	r2,r2,8192
    d5ec:	10803fcc 	andi	r2,r2,255
    d5f0:	00000506 	br	d608 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    d5f4:	000d5280 	call	d528 <alt_get_errno>
    d5f8:	1007883a 	mov	r3,r2
    d5fc:	00801444 	movi	r2,81
    d600:	18800015 	stw	r2,0(r3)
    return 0;
    d604:	0005883a 	mov	r2,zero
  }
}
    d608:	e037883a 	mov	sp,fp
    d60c:	dfc00117 	ldw	ra,4(sp)
    d610:	df000017 	ldw	fp,0(sp)
    d614:	dec00204 	addi	sp,sp,8
    d618:	f800283a 	ret

0000d61c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    d61c:	defffc04 	addi	sp,sp,-16
    d620:	df000315 	stw	fp,12(sp)
    d624:	df000304 	addi	fp,sp,12
    d628:	e13ffd15 	stw	r4,-12(fp)
    d62c:	e17ffe15 	stw	r5,-8(fp)
    d630:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    d634:	e0fffe17 	ldw	r3,-8(fp)
    d638:	e0bffd17 	ldw	r2,-12(fp)
    d63c:	18800c26 	beq	r3,r2,d670 <alt_load_section+0x54>
  {
    while( to != end )
    d640:	00000806 	br	d664 <alt_load_section+0x48>
    {
      *to++ = *from++;
    d644:	e0bffe17 	ldw	r2,-8(fp)
    d648:	10c00104 	addi	r3,r2,4
    d64c:	e0fffe15 	stw	r3,-8(fp)
    d650:	e0fffd17 	ldw	r3,-12(fp)
    d654:	19000104 	addi	r4,r3,4
    d658:	e13ffd15 	stw	r4,-12(fp)
    d65c:	18c00017 	ldw	r3,0(r3)
    d660:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    d664:	e0fffe17 	ldw	r3,-8(fp)
    d668:	e0bfff17 	ldw	r2,-4(fp)
    d66c:	18bff51e 	bne	r3,r2,d644 <_gp+0xffff3c64>
    {
      *to++ = *from++;
    }
  }
}
    d670:	0001883a 	nop
    d674:	e037883a 	mov	sp,fp
    d678:	df000017 	ldw	fp,0(sp)
    d67c:	dec00104 	addi	sp,sp,4
    d680:	f800283a 	ret

0000d684 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    d684:	defffe04 	addi	sp,sp,-8
    d688:	dfc00115 	stw	ra,4(sp)
    d68c:	df000015 	stw	fp,0(sp)
    d690:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    d694:	01800074 	movhi	r6,1
    d698:	31868804 	addi	r6,r6,6688
    d69c:	01400074 	movhi	r5,1
    d6a0:	297fcd04 	addi	r5,r5,-204
    d6a4:	01000074 	movhi	r4,1
    d6a8:	21068804 	addi	r4,r4,6688
    d6ac:	000d61c0 	call	d61c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    d6b0:	01800034 	movhi	r6,0
    d6b4:	31809104 	addi	r6,r6,580
    d6b8:	01400034 	movhi	r5,0
    d6bc:	29400804 	addi	r5,r5,32
    d6c0:	01000034 	movhi	r4,0
    d6c4:	21000804 	addi	r4,r4,32
    d6c8:	000d61c0 	call	d61c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    d6cc:	01800074 	movhi	r6,1
    d6d0:	31bfcd04 	addi	r6,r6,-204
    d6d4:	01400074 	movhi	r5,1
    d6d8:	297edc04 	addi	r5,r5,-1168
    d6dc:	01000074 	movhi	r4,1
    d6e0:	213edc04 	addi	r4,r4,-1168
    d6e4:	000d61c0 	call	d61c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    d6e8:	000d3b40 	call	d3b4 <alt_dcache_flush_all>
  alt_icache_flush_all();
    d6ec:	000ebd80 	call	ebd8 <alt_icache_flush_all>
}
    d6f0:	0001883a 	nop
    d6f4:	e037883a 	mov	sp,fp
    d6f8:	dfc00117 	ldw	ra,4(sp)
    d6fc:	df000017 	ldw	fp,0(sp)
    d700:	dec00204 	addi	sp,sp,8
    d704:	f800283a 	ret

0000d708 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d708:	defffe04 	addi	sp,sp,-8
    d70c:	dfc00115 	stw	ra,4(sp)
    d710:	df000015 	stw	fp,0(sp)
    d714:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d718:	00800074 	movhi	r2,1
    d71c:	10868304 	addi	r2,r2,6668
    d720:	10800017 	ldw	r2,0(r2)
    d724:	10000526 	beq	r2,zero,d73c <alt_get_errno+0x34>
    d728:	00800074 	movhi	r2,1
    d72c:	10868304 	addi	r2,r2,6668
    d730:	10800017 	ldw	r2,0(r2)
    d734:	103ee83a 	callr	r2
    d738:	00000206 	br	d744 <alt_get_errno+0x3c>
    d73c:	00800074 	movhi	r2,1
    d740:	108d4904 	addi	r2,r2,13604
}
    d744:	e037883a 	mov	sp,fp
    d748:	dfc00117 	ldw	ra,4(sp)
    d74c:	df000017 	ldw	fp,0(sp)
    d750:	dec00204 	addi	sp,sp,8
    d754:	f800283a 	ret

0000d758 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    d758:	defff904 	addi	sp,sp,-28
    d75c:	dfc00615 	stw	ra,24(sp)
    d760:	df000515 	stw	fp,20(sp)
    d764:	df000504 	addi	fp,sp,20
    d768:	e13ffd15 	stw	r4,-12(fp)
    d76c:	e17ffe15 	stw	r5,-8(fp)
    d770:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    d774:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d778:	e0bffd17 	ldw	r2,-12(fp)
    d77c:	10000616 	blt	r2,zero,d798 <lseek+0x40>
    d780:	e0bffd17 	ldw	r2,-12(fp)
    d784:	10c00324 	muli	r3,r2,12
    d788:	00800074 	movhi	r2,1
    d78c:	10820004 	addi	r2,r2,2048
    d790:	1885883a 	add	r2,r3,r2
    d794:	00000106 	br	d79c <lseek+0x44>
    d798:	0005883a 	mov	r2,zero
    d79c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    d7a0:	e0bffc17 	ldw	r2,-16(fp)
    d7a4:	10001026 	beq	r2,zero,d7e8 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    d7a8:	e0bffc17 	ldw	r2,-16(fp)
    d7ac:	10800017 	ldw	r2,0(r2)
    d7b0:	10800717 	ldw	r2,28(r2)
    d7b4:	10000926 	beq	r2,zero,d7dc <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    d7b8:	e0bffc17 	ldw	r2,-16(fp)
    d7bc:	10800017 	ldw	r2,0(r2)
    d7c0:	10800717 	ldw	r2,28(r2)
    d7c4:	e1bfff17 	ldw	r6,-4(fp)
    d7c8:	e17ffe17 	ldw	r5,-8(fp)
    d7cc:	e13ffc17 	ldw	r4,-16(fp)
    d7d0:	103ee83a 	callr	r2
    d7d4:	e0bffb15 	stw	r2,-20(fp)
    d7d8:	00000506 	br	d7f0 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    d7dc:	00bfde84 	movi	r2,-134
    d7e0:	e0bffb15 	stw	r2,-20(fp)
    d7e4:	00000206 	br	d7f0 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
    d7e8:	00bfebc4 	movi	r2,-81
    d7ec:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    d7f0:	e0bffb17 	ldw	r2,-20(fp)
    d7f4:	1000070e 	bge	r2,zero,d814 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
    d7f8:	000d7080 	call	d708 <alt_get_errno>
    d7fc:	1007883a 	mov	r3,r2
    d800:	e0bffb17 	ldw	r2,-20(fp)
    d804:	0085c83a 	sub	r2,zero,r2
    d808:	18800015 	stw	r2,0(r3)
    rc = -1;
    d80c:	00bfffc4 	movi	r2,-1
    d810:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    d814:	e0bffb17 	ldw	r2,-20(fp)
}
    d818:	e037883a 	mov	sp,fp
    d81c:	dfc00117 	ldw	ra,4(sp)
    d820:	df000017 	ldw	fp,0(sp)
    d824:	dec00204 	addi	sp,sp,8
    d828:	f800283a 	ret

0000d82c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    d82c:	defffd04 	addi	sp,sp,-12
    d830:	dfc00215 	stw	ra,8(sp)
    d834:	df000115 	stw	fp,4(sp)
    d838:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    d83c:	0009883a 	mov	r4,zero
    d840:	000dcd00 	call	dcd0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    d844:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    d848:	000dd080 	call	dd08 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    d84c:	01800074 	movhi	r6,1
    d850:	31bfc504 	addi	r6,r6,-236
    d854:	01400074 	movhi	r5,1
    d858:	297fc504 	addi	r5,r5,-236
    d85c:	01000074 	movhi	r4,1
    d860:	213fc504 	addi	r4,r4,-236
    d864:	000efa00 	call	efa0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    d868:	000eb180 	call	eb18 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    d86c:	01000074 	movhi	r4,1
    d870:	213ade04 	addi	r4,r4,-5256
    d874:	000f7dc0 	call	f7dc <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    d878:	d0a6d217 	ldw	r2,-25784(gp)
    d87c:	d0e6d317 	ldw	r3,-25780(gp)
    d880:	d126d417 	ldw	r4,-25776(gp)
    d884:	200d883a 	mov	r6,r4
    d888:	180b883a 	mov	r5,r3
    d88c:	1009883a 	mov	r4,r2
    d890:	00002900 	call	290 <main>
    d894:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    d898:	01000044 	movi	r4,1
    d89c:	000d2e40 	call	d2e4 <close>
  exit (result);
    d8a0:	e13fff17 	ldw	r4,-4(fp)
    d8a4:	000f7f00 	call	f7f0 <exit>

0000d8a8 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    d8a8:	defffe04 	addi	sp,sp,-8
    d8ac:	df000115 	stw	fp,4(sp)
    d8b0:	df000104 	addi	fp,sp,4
    d8b4:	e13fff15 	stw	r4,-4(fp)
}
    d8b8:	0001883a 	nop
    d8bc:	e037883a 	mov	sp,fp
    d8c0:	df000017 	ldw	fp,0(sp)
    d8c4:	dec00104 	addi	sp,sp,4
    d8c8:	f800283a 	ret

0000d8cc <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    d8cc:	defffe04 	addi	sp,sp,-8
    d8d0:	df000115 	stw	fp,4(sp)
    d8d4:	df000104 	addi	fp,sp,4
    d8d8:	e13fff15 	stw	r4,-4(fp)
}
    d8dc:	0001883a 	nop
    d8e0:	e037883a 	mov	sp,fp
    d8e4:	df000017 	ldw	fp,0(sp)
    d8e8:	dec00104 	addi	sp,sp,4
    d8ec:	f800283a 	ret

0000d8f0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d8f0:	defffe04 	addi	sp,sp,-8
    d8f4:	dfc00115 	stw	ra,4(sp)
    d8f8:	df000015 	stw	fp,0(sp)
    d8fc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d900:	00800074 	movhi	r2,1
    d904:	10868304 	addi	r2,r2,6668
    d908:	10800017 	ldw	r2,0(r2)
    d90c:	10000526 	beq	r2,zero,d924 <alt_get_errno+0x34>
    d910:	00800074 	movhi	r2,1
    d914:	10868304 	addi	r2,r2,6668
    d918:	10800017 	ldw	r2,0(r2)
    d91c:	103ee83a 	callr	r2
    d920:	00000206 	br	d92c <alt_get_errno+0x3c>
    d924:	00800074 	movhi	r2,1
    d928:	108d4904 	addi	r2,r2,13604
}
    d92c:	e037883a 	mov	sp,fp
    d930:	dfc00117 	ldw	ra,4(sp)
    d934:	df000017 	ldw	fp,0(sp)
    d938:	dec00204 	addi	sp,sp,8
    d93c:	f800283a 	ret

0000d940 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    d940:	defff904 	addi	sp,sp,-28
    d944:	dfc00615 	stw	ra,24(sp)
    d948:	df000515 	stw	fp,20(sp)
    d94c:	df000504 	addi	fp,sp,20
    d950:	e13ffd15 	stw	r4,-12(fp)
    d954:	e17ffe15 	stw	r5,-8(fp)
    d958:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d95c:	e0bffd17 	ldw	r2,-12(fp)
    d960:	10000616 	blt	r2,zero,d97c <read+0x3c>
    d964:	e0bffd17 	ldw	r2,-12(fp)
    d968:	10c00324 	muli	r3,r2,12
    d96c:	00800074 	movhi	r2,1
    d970:	10820004 	addi	r2,r2,2048
    d974:	1885883a 	add	r2,r3,r2
    d978:	00000106 	br	d980 <read+0x40>
    d97c:	0005883a 	mov	r2,zero
    d980:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    d984:	e0bffb17 	ldw	r2,-20(fp)
    d988:	10002226 	beq	r2,zero,da14 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    d98c:	e0bffb17 	ldw	r2,-20(fp)
    d990:	10800217 	ldw	r2,8(r2)
    d994:	108000cc 	andi	r2,r2,3
    d998:	10800060 	cmpeqi	r2,r2,1
    d99c:	1000181e 	bne	r2,zero,da00 <read+0xc0>
        (fd->dev->read))
    d9a0:	e0bffb17 	ldw	r2,-20(fp)
    d9a4:	10800017 	ldw	r2,0(r2)
    d9a8:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    d9ac:	10001426 	beq	r2,zero,da00 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    d9b0:	e0bffb17 	ldw	r2,-20(fp)
    d9b4:	10800017 	ldw	r2,0(r2)
    d9b8:	10800517 	ldw	r2,20(r2)
    d9bc:	e0ffff17 	ldw	r3,-4(fp)
    d9c0:	180d883a 	mov	r6,r3
    d9c4:	e17ffe17 	ldw	r5,-8(fp)
    d9c8:	e13ffb17 	ldw	r4,-20(fp)
    d9cc:	103ee83a 	callr	r2
    d9d0:	e0bffc15 	stw	r2,-16(fp)
    d9d4:	e0bffc17 	ldw	r2,-16(fp)
    d9d8:	1000070e 	bge	r2,zero,d9f8 <read+0xb8>
        {
          ALT_ERRNO = -rval;
    d9dc:	000d8f00 	call	d8f0 <alt_get_errno>
    d9e0:	1007883a 	mov	r3,r2
    d9e4:	e0bffc17 	ldw	r2,-16(fp)
    d9e8:	0085c83a 	sub	r2,zero,r2
    d9ec:	18800015 	stw	r2,0(r3)
          return -1;
    d9f0:	00bfffc4 	movi	r2,-1
    d9f4:	00000c06 	br	da28 <read+0xe8>
        }
        return rval;
    d9f8:	e0bffc17 	ldw	r2,-16(fp)
    d9fc:	00000a06 	br	da28 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
    da00:	000d8f00 	call	d8f0 <alt_get_errno>
    da04:	1007883a 	mov	r3,r2
    da08:	00800344 	movi	r2,13
    da0c:	18800015 	stw	r2,0(r3)
    da10:	00000406 	br	da24 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    da14:	000d8f00 	call	d8f0 <alt_get_errno>
    da18:	1007883a 	mov	r3,r2
    da1c:	00801444 	movi	r2,81
    da20:	18800015 	stw	r2,0(r3)
  }
  return -1;
    da24:	00bfffc4 	movi	r2,-1
}
    da28:	e037883a 	mov	sp,fp
    da2c:	dfc00117 	ldw	ra,4(sp)
    da30:	df000017 	ldw	fp,0(sp)
    da34:	dec00204 	addi	sp,sp,8
    da38:	f800283a 	ret

0000da3c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    da3c:	defffe04 	addi	sp,sp,-8
    da40:	df000115 	stw	fp,4(sp)
    da44:	df000104 	addi	fp,sp,4
    da48:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    da4c:	e0bfff17 	ldw	r2,-4(fp)
    da50:	108000d0 	cmplti	r2,r2,3
    da54:	10000d1e 	bne	r2,zero,da8c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    da58:	00800074 	movhi	r2,1
    da5c:	10820004 	addi	r2,r2,2048
    da60:	e0ffff17 	ldw	r3,-4(fp)
    da64:	18c00324 	muli	r3,r3,12
    da68:	10c5883a 	add	r2,r2,r3
    da6c:	10800204 	addi	r2,r2,8
    da70:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    da74:	00800074 	movhi	r2,1
    da78:	10820004 	addi	r2,r2,2048
    da7c:	e0ffff17 	ldw	r3,-4(fp)
    da80:	18c00324 	muli	r3,r3,12
    da84:	10c5883a 	add	r2,r2,r3
    da88:	10000015 	stw	zero,0(r2)
  }
}
    da8c:	0001883a 	nop
    da90:	e037883a 	mov	sp,fp
    da94:	df000017 	ldw	fp,0(sp)
    da98:	dec00104 	addi	sp,sp,4
    da9c:	f800283a 	ret

0000daa0 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    daa0:	defff904 	addi	sp,sp,-28
    daa4:	df000615 	stw	fp,24(sp)
    daa8:	df000604 	addi	fp,sp,24
    daac:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    dab0:	0005303a 	rdctl	r2,status
    dab4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    dab8:	e0fffe17 	ldw	r3,-8(fp)
    dabc:	00bfff84 	movi	r2,-2
    dac0:	1884703a 	and	r2,r3,r2
    dac4:	1001703a 	wrctl	status,r2
  
  return context;
    dac8:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    dacc:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    dad0:	d0a00c17 	ldw	r2,-32720(gp)
    dad4:	10c000c4 	addi	r3,r2,3
    dad8:	00bfff04 	movi	r2,-4
    dadc:	1884703a 	and	r2,r3,r2
    dae0:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    dae4:	d0e00c17 	ldw	r3,-32720(gp)
    dae8:	e0bfff17 	ldw	r2,-4(fp)
    daec:	1887883a 	add	r3,r3,r2
    daf0:	008000b4 	movhi	r2,2
    daf4:	10a1a804 	addi	r2,r2,-31072
    daf8:	10c0062e 	bgeu	r2,r3,db14 <sbrk+0x74>
    dafc:	e0bffb17 	ldw	r2,-20(fp)
    db00:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    db04:	e0bffa17 	ldw	r2,-24(fp)
    db08:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    db0c:	00bfffc4 	movi	r2,-1
    db10:	00000b06 	br	db40 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    db14:	d0a00c17 	ldw	r2,-32720(gp)
    db18:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
    db1c:	d0e00c17 	ldw	r3,-32720(gp)
    db20:	e0bfff17 	ldw	r2,-4(fp)
    db24:	1885883a 	add	r2,r3,r2
    db28:	d0a00c15 	stw	r2,-32720(gp)
    db2c:	e0bffb17 	ldw	r2,-20(fp)
    db30:	e0bffc15 	stw	r2,-16(fp)
    db34:	e0bffc17 	ldw	r2,-16(fp)
    db38:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    db3c:	e0bffd17 	ldw	r2,-12(fp)
} 
    db40:	e037883a 	mov	sp,fp
    db44:	df000017 	ldw	fp,0(sp)
    db48:	dec00104 	addi	sp,sp,4
    db4c:	f800283a 	ret

0000db50 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    db50:	defffe04 	addi	sp,sp,-8
    db54:	dfc00115 	stw	ra,4(sp)
    db58:	df000015 	stw	fp,0(sp)
    db5c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    db60:	00800074 	movhi	r2,1
    db64:	10868304 	addi	r2,r2,6668
    db68:	10800017 	ldw	r2,0(r2)
    db6c:	10000526 	beq	r2,zero,db84 <alt_get_errno+0x34>
    db70:	00800074 	movhi	r2,1
    db74:	10868304 	addi	r2,r2,6668
    db78:	10800017 	ldw	r2,0(r2)
    db7c:	103ee83a 	callr	r2
    db80:	00000206 	br	db8c <alt_get_errno+0x3c>
    db84:	00800074 	movhi	r2,1
    db88:	108d4904 	addi	r2,r2,13604
}
    db8c:	e037883a 	mov	sp,fp
    db90:	dfc00117 	ldw	ra,4(sp)
    db94:	df000017 	ldw	fp,0(sp)
    db98:	dec00204 	addi	sp,sp,8
    db9c:	f800283a 	ret

0000dba0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    dba0:	defff904 	addi	sp,sp,-28
    dba4:	dfc00615 	stw	ra,24(sp)
    dba8:	df000515 	stw	fp,20(sp)
    dbac:	df000504 	addi	fp,sp,20
    dbb0:	e13ffd15 	stw	r4,-12(fp)
    dbb4:	e17ffe15 	stw	r5,-8(fp)
    dbb8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    dbbc:	e0bffd17 	ldw	r2,-12(fp)
    dbc0:	10000616 	blt	r2,zero,dbdc <write+0x3c>
    dbc4:	e0bffd17 	ldw	r2,-12(fp)
    dbc8:	10c00324 	muli	r3,r2,12
    dbcc:	00800074 	movhi	r2,1
    dbd0:	10820004 	addi	r2,r2,2048
    dbd4:	1885883a 	add	r2,r3,r2
    dbd8:	00000106 	br	dbe0 <write+0x40>
    dbdc:	0005883a 	mov	r2,zero
    dbe0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    dbe4:	e0bffb17 	ldw	r2,-20(fp)
    dbe8:	10002126 	beq	r2,zero,dc70 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    dbec:	e0bffb17 	ldw	r2,-20(fp)
    dbf0:	10800217 	ldw	r2,8(r2)
    dbf4:	108000cc 	andi	r2,r2,3
    dbf8:	10001826 	beq	r2,zero,dc5c <write+0xbc>
    dbfc:	e0bffb17 	ldw	r2,-20(fp)
    dc00:	10800017 	ldw	r2,0(r2)
    dc04:	10800617 	ldw	r2,24(r2)
    dc08:	10001426 	beq	r2,zero,dc5c <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    dc0c:	e0bffb17 	ldw	r2,-20(fp)
    dc10:	10800017 	ldw	r2,0(r2)
    dc14:	10800617 	ldw	r2,24(r2)
    dc18:	e0ffff17 	ldw	r3,-4(fp)
    dc1c:	180d883a 	mov	r6,r3
    dc20:	e17ffe17 	ldw	r5,-8(fp)
    dc24:	e13ffb17 	ldw	r4,-20(fp)
    dc28:	103ee83a 	callr	r2
    dc2c:	e0bffc15 	stw	r2,-16(fp)
    dc30:	e0bffc17 	ldw	r2,-16(fp)
    dc34:	1000070e 	bge	r2,zero,dc54 <write+0xb4>
      {
        ALT_ERRNO = -rval;
    dc38:	000db500 	call	db50 <alt_get_errno>
    dc3c:	1007883a 	mov	r3,r2
    dc40:	e0bffc17 	ldw	r2,-16(fp)
    dc44:	0085c83a 	sub	r2,zero,r2
    dc48:	18800015 	stw	r2,0(r3)
        return -1;
    dc4c:	00bfffc4 	movi	r2,-1
    dc50:	00000c06 	br	dc84 <write+0xe4>
      }
      return rval;
    dc54:	e0bffc17 	ldw	r2,-16(fp)
    dc58:	00000a06 	br	dc84 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
    dc5c:	000db500 	call	db50 <alt_get_errno>
    dc60:	1007883a 	mov	r3,r2
    dc64:	00800344 	movi	r2,13
    dc68:	18800015 	stw	r2,0(r3)
    dc6c:	00000406 	br	dc80 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    dc70:	000db500 	call	db50 <alt_get_errno>
    dc74:	1007883a 	mov	r3,r2
    dc78:	00801444 	movi	r2,81
    dc7c:	18800015 	stw	r2,0(r3)
  }
  return -1;
    dc80:	00bfffc4 	movi	r2,-1
}
    dc84:	e037883a 	mov	sp,fp
    dc88:	dfc00117 	ldw	ra,4(sp)
    dc8c:	df000017 	ldw	fp,0(sp)
    dc90:	dec00204 	addi	sp,sp,8
    dc94:	f800283a 	ret

0000dc98 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    dc98:	defffd04 	addi	sp,sp,-12
    dc9c:	dfc00215 	stw	ra,8(sp)
    dca0:	df000115 	stw	fp,4(sp)
    dca4:	df000104 	addi	fp,sp,4
    dca8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    dcac:	01400074 	movhi	r5,1
    dcb0:	29468004 	addi	r5,r5,6656
    dcb4:	e13fff17 	ldw	r4,-4(fp)
    dcb8:	000ea740 	call	ea74 <alt_dev_llist_insert>
}
    dcbc:	e037883a 	mov	sp,fp
    dcc0:	dfc00117 	ldw	ra,4(sp)
    dcc4:	df000017 	ldw	fp,0(sp)
    dcc8:	dec00204 	addi	sp,sp,8
    dccc:	f800283a 	ret

0000dcd0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    dcd0:	defffd04 	addi	sp,sp,-12
    dcd4:	dfc00215 	stw	ra,8(sp)
    dcd8:	df000115 	stw	fp,4(sp)
    dcdc:	df000104 	addi	fp,sp,4
    dce0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    dce4:	000f4340 	call	f434 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    dce8:	00800044 	movi	r2,1
    dcec:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    dcf0:	0001883a 	nop
    dcf4:	e037883a 	mov	sp,fp
    dcf8:	dfc00117 	ldw	ra,4(sp)
    dcfc:	df000017 	ldw	fp,0(sp)
    dd00:	dec00204 	addi	sp,sp,8
    dd04:	f800283a 	ret

0000dd08 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    dd08:	defffe04 	addi	sp,sp,-8
    dd0c:	dfc00115 	stw	ra,4(sp)
    dd10:	df000015 	stw	fp,0(sp)
    dd14:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    dd18:	01c0fa04 	movi	r7,1000
    dd1c:	01800044 	movi	r6,1
    dd20:	000b883a 	mov	r5,zero
    dd24:	010000b4 	movhi	r4,2
    dd28:	21000804 	addi	r4,r4,32
    dd2c:	000e8580 	call	e858 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    dd30:	000d883a 	mov	r6,zero
    dd34:	000b883a 	mov	r5,zero
    dd38:	01000074 	movhi	r4,1
    dd3c:	21026a04 	addi	r4,r4,2472
    dd40:	000decc0 	call	decc <altera_avalon_jtag_uart_init>
    dd44:	01000074 	movhi	r4,1
    dd48:	21026004 	addi	r4,r4,2432
    dd4c:	000dc980 	call	dc98 <alt_dev_reg>
}
    dd50:	0001883a 	nop
    dd54:	e037883a 	mov	sp,fp
    dd58:	dfc00117 	ldw	ra,4(sp)
    dd5c:	df000017 	ldw	fp,0(sp)
    dd60:	dec00204 	addi	sp,sp,8
    dd64:	f800283a 	ret

0000dd68 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    dd68:	defffa04 	addi	sp,sp,-24
    dd6c:	dfc00515 	stw	ra,20(sp)
    dd70:	df000415 	stw	fp,16(sp)
    dd74:	df000404 	addi	fp,sp,16
    dd78:	e13ffd15 	stw	r4,-12(fp)
    dd7c:	e17ffe15 	stw	r5,-8(fp)
    dd80:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    dd84:	e0bffd17 	ldw	r2,-12(fp)
    dd88:	10800017 	ldw	r2,0(r2)
    dd8c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    dd90:	e0bffc17 	ldw	r2,-16(fp)
    dd94:	10c00a04 	addi	r3,r2,40
    dd98:	e0bffd17 	ldw	r2,-12(fp)
    dd9c:	10800217 	ldw	r2,8(r2)
    dda0:	100f883a 	mov	r7,r2
    dda4:	e1bfff17 	ldw	r6,-4(fp)
    dda8:	e17ffe17 	ldw	r5,-8(fp)
    ddac:	1809883a 	mov	r4,r3
    ddb0:	000e3a00 	call	e3a0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    ddb4:	e037883a 	mov	sp,fp
    ddb8:	dfc00117 	ldw	ra,4(sp)
    ddbc:	df000017 	ldw	fp,0(sp)
    ddc0:	dec00204 	addi	sp,sp,8
    ddc4:	f800283a 	ret

0000ddc8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    ddc8:	defffa04 	addi	sp,sp,-24
    ddcc:	dfc00515 	stw	ra,20(sp)
    ddd0:	df000415 	stw	fp,16(sp)
    ddd4:	df000404 	addi	fp,sp,16
    ddd8:	e13ffd15 	stw	r4,-12(fp)
    dddc:	e17ffe15 	stw	r5,-8(fp)
    dde0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    dde4:	e0bffd17 	ldw	r2,-12(fp)
    dde8:	10800017 	ldw	r2,0(r2)
    ddec:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    ddf0:	e0bffc17 	ldw	r2,-16(fp)
    ddf4:	10c00a04 	addi	r3,r2,40
    ddf8:	e0bffd17 	ldw	r2,-12(fp)
    ddfc:	10800217 	ldw	r2,8(r2)
    de00:	100f883a 	mov	r7,r2
    de04:	e1bfff17 	ldw	r6,-4(fp)
    de08:	e17ffe17 	ldw	r5,-8(fp)
    de0c:	1809883a 	mov	r4,r3
    de10:	000e5bc0 	call	e5bc <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    de14:	e037883a 	mov	sp,fp
    de18:	dfc00117 	ldw	ra,4(sp)
    de1c:	df000017 	ldw	fp,0(sp)
    de20:	dec00204 	addi	sp,sp,8
    de24:	f800283a 	ret

0000de28 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    de28:	defffc04 	addi	sp,sp,-16
    de2c:	dfc00315 	stw	ra,12(sp)
    de30:	df000215 	stw	fp,8(sp)
    de34:	df000204 	addi	fp,sp,8
    de38:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    de3c:	e0bfff17 	ldw	r2,-4(fp)
    de40:	10800017 	ldw	r2,0(r2)
    de44:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    de48:	e0bffe17 	ldw	r2,-8(fp)
    de4c:	10c00a04 	addi	r3,r2,40
    de50:	e0bfff17 	ldw	r2,-4(fp)
    de54:	10800217 	ldw	r2,8(r2)
    de58:	100b883a 	mov	r5,r2
    de5c:	1809883a 	mov	r4,r3
    de60:	000e2480 	call	e248 <altera_avalon_jtag_uart_close>
}
    de64:	e037883a 	mov	sp,fp
    de68:	dfc00117 	ldw	ra,4(sp)
    de6c:	df000017 	ldw	fp,0(sp)
    de70:	dec00204 	addi	sp,sp,8
    de74:	f800283a 	ret

0000de78 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    de78:	defffa04 	addi	sp,sp,-24
    de7c:	dfc00515 	stw	ra,20(sp)
    de80:	df000415 	stw	fp,16(sp)
    de84:	df000404 	addi	fp,sp,16
    de88:	e13ffd15 	stw	r4,-12(fp)
    de8c:	e17ffe15 	stw	r5,-8(fp)
    de90:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    de94:	e0bffd17 	ldw	r2,-12(fp)
    de98:	10800017 	ldw	r2,0(r2)
    de9c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    dea0:	e0bffc17 	ldw	r2,-16(fp)
    dea4:	10800a04 	addi	r2,r2,40
    dea8:	e1bfff17 	ldw	r6,-4(fp)
    deac:	e17ffe17 	ldw	r5,-8(fp)
    deb0:	1009883a 	mov	r4,r2
    deb4:	000e2b00 	call	e2b0 <altera_avalon_jtag_uart_ioctl>
}
    deb8:	e037883a 	mov	sp,fp
    debc:	dfc00117 	ldw	ra,4(sp)
    dec0:	df000017 	ldw	fp,0(sp)
    dec4:	dec00204 	addi	sp,sp,8
    dec8:	f800283a 	ret

0000decc <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    decc:	defffa04 	addi	sp,sp,-24
    ded0:	dfc00515 	stw	ra,20(sp)
    ded4:	df000415 	stw	fp,16(sp)
    ded8:	df000404 	addi	fp,sp,16
    dedc:	e13ffd15 	stw	r4,-12(fp)
    dee0:	e17ffe15 	stw	r5,-8(fp)
    dee4:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    dee8:	e0bffd17 	ldw	r2,-12(fp)
    deec:	00c00044 	movi	r3,1
    def0:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    def4:	e0bffd17 	ldw	r2,-12(fp)
    def8:	10800017 	ldw	r2,0(r2)
    defc:	10800104 	addi	r2,r2,4
    df00:	1007883a 	mov	r3,r2
    df04:	e0bffd17 	ldw	r2,-12(fp)
    df08:	10800817 	ldw	r2,32(r2)
    df0c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    df10:	e0bffe17 	ldw	r2,-8(fp)
    df14:	e0ffff17 	ldw	r3,-4(fp)
    df18:	d8000015 	stw	zero,0(sp)
    df1c:	e1fffd17 	ldw	r7,-12(fp)
    df20:	01800074 	movhi	r6,1
    df24:	31b7e504 	addi	r6,r6,-8300
    df28:	180b883a 	mov	r5,r3
    df2c:	1009883a 	mov	r4,r2
    df30:	000ec0c0 	call	ec0c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    df34:	e0bffd17 	ldw	r2,-12(fp)
    df38:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    df3c:	e0bffd17 	ldw	r2,-12(fp)
    df40:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    df44:	00800074 	movhi	r2,1
    df48:	108d4e04 	addi	r2,r2,13624
    df4c:	10800017 	ldw	r2,0(r2)
    df50:	e1fffd17 	ldw	r7,-12(fp)
    df54:	01800074 	movhi	r6,1
    df58:	31b86804 	addi	r6,r6,-7776
    df5c:	100b883a 	mov	r5,r2
    df60:	1809883a 	mov	r4,r3
    df64:	000e8e40 	call	e8e4 <alt_alarm_start>
    df68:	1000040e 	bge	r2,zero,df7c <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    df6c:	e0fffd17 	ldw	r3,-12(fp)
    df70:	00a00034 	movhi	r2,32768
    df74:	10bfffc4 	addi	r2,r2,-1
    df78:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    df7c:	0001883a 	nop
    df80:	e037883a 	mov	sp,fp
    df84:	dfc00117 	ldw	ra,4(sp)
    df88:	df000017 	ldw	fp,0(sp)
    df8c:	dec00204 	addi	sp,sp,8
    df90:	f800283a 	ret

0000df94 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    df94:	defff804 	addi	sp,sp,-32
    df98:	df000715 	stw	fp,28(sp)
    df9c:	df000704 	addi	fp,sp,28
    dfa0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    dfa4:	e0bfff17 	ldw	r2,-4(fp)
    dfa8:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
    dfac:	e0bffb17 	ldw	r2,-20(fp)
    dfb0:	10800017 	ldw	r2,0(r2)
    dfb4:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    dfb8:	e0bffc17 	ldw	r2,-16(fp)
    dfbc:	10800104 	addi	r2,r2,4
    dfc0:	10800037 	ldwio	r2,0(r2)
    dfc4:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    dfc8:	e0bffd17 	ldw	r2,-12(fp)
    dfcc:	1080c00c 	andi	r2,r2,768
    dfd0:	10006d26 	beq	r2,zero,e188 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    dfd4:	e0bffd17 	ldw	r2,-12(fp)
    dfd8:	1080400c 	andi	r2,r2,256
    dfdc:	10003526 	beq	r2,zero,e0b4 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    dfe0:	00800074 	movhi	r2,1
    dfe4:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    dfe8:	e0bffb17 	ldw	r2,-20(fp)
    dfec:	10800a17 	ldw	r2,40(r2)
    dff0:	10800044 	addi	r2,r2,1
    dff4:	1081ffcc 	andi	r2,r2,2047
    dff8:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
    dffc:	e0bffb17 	ldw	r2,-20(fp)
    e000:	10c00b17 	ldw	r3,44(r2)
    e004:	e0bffe17 	ldw	r2,-8(fp)
    e008:	18801526 	beq	r3,r2,e060 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    e00c:	e0bffc17 	ldw	r2,-16(fp)
    e010:	10800037 	ldwio	r2,0(r2)
    e014:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    e018:	e0bff917 	ldw	r2,-28(fp)
    e01c:	10a0000c 	andi	r2,r2,32768
    e020:	10001126 	beq	r2,zero,e068 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    e024:	e0bffb17 	ldw	r2,-20(fp)
    e028:	10800a17 	ldw	r2,40(r2)
    e02c:	e0fff917 	ldw	r3,-28(fp)
    e030:	1809883a 	mov	r4,r3
    e034:	e0fffb17 	ldw	r3,-20(fp)
    e038:	1885883a 	add	r2,r3,r2
    e03c:	10800e04 	addi	r2,r2,56
    e040:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    e044:	e0bffb17 	ldw	r2,-20(fp)
    e048:	10800a17 	ldw	r2,40(r2)
    e04c:	10800044 	addi	r2,r2,1
    e050:	10c1ffcc 	andi	r3,r2,2047
    e054:	e0bffb17 	ldw	r2,-20(fp)
    e058:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    e05c:	003fe206 	br	dfe8 <_gp+0xffff4608>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
    e060:	0001883a 	nop
    e064:	00000106 	br	e06c <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
    e068:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    e06c:	e0bff917 	ldw	r2,-28(fp)
    e070:	10bfffec 	andhi	r2,r2,65535
    e074:	10000f26 	beq	r2,zero,e0b4 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    e078:	e0bffb17 	ldw	r2,-20(fp)
    e07c:	10c00817 	ldw	r3,32(r2)
    e080:	00bfff84 	movi	r2,-2
    e084:	1886703a 	and	r3,r3,r2
    e088:	e0bffb17 	ldw	r2,-20(fp)
    e08c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    e090:	e0bffc17 	ldw	r2,-16(fp)
    e094:	10800104 	addi	r2,r2,4
    e098:	1007883a 	mov	r3,r2
    e09c:	e0bffb17 	ldw	r2,-20(fp)
    e0a0:	10800817 	ldw	r2,32(r2)
    e0a4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    e0a8:	e0bffc17 	ldw	r2,-16(fp)
    e0ac:	10800104 	addi	r2,r2,4
    e0b0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    e0b4:	e0bffd17 	ldw	r2,-12(fp)
    e0b8:	1080800c 	andi	r2,r2,512
    e0bc:	103fbe26 	beq	r2,zero,dfb8 <_gp+0xffff45d8>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    e0c0:	e0bffd17 	ldw	r2,-12(fp)
    e0c4:	1004d43a 	srli	r2,r2,16
    e0c8:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    e0cc:	00001406 	br	e120 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    e0d0:	e0bffc17 	ldw	r2,-16(fp)
    e0d4:	e0fffb17 	ldw	r3,-20(fp)
    e0d8:	18c00d17 	ldw	r3,52(r3)
    e0dc:	e13ffb17 	ldw	r4,-20(fp)
    e0e0:	20c7883a 	add	r3,r4,r3
    e0e4:	18c20e04 	addi	r3,r3,2104
    e0e8:	18c00003 	ldbu	r3,0(r3)
    e0ec:	18c03fcc 	andi	r3,r3,255
    e0f0:	18c0201c 	xori	r3,r3,128
    e0f4:	18ffe004 	addi	r3,r3,-128
    e0f8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    e0fc:	e0bffb17 	ldw	r2,-20(fp)
    e100:	10800d17 	ldw	r2,52(r2)
    e104:	10800044 	addi	r2,r2,1
    e108:	10c1ffcc 	andi	r3,r2,2047
    e10c:	e0bffb17 	ldw	r2,-20(fp)
    e110:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    e114:	e0bffa17 	ldw	r2,-24(fp)
    e118:	10bfffc4 	addi	r2,r2,-1
    e11c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    e120:	e0bffa17 	ldw	r2,-24(fp)
    e124:	10000526 	beq	r2,zero,e13c <altera_avalon_jtag_uart_irq+0x1a8>
    e128:	e0bffb17 	ldw	r2,-20(fp)
    e12c:	10c00d17 	ldw	r3,52(r2)
    e130:	e0bffb17 	ldw	r2,-20(fp)
    e134:	10800c17 	ldw	r2,48(r2)
    e138:	18bfe51e 	bne	r3,r2,e0d0 <_gp+0xffff46f0>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    e13c:	e0bffa17 	ldw	r2,-24(fp)
    e140:	103f9d26 	beq	r2,zero,dfb8 <_gp+0xffff45d8>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    e144:	e0bffb17 	ldw	r2,-20(fp)
    e148:	10c00817 	ldw	r3,32(r2)
    e14c:	00bfff44 	movi	r2,-3
    e150:	1886703a 	and	r3,r3,r2
    e154:	e0bffb17 	ldw	r2,-20(fp)
    e158:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    e15c:	e0bffb17 	ldw	r2,-20(fp)
    e160:	10800017 	ldw	r2,0(r2)
    e164:	10800104 	addi	r2,r2,4
    e168:	1007883a 	mov	r3,r2
    e16c:	e0bffb17 	ldw	r2,-20(fp)
    e170:	10800817 	ldw	r2,32(r2)
    e174:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    e178:	e0bffc17 	ldw	r2,-16(fp)
    e17c:	10800104 	addi	r2,r2,4
    e180:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    e184:	003f8c06 	br	dfb8 <_gp+0xffff45d8>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
    e188:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
    e18c:	0001883a 	nop
    e190:	e037883a 	mov	sp,fp
    e194:	df000017 	ldw	fp,0(sp)
    e198:	dec00104 	addi	sp,sp,4
    e19c:	f800283a 	ret

0000e1a0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    e1a0:	defff804 	addi	sp,sp,-32
    e1a4:	df000715 	stw	fp,28(sp)
    e1a8:	df000704 	addi	fp,sp,28
    e1ac:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    e1b0:	e0bffb17 	ldw	r2,-20(fp)
    e1b4:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    e1b8:	e0bff917 	ldw	r2,-28(fp)
    e1bc:	10800017 	ldw	r2,0(r2)
    e1c0:	10800104 	addi	r2,r2,4
    e1c4:	10800037 	ldwio	r2,0(r2)
    e1c8:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    e1cc:	e0bffa17 	ldw	r2,-24(fp)
    e1d0:	1081000c 	andi	r2,r2,1024
    e1d4:	10000b26 	beq	r2,zero,e204 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    e1d8:	e0bff917 	ldw	r2,-28(fp)
    e1dc:	10800017 	ldw	r2,0(r2)
    e1e0:	10800104 	addi	r2,r2,4
    e1e4:	1007883a 	mov	r3,r2
    e1e8:	e0bff917 	ldw	r2,-28(fp)
    e1ec:	10800817 	ldw	r2,32(r2)
    e1f0:	10810014 	ori	r2,r2,1024
    e1f4:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    e1f8:	e0bff917 	ldw	r2,-28(fp)
    e1fc:	10000915 	stw	zero,36(r2)
    e200:	00000a06 	br	e22c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    e204:	e0bff917 	ldw	r2,-28(fp)
    e208:	10c00917 	ldw	r3,36(r2)
    e20c:	00a00034 	movhi	r2,32768
    e210:	10bfff04 	addi	r2,r2,-4
    e214:	10c00536 	bltu	r2,r3,e22c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
    e218:	e0bff917 	ldw	r2,-28(fp)
    e21c:	10800917 	ldw	r2,36(r2)
    e220:	10c00044 	addi	r3,r2,1
    e224:	e0bff917 	ldw	r2,-28(fp)
    e228:	10c00915 	stw	r3,36(r2)
    e22c:	00800074 	movhi	r2,1
    e230:	108d4e04 	addi	r2,r2,13624
    e234:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    e238:	e037883a 	mov	sp,fp
    e23c:	df000017 	ldw	fp,0(sp)
    e240:	dec00104 	addi	sp,sp,4
    e244:	f800283a 	ret

0000e248 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    e248:	defffd04 	addi	sp,sp,-12
    e24c:	df000215 	stw	fp,8(sp)
    e250:	df000204 	addi	fp,sp,8
    e254:	e13ffe15 	stw	r4,-8(fp)
    e258:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    e25c:	00000506 	br	e274 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    e260:	e0bfff17 	ldw	r2,-4(fp)
    e264:	1090000c 	andi	r2,r2,16384
    e268:	10000226 	beq	r2,zero,e274 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    e26c:	00bffd44 	movi	r2,-11
    e270:	00000b06 	br	e2a0 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    e274:	e0bffe17 	ldw	r2,-8(fp)
    e278:	10c00d17 	ldw	r3,52(r2)
    e27c:	e0bffe17 	ldw	r2,-8(fp)
    e280:	10800c17 	ldw	r2,48(r2)
    e284:	18800526 	beq	r3,r2,e29c <altera_avalon_jtag_uart_close+0x54>
    e288:	e0bffe17 	ldw	r2,-8(fp)
    e28c:	10c00917 	ldw	r3,36(r2)
    e290:	e0bffe17 	ldw	r2,-8(fp)
    e294:	10800117 	ldw	r2,4(r2)
    e298:	18bff136 	bltu	r3,r2,e260 <_gp+0xffff4880>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    e29c:	0005883a 	mov	r2,zero
}
    e2a0:	e037883a 	mov	sp,fp
    e2a4:	df000017 	ldw	fp,0(sp)
    e2a8:	dec00104 	addi	sp,sp,4
    e2ac:	f800283a 	ret

0000e2b0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    e2b0:	defffa04 	addi	sp,sp,-24
    e2b4:	df000515 	stw	fp,20(sp)
    e2b8:	df000504 	addi	fp,sp,20
    e2bc:	e13ffd15 	stw	r4,-12(fp)
    e2c0:	e17ffe15 	stw	r5,-8(fp)
    e2c4:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
    e2c8:	00bff9c4 	movi	r2,-25
    e2cc:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
    e2d0:	e0bffe17 	ldw	r2,-8(fp)
    e2d4:	10da8060 	cmpeqi	r3,r2,27137
    e2d8:	1800031e 	bne	r3,zero,e2e8 <altera_avalon_jtag_uart_ioctl+0x38>
    e2dc:	109a80a0 	cmpeqi	r2,r2,27138
    e2e0:	1000181e 	bne	r2,zero,e344 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
    e2e4:	00002906 	br	e38c <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    e2e8:	e0bffd17 	ldw	r2,-12(fp)
    e2ec:	10c00117 	ldw	r3,4(r2)
    e2f0:	00a00034 	movhi	r2,32768
    e2f4:	10bfffc4 	addi	r2,r2,-1
    e2f8:	18802126 	beq	r3,r2,e380 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
    e2fc:	e0bfff17 	ldw	r2,-4(fp)
    e300:	10800017 	ldw	r2,0(r2)
    e304:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    e308:	e0bffc17 	ldw	r2,-16(fp)
    e30c:	10800090 	cmplti	r2,r2,2
    e310:	1000061e 	bne	r2,zero,e32c <altera_avalon_jtag_uart_ioctl+0x7c>
    e314:	e0fffc17 	ldw	r3,-16(fp)
    e318:	00a00034 	movhi	r2,32768
    e31c:	10bfffc4 	addi	r2,r2,-1
    e320:	18800226 	beq	r3,r2,e32c <altera_avalon_jtag_uart_ioctl+0x7c>
    e324:	e0bffc17 	ldw	r2,-16(fp)
    e328:	00000206 	br	e334 <altera_avalon_jtag_uart_ioctl+0x84>
    e32c:	00a00034 	movhi	r2,32768
    e330:	10bfff84 	addi	r2,r2,-2
    e334:	e0fffd17 	ldw	r3,-12(fp)
    e338:	18800115 	stw	r2,4(r3)
      rc = 0;
    e33c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    e340:	00000f06 	br	e380 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    e344:	e0bffd17 	ldw	r2,-12(fp)
    e348:	10c00117 	ldw	r3,4(r2)
    e34c:	00a00034 	movhi	r2,32768
    e350:	10bfffc4 	addi	r2,r2,-1
    e354:	18800c26 	beq	r3,r2,e388 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    e358:	e0bffd17 	ldw	r2,-12(fp)
    e35c:	10c00917 	ldw	r3,36(r2)
    e360:	e0bffd17 	ldw	r2,-12(fp)
    e364:	10800117 	ldw	r2,4(r2)
    e368:	1885803a 	cmpltu	r2,r3,r2
    e36c:	10c03fcc 	andi	r3,r2,255
    e370:	e0bfff17 	ldw	r2,-4(fp)
    e374:	10c00015 	stw	r3,0(r2)
      rc = 0;
    e378:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    e37c:	00000206 	br	e388 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
    e380:	0001883a 	nop
    e384:	00000106 	br	e38c <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
    e388:	0001883a 	nop

  default:
    break;
  }

  return rc;
    e38c:	e0bffb17 	ldw	r2,-20(fp)
}
    e390:	e037883a 	mov	sp,fp
    e394:	df000017 	ldw	fp,0(sp)
    e398:	dec00104 	addi	sp,sp,4
    e39c:	f800283a 	ret

0000e3a0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    e3a0:	defff304 	addi	sp,sp,-52
    e3a4:	dfc00c15 	stw	ra,48(sp)
    e3a8:	df000b15 	stw	fp,44(sp)
    e3ac:	df000b04 	addi	fp,sp,44
    e3b0:	e13ffc15 	stw	r4,-16(fp)
    e3b4:	e17ffd15 	stw	r5,-12(fp)
    e3b8:	e1bffe15 	stw	r6,-8(fp)
    e3bc:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
    e3c0:	e0bffd17 	ldw	r2,-12(fp)
    e3c4:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    e3c8:	00004706 	br	e4e8 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    e3cc:	e0bffc17 	ldw	r2,-16(fp)
    e3d0:	10800a17 	ldw	r2,40(r2)
    e3d4:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    e3d8:	e0bffc17 	ldw	r2,-16(fp)
    e3dc:	10800b17 	ldw	r2,44(r2)
    e3e0:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
    e3e4:	e0fff717 	ldw	r3,-36(fp)
    e3e8:	e0bff817 	ldw	r2,-32(fp)
    e3ec:	18800536 	bltu	r3,r2,e404 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    e3f0:	e0fff717 	ldw	r3,-36(fp)
    e3f4:	e0bff817 	ldw	r2,-32(fp)
    e3f8:	1885c83a 	sub	r2,r3,r2
    e3fc:	e0bff615 	stw	r2,-40(fp)
    e400:	00000406 	br	e414 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    e404:	00c20004 	movi	r3,2048
    e408:	e0bff817 	ldw	r2,-32(fp)
    e40c:	1885c83a 	sub	r2,r3,r2
    e410:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    e414:	e0bff617 	ldw	r2,-40(fp)
    e418:	10001e26 	beq	r2,zero,e494 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
    e41c:	e0fffe17 	ldw	r3,-8(fp)
    e420:	e0bff617 	ldw	r2,-40(fp)
    e424:	1880022e 	bgeu	r3,r2,e430 <altera_avalon_jtag_uart_read+0x90>
        n = space;
    e428:	e0bffe17 	ldw	r2,-8(fp)
    e42c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    e430:	e0bffc17 	ldw	r2,-16(fp)
    e434:	10c00e04 	addi	r3,r2,56
    e438:	e0bff817 	ldw	r2,-32(fp)
    e43c:	1885883a 	add	r2,r3,r2
    e440:	e1bff617 	ldw	r6,-40(fp)
    e444:	100b883a 	mov	r5,r2
    e448:	e13ff517 	ldw	r4,-44(fp)
    e44c:	00009a00 	call	9a0 <memcpy>
      ptr   += n;
    e450:	e0fff517 	ldw	r3,-44(fp)
    e454:	e0bff617 	ldw	r2,-40(fp)
    e458:	1885883a 	add	r2,r3,r2
    e45c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
    e460:	e0fffe17 	ldw	r3,-8(fp)
    e464:	e0bff617 	ldw	r2,-40(fp)
    e468:	1885c83a 	sub	r2,r3,r2
    e46c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    e470:	e0fff817 	ldw	r3,-32(fp)
    e474:	e0bff617 	ldw	r2,-40(fp)
    e478:	1885883a 	add	r2,r3,r2
    e47c:	10c1ffcc 	andi	r3,r2,2047
    e480:	e0bffc17 	ldw	r2,-16(fp)
    e484:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    e488:	e0bffe17 	ldw	r2,-8(fp)
    e48c:	00bfcf16 	blt	zero,r2,e3cc <_gp+0xffff49ec>
    e490:	00000106 	br	e498 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
    e494:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
    e498:	e0fff517 	ldw	r3,-44(fp)
    e49c:	e0bffd17 	ldw	r2,-12(fp)
    e4a0:	1880141e 	bne	r3,r2,e4f4 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    e4a4:	e0bfff17 	ldw	r2,-4(fp)
    e4a8:	1090000c 	andi	r2,r2,16384
    e4ac:	1000131e 	bne	r2,zero,e4fc <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    e4b0:	0001883a 	nop
    e4b4:	e0bffc17 	ldw	r2,-16(fp)
    e4b8:	10c00a17 	ldw	r3,40(r2)
    e4bc:	e0bff717 	ldw	r2,-36(fp)
    e4c0:	1880051e 	bne	r3,r2,e4d8 <altera_avalon_jtag_uart_read+0x138>
    e4c4:	e0bffc17 	ldw	r2,-16(fp)
    e4c8:	10c00917 	ldw	r3,36(r2)
    e4cc:	e0bffc17 	ldw	r2,-16(fp)
    e4d0:	10800117 	ldw	r2,4(r2)
    e4d4:	18bff736 	bltu	r3,r2,e4b4 <_gp+0xffff4ad4>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    e4d8:	e0bffc17 	ldw	r2,-16(fp)
    e4dc:	10c00a17 	ldw	r3,40(r2)
    e4e0:	e0bff717 	ldw	r2,-36(fp)
    e4e4:	18800726 	beq	r3,r2,e504 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    e4e8:	e0bffe17 	ldw	r2,-8(fp)
    e4ec:	00bfb716 	blt	zero,r2,e3cc <_gp+0xffff49ec>
    e4f0:	00000506 	br	e508 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
    e4f4:	0001883a 	nop
    e4f8:	00000306 	br	e508 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
    e4fc:	0001883a 	nop
    e500:	00000106 	br	e508 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
    e504:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    e508:	e0fff517 	ldw	r3,-44(fp)
    e50c:	e0bffd17 	ldw	r2,-12(fp)
    e510:	18801826 	beq	r3,r2,e574 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e514:	0005303a 	rdctl	r2,status
    e518:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e51c:	e0fffb17 	ldw	r3,-20(fp)
    e520:	00bfff84 	movi	r2,-2
    e524:	1884703a 	and	r2,r3,r2
    e528:	1001703a 	wrctl	status,r2
  
  return context;
    e52c:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    e530:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    e534:	e0bffc17 	ldw	r2,-16(fp)
    e538:	10800817 	ldw	r2,32(r2)
    e53c:	10c00054 	ori	r3,r2,1
    e540:	e0bffc17 	ldw	r2,-16(fp)
    e544:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    e548:	e0bffc17 	ldw	r2,-16(fp)
    e54c:	10800017 	ldw	r2,0(r2)
    e550:	10800104 	addi	r2,r2,4
    e554:	1007883a 	mov	r3,r2
    e558:	e0bffc17 	ldw	r2,-16(fp)
    e55c:	10800817 	ldw	r2,32(r2)
    e560:	18800035 	stwio	r2,0(r3)
    e564:	e0bffa17 	ldw	r2,-24(fp)
    e568:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e56c:	e0bff917 	ldw	r2,-28(fp)
    e570:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    e574:	e0fff517 	ldw	r3,-44(fp)
    e578:	e0bffd17 	ldw	r2,-12(fp)
    e57c:	18800426 	beq	r3,r2,e590 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
    e580:	e0fff517 	ldw	r3,-44(fp)
    e584:	e0bffd17 	ldw	r2,-12(fp)
    e588:	1885c83a 	sub	r2,r3,r2
    e58c:	00000606 	br	e5a8 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
    e590:	e0bfff17 	ldw	r2,-4(fp)
    e594:	1090000c 	andi	r2,r2,16384
    e598:	10000226 	beq	r2,zero,e5a4 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    e59c:	00bffd44 	movi	r2,-11
    e5a0:	00000106 	br	e5a8 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
    e5a4:	00bffec4 	movi	r2,-5
}
    e5a8:	e037883a 	mov	sp,fp
    e5ac:	dfc00117 	ldw	ra,4(sp)
    e5b0:	df000017 	ldw	fp,0(sp)
    e5b4:	dec00204 	addi	sp,sp,8
    e5b8:	f800283a 	ret

0000e5bc <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    e5bc:	defff304 	addi	sp,sp,-52
    e5c0:	dfc00c15 	stw	ra,48(sp)
    e5c4:	df000b15 	stw	fp,44(sp)
    e5c8:	df000b04 	addi	fp,sp,44
    e5cc:	e13ffc15 	stw	r4,-16(fp)
    e5d0:	e17ffd15 	stw	r5,-12(fp)
    e5d4:	e1bffe15 	stw	r6,-8(fp)
    e5d8:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    e5dc:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    e5e0:	e0bffd17 	ldw	r2,-12(fp)
    e5e4:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    e5e8:	00003706 	br	e6c8 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    e5ec:	e0bffc17 	ldw	r2,-16(fp)
    e5f0:	10800c17 	ldw	r2,48(r2)
    e5f4:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
    e5f8:	e0bffc17 	ldw	r2,-16(fp)
    e5fc:	10800d17 	ldw	r2,52(r2)
    e600:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
    e604:	e0fff917 	ldw	r3,-28(fp)
    e608:	e0bff517 	ldw	r2,-44(fp)
    e60c:	1880062e 	bgeu	r3,r2,e628 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    e610:	e0fff517 	ldw	r3,-44(fp)
    e614:	e0bff917 	ldw	r2,-28(fp)
    e618:	1885c83a 	sub	r2,r3,r2
    e61c:	10bfffc4 	addi	r2,r2,-1
    e620:	e0bff615 	stw	r2,-40(fp)
    e624:	00000b06 	br	e654 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
    e628:	e0bff517 	ldw	r2,-44(fp)
    e62c:	10000526 	beq	r2,zero,e644 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    e630:	00c20004 	movi	r3,2048
    e634:	e0bff917 	ldw	r2,-28(fp)
    e638:	1885c83a 	sub	r2,r3,r2
    e63c:	e0bff615 	stw	r2,-40(fp)
    e640:	00000406 	br	e654 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    e644:	00c1ffc4 	movi	r3,2047
    e648:	e0bff917 	ldw	r2,-28(fp)
    e64c:	1885c83a 	sub	r2,r3,r2
    e650:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    e654:	e0bff617 	ldw	r2,-40(fp)
    e658:	10001e26 	beq	r2,zero,e6d4 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
    e65c:	e0fffe17 	ldw	r3,-8(fp)
    e660:	e0bff617 	ldw	r2,-40(fp)
    e664:	1880022e 	bgeu	r3,r2,e670 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
    e668:	e0bffe17 	ldw	r2,-8(fp)
    e66c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    e670:	e0bffc17 	ldw	r2,-16(fp)
    e674:	10c20e04 	addi	r3,r2,2104
    e678:	e0bff917 	ldw	r2,-28(fp)
    e67c:	1885883a 	add	r2,r3,r2
    e680:	e1bff617 	ldw	r6,-40(fp)
    e684:	e17ffd17 	ldw	r5,-12(fp)
    e688:	1009883a 	mov	r4,r2
    e68c:	00009a00 	call	9a0 <memcpy>
      ptr   += n;
    e690:	e0fffd17 	ldw	r3,-12(fp)
    e694:	e0bff617 	ldw	r2,-40(fp)
    e698:	1885883a 	add	r2,r3,r2
    e69c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
    e6a0:	e0fffe17 	ldw	r3,-8(fp)
    e6a4:	e0bff617 	ldw	r2,-40(fp)
    e6a8:	1885c83a 	sub	r2,r3,r2
    e6ac:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    e6b0:	e0fff917 	ldw	r3,-28(fp)
    e6b4:	e0bff617 	ldw	r2,-40(fp)
    e6b8:	1885883a 	add	r2,r3,r2
    e6bc:	10c1ffcc 	andi	r3,r2,2047
    e6c0:	e0bffc17 	ldw	r2,-16(fp)
    e6c4:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    e6c8:	e0bffe17 	ldw	r2,-8(fp)
    e6cc:	00bfc716 	blt	zero,r2,e5ec <_gp+0xffff4c0c>
    e6d0:	00000106 	br	e6d8 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
    e6d4:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e6d8:	0005303a 	rdctl	r2,status
    e6dc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e6e0:	e0fffb17 	ldw	r3,-20(fp)
    e6e4:	00bfff84 	movi	r2,-2
    e6e8:	1884703a 	and	r2,r3,r2
    e6ec:	1001703a 	wrctl	status,r2
  
  return context;
    e6f0:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    e6f4:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    e6f8:	e0bffc17 	ldw	r2,-16(fp)
    e6fc:	10800817 	ldw	r2,32(r2)
    e700:	10c00094 	ori	r3,r2,2
    e704:	e0bffc17 	ldw	r2,-16(fp)
    e708:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    e70c:	e0bffc17 	ldw	r2,-16(fp)
    e710:	10800017 	ldw	r2,0(r2)
    e714:	10800104 	addi	r2,r2,4
    e718:	1007883a 	mov	r3,r2
    e71c:	e0bffc17 	ldw	r2,-16(fp)
    e720:	10800817 	ldw	r2,32(r2)
    e724:	18800035 	stwio	r2,0(r3)
    e728:	e0bffa17 	ldw	r2,-24(fp)
    e72c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e730:	e0bff817 	ldw	r2,-32(fp)
    e734:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    e738:	e0bffe17 	ldw	r2,-8(fp)
    e73c:	0080100e 	bge	zero,r2,e780 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
    e740:	e0bfff17 	ldw	r2,-4(fp)
    e744:	1090000c 	andi	r2,r2,16384
    e748:	1000101e 	bne	r2,zero,e78c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    e74c:	0001883a 	nop
    e750:	e0bffc17 	ldw	r2,-16(fp)
    e754:	10c00d17 	ldw	r3,52(r2)
    e758:	e0bff517 	ldw	r2,-44(fp)
    e75c:	1880051e 	bne	r3,r2,e774 <altera_avalon_jtag_uart_write+0x1b8>
    e760:	e0bffc17 	ldw	r2,-16(fp)
    e764:	10c00917 	ldw	r3,36(r2)
    e768:	e0bffc17 	ldw	r2,-16(fp)
    e76c:	10800117 	ldw	r2,4(r2)
    e770:	18bff736 	bltu	r3,r2,e750 <_gp+0xffff4d70>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    e774:	e0bffc17 	ldw	r2,-16(fp)
    e778:	10800917 	ldw	r2,36(r2)
    e77c:	1000051e 	bne	r2,zero,e794 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
    e780:	e0bffe17 	ldw	r2,-8(fp)
    e784:	00bfd016 	blt	zero,r2,e6c8 <_gp+0xffff4ce8>
    e788:	00000306 	br	e798 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
    e78c:	0001883a 	nop
    e790:	00000106 	br	e798 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
    e794:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    e798:	e0fffd17 	ldw	r3,-12(fp)
    e79c:	e0bff717 	ldw	r2,-36(fp)
    e7a0:	18800426 	beq	r3,r2,e7b4 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
    e7a4:	e0fffd17 	ldw	r3,-12(fp)
    e7a8:	e0bff717 	ldw	r2,-36(fp)
    e7ac:	1885c83a 	sub	r2,r3,r2
    e7b0:	00000606 	br	e7cc <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
    e7b4:	e0bfff17 	ldw	r2,-4(fp)
    e7b8:	1090000c 	andi	r2,r2,16384
    e7bc:	10000226 	beq	r2,zero,e7c8 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
    e7c0:	00bffd44 	movi	r2,-11
    e7c4:	00000106 	br	e7cc <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    e7c8:	00bffec4 	movi	r2,-5
}
    e7cc:	e037883a 	mov	sp,fp
    e7d0:	dfc00117 	ldw	ra,4(sp)
    e7d4:	df000017 	ldw	fp,0(sp)
    e7d8:	dec00204 	addi	sp,sp,8
    e7dc:	f800283a 	ret

0000e7e0 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    e7e0:	defffa04 	addi	sp,sp,-24
    e7e4:	dfc00515 	stw	ra,20(sp)
    e7e8:	df000415 	stw	fp,16(sp)
    e7ec:	df000404 	addi	fp,sp,16
    e7f0:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    e7f4:	0007883a 	mov	r3,zero
    e7f8:	e0bfff17 	ldw	r2,-4(fp)
    e7fc:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    e800:	e0bfff17 	ldw	r2,-4(fp)
    e804:	10800104 	addi	r2,r2,4
    e808:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e80c:	0005303a 	rdctl	r2,status
    e810:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e814:	e0fffd17 	ldw	r3,-12(fp)
    e818:	00bfff84 	movi	r2,-2
    e81c:	1884703a 	and	r2,r3,r2
    e820:	1001703a 	wrctl	status,r2
  
  return context;
    e824:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    e828:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
    e82c:	000f32c0 	call	f32c <alt_tick>
    e830:	e0bffc17 	ldw	r2,-16(fp)
    e834:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e838:	e0bffe17 	ldw	r2,-8(fp)
    e83c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    e840:	0001883a 	nop
    e844:	e037883a 	mov	sp,fp
    e848:	dfc00117 	ldw	ra,4(sp)
    e84c:	df000017 	ldw	fp,0(sp)
    e850:	dec00204 	addi	sp,sp,8
    e854:	f800283a 	ret

0000e858 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    e858:	defff804 	addi	sp,sp,-32
    e85c:	dfc00715 	stw	ra,28(sp)
    e860:	df000615 	stw	fp,24(sp)
    e864:	df000604 	addi	fp,sp,24
    e868:	e13ffc15 	stw	r4,-16(fp)
    e86c:	e17ffd15 	stw	r5,-12(fp)
    e870:	e1bffe15 	stw	r6,-8(fp)
    e874:	e1ffff15 	stw	r7,-4(fp)
    e878:	e0bfff17 	ldw	r2,-4(fp)
    e87c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    e880:	00800074 	movhi	r2,1
    e884:	108d4e04 	addi	r2,r2,13624
    e888:	10800017 	ldw	r2,0(r2)
    e88c:	1000041e 	bne	r2,zero,e8a0 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
    e890:	00800074 	movhi	r2,1
    e894:	108d4e04 	addi	r2,r2,13624
    e898:	e0fffb17 	ldw	r3,-20(fp)
    e89c:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    e8a0:	e0bffc17 	ldw	r2,-16(fp)
    e8a4:	10800104 	addi	r2,r2,4
    e8a8:	00c001c4 	movi	r3,7
    e8ac:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    e8b0:	d8000015 	stw	zero,0(sp)
    e8b4:	e1fffc17 	ldw	r7,-16(fp)
    e8b8:	01800074 	movhi	r6,1
    e8bc:	31b9f804 	addi	r6,r6,-6176
    e8c0:	e17ffe17 	ldw	r5,-8(fp)
    e8c4:	e13ffd17 	ldw	r4,-12(fp)
    e8c8:	000ec0c0 	call	ec0c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    e8cc:	0001883a 	nop
    e8d0:	e037883a 	mov	sp,fp
    e8d4:	dfc00117 	ldw	ra,4(sp)
    e8d8:	df000017 	ldw	fp,0(sp)
    e8dc:	dec00204 	addi	sp,sp,8
    e8e0:	f800283a 	ret

0000e8e4 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    e8e4:	defff504 	addi	sp,sp,-44
    e8e8:	df000a15 	stw	fp,40(sp)
    e8ec:	df000a04 	addi	fp,sp,40
    e8f0:	e13ffc15 	stw	r4,-16(fp)
    e8f4:	e17ffd15 	stw	r5,-12(fp)
    e8f8:	e1bffe15 	stw	r6,-8(fp)
    e8fc:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    e900:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    e904:	00800074 	movhi	r2,1
    e908:	108d4e04 	addi	r2,r2,13624
    e90c:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
    e910:	10003f26 	beq	r2,zero,ea10 <alt_alarm_start+0x12c>
  {
    if (alarm)
    e914:	e0bffc17 	ldw	r2,-16(fp)
    e918:	10003b26 	beq	r2,zero,ea08 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
    e91c:	e0bffc17 	ldw	r2,-16(fp)
    e920:	e0fffe17 	ldw	r3,-8(fp)
    e924:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
    e928:	e0bffc17 	ldw	r2,-16(fp)
    e92c:	e0ffff17 	ldw	r3,-4(fp)
    e930:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e934:	0005303a 	rdctl	r2,status
    e938:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e93c:	e0fff917 	ldw	r3,-28(fp)
    e940:	00bfff84 	movi	r2,-2
    e944:	1884703a 	and	r2,r3,r2
    e948:	1001703a 	wrctl	status,r2
  
  return context;
    e94c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
    e950:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    e954:	00800074 	movhi	r2,1
    e958:	108d4f04 	addi	r2,r2,13628
    e95c:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
    e960:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    e964:	e0fffd17 	ldw	r3,-12(fp)
    e968:	e0bff617 	ldw	r2,-40(fp)
    e96c:	1885883a 	add	r2,r3,r2
    e970:	10c00044 	addi	r3,r2,1
    e974:	e0bffc17 	ldw	r2,-16(fp)
    e978:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    e97c:	e0bffc17 	ldw	r2,-16(fp)
    e980:	10c00217 	ldw	r3,8(r2)
    e984:	e0bff617 	ldw	r2,-40(fp)
    e988:	1880042e 	bgeu	r3,r2,e99c <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
    e98c:	e0bffc17 	ldw	r2,-16(fp)
    e990:	00c00044 	movi	r3,1
    e994:	10c00405 	stb	r3,16(r2)
    e998:	00000206 	br	e9a4 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
    e99c:	e0bffc17 	ldw	r2,-16(fp)
    e9a0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    e9a4:	e0fffc17 	ldw	r3,-16(fp)
    e9a8:	00800074 	movhi	r2,1
    e9ac:	10868604 	addi	r2,r2,6680
    e9b0:	e0bffa15 	stw	r2,-24(fp)
    e9b4:	e0fffb15 	stw	r3,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    e9b8:	e0bffb17 	ldw	r2,-20(fp)
    e9bc:	e0fffa17 	ldw	r3,-24(fp)
    e9c0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    e9c4:	e0bffa17 	ldw	r2,-24(fp)
    e9c8:	10c00017 	ldw	r3,0(r2)
    e9cc:	e0bffb17 	ldw	r2,-20(fp)
    e9d0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    e9d4:	e0bffa17 	ldw	r2,-24(fp)
    e9d8:	10800017 	ldw	r2,0(r2)
    e9dc:	e0fffb17 	ldw	r3,-20(fp)
    e9e0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    e9e4:	e0bffa17 	ldw	r2,-24(fp)
    e9e8:	e0fffb17 	ldw	r3,-20(fp)
    e9ec:	10c00015 	stw	r3,0(r2)
    e9f0:	e0bff817 	ldw	r2,-32(fp)
    e9f4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e9f8:	e0bff717 	ldw	r2,-36(fp)
    e9fc:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    ea00:	0005883a 	mov	r2,zero
    ea04:	00000306 	br	ea14 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
    ea08:	00bffa84 	movi	r2,-22
    ea0c:	00000106 	br	ea14 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
    ea10:	00bfde84 	movi	r2,-134
  }
}
    ea14:	e037883a 	mov	sp,fp
    ea18:	df000017 	ldw	fp,0(sp)
    ea1c:	dec00104 	addi	sp,sp,4
    ea20:	f800283a 	ret

0000ea24 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ea24:	defffe04 	addi	sp,sp,-8
    ea28:	dfc00115 	stw	ra,4(sp)
    ea2c:	df000015 	stw	fp,0(sp)
    ea30:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    ea34:	00800074 	movhi	r2,1
    ea38:	10868304 	addi	r2,r2,6668
    ea3c:	10800017 	ldw	r2,0(r2)
    ea40:	10000526 	beq	r2,zero,ea58 <alt_get_errno+0x34>
    ea44:	00800074 	movhi	r2,1
    ea48:	10868304 	addi	r2,r2,6668
    ea4c:	10800017 	ldw	r2,0(r2)
    ea50:	103ee83a 	callr	r2
    ea54:	00000206 	br	ea60 <alt_get_errno+0x3c>
    ea58:	00800074 	movhi	r2,1
    ea5c:	108d4904 	addi	r2,r2,13604
}
    ea60:	e037883a 	mov	sp,fp
    ea64:	dfc00117 	ldw	ra,4(sp)
    ea68:	df000017 	ldw	fp,0(sp)
    ea6c:	dec00204 	addi	sp,sp,8
    ea70:	f800283a 	ret

0000ea74 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    ea74:	defffa04 	addi	sp,sp,-24
    ea78:	dfc00515 	stw	ra,20(sp)
    ea7c:	df000415 	stw	fp,16(sp)
    ea80:	df000404 	addi	fp,sp,16
    ea84:	e13ffe15 	stw	r4,-8(fp)
    ea88:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    ea8c:	e0bffe17 	ldw	r2,-8(fp)
    ea90:	10000326 	beq	r2,zero,eaa0 <alt_dev_llist_insert+0x2c>
    ea94:	e0bffe17 	ldw	r2,-8(fp)
    ea98:	10800217 	ldw	r2,8(r2)
    ea9c:	1000061e 	bne	r2,zero,eab8 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    eaa0:	000ea240 	call	ea24 <alt_get_errno>
    eaa4:	1007883a 	mov	r3,r2
    eaa8:	00800584 	movi	r2,22
    eaac:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    eab0:	00bffa84 	movi	r2,-22
    eab4:	00001306 	br	eb04 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    eab8:	e0bffe17 	ldw	r2,-8(fp)
    eabc:	e0ffff17 	ldw	r3,-4(fp)
    eac0:	e0fffc15 	stw	r3,-16(fp)
    eac4:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    eac8:	e0bffd17 	ldw	r2,-12(fp)
    eacc:	e0fffc17 	ldw	r3,-16(fp)
    ead0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    ead4:	e0bffc17 	ldw	r2,-16(fp)
    ead8:	10c00017 	ldw	r3,0(r2)
    eadc:	e0bffd17 	ldw	r2,-12(fp)
    eae0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    eae4:	e0bffc17 	ldw	r2,-16(fp)
    eae8:	10800017 	ldw	r2,0(r2)
    eaec:	e0fffd17 	ldw	r3,-12(fp)
    eaf0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    eaf4:	e0bffc17 	ldw	r2,-16(fp)
    eaf8:	e0fffd17 	ldw	r3,-12(fp)
    eafc:	10c00015 	stw	r3,0(r2)

  return 0;  
    eb00:	0005883a 	mov	r2,zero
}
    eb04:	e037883a 	mov	sp,fp
    eb08:	dfc00117 	ldw	ra,4(sp)
    eb0c:	df000017 	ldw	fp,0(sp)
    eb10:	dec00204 	addi	sp,sp,8
    eb14:	f800283a 	ret

0000eb18 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    eb18:	defffd04 	addi	sp,sp,-12
    eb1c:	dfc00215 	stw	ra,8(sp)
    eb20:	df000115 	stw	fp,4(sp)
    eb24:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    eb28:	00800074 	movhi	r2,1
    eb2c:	10bedb04 	addi	r2,r2,-1172
    eb30:	e0bfff15 	stw	r2,-4(fp)
    eb34:	00000606 	br	eb50 <_do_ctors+0x38>
        (*ctor) (); 
    eb38:	e0bfff17 	ldw	r2,-4(fp)
    eb3c:	10800017 	ldw	r2,0(r2)
    eb40:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    eb44:	e0bfff17 	ldw	r2,-4(fp)
    eb48:	10bfff04 	addi	r2,r2,-4
    eb4c:	e0bfff15 	stw	r2,-4(fp)
    eb50:	e0ffff17 	ldw	r3,-4(fp)
    eb54:	00800074 	movhi	r2,1
    eb58:	10bedc04 	addi	r2,r2,-1168
    eb5c:	18bff62e 	bgeu	r3,r2,eb38 <_gp+0xffff5158>
        (*ctor) (); 
}
    eb60:	0001883a 	nop
    eb64:	e037883a 	mov	sp,fp
    eb68:	dfc00117 	ldw	ra,4(sp)
    eb6c:	df000017 	ldw	fp,0(sp)
    eb70:	dec00204 	addi	sp,sp,8
    eb74:	f800283a 	ret

0000eb78 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    eb78:	defffd04 	addi	sp,sp,-12
    eb7c:	dfc00215 	stw	ra,8(sp)
    eb80:	df000115 	stw	fp,4(sp)
    eb84:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    eb88:	00800074 	movhi	r2,1
    eb8c:	10bedb04 	addi	r2,r2,-1172
    eb90:	e0bfff15 	stw	r2,-4(fp)
    eb94:	00000606 	br	ebb0 <_do_dtors+0x38>
        (*dtor) (); 
    eb98:	e0bfff17 	ldw	r2,-4(fp)
    eb9c:	10800017 	ldw	r2,0(r2)
    eba0:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    eba4:	e0bfff17 	ldw	r2,-4(fp)
    eba8:	10bfff04 	addi	r2,r2,-4
    ebac:	e0bfff15 	stw	r2,-4(fp)
    ebb0:	e0ffff17 	ldw	r3,-4(fp)
    ebb4:	00800074 	movhi	r2,1
    ebb8:	10bedc04 	addi	r2,r2,-1168
    ebbc:	18bff62e 	bgeu	r3,r2,eb98 <_gp+0xffff51b8>
        (*dtor) (); 
}
    ebc0:	0001883a 	nop
    ebc4:	e037883a 	mov	sp,fp
    ebc8:	dfc00117 	ldw	ra,4(sp)
    ebcc:	df000017 	ldw	fp,0(sp)
    ebd0:	dec00204 	addi	sp,sp,8
    ebd4:	f800283a 	ret

0000ebd8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    ebd8:	defffe04 	addi	sp,sp,-8
    ebdc:	dfc00115 	stw	ra,4(sp)
    ebe0:	df000015 	stw	fp,0(sp)
    ebe4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    ebe8:	01440004 	movi	r5,4096
    ebec:	0009883a 	mov	r4,zero
    ebf0:	000f6b00 	call	f6b0 <alt_icache_flush>
#endif
}
    ebf4:	0001883a 	nop
    ebf8:	e037883a 	mov	sp,fp
    ebfc:	dfc00117 	ldw	ra,4(sp)
    ec00:	df000017 	ldw	fp,0(sp)
    ec04:	dec00204 	addi	sp,sp,8
    ec08:	f800283a 	ret

0000ec0c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    ec0c:	defff904 	addi	sp,sp,-28
    ec10:	dfc00615 	stw	ra,24(sp)
    ec14:	df000515 	stw	fp,20(sp)
    ec18:	df000504 	addi	fp,sp,20
    ec1c:	e13ffc15 	stw	r4,-16(fp)
    ec20:	e17ffd15 	stw	r5,-12(fp)
    ec24:	e1bffe15 	stw	r6,-8(fp)
    ec28:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    ec2c:	e0800217 	ldw	r2,8(fp)
    ec30:	d8800015 	stw	r2,0(sp)
    ec34:	e1ffff17 	ldw	r7,-4(fp)
    ec38:	e1bffe17 	ldw	r6,-8(fp)
    ec3c:	e17ffd17 	ldw	r5,-12(fp)
    ec40:	e13ffc17 	ldw	r4,-16(fp)
    ec44:	000edec0 	call	edec <alt_iic_isr_register>
}  
    ec48:	e037883a 	mov	sp,fp
    ec4c:	dfc00117 	ldw	ra,4(sp)
    ec50:	df000017 	ldw	fp,0(sp)
    ec54:	dec00204 	addi	sp,sp,8
    ec58:	f800283a 	ret

0000ec5c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    ec5c:	defff904 	addi	sp,sp,-28
    ec60:	df000615 	stw	fp,24(sp)
    ec64:	df000604 	addi	fp,sp,24
    ec68:	e13ffe15 	stw	r4,-8(fp)
    ec6c:	e17fff15 	stw	r5,-4(fp)
    ec70:	e0bfff17 	ldw	r2,-4(fp)
    ec74:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ec78:	0005303a 	rdctl	r2,status
    ec7c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ec80:	e0fffb17 	ldw	r3,-20(fp)
    ec84:	00bfff84 	movi	r2,-2
    ec88:	1884703a 	and	r2,r3,r2
    ec8c:	1001703a 	wrctl	status,r2
  
  return context;
    ec90:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    ec94:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
    ec98:	00c00044 	movi	r3,1
    ec9c:	e0bffa17 	ldw	r2,-24(fp)
    eca0:	1884983a 	sll	r2,r3,r2
    eca4:	1007883a 	mov	r3,r2
    eca8:	00800074 	movhi	r2,1
    ecac:	108d4d04 	addi	r2,r2,13620
    ecb0:	10800017 	ldw	r2,0(r2)
    ecb4:	1886b03a 	or	r3,r3,r2
    ecb8:	00800074 	movhi	r2,1
    ecbc:	108d4d04 	addi	r2,r2,13620
    ecc0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    ecc4:	00800074 	movhi	r2,1
    ecc8:	108d4d04 	addi	r2,r2,13620
    eccc:	10800017 	ldw	r2,0(r2)
    ecd0:	100170fa 	wrctl	ienable,r2
    ecd4:	e0bffc17 	ldw	r2,-16(fp)
    ecd8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ecdc:	e0bffd17 	ldw	r2,-12(fp)
    ece0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    ece4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
    ece8:	0001883a 	nop
}
    ecec:	e037883a 	mov	sp,fp
    ecf0:	df000017 	ldw	fp,0(sp)
    ecf4:	dec00104 	addi	sp,sp,4
    ecf8:	f800283a 	ret

0000ecfc <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    ecfc:	defff904 	addi	sp,sp,-28
    ed00:	df000615 	stw	fp,24(sp)
    ed04:	df000604 	addi	fp,sp,24
    ed08:	e13ffe15 	stw	r4,-8(fp)
    ed0c:	e17fff15 	stw	r5,-4(fp)
    ed10:	e0bfff17 	ldw	r2,-4(fp)
    ed14:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ed18:	0005303a 	rdctl	r2,status
    ed1c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ed20:	e0fffb17 	ldw	r3,-20(fp)
    ed24:	00bfff84 	movi	r2,-2
    ed28:	1884703a 	and	r2,r3,r2
    ed2c:	1001703a 	wrctl	status,r2
  
  return context;
    ed30:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    ed34:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
    ed38:	00c00044 	movi	r3,1
    ed3c:	e0bffa17 	ldw	r2,-24(fp)
    ed40:	1884983a 	sll	r2,r3,r2
    ed44:	0084303a 	nor	r2,zero,r2
    ed48:	1007883a 	mov	r3,r2
    ed4c:	00800074 	movhi	r2,1
    ed50:	108d4d04 	addi	r2,r2,13620
    ed54:	10800017 	ldw	r2,0(r2)
    ed58:	1886703a 	and	r3,r3,r2
    ed5c:	00800074 	movhi	r2,1
    ed60:	108d4d04 	addi	r2,r2,13620
    ed64:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    ed68:	00800074 	movhi	r2,1
    ed6c:	108d4d04 	addi	r2,r2,13620
    ed70:	10800017 	ldw	r2,0(r2)
    ed74:	100170fa 	wrctl	ienable,r2
    ed78:	e0bffc17 	ldw	r2,-16(fp)
    ed7c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ed80:	e0bffd17 	ldw	r2,-12(fp)
    ed84:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    ed88:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
    ed8c:	0001883a 	nop
}
    ed90:	e037883a 	mov	sp,fp
    ed94:	df000017 	ldw	fp,0(sp)
    ed98:	dec00104 	addi	sp,sp,4
    ed9c:	f800283a 	ret

0000eda0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    eda0:	defffc04 	addi	sp,sp,-16
    eda4:	df000315 	stw	fp,12(sp)
    eda8:	df000304 	addi	fp,sp,12
    edac:	e13ffe15 	stw	r4,-8(fp)
    edb0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    edb4:	000530fa 	rdctl	r2,ienable
    edb8:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    edbc:	00c00044 	movi	r3,1
    edc0:	e0bfff17 	ldw	r2,-4(fp)
    edc4:	1884983a 	sll	r2,r3,r2
    edc8:	1007883a 	mov	r3,r2
    edcc:	e0bffd17 	ldw	r2,-12(fp)
    edd0:	1884703a 	and	r2,r3,r2
    edd4:	1004c03a 	cmpne	r2,r2,zero
    edd8:	10803fcc 	andi	r2,r2,255
}
    eddc:	e037883a 	mov	sp,fp
    ede0:	df000017 	ldw	fp,0(sp)
    ede4:	dec00104 	addi	sp,sp,4
    ede8:	f800283a 	ret

0000edec <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    edec:	defff504 	addi	sp,sp,-44
    edf0:	dfc00a15 	stw	ra,40(sp)
    edf4:	df000915 	stw	fp,36(sp)
    edf8:	df000904 	addi	fp,sp,36
    edfc:	e13ffc15 	stw	r4,-16(fp)
    ee00:	e17ffd15 	stw	r5,-12(fp)
    ee04:	e1bffe15 	stw	r6,-8(fp)
    ee08:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
    ee0c:	00bffa84 	movi	r2,-22
    ee10:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    ee14:	e0bffd17 	ldw	r2,-12(fp)
    ee18:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    ee1c:	e0bff817 	ldw	r2,-32(fp)
    ee20:	10800808 	cmpgei	r2,r2,32
    ee24:	1000271e 	bne	r2,zero,eec4 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ee28:	0005303a 	rdctl	r2,status
    ee2c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ee30:	e0fffb17 	ldw	r3,-20(fp)
    ee34:	00bfff84 	movi	r2,-2
    ee38:	1884703a 	and	r2,r3,r2
    ee3c:	1001703a 	wrctl	status,r2
  
  return context;
    ee40:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    ee44:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
    ee48:	00800074 	movhi	r2,1
    ee4c:	108d5b04 	addi	r2,r2,13676
    ee50:	e0fff817 	ldw	r3,-32(fp)
    ee54:	180690fa 	slli	r3,r3,3
    ee58:	10c5883a 	add	r2,r2,r3
    ee5c:	e0fffe17 	ldw	r3,-8(fp)
    ee60:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
    ee64:	00800074 	movhi	r2,1
    ee68:	108d5b04 	addi	r2,r2,13676
    ee6c:	e0fff817 	ldw	r3,-32(fp)
    ee70:	180690fa 	slli	r3,r3,3
    ee74:	10c5883a 	add	r2,r2,r3
    ee78:	10800104 	addi	r2,r2,4
    ee7c:	e0ffff17 	ldw	r3,-4(fp)
    ee80:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    ee84:	e0bffe17 	ldw	r2,-8(fp)
    ee88:	10000526 	beq	r2,zero,eea0 <alt_iic_isr_register+0xb4>
    ee8c:	e0bff817 	ldw	r2,-32(fp)
    ee90:	100b883a 	mov	r5,r2
    ee94:	e13ffc17 	ldw	r4,-16(fp)
    ee98:	000ec5c0 	call	ec5c <alt_ic_irq_enable>
    ee9c:	00000406 	br	eeb0 <alt_iic_isr_register+0xc4>
    eea0:	e0bff817 	ldw	r2,-32(fp)
    eea4:	100b883a 	mov	r5,r2
    eea8:	e13ffc17 	ldw	r4,-16(fp)
    eeac:	000ecfc0 	call	ecfc <alt_ic_irq_disable>
    eeb0:	e0bff715 	stw	r2,-36(fp)
    eeb4:	e0bffa17 	ldw	r2,-24(fp)
    eeb8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    eebc:	e0bff917 	ldw	r2,-28(fp)
    eec0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    eec4:	e0bff717 	ldw	r2,-36(fp)
}
    eec8:	e037883a 	mov	sp,fp
    eecc:	dfc00117 	ldw	ra,4(sp)
    eed0:	df000017 	ldw	fp,0(sp)
    eed4:	dec00204 	addi	sp,sp,8
    eed8:	f800283a 	ret

0000eedc <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    eedc:	defff904 	addi	sp,sp,-28
    eee0:	dfc00615 	stw	ra,24(sp)
    eee4:	df000515 	stw	fp,20(sp)
    eee8:	df000504 	addi	fp,sp,20
    eeec:	e13ffc15 	stw	r4,-16(fp)
    eef0:	e17ffd15 	stw	r5,-12(fp)
    eef4:	e1bffe15 	stw	r6,-8(fp)
    eef8:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    eefc:	e1bfff17 	ldw	r6,-4(fp)
    ef00:	e17ffe17 	ldw	r5,-8(fp)
    ef04:	e13ffd17 	ldw	r4,-12(fp)
    ef08:	000f1380 	call	f138 <open>
    ef0c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    ef10:	e0bffb17 	ldw	r2,-20(fp)
    ef14:	10001c16 	blt	r2,zero,ef88 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
    ef18:	00800074 	movhi	r2,1
    ef1c:	10820004 	addi	r2,r2,2048
    ef20:	e0fffb17 	ldw	r3,-20(fp)
    ef24:	18c00324 	muli	r3,r3,12
    ef28:	10c5883a 	add	r2,r2,r3
    ef2c:	10c00017 	ldw	r3,0(r2)
    ef30:	e0bffc17 	ldw	r2,-16(fp)
    ef34:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    ef38:	00800074 	movhi	r2,1
    ef3c:	10820004 	addi	r2,r2,2048
    ef40:	e0fffb17 	ldw	r3,-20(fp)
    ef44:	18c00324 	muli	r3,r3,12
    ef48:	10c5883a 	add	r2,r2,r3
    ef4c:	10800104 	addi	r2,r2,4
    ef50:	10c00017 	ldw	r3,0(r2)
    ef54:	e0bffc17 	ldw	r2,-16(fp)
    ef58:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    ef5c:	00800074 	movhi	r2,1
    ef60:	10820004 	addi	r2,r2,2048
    ef64:	e0fffb17 	ldw	r3,-20(fp)
    ef68:	18c00324 	muli	r3,r3,12
    ef6c:	10c5883a 	add	r2,r2,r3
    ef70:	10800204 	addi	r2,r2,8
    ef74:	10c00017 	ldw	r3,0(r2)
    ef78:	e0bffc17 	ldw	r2,-16(fp)
    ef7c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    ef80:	e13ffb17 	ldw	r4,-20(fp)
    ef84:	000da3c0 	call	da3c <alt_release_fd>
  }
} 
    ef88:	0001883a 	nop
    ef8c:	e037883a 	mov	sp,fp
    ef90:	dfc00117 	ldw	ra,4(sp)
    ef94:	df000017 	ldw	fp,0(sp)
    ef98:	dec00204 	addi	sp,sp,8
    ef9c:	f800283a 	ret

0000efa0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    efa0:	defffb04 	addi	sp,sp,-20
    efa4:	dfc00415 	stw	ra,16(sp)
    efa8:	df000315 	stw	fp,12(sp)
    efac:	df000304 	addi	fp,sp,12
    efb0:	e13ffd15 	stw	r4,-12(fp)
    efb4:	e17ffe15 	stw	r5,-8(fp)
    efb8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    efbc:	01c07fc4 	movi	r7,511
    efc0:	01800044 	movi	r6,1
    efc4:	e17ffd17 	ldw	r5,-12(fp)
    efc8:	01000074 	movhi	r4,1
    efcc:	21020304 	addi	r4,r4,2060
    efd0:	000eedc0 	call	eedc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    efd4:	01c07fc4 	movi	r7,511
    efd8:	000d883a 	mov	r6,zero
    efdc:	e17ffe17 	ldw	r5,-8(fp)
    efe0:	01000074 	movhi	r4,1
    efe4:	21020004 	addi	r4,r4,2048
    efe8:	000eedc0 	call	eedc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    efec:	01c07fc4 	movi	r7,511
    eff0:	01800044 	movi	r6,1
    eff4:	e17fff17 	ldw	r5,-4(fp)
    eff8:	01000074 	movhi	r4,1
    effc:	21020604 	addi	r4,r4,2072
    f000:	000eedc0 	call	eedc <alt_open_fd>
}  
    f004:	0001883a 	nop
    f008:	e037883a 	mov	sp,fp
    f00c:	dfc00117 	ldw	ra,4(sp)
    f010:	df000017 	ldw	fp,0(sp)
    f014:	dec00204 	addi	sp,sp,8
    f018:	f800283a 	ret

0000f01c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f01c:	defffe04 	addi	sp,sp,-8
    f020:	dfc00115 	stw	ra,4(sp)
    f024:	df000015 	stw	fp,0(sp)
    f028:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f02c:	00800074 	movhi	r2,1
    f030:	10868304 	addi	r2,r2,6668
    f034:	10800017 	ldw	r2,0(r2)
    f038:	10000526 	beq	r2,zero,f050 <alt_get_errno+0x34>
    f03c:	00800074 	movhi	r2,1
    f040:	10868304 	addi	r2,r2,6668
    f044:	10800017 	ldw	r2,0(r2)
    f048:	103ee83a 	callr	r2
    f04c:	00000206 	br	f058 <alt_get_errno+0x3c>
    f050:	00800074 	movhi	r2,1
    f054:	108d4904 	addi	r2,r2,13604
}
    f058:	e037883a 	mov	sp,fp
    f05c:	dfc00117 	ldw	ra,4(sp)
    f060:	df000017 	ldw	fp,0(sp)
    f064:	dec00204 	addi	sp,sp,8
    f068:	f800283a 	ret

0000f06c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    f06c:	defffd04 	addi	sp,sp,-12
    f070:	df000215 	stw	fp,8(sp)
    f074:	df000204 	addi	fp,sp,8
    f078:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    f07c:	e0bfff17 	ldw	r2,-4(fp)
    f080:	10800217 	ldw	r2,8(r2)
    f084:	10d00034 	orhi	r3,r2,16384
    f088:	e0bfff17 	ldw	r2,-4(fp)
    f08c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    f090:	e03ffe15 	stw	zero,-8(fp)
    f094:	00001d06 	br	f10c <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    f098:	00800074 	movhi	r2,1
    f09c:	10820004 	addi	r2,r2,2048
    f0a0:	e0fffe17 	ldw	r3,-8(fp)
    f0a4:	18c00324 	muli	r3,r3,12
    f0a8:	10c5883a 	add	r2,r2,r3
    f0ac:	10c00017 	ldw	r3,0(r2)
    f0b0:	e0bfff17 	ldw	r2,-4(fp)
    f0b4:	10800017 	ldw	r2,0(r2)
    f0b8:	1880111e 	bne	r3,r2,f100 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    f0bc:	00800074 	movhi	r2,1
    f0c0:	10820004 	addi	r2,r2,2048
    f0c4:	e0fffe17 	ldw	r3,-8(fp)
    f0c8:	18c00324 	muli	r3,r3,12
    f0cc:	10c5883a 	add	r2,r2,r3
    f0d0:	10800204 	addi	r2,r2,8
    f0d4:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    f0d8:	1000090e 	bge	r2,zero,f100 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    f0dc:	e0bffe17 	ldw	r2,-8(fp)
    f0e0:	10c00324 	muli	r3,r2,12
    f0e4:	00800074 	movhi	r2,1
    f0e8:	10820004 	addi	r2,r2,2048
    f0ec:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    f0f0:	e0bfff17 	ldw	r2,-4(fp)
    f0f4:	18800226 	beq	r3,r2,f100 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    f0f8:	00bffcc4 	movi	r2,-13
    f0fc:	00000a06 	br	f128 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    f100:	e0bffe17 	ldw	r2,-8(fp)
    f104:	10800044 	addi	r2,r2,1
    f108:	e0bffe15 	stw	r2,-8(fp)
    f10c:	00800074 	movhi	r2,1
    f110:	10868204 	addi	r2,r2,6664
    f114:	10800017 	ldw	r2,0(r2)
    f118:	1007883a 	mov	r3,r2
    f11c:	e0bffe17 	ldw	r2,-8(fp)
    f120:	18bfdd2e 	bgeu	r3,r2,f098 <_gp+0xffff56b8>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    f124:	0005883a 	mov	r2,zero
}
    f128:	e037883a 	mov	sp,fp
    f12c:	df000017 	ldw	fp,0(sp)
    f130:	dec00104 	addi	sp,sp,4
    f134:	f800283a 	ret

0000f138 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    f138:	defff604 	addi	sp,sp,-40
    f13c:	dfc00915 	stw	ra,36(sp)
    f140:	df000815 	stw	fp,32(sp)
    f144:	df000804 	addi	fp,sp,32
    f148:	e13ffd15 	stw	r4,-12(fp)
    f14c:	e17ffe15 	stw	r5,-8(fp)
    f150:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    f154:	00bfffc4 	movi	r2,-1
    f158:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    f15c:	00bffb44 	movi	r2,-19
    f160:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    f164:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    f168:	01400074 	movhi	r5,1
    f16c:	29468004 	addi	r5,r5,6656
    f170:	e13ffd17 	ldw	r4,-12(fp)
    f174:	000f4580 	call	f458 <alt_find_dev>
    f178:	e0bff815 	stw	r2,-32(fp)
    f17c:	e0bff817 	ldw	r2,-32(fp)
    f180:	1000051e 	bne	r2,zero,f198 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    f184:	e13ffd17 	ldw	r4,-12(fp)
    f188:	000f4e80 	call	f4e8 <alt_find_file>
    f18c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    f190:	00800044 	movi	r2,1
    f194:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    f198:	e0bff817 	ldw	r2,-32(fp)
    f19c:	10002926 	beq	r2,zero,f244 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
    f1a0:	e13ff817 	ldw	r4,-32(fp)
    f1a4:	000f5fc0 	call	f5fc <alt_get_fd>
    f1a8:	e0bff915 	stw	r2,-28(fp)
    f1ac:	e0bff917 	ldw	r2,-28(fp)
    f1b0:	1000030e 	bge	r2,zero,f1c0 <open+0x88>
    {
      status = index;
    f1b4:	e0bff917 	ldw	r2,-28(fp)
    f1b8:	e0bffa15 	stw	r2,-24(fp)
    f1bc:	00002306 	br	f24c <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
    f1c0:	e0bff917 	ldw	r2,-28(fp)
    f1c4:	10c00324 	muli	r3,r2,12
    f1c8:	00800074 	movhi	r2,1
    f1cc:	10820004 	addi	r2,r2,2048
    f1d0:	1885883a 	add	r2,r3,r2
    f1d4:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    f1d8:	e0fffe17 	ldw	r3,-8(fp)
    f1dc:	00900034 	movhi	r2,16384
    f1e0:	10bfffc4 	addi	r2,r2,-1
    f1e4:	1886703a 	and	r3,r3,r2
    f1e8:	e0bffc17 	ldw	r2,-16(fp)
    f1ec:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    f1f0:	e0bffb17 	ldw	r2,-20(fp)
    f1f4:	1000051e 	bne	r2,zero,f20c <open+0xd4>
    f1f8:	e13ffc17 	ldw	r4,-16(fp)
    f1fc:	000f06c0 	call	f06c <alt_file_locked>
    f200:	e0bffa15 	stw	r2,-24(fp)
    f204:	e0bffa17 	ldw	r2,-24(fp)
    f208:	10001016 	blt	r2,zero,f24c <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    f20c:	e0bff817 	ldw	r2,-32(fp)
    f210:	10800317 	ldw	r2,12(r2)
    f214:	10000826 	beq	r2,zero,f238 <open+0x100>
    f218:	e0bff817 	ldw	r2,-32(fp)
    f21c:	10800317 	ldw	r2,12(r2)
    f220:	e1ffff17 	ldw	r7,-4(fp)
    f224:	e1bffe17 	ldw	r6,-8(fp)
    f228:	e17ffd17 	ldw	r5,-12(fp)
    f22c:	e13ffc17 	ldw	r4,-16(fp)
    f230:	103ee83a 	callr	r2
    f234:	00000106 	br	f23c <open+0x104>
    f238:	0005883a 	mov	r2,zero
    f23c:	e0bffa15 	stw	r2,-24(fp)
    f240:	00000206 	br	f24c <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
    f244:	00bffb44 	movi	r2,-19
    f248:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    f24c:	e0bffa17 	ldw	r2,-24(fp)
    f250:	1000090e 	bge	r2,zero,f278 <open+0x140>
  {
    alt_release_fd (index);  
    f254:	e13ff917 	ldw	r4,-28(fp)
    f258:	000da3c0 	call	da3c <alt_release_fd>
    ALT_ERRNO = -status;
    f25c:	000f01c0 	call	f01c <alt_get_errno>
    f260:	1007883a 	mov	r3,r2
    f264:	e0bffa17 	ldw	r2,-24(fp)
    f268:	0085c83a 	sub	r2,zero,r2
    f26c:	18800015 	stw	r2,0(r3)
    return -1;
    f270:	00bfffc4 	movi	r2,-1
    f274:	00000106 	br	f27c <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
    f278:	e0bff917 	ldw	r2,-28(fp)
}
    f27c:	e037883a 	mov	sp,fp
    f280:	dfc00117 	ldw	ra,4(sp)
    f284:	df000017 	ldw	fp,0(sp)
    f288:	dec00204 	addi	sp,sp,8
    f28c:	f800283a 	ret

0000f290 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    f290:	defffa04 	addi	sp,sp,-24
    f294:	df000515 	stw	fp,20(sp)
    f298:	df000504 	addi	fp,sp,20
    f29c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f2a0:	0005303a 	rdctl	r2,status
    f2a4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f2a8:	e0fffc17 	ldw	r3,-16(fp)
    f2ac:	00bfff84 	movi	r2,-2
    f2b0:	1884703a 	and	r2,r3,r2
    f2b4:	1001703a 	wrctl	status,r2
  
  return context;
    f2b8:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    f2bc:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    f2c0:	e0bfff17 	ldw	r2,-4(fp)
    f2c4:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    f2c8:	e0bffd17 	ldw	r2,-12(fp)
    f2cc:	10800017 	ldw	r2,0(r2)
    f2d0:	e0fffd17 	ldw	r3,-12(fp)
    f2d4:	18c00117 	ldw	r3,4(r3)
    f2d8:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    f2dc:	e0bffd17 	ldw	r2,-12(fp)
    f2e0:	10800117 	ldw	r2,4(r2)
    f2e4:	e0fffd17 	ldw	r3,-12(fp)
    f2e8:	18c00017 	ldw	r3,0(r3)
    f2ec:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    f2f0:	e0bffd17 	ldw	r2,-12(fp)
    f2f4:	e0fffd17 	ldw	r3,-12(fp)
    f2f8:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    f2fc:	e0bffd17 	ldw	r2,-12(fp)
    f300:	e0fffd17 	ldw	r3,-12(fp)
    f304:	10c00015 	stw	r3,0(r2)
    f308:	e0bffb17 	ldw	r2,-20(fp)
    f30c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f310:	e0bffe17 	ldw	r2,-8(fp)
    f314:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    f318:	0001883a 	nop
    f31c:	e037883a 	mov	sp,fp
    f320:	df000017 	ldw	fp,0(sp)
    f324:	dec00104 	addi	sp,sp,4
    f328:	f800283a 	ret

0000f32c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    f32c:	defffb04 	addi	sp,sp,-20
    f330:	dfc00415 	stw	ra,16(sp)
    f334:	df000315 	stw	fp,12(sp)
    f338:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    f33c:	d0a00e17 	ldw	r2,-32712(gp)
    f340:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    f344:	d0a6d717 	ldw	r2,-25764(gp)
    f348:	10800044 	addi	r2,r2,1
    f34c:	d0a6d715 	stw	r2,-25764(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    f350:	00002e06 	br	f40c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    f354:	e0bffd17 	ldw	r2,-12(fp)
    f358:	10800017 	ldw	r2,0(r2)
    f35c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    f360:	e0bffd17 	ldw	r2,-12(fp)
    f364:	10800403 	ldbu	r2,16(r2)
    f368:	10803fcc 	andi	r2,r2,255
    f36c:	10000426 	beq	r2,zero,f380 <alt_tick+0x54>
    f370:	d0a6d717 	ldw	r2,-25764(gp)
    f374:	1000021e 	bne	r2,zero,f380 <alt_tick+0x54>
    {
      alarm->rollover = 0;
    f378:	e0bffd17 	ldw	r2,-12(fp)
    f37c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    f380:	e0bffd17 	ldw	r2,-12(fp)
    f384:	10800217 	ldw	r2,8(r2)
    f388:	d0e6d717 	ldw	r3,-25764(gp)
    f38c:	18801d36 	bltu	r3,r2,f404 <alt_tick+0xd8>
    f390:	e0bffd17 	ldw	r2,-12(fp)
    f394:	10800403 	ldbu	r2,16(r2)
    f398:	10803fcc 	andi	r2,r2,255
    f39c:	1000191e 	bne	r2,zero,f404 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    f3a0:	e0bffd17 	ldw	r2,-12(fp)
    f3a4:	10800317 	ldw	r2,12(r2)
    f3a8:	e0fffd17 	ldw	r3,-12(fp)
    f3ac:	18c00517 	ldw	r3,20(r3)
    f3b0:	1809883a 	mov	r4,r3
    f3b4:	103ee83a 	callr	r2
    f3b8:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    f3bc:	e0bfff17 	ldw	r2,-4(fp)
    f3c0:	1000031e 	bne	r2,zero,f3d0 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    f3c4:	e13ffd17 	ldw	r4,-12(fp)
    f3c8:	000f2900 	call	f290 <alt_alarm_stop>
    f3cc:	00000d06 	br	f404 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    f3d0:	e0bffd17 	ldw	r2,-12(fp)
    f3d4:	10c00217 	ldw	r3,8(r2)
    f3d8:	e0bfff17 	ldw	r2,-4(fp)
    f3dc:	1887883a 	add	r3,r3,r2
    f3e0:	e0bffd17 	ldw	r2,-12(fp)
    f3e4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    f3e8:	e0bffd17 	ldw	r2,-12(fp)
    f3ec:	10c00217 	ldw	r3,8(r2)
    f3f0:	d0a6d717 	ldw	r2,-25764(gp)
    f3f4:	1880032e 	bgeu	r3,r2,f404 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    f3f8:	e0bffd17 	ldw	r2,-12(fp)
    f3fc:	00c00044 	movi	r3,1
    f400:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    f404:	e0bffe17 	ldw	r2,-8(fp)
    f408:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    f40c:	e0fffd17 	ldw	r3,-12(fp)
    f410:	d0a00e04 	addi	r2,gp,-32712
    f414:	18bfcf1e 	bne	r3,r2,f354 <_gp+0xffff5974>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    f418:	0001883a 	nop
}
    f41c:	0001883a 	nop
    f420:	e037883a 	mov	sp,fp
    f424:	dfc00117 	ldw	ra,4(sp)
    f428:	df000017 	ldw	fp,0(sp)
    f42c:	dec00204 	addi	sp,sp,8
    f430:	f800283a 	ret

0000f434 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    f434:	deffff04 	addi	sp,sp,-4
    f438:	df000015 	stw	fp,0(sp)
    f43c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    f440:	000170fa 	wrctl	ienable,zero
}
    f444:	0001883a 	nop
    f448:	e037883a 	mov	sp,fp
    f44c:	df000017 	ldw	fp,0(sp)
    f450:	dec00104 	addi	sp,sp,4
    f454:	f800283a 	ret

0000f458 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    f458:	defffa04 	addi	sp,sp,-24
    f45c:	dfc00515 	stw	ra,20(sp)
    f460:	df000415 	stw	fp,16(sp)
    f464:	df000404 	addi	fp,sp,16
    f468:	e13ffe15 	stw	r4,-8(fp)
    f46c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    f470:	e0bfff17 	ldw	r2,-4(fp)
    f474:	10800017 	ldw	r2,0(r2)
    f478:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    f47c:	e13ffe17 	ldw	r4,-8(fp)
    f480:	0000c480 	call	c48 <strlen>
    f484:	10800044 	addi	r2,r2,1
    f488:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    f48c:	00000d06 	br	f4c4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    f490:	e0bffc17 	ldw	r2,-16(fp)
    f494:	10800217 	ldw	r2,8(r2)
    f498:	e0fffd17 	ldw	r3,-12(fp)
    f49c:	180d883a 	mov	r6,r3
    f4a0:	e17ffe17 	ldw	r5,-8(fp)
    f4a4:	1009883a 	mov	r4,r2
    f4a8:	000f8280 	call	f828 <memcmp>
    f4ac:	1000021e 	bne	r2,zero,f4b8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    f4b0:	e0bffc17 	ldw	r2,-16(fp)
    f4b4:	00000706 	br	f4d4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    f4b8:	e0bffc17 	ldw	r2,-16(fp)
    f4bc:	10800017 	ldw	r2,0(r2)
    f4c0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    f4c4:	e0fffc17 	ldw	r3,-16(fp)
    f4c8:	e0bfff17 	ldw	r2,-4(fp)
    f4cc:	18bff01e 	bne	r3,r2,f490 <_gp+0xffff5ab0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    f4d0:	0005883a 	mov	r2,zero
}
    f4d4:	e037883a 	mov	sp,fp
    f4d8:	dfc00117 	ldw	ra,4(sp)
    f4dc:	df000017 	ldw	fp,0(sp)
    f4e0:	dec00204 	addi	sp,sp,8
    f4e4:	f800283a 	ret

0000f4e8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    f4e8:	defffb04 	addi	sp,sp,-20
    f4ec:	dfc00415 	stw	ra,16(sp)
    f4f0:	df000315 	stw	fp,12(sp)
    f4f4:	df000304 	addi	fp,sp,12
    f4f8:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    f4fc:	00800074 	movhi	r2,1
    f500:	10867e04 	addi	r2,r2,6648
    f504:	10800017 	ldw	r2,0(r2)
    f508:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    f50c:	00003106 	br	f5d4 <alt_find_file+0xec>
  {
    len = strlen(next->name);
    f510:	e0bffd17 	ldw	r2,-12(fp)
    f514:	10800217 	ldw	r2,8(r2)
    f518:	1009883a 	mov	r4,r2
    f51c:	0000c480 	call	c48 <strlen>
    f520:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    f524:	e0bffd17 	ldw	r2,-12(fp)
    f528:	10c00217 	ldw	r3,8(r2)
    f52c:	e0bffe17 	ldw	r2,-8(fp)
    f530:	10bfffc4 	addi	r2,r2,-1
    f534:	1885883a 	add	r2,r3,r2
    f538:	10800003 	ldbu	r2,0(r2)
    f53c:	10803fcc 	andi	r2,r2,255
    f540:	1080201c 	xori	r2,r2,128
    f544:	10bfe004 	addi	r2,r2,-128
    f548:	10800bd8 	cmpnei	r2,r2,47
    f54c:	1000031e 	bne	r2,zero,f55c <alt_find_file+0x74>
    {
      len -= 1;
    f550:	e0bffe17 	ldw	r2,-8(fp)
    f554:	10bfffc4 	addi	r2,r2,-1
    f558:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    f55c:	e0bffe17 	ldw	r2,-8(fp)
    f560:	e0ffff17 	ldw	r3,-4(fp)
    f564:	1885883a 	add	r2,r3,r2
    f568:	10800003 	ldbu	r2,0(r2)
    f56c:	10803fcc 	andi	r2,r2,255
    f570:	1080201c 	xori	r2,r2,128
    f574:	10bfe004 	addi	r2,r2,-128
    f578:	10800be0 	cmpeqi	r2,r2,47
    f57c:	1000081e 	bne	r2,zero,f5a0 <alt_find_file+0xb8>
    f580:	e0bffe17 	ldw	r2,-8(fp)
    f584:	e0ffff17 	ldw	r3,-4(fp)
    f588:	1885883a 	add	r2,r3,r2
    f58c:	10800003 	ldbu	r2,0(r2)
    f590:	10803fcc 	andi	r2,r2,255
    f594:	1080201c 	xori	r2,r2,128
    f598:	10bfe004 	addi	r2,r2,-128
    f59c:	10000a1e 	bne	r2,zero,f5c8 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    f5a0:	e0bffd17 	ldw	r2,-12(fp)
    f5a4:	10800217 	ldw	r2,8(r2)
    f5a8:	e0fffe17 	ldw	r3,-8(fp)
    f5ac:	180d883a 	mov	r6,r3
    f5b0:	e17fff17 	ldw	r5,-4(fp)
    f5b4:	1009883a 	mov	r4,r2
    f5b8:	000f8280 	call	f828 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    f5bc:	1000021e 	bne	r2,zero,f5c8 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    f5c0:	e0bffd17 	ldw	r2,-12(fp)
    f5c4:	00000806 	br	f5e8 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
    f5c8:	e0bffd17 	ldw	r2,-12(fp)
    f5cc:	10800017 	ldw	r2,0(r2)
    f5d0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    f5d4:	e0fffd17 	ldw	r3,-12(fp)
    f5d8:	00800074 	movhi	r2,1
    f5dc:	10867e04 	addi	r2,r2,6648
    f5e0:	18bfcb1e 	bne	r3,r2,f510 <_gp+0xffff5b30>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    f5e4:	0005883a 	mov	r2,zero
}
    f5e8:	e037883a 	mov	sp,fp
    f5ec:	dfc00117 	ldw	ra,4(sp)
    f5f0:	df000017 	ldw	fp,0(sp)
    f5f4:	dec00204 	addi	sp,sp,8
    f5f8:	f800283a 	ret

0000f5fc <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    f5fc:	defffc04 	addi	sp,sp,-16
    f600:	df000315 	stw	fp,12(sp)
    f604:	df000304 	addi	fp,sp,12
    f608:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    f60c:	00bffa04 	movi	r2,-24
    f610:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    f614:	e03ffd15 	stw	zero,-12(fp)
    f618:	00001d06 	br	f690 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
    f61c:	00800074 	movhi	r2,1
    f620:	10820004 	addi	r2,r2,2048
    f624:	e0fffd17 	ldw	r3,-12(fp)
    f628:	18c00324 	muli	r3,r3,12
    f62c:	10c5883a 	add	r2,r2,r3
    f630:	10800017 	ldw	r2,0(r2)
    f634:	1000131e 	bne	r2,zero,f684 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
    f638:	00800074 	movhi	r2,1
    f63c:	10820004 	addi	r2,r2,2048
    f640:	e0fffd17 	ldw	r3,-12(fp)
    f644:	18c00324 	muli	r3,r3,12
    f648:	10c5883a 	add	r2,r2,r3
    f64c:	e0ffff17 	ldw	r3,-4(fp)
    f650:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    f654:	00800074 	movhi	r2,1
    f658:	10868204 	addi	r2,r2,6664
    f65c:	10c00017 	ldw	r3,0(r2)
    f660:	e0bffd17 	ldw	r2,-12(fp)
    f664:	1880040e 	bge	r3,r2,f678 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
    f668:	00800074 	movhi	r2,1
    f66c:	10868204 	addi	r2,r2,6664
    f670:	e0fffd17 	ldw	r3,-12(fp)
    f674:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
    f678:	e0bffd17 	ldw	r2,-12(fp)
    f67c:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
    f680:	00000606 	br	f69c <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    f684:	e0bffd17 	ldw	r2,-12(fp)
    f688:	10800044 	addi	r2,r2,1
    f68c:	e0bffd15 	stw	r2,-12(fp)
    f690:	e0bffd17 	ldw	r2,-12(fp)
    f694:	10800810 	cmplti	r2,r2,32
    f698:	103fe01e 	bne	r2,zero,f61c <_gp+0xffff5c3c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    f69c:	e0bffe17 	ldw	r2,-8(fp)
}
    f6a0:	e037883a 	mov	sp,fp
    f6a4:	df000017 	ldw	fp,0(sp)
    f6a8:	dec00104 	addi	sp,sp,4
    f6ac:	f800283a 	ret

0000f6b0 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    f6b0:	defffb04 	addi	sp,sp,-20
    f6b4:	df000415 	stw	fp,16(sp)
    f6b8:	df000404 	addi	fp,sp,16
    f6bc:	e13ffe15 	stw	r4,-8(fp)
    f6c0:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    f6c4:	e0bfff17 	ldw	r2,-4(fp)
    f6c8:	10840070 	cmpltui	r2,r2,4097
    f6cc:	1000021e 	bne	r2,zero,f6d8 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    f6d0:	00840004 	movi	r2,4096
    f6d4:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
    f6d8:	e0fffe17 	ldw	r3,-8(fp)
    f6dc:	e0bfff17 	ldw	r2,-4(fp)
    f6e0:	1885883a 	add	r2,r3,r2
    f6e4:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    f6e8:	e0bffe17 	ldw	r2,-8(fp)
    f6ec:	e0bffc15 	stw	r2,-16(fp)
    f6f0:	00000506 	br	f708 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    f6f4:	e0bffc17 	ldw	r2,-16(fp)
    f6f8:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    f6fc:	e0bffc17 	ldw	r2,-16(fp)
    f700:	10800804 	addi	r2,r2,32
    f704:	e0bffc15 	stw	r2,-16(fp)
    f708:	e0fffc17 	ldw	r3,-16(fp)
    f70c:	e0bffd17 	ldw	r2,-12(fp)
    f710:	18bff836 	bltu	r3,r2,f6f4 <_gp+0xffff5d14>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    f714:	e0bffe17 	ldw	r2,-8(fp)
    f718:	108007cc 	andi	r2,r2,31
    f71c:	10000226 	beq	r2,zero,f728 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    f720:	e0bffc17 	ldw	r2,-16(fp)
    f724:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    f728:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    f72c:	0001883a 	nop
    f730:	e037883a 	mov	sp,fp
    f734:	df000017 	ldw	fp,0(sp)
    f738:	dec00104 	addi	sp,sp,4
    f73c:	f800283a 	ret

0000f740 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
    f740:	defffe04 	addi	sp,sp,-8
    f744:	df000115 	stw	fp,4(sp)
    f748:	df000104 	addi	fp,sp,4
    f74c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
    f750:	e0bfff17 	ldw	r2,-4(fp)
    f754:	10bffe84 	addi	r2,r2,-6
    f758:	10c00428 	cmpgeui	r3,r2,16
    f75c:	18001a1e 	bne	r3,zero,f7c8 <alt_exception_cause_generated_bad_addr+0x88>
    f760:	100690ba 	slli	r3,r2,2
    f764:	00800074 	movhi	r2,1
    f768:	10bdde04 	addi	r2,r2,-2184
    f76c:	1885883a 	add	r2,r3,r2
    f770:	10800017 	ldw	r2,0(r2)
    f774:	1000683a 	jmp	r2
    f778:	0000f7b8 	rdprs	zero,zero,990
    f77c:	0000f7b8 	rdprs	zero,zero,990
    f780:	0000f7c8 	cmpgei	zero,zero,991
    f784:	0000f7c8 	cmpgei	zero,zero,991
    f788:	0000f7c8 	cmpgei	zero,zero,991
    f78c:	0000f7b8 	rdprs	zero,zero,990
    f790:	0000f7c0 	call	f7c <___vfprintf_internal_r+0x29c>
    f794:	0000f7c8 	cmpgei	zero,zero,991
    f798:	0000f7b8 	rdprs	zero,zero,990
    f79c:	0000f7b8 	rdprs	zero,zero,990
    f7a0:	0000f7c8 	cmpgei	zero,zero,991
    f7a4:	0000f7b8 	rdprs	zero,zero,990
    f7a8:	0000f7c0 	call	f7c <___vfprintf_internal_r+0x29c>
    f7ac:	0000f7c8 	cmpgei	zero,zero,991
    f7b0:	0000f7c8 	cmpgei	zero,zero,991
    f7b4:	0000f7b8 	rdprs	zero,zero,990
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    f7b8:	00800044 	movi	r2,1
    f7bc:	00000306 	br	f7cc <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    f7c0:	0005883a 	mov	r2,zero
    f7c4:	00000106 	br	f7cc <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
    f7c8:	0005883a 	mov	r2,zero
  }
}
    f7cc:	e037883a 	mov	sp,fp
    f7d0:	df000017 	ldw	fp,0(sp)
    f7d4:	dec00104 	addi	sp,sp,4
    f7d8:	f800283a 	ret

0000f7dc <atexit>:
    f7dc:	200b883a 	mov	r5,r4
    f7e0:	000f883a 	mov	r7,zero
    f7e4:	000d883a 	mov	r6,zero
    f7e8:	0009883a 	mov	r4,zero
    f7ec:	000f8a41 	jmpi	f8a4 <__register_exitproc>

0000f7f0 <exit>:
    f7f0:	defffe04 	addi	sp,sp,-8
    f7f4:	000b883a 	mov	r5,zero
    f7f8:	dc000015 	stw	r16,0(sp)
    f7fc:	dfc00115 	stw	ra,4(sp)
    f800:	2021883a 	mov	r16,r4
    f804:	000f9bc0 	call	f9bc <__call_exitprocs>
    f808:	00800074 	movhi	r2,1
    f80c:	10867804 	addi	r2,r2,6624
    f810:	11000017 	ldw	r4,0(r2)
    f814:	20800f17 	ldw	r2,60(r4)
    f818:	10000126 	beq	r2,zero,f820 <exit+0x30>
    f81c:	103ee83a 	callr	r2
    f820:	8009883a 	mov	r4,r16
    f824:	000fb3c0 	call	fb3c <_exit>

0000f828 <memcmp>:
    f828:	01c000c4 	movi	r7,3
    f82c:	3980192e 	bgeu	r7,r6,f894 <memcmp+0x6c>
    f830:	2144b03a 	or	r2,r4,r5
    f834:	11c4703a 	and	r2,r2,r7
    f838:	10000f26 	beq	r2,zero,f878 <memcmp+0x50>
    f83c:	20800003 	ldbu	r2,0(r4)
    f840:	28c00003 	ldbu	r3,0(r5)
    f844:	10c0151e 	bne	r2,r3,f89c <memcmp+0x74>
    f848:	31bfff84 	addi	r6,r6,-2
    f84c:	01ffffc4 	movi	r7,-1
    f850:	00000406 	br	f864 <memcmp+0x3c>
    f854:	20800003 	ldbu	r2,0(r4)
    f858:	28c00003 	ldbu	r3,0(r5)
    f85c:	31bfffc4 	addi	r6,r6,-1
    f860:	10c00e1e 	bne	r2,r3,f89c <memcmp+0x74>
    f864:	21000044 	addi	r4,r4,1
    f868:	29400044 	addi	r5,r5,1
    f86c:	31fff91e 	bne	r6,r7,f854 <_gp+0xffff5e74>
    f870:	0005883a 	mov	r2,zero
    f874:	f800283a 	ret
    f878:	20c00017 	ldw	r3,0(r4)
    f87c:	28800017 	ldw	r2,0(r5)
    f880:	18bfee1e 	bne	r3,r2,f83c <_gp+0xffff5e5c>
    f884:	31bfff04 	addi	r6,r6,-4
    f888:	21000104 	addi	r4,r4,4
    f88c:	29400104 	addi	r5,r5,4
    f890:	39bff936 	bltu	r7,r6,f878 <_gp+0xffff5e98>
    f894:	303fe91e 	bne	r6,zero,f83c <_gp+0xffff5e5c>
    f898:	003ff506 	br	f870 <_gp+0xffff5e90>
    f89c:	10c5c83a 	sub	r2,r2,r3
    f8a0:	f800283a 	ret

0000f8a4 <__register_exitproc>:
    f8a4:	defffa04 	addi	sp,sp,-24
    f8a8:	dc000315 	stw	r16,12(sp)
    f8ac:	04000074 	movhi	r16,1
    f8b0:	84067804 	addi	r16,r16,6624
    f8b4:	80c00017 	ldw	r3,0(r16)
    f8b8:	dc400415 	stw	r17,16(sp)
    f8bc:	dfc00515 	stw	ra,20(sp)
    f8c0:	18805217 	ldw	r2,328(r3)
    f8c4:	2023883a 	mov	r17,r4
    f8c8:	10003726 	beq	r2,zero,f9a8 <__register_exitproc+0x104>
    f8cc:	10c00117 	ldw	r3,4(r2)
    f8d0:	010007c4 	movi	r4,31
    f8d4:	20c00e16 	blt	r4,r3,f910 <__register_exitproc+0x6c>
    f8d8:	1a000044 	addi	r8,r3,1
    f8dc:	8800221e 	bne	r17,zero,f968 <__register_exitproc+0xc4>
    f8e0:	18c00084 	addi	r3,r3,2
    f8e4:	18c7883a 	add	r3,r3,r3
    f8e8:	18c7883a 	add	r3,r3,r3
    f8ec:	12000115 	stw	r8,4(r2)
    f8f0:	10c7883a 	add	r3,r2,r3
    f8f4:	19400015 	stw	r5,0(r3)
    f8f8:	0005883a 	mov	r2,zero
    f8fc:	dfc00517 	ldw	ra,20(sp)
    f900:	dc400417 	ldw	r17,16(sp)
    f904:	dc000317 	ldw	r16,12(sp)
    f908:	dec00604 	addi	sp,sp,24
    f90c:	f800283a 	ret
    f910:	00800034 	movhi	r2,0
    f914:	10800004 	addi	r2,r2,0
    f918:	10002626 	beq	r2,zero,f9b4 <__register_exitproc+0x110>
    f91c:	01006404 	movi	r4,400
    f920:	d9400015 	stw	r5,0(sp)
    f924:	d9800115 	stw	r6,4(sp)
    f928:	d9c00215 	stw	r7,8(sp)
    f92c:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
    f930:	d9400017 	ldw	r5,0(sp)
    f934:	d9800117 	ldw	r6,4(sp)
    f938:	d9c00217 	ldw	r7,8(sp)
    f93c:	10001d26 	beq	r2,zero,f9b4 <__register_exitproc+0x110>
    f940:	81000017 	ldw	r4,0(r16)
    f944:	10000115 	stw	zero,4(r2)
    f948:	02000044 	movi	r8,1
    f94c:	22405217 	ldw	r9,328(r4)
    f950:	0007883a 	mov	r3,zero
    f954:	12400015 	stw	r9,0(r2)
    f958:	20805215 	stw	r2,328(r4)
    f95c:	10006215 	stw	zero,392(r2)
    f960:	10006315 	stw	zero,396(r2)
    f964:	883fde26 	beq	r17,zero,f8e0 <_gp+0xffff5f00>
    f968:	18c9883a 	add	r4,r3,r3
    f96c:	2109883a 	add	r4,r4,r4
    f970:	1109883a 	add	r4,r2,r4
    f974:	21802215 	stw	r6,136(r4)
    f978:	01800044 	movi	r6,1
    f97c:	12406217 	ldw	r9,392(r2)
    f980:	30cc983a 	sll	r6,r6,r3
    f984:	4992b03a 	or	r9,r9,r6
    f988:	12406215 	stw	r9,392(r2)
    f98c:	21c04215 	stw	r7,264(r4)
    f990:	01000084 	movi	r4,2
    f994:	893fd21e 	bne	r17,r4,f8e0 <_gp+0xffff5f00>
    f998:	11006317 	ldw	r4,396(r2)
    f99c:	218cb03a 	or	r6,r4,r6
    f9a0:	11806315 	stw	r6,396(r2)
    f9a4:	003fce06 	br	f8e0 <_gp+0xffff5f00>
    f9a8:	18805304 	addi	r2,r3,332
    f9ac:	18805215 	stw	r2,328(r3)
    f9b0:	003fc606 	br	f8cc <_gp+0xffff5eec>
    f9b4:	00bfffc4 	movi	r2,-1
    f9b8:	003fd006 	br	f8fc <_gp+0xffff5f1c>

0000f9bc <__call_exitprocs>:
    f9bc:	defff504 	addi	sp,sp,-44
    f9c0:	df000915 	stw	fp,36(sp)
    f9c4:	dd400615 	stw	r21,24(sp)
    f9c8:	dc800315 	stw	r18,12(sp)
    f9cc:	dfc00a15 	stw	ra,40(sp)
    f9d0:	ddc00815 	stw	r23,32(sp)
    f9d4:	dd800715 	stw	r22,28(sp)
    f9d8:	dd000515 	stw	r20,20(sp)
    f9dc:	dcc00415 	stw	r19,16(sp)
    f9e0:	dc400215 	stw	r17,8(sp)
    f9e4:	dc000115 	stw	r16,4(sp)
    f9e8:	d9000015 	stw	r4,0(sp)
    f9ec:	2839883a 	mov	fp,r5
    f9f0:	04800044 	movi	r18,1
    f9f4:	057fffc4 	movi	r21,-1
    f9f8:	00800074 	movhi	r2,1
    f9fc:	10867804 	addi	r2,r2,6624
    fa00:	12000017 	ldw	r8,0(r2)
    fa04:	45005217 	ldw	r20,328(r8)
    fa08:	44c05204 	addi	r19,r8,328
    fa0c:	a0001c26 	beq	r20,zero,fa80 <__call_exitprocs+0xc4>
    fa10:	a0800117 	ldw	r2,4(r20)
    fa14:	15ffffc4 	addi	r23,r2,-1
    fa18:	b8000d16 	blt	r23,zero,fa50 <__call_exitprocs+0x94>
    fa1c:	14000044 	addi	r16,r2,1
    fa20:	8421883a 	add	r16,r16,r16
    fa24:	8421883a 	add	r16,r16,r16
    fa28:	84402004 	addi	r17,r16,128
    fa2c:	a463883a 	add	r17,r20,r17
    fa30:	a421883a 	add	r16,r20,r16
    fa34:	e0001e26 	beq	fp,zero,fab0 <__call_exitprocs+0xf4>
    fa38:	80804017 	ldw	r2,256(r16)
    fa3c:	e0801c26 	beq	fp,r2,fab0 <__call_exitprocs+0xf4>
    fa40:	bdffffc4 	addi	r23,r23,-1
    fa44:	843fff04 	addi	r16,r16,-4
    fa48:	8c7fff04 	addi	r17,r17,-4
    fa4c:	bd7ff91e 	bne	r23,r21,fa34 <_gp+0xffff6054>
    fa50:	00800034 	movhi	r2,0
    fa54:	10800004 	addi	r2,r2,0
    fa58:	10000926 	beq	r2,zero,fa80 <__call_exitprocs+0xc4>
    fa5c:	a0800117 	ldw	r2,4(r20)
    fa60:	1000301e 	bne	r2,zero,fb24 <__call_exitprocs+0x168>
    fa64:	a0800017 	ldw	r2,0(r20)
    fa68:	10003226 	beq	r2,zero,fb34 <__call_exitprocs+0x178>
    fa6c:	a009883a 	mov	r4,r20
    fa70:	98800015 	stw	r2,0(r19)
    fa74:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
    fa78:	9d000017 	ldw	r20,0(r19)
    fa7c:	a03fe41e 	bne	r20,zero,fa10 <_gp+0xffff6030>
    fa80:	dfc00a17 	ldw	ra,40(sp)
    fa84:	df000917 	ldw	fp,36(sp)
    fa88:	ddc00817 	ldw	r23,32(sp)
    fa8c:	dd800717 	ldw	r22,28(sp)
    fa90:	dd400617 	ldw	r21,24(sp)
    fa94:	dd000517 	ldw	r20,20(sp)
    fa98:	dcc00417 	ldw	r19,16(sp)
    fa9c:	dc800317 	ldw	r18,12(sp)
    faa0:	dc400217 	ldw	r17,8(sp)
    faa4:	dc000117 	ldw	r16,4(sp)
    faa8:	dec00b04 	addi	sp,sp,44
    faac:	f800283a 	ret
    fab0:	a0800117 	ldw	r2,4(r20)
    fab4:	80c00017 	ldw	r3,0(r16)
    fab8:	10bfffc4 	addi	r2,r2,-1
    fabc:	15c01426 	beq	r2,r23,fb10 <__call_exitprocs+0x154>
    fac0:	80000015 	stw	zero,0(r16)
    fac4:	183fde26 	beq	r3,zero,fa40 <_gp+0xffff6060>
    fac8:	95c8983a 	sll	r4,r18,r23
    facc:	a0806217 	ldw	r2,392(r20)
    fad0:	a5800117 	ldw	r22,4(r20)
    fad4:	2084703a 	and	r2,r4,r2
    fad8:	10000b26 	beq	r2,zero,fb08 <__call_exitprocs+0x14c>
    fadc:	a0806317 	ldw	r2,396(r20)
    fae0:	2088703a 	and	r4,r4,r2
    fae4:	20000c1e 	bne	r4,zero,fb18 <__call_exitprocs+0x15c>
    fae8:	89400017 	ldw	r5,0(r17)
    faec:	d9000017 	ldw	r4,0(sp)
    faf0:	183ee83a 	callr	r3
    faf4:	a0800117 	ldw	r2,4(r20)
    faf8:	15bfbf1e 	bne	r2,r22,f9f8 <_gp+0xffff6018>
    fafc:	98800017 	ldw	r2,0(r19)
    fb00:	153fcf26 	beq	r2,r20,fa40 <_gp+0xffff6060>
    fb04:	003fbc06 	br	f9f8 <_gp+0xffff6018>
    fb08:	183ee83a 	callr	r3
    fb0c:	003ff906 	br	faf4 <_gp+0xffff6114>
    fb10:	a5c00115 	stw	r23,4(r20)
    fb14:	003feb06 	br	fac4 <_gp+0xffff60e4>
    fb18:	89000017 	ldw	r4,0(r17)
    fb1c:	183ee83a 	callr	r3
    fb20:	003ff406 	br	faf4 <_gp+0xffff6114>
    fb24:	a0800017 	ldw	r2,0(r20)
    fb28:	a027883a 	mov	r19,r20
    fb2c:	1029883a 	mov	r20,r2
    fb30:	003fb606 	br	fa0c <_gp+0xffff602c>
    fb34:	0005883a 	mov	r2,zero
    fb38:	003ffb06 	br	fb28 <_gp+0xffff6148>

0000fb3c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    fb3c:	defffd04 	addi	sp,sp,-12
    fb40:	df000215 	stw	fp,8(sp)
    fb44:	df000204 	addi	fp,sp,8
    fb48:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    fb4c:	0001883a 	nop
    fb50:	e0bfff17 	ldw	r2,-4(fp)
    fb54:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    fb58:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    fb5c:	10000226 	beq	r2,zero,fb68 <_exit+0x2c>
    ALT_SIM_FAIL();
    fb60:	002af070 	cmpltui	zero,zero,43969
    fb64:	00000106 	br	fb6c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    fb68:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    fb6c:	003fff06 	br	fb6c <_gp+0xffff618c>
