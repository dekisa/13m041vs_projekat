// sdram.v

// Generated using ACDS version 17.1 590

`timescale 1 ps / 1 ps
module sdram (
		input  wire        clk_clk,             //   clk.clk
		input  wire        reset_reset_n,       // reset.reset_n
		output wire        sdout_waitrequest,   // sdout.waitrequest
		output wire [31:0] sdout_readdata,      //      .readdata
		output wire        sdout_readdatavalid, //      .readdatavalid
		input  wire [0:0]  sdout_burstcount,    //      .burstcount
		input  wire [31:0] sdout_writedata,     //      .writedata
		input  wire [25:0] sdout_address,       //      .address
		input  wire        sdout_write,         //      .write
		input  wire        sdout_read,          //      .read
		input  wire [3:0]  sdout_byteenable,    //      .byteenable
		input  wire        sdout_debugaccess,   //      .debugaccess
		output wire [12:0] sdram_addr,          // sdram.addr
		output wire [1:0]  sdram_ba,            //      .ba
		output wire        sdram_cas_n,         //      .cas_n
		output wire        sdram_cke,           //      .cke
		output wire        sdram_cs_n,          //      .cs_n
		inout  wire [15:0] sdram_dq,            //      .dq
		output wire [1:0]  sdram_dqm,           //      .dqm
		output wire        sdram_ras_n,         //      .ras_n
		output wire        sdram_we_n           //      .we_n
	);

	wire         sdram_out_m0_waitrequest;                 // mm_interconnect_0:sdram_out_m0_waitrequest -> sdram_out:m0_waitrequest
	wire  [31:0] sdram_out_m0_readdata;                    // mm_interconnect_0:sdram_out_m0_readdata -> sdram_out:m0_readdata
	wire         sdram_out_m0_debugaccess;                 // sdram_out:m0_debugaccess -> mm_interconnect_0:sdram_out_m0_debugaccess
	wire  [25:0] sdram_out_m0_address;                     // sdram_out:m0_address -> mm_interconnect_0:sdram_out_m0_address
	wire         sdram_out_m0_read;                        // sdram_out:m0_read -> mm_interconnect_0:sdram_out_m0_read
	wire   [3:0] sdram_out_m0_byteenable;                  // sdram_out:m0_byteenable -> mm_interconnect_0:sdram_out_m0_byteenable
	wire         sdram_out_m0_readdatavalid;               // mm_interconnect_0:sdram_out_m0_readdatavalid -> sdram_out:m0_readdatavalid
	wire  [31:0] sdram_out_m0_writedata;                   // sdram_out:m0_writedata -> mm_interconnect_0:sdram_out_m0_writedata
	wire         sdram_out_m0_write;                       // sdram_out:m0_write -> mm_interconnect_0:sdram_out_m0_write
	wire   [0:0] sdram_out_m0_burstcount;                  // sdram_out:m0_burstcount -> mm_interconnect_0:sdram_out_m0_burstcount
	wire         mm_interconnect_0_sdram_s1_chipselect;    // mm_interconnect_0:sdram_s1_chipselect -> sdram:az_cs
	wire  [15:0] mm_interconnect_0_sdram_s1_readdata;      // sdram:za_data -> mm_interconnect_0:sdram_s1_readdata
	wire         mm_interconnect_0_sdram_s1_waitrequest;   // sdram:za_waitrequest -> mm_interconnect_0:sdram_s1_waitrequest
	wire  [23:0] mm_interconnect_0_sdram_s1_address;       // mm_interconnect_0:sdram_s1_address -> sdram:az_addr
	wire         mm_interconnect_0_sdram_s1_read;          // mm_interconnect_0:sdram_s1_read -> sdram:az_rd_n
	wire   [1:0] mm_interconnect_0_sdram_s1_byteenable;    // mm_interconnect_0:sdram_s1_byteenable -> sdram:az_be_n
	wire         mm_interconnect_0_sdram_s1_readdatavalid; // sdram:za_valid -> mm_interconnect_0:sdram_s1_readdatavalid
	wire         mm_interconnect_0_sdram_s1_write;         // mm_interconnect_0:sdram_s1_write -> sdram:az_wr_n
	wire  [15:0] mm_interconnect_0_sdram_s1_writedata;     // mm_interconnect_0:sdram_s1_writedata -> sdram:az_data
	wire         rst_controller_reset_out_reset;           // rst_controller:reset_out -> [mm_interconnect_0:sdram_out_reset_reset_bridge_in_reset_reset, sdram:reset_n, sdram_out:reset]

	sdram_sdram sdram (
		.clk            (clk_clk),                                  //   clk.clk
		.reset_n        (~rst_controller_reset_out_reset),          // reset.reset_n
		.az_addr        (mm_interconnect_0_sdram_s1_address),       //    s1.address
		.az_be_n        (~mm_interconnect_0_sdram_s1_byteenable),   //      .byteenable_n
		.az_cs          (mm_interconnect_0_sdram_s1_chipselect),    //      .chipselect
		.az_data        (mm_interconnect_0_sdram_s1_writedata),     //      .writedata
		.az_rd_n        (~mm_interconnect_0_sdram_s1_read),         //      .read_n
		.az_wr_n        (~mm_interconnect_0_sdram_s1_write),        //      .write_n
		.za_data        (mm_interconnect_0_sdram_s1_readdata),      //      .readdata
		.za_valid       (mm_interconnect_0_sdram_s1_readdatavalid), //      .readdatavalid
		.za_waitrequest (mm_interconnect_0_sdram_s1_waitrequest),   //      .waitrequest
		.zs_addr        (sdram_addr),                               //  wire.export
		.zs_ba          (sdram_ba),                                 //      .export
		.zs_cas_n       (sdram_cas_n),                              //      .export
		.zs_cke         (sdram_cke),                                //      .export
		.zs_cs_n        (sdram_cs_n),                               //      .export
		.zs_dq          (sdram_dq),                                 //      .export
		.zs_dqm         (sdram_dqm),                                //      .export
		.zs_ras_n       (sdram_ras_n),                              //      .export
		.zs_we_n        (sdram_we_n)                                //      .export
	);

	altera_avalon_mm_bridge #(
		.DATA_WIDTH        (32),
		.SYMBOL_WIDTH      (8),
		.HDL_ADDR_WIDTH    (26),
		.BURSTCOUNT_WIDTH  (1),
		.PIPELINE_COMMAND  (1),
		.PIPELINE_RESPONSE (1)
	) sdram_out (
		.clk              (clk_clk),                        //   clk.clk
		.reset            (rst_controller_reset_out_reset), // reset.reset
		.s0_waitrequest   (sdout_waitrequest),              //    s0.waitrequest
		.s0_readdata      (sdout_readdata),                 //      .readdata
		.s0_readdatavalid (sdout_readdatavalid),            //      .readdatavalid
		.s0_burstcount    (sdout_burstcount),               //      .burstcount
		.s0_writedata     (sdout_writedata),                //      .writedata
		.s0_address       (sdout_address),                  //      .address
		.s0_write         (sdout_write),                    //      .write
		.s0_read          (sdout_read),                     //      .read
		.s0_byteenable    (sdout_byteenable),               //      .byteenable
		.s0_debugaccess   (sdout_debugaccess),              //      .debugaccess
		.m0_waitrequest   (sdram_out_m0_waitrequest),       //    m0.waitrequest
		.m0_readdata      (sdram_out_m0_readdata),          //      .readdata
		.m0_readdatavalid (sdram_out_m0_readdatavalid),     //      .readdatavalid
		.m0_burstcount    (sdram_out_m0_burstcount),        //      .burstcount
		.m0_writedata     (sdram_out_m0_writedata),         //      .writedata
		.m0_address       (sdram_out_m0_address),           //      .address
		.m0_write         (sdram_out_m0_write),             //      .write
		.m0_read          (sdram_out_m0_read),              //      .read
		.m0_byteenable    (sdram_out_m0_byteenable),        //      .byteenable
		.m0_debugaccess   (sdram_out_m0_debugaccess),       //      .debugaccess
		.s0_response      (),                               // (terminated)
		.m0_response      (2'b00)                           // (terminated)
	);

	sdram_mm_interconnect_0 mm_interconnect_0 (
		.clk_0_clk_clk                               (clk_clk),                                  //                             clk_0_clk.clk
		.sdram_out_reset_reset_bridge_in_reset_reset (rst_controller_reset_out_reset),           // sdram_out_reset_reset_bridge_in_reset.reset
		.sdram_out_m0_address                        (sdram_out_m0_address),                     //                          sdram_out_m0.address
		.sdram_out_m0_waitrequest                    (sdram_out_m0_waitrequest),                 //                                      .waitrequest
		.sdram_out_m0_burstcount                     (sdram_out_m0_burstcount),                  //                                      .burstcount
		.sdram_out_m0_byteenable                     (sdram_out_m0_byteenable),                  //                                      .byteenable
		.sdram_out_m0_read                           (sdram_out_m0_read),                        //                                      .read
		.sdram_out_m0_readdata                       (sdram_out_m0_readdata),                    //                                      .readdata
		.sdram_out_m0_readdatavalid                  (sdram_out_m0_readdatavalid),               //                                      .readdatavalid
		.sdram_out_m0_write                          (sdram_out_m0_write),                       //                                      .write
		.sdram_out_m0_writedata                      (sdram_out_m0_writedata),                   //                                      .writedata
		.sdram_out_m0_debugaccess                    (sdram_out_m0_debugaccess),                 //                                      .debugaccess
		.sdram_s1_address                            (mm_interconnect_0_sdram_s1_address),       //                              sdram_s1.address
		.sdram_s1_write                              (mm_interconnect_0_sdram_s1_write),         //                                      .write
		.sdram_s1_read                               (mm_interconnect_0_sdram_s1_read),          //                                      .read
		.sdram_s1_readdata                           (mm_interconnect_0_sdram_s1_readdata),      //                                      .readdata
		.sdram_s1_writedata                          (mm_interconnect_0_sdram_s1_writedata),     //                                      .writedata
		.sdram_s1_byteenable                         (mm_interconnect_0_sdram_s1_byteenable),    //                                      .byteenable
		.sdram_s1_readdatavalid                      (mm_interconnect_0_sdram_s1_readdatavalid), //                                      .readdatavalid
		.sdram_s1_waitrequest                        (mm_interconnect_0_sdram_s1_waitrequest),   //                                      .waitrequest
		.sdram_s1_chipselect                         (mm_interconnect_0_sdram_s1_chipselect)     //                                      .chipselect
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller (
		.reset_in0      (~reset_reset_n),                 // reset_in0.reset
		.clk            (clk_clk),                        //       clk.clk
		.reset_out      (rst_controller_reset_out_reset), // reset_out.reset
		.reset_req      (),                               // (terminated)
		.reset_req_in0  (1'b0),                           // (terminated)
		.reset_in1      (1'b0),                           // (terminated)
		.reset_req_in1  (1'b0),                           // (terminated)
		.reset_in2      (1'b0),                           // (terminated)
		.reset_req_in2  (1'b0),                           // (terminated)
		.reset_in3      (1'b0),                           // (terminated)
		.reset_req_in3  (1'b0),                           // (terminated)
		.reset_in4      (1'b0),                           // (terminated)
		.reset_req_in4  (1'b0),                           // (terminated)
		.reset_in5      (1'b0),                           // (terminated)
		.reset_req_in5  (1'b0),                           // (terminated)
		.reset_in6      (1'b0),                           // (terminated)
		.reset_req_in6  (1'b0),                           // (terminated)
		.reset_in7      (1'b0),                           // (terminated)
		.reset_req_in7  (1'b0),                           // (terminated)
		.reset_in8      (1'b0),                           // (terminated)
		.reset_req_in8  (1'b0),                           // (terminated)
		.reset_in9      (1'b0),                           // (terminated)
		.reset_req_in9  (1'b0),                           // (terminated)
		.reset_in10     (1'b0),                           // (terminated)
		.reset_req_in10 (1'b0),                           // (terminated)
		.reset_in11     (1'b0),                           // (terminated)
		.reset_req_in11 (1'b0),                           // (terminated)
		.reset_in12     (1'b0),                           // (terminated)
		.reset_req_in12 (1'b0),                           // (terminated)
		.reset_in13     (1'b0),                           // (terminated)
		.reset_req_in13 (1'b0),                           // (terminated)
		.reset_in14     (1'b0),                           // (terminated)
		.reset_req_in14 (1'b0),                           // (terminated)
		.reset_in15     (1'b0),                           // (terminated)
		.reset_req_in15 (1'b0)                            // (terminated)
	);

endmodule
