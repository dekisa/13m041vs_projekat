// system_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 17.1 590

`timescale 1 ps / 1 ps
module system_mm_interconnect_0 (
		input  wire        altpll_0_c0_clk,                                            //                                          altpll_0_c0.clk
		input  wire        clk_0_clk_clk,                                              //                                            clk_0_clk.clk
		input  wire        altpll_0_inclk_interface_reset_reset_bridge_in_reset_reset, // altpll_0_inclk_interface_reset_reset_bridge_in_reset.reset
		input  wire        jtag_uart_0_reset_reset_bridge_in_reset_reset,              //              jtag_uart_0_reset_reset_bridge_in_reset.reset
		input  wire        manager_reset_reset_bridge_in_reset_reset,                  //                  manager_reset_reset_bridge_in_reset.reset
		input  wire        sdram_0_reset_reset_bridge_in_reset_reset,                  //                  sdram_0_reset_reset_bridge_in_reset.reset
		input  wire        worker0_reset_reset_bridge_in_reset_reset,                  //                  worker0_reset_reset_bridge_in_reset.reset
		input  wire [26:0] manager_data_master_address,                                //                                  manager_data_master.address
		output wire        manager_data_master_waitrequest,                            //                                                     .waitrequest
		input  wire [3:0]  manager_data_master_byteenable,                             //                                                     .byteenable
		input  wire        manager_data_master_read,                                   //                                                     .read
		output wire [31:0] manager_data_master_readdata,                               //                                                     .readdata
		output wire        manager_data_master_readdatavalid,                          //                                                     .readdatavalid
		input  wire        manager_data_master_write,                                  //                                                     .write
		input  wire [31:0] manager_data_master_writedata,                              //                                                     .writedata
		input  wire        manager_data_master_debugaccess,                            //                                                     .debugaccess
		input  wire [26:0] manager_instruction_master_address,                         //                           manager_instruction_master.address
		output wire        manager_instruction_master_waitrequest,                     //                                                     .waitrequest
		input  wire        manager_instruction_master_read,                            //                                                     .read
		output wire [31:0] manager_instruction_master_readdata,                        //                                                     .readdata
		output wire        manager_instruction_master_readdatavalid,                   //                                                     .readdatavalid
		input  wire [27:0] worker0_wout_address,                                       //                                         worker0_wout.address
		output wire        worker0_wout_waitrequest,                                   //                                                     .waitrequest
		input  wire [0:0]  worker0_wout_burstcount,                                    //                                                     .burstcount
		input  wire [3:0]  worker0_wout_byteenable,                                    //                                                     .byteenable
		input  wire        worker0_wout_read,                                          //                                                     .read
		output wire [31:0] worker0_wout_readdata,                                      //                                                     .readdata
		output wire        worker0_wout_readdatavalid,                                 //                                                     .readdatavalid
		input  wire        worker0_wout_write,                                         //                                                     .write
		input  wire [31:0] worker0_wout_writedata,                                     //                                                     .writedata
		input  wire        worker0_wout_debugaccess,                                   //                                                     .debugaccess
		input  wire [27:0] worker1_wout_address,                                       //                                         worker1_wout.address
		output wire        worker1_wout_waitrequest,                                   //                                                     .waitrequest
		input  wire [0:0]  worker1_wout_burstcount,                                    //                                                     .burstcount
		input  wire [3:0]  worker1_wout_byteenable,                                    //                                                     .byteenable
		input  wire        worker1_wout_read,                                          //                                                     .read
		output wire [31:0] worker1_wout_readdata,                                      //                                                     .readdata
		output wire        worker1_wout_readdatavalid,                                 //                                                     .readdatavalid
		input  wire        worker1_wout_write,                                         //                                                     .write
		input  wire [31:0] worker1_wout_writedata,                                     //                                                     .writedata
		input  wire        worker1_wout_debugaccess,                                   //                                                     .debugaccess
		input  wire [27:0] worker2_wout_address,                                       //                                         worker2_wout.address
		output wire        worker2_wout_waitrequest,                                   //                                                     .waitrequest
		input  wire [0:0]  worker2_wout_burstcount,                                    //                                                     .burstcount
		input  wire [3:0]  worker2_wout_byteenable,                                    //                                                     .byteenable
		input  wire        worker2_wout_read,                                          //                                                     .read
		output wire [31:0] worker2_wout_readdata,                                      //                                                     .readdata
		output wire        worker2_wout_readdatavalid,                                 //                                                     .readdatavalid
		input  wire        worker2_wout_write,                                         //                                                     .write
		input  wire [31:0] worker2_wout_writedata,                                     //                                                     .writedata
		input  wire        worker2_wout_debugaccess,                                   //                                                     .debugaccess
		input  wire [27:0] worker3_wout_address,                                       //                                         worker3_wout.address
		output wire        worker3_wout_waitrequest,                                   //                                                     .waitrequest
		input  wire [0:0]  worker3_wout_burstcount,                                    //                                                     .burstcount
		input  wire [3:0]  worker3_wout_byteenable,                                    //                                                     .byteenable
		input  wire        worker3_wout_read,                                          //                                                     .read
		output wire [31:0] worker3_wout_readdata,                                      //                                                     .readdata
		output wire        worker3_wout_readdatavalid,                                 //                                                     .readdatavalid
		input  wire        worker3_wout_write,                                         //                                                     .write
		input  wire [31:0] worker3_wout_writedata,                                     //                                                     .writedata
		input  wire        worker3_wout_debugaccess,                                   //                                                     .debugaccess
		output wire [1:0]  altpll_0_pll_slave_address,                                 //                                   altpll_0_pll_slave.address
		output wire        altpll_0_pll_slave_write,                                   //                                                     .write
		output wire        altpll_0_pll_slave_read,                                    //                                                     .read
		input  wire [31:0] altpll_0_pll_slave_readdata,                                //                                                     .readdata
		output wire [31:0] altpll_0_pll_slave_writedata,                               //                                                     .writedata
		output wire [0:0]  jtag_uart_0_avalon_jtag_slave_address,                      //                        jtag_uart_0_avalon_jtag_slave.address
		output wire        jtag_uart_0_avalon_jtag_slave_write,                        //                                                     .write
		output wire        jtag_uart_0_avalon_jtag_slave_read,                         //                                                     .read
		input  wire [31:0] jtag_uart_0_avalon_jtag_slave_readdata,                     //                                                     .readdata
		output wire [31:0] jtag_uart_0_avalon_jtag_slave_writedata,                    //                                                     .writedata
		input  wire        jtag_uart_0_avalon_jtag_slave_waitrequest,                  //                                                     .waitrequest
		output wire        jtag_uart_0_avalon_jtag_slave_chipselect,                   //                                                     .chipselect
		output wire [8:0]  manager_debug_mem_slave_address,                            //                              manager_debug_mem_slave.address
		output wire        manager_debug_mem_slave_write,                              //                                                     .write
		output wire        manager_debug_mem_slave_read,                               //                                                     .read
		input  wire [31:0] manager_debug_mem_slave_readdata,                           //                                                     .readdata
		output wire [31:0] manager_debug_mem_slave_writedata,                          //                                                     .writedata
		output wire [3:0]  manager_debug_mem_slave_byteenable,                         //                                                     .byteenable
		input  wire        manager_debug_mem_slave_waitrequest,                        //                                                     .waitrequest
		output wire        manager_debug_mem_slave_debugaccess,                        //                                                     .debugaccess
		output wire [1:0]  mbox_m_w0_avmm_msg_receiver_address,                        //                          mbox_m_w0_avmm_msg_receiver.address
		output wire        mbox_m_w0_avmm_msg_receiver_write,                          //                                                     .write
		output wire        mbox_m_w0_avmm_msg_receiver_read,                           //                                                     .read
		input  wire [31:0] mbox_m_w0_avmm_msg_receiver_readdata,                       //                                                     .readdata
		output wire [31:0] mbox_m_w0_avmm_msg_receiver_writedata,                      //                                                     .writedata
		output wire [1:0]  mbox_m_w0_avmm_msg_sender_address,                          //                            mbox_m_w0_avmm_msg_sender.address
		output wire        mbox_m_w0_avmm_msg_sender_write,                            //                                                     .write
		output wire        mbox_m_w0_avmm_msg_sender_read,                             //                                                     .read
		input  wire [31:0] mbox_m_w0_avmm_msg_sender_readdata,                         //                                                     .readdata
		output wire [31:0] mbox_m_w0_avmm_msg_sender_writedata,                        //                                                     .writedata
		input  wire        mbox_m_w0_avmm_msg_sender_waitrequest,                      //                                                     .waitrequest
		output wire [1:0]  mbox_m_w1_avmm_msg_receiver_address,                        //                          mbox_m_w1_avmm_msg_receiver.address
		output wire        mbox_m_w1_avmm_msg_receiver_write,                          //                                                     .write
		output wire        mbox_m_w1_avmm_msg_receiver_read,                           //                                                     .read
		input  wire [31:0] mbox_m_w1_avmm_msg_receiver_readdata,                       //                                                     .readdata
		output wire [31:0] mbox_m_w1_avmm_msg_receiver_writedata,                      //                                                     .writedata
		output wire [1:0]  mbox_m_w1_avmm_msg_sender_address,                          //                            mbox_m_w1_avmm_msg_sender.address
		output wire        mbox_m_w1_avmm_msg_sender_write,                            //                                                     .write
		output wire        mbox_m_w1_avmm_msg_sender_read,                             //                                                     .read
		input  wire [31:0] mbox_m_w1_avmm_msg_sender_readdata,                         //                                                     .readdata
		output wire [31:0] mbox_m_w1_avmm_msg_sender_writedata,                        //                                                     .writedata
		input  wire        mbox_m_w1_avmm_msg_sender_waitrequest,                      //                                                     .waitrequest
		output wire [1:0]  mbox_m_w2_avmm_msg_receiver_address,                        //                          mbox_m_w2_avmm_msg_receiver.address
		output wire        mbox_m_w2_avmm_msg_receiver_write,                          //                                                     .write
		output wire        mbox_m_w2_avmm_msg_receiver_read,                           //                                                     .read
		input  wire [31:0] mbox_m_w2_avmm_msg_receiver_readdata,                       //                                                     .readdata
		output wire [31:0] mbox_m_w2_avmm_msg_receiver_writedata,                      //                                                     .writedata
		output wire [1:0]  mbox_m_w2_avmm_msg_sender_address,                          //                            mbox_m_w2_avmm_msg_sender.address
		output wire        mbox_m_w2_avmm_msg_sender_write,                            //                                                     .write
		output wire        mbox_m_w2_avmm_msg_sender_read,                             //                                                     .read
		input  wire [31:0] mbox_m_w2_avmm_msg_sender_readdata,                         //                                                     .readdata
		output wire [31:0] mbox_m_w2_avmm_msg_sender_writedata,                        //                                                     .writedata
		input  wire        mbox_m_w2_avmm_msg_sender_waitrequest,                      //                                                     .waitrequest
		output wire [1:0]  mbox_m_w3_avmm_msg_receiver_address,                        //                          mbox_m_w3_avmm_msg_receiver.address
		output wire        mbox_m_w3_avmm_msg_receiver_write,                          //                                                     .write
		output wire        mbox_m_w3_avmm_msg_receiver_read,                           //                                                     .read
		input  wire [31:0] mbox_m_w3_avmm_msg_receiver_readdata,                       //                                                     .readdata
		output wire [31:0] mbox_m_w3_avmm_msg_receiver_writedata,                      //                                                     .writedata
		output wire [1:0]  mbox_m_w3_avmm_msg_sender_address,                          //                            mbox_m_w3_avmm_msg_sender.address
		output wire        mbox_m_w3_avmm_msg_sender_write,                            //                                                     .write
		output wire        mbox_m_w3_avmm_msg_sender_read,                             //                                                     .read
		input  wire [31:0] mbox_m_w3_avmm_msg_sender_readdata,                         //                                                     .readdata
		output wire [31:0] mbox_m_w3_avmm_msg_sender_writedata,                        //                                                     .writedata
		input  wire        mbox_m_w3_avmm_msg_sender_waitrequest,                      //                                                     .waitrequest
		output wire [2:0]  performance_counter_0_control_slave_address,                //                  performance_counter_0_control_slave.address
		output wire        performance_counter_0_control_slave_write,                  //                                                     .write
		input  wire [31:0] performance_counter_0_control_slave_readdata,               //                                                     .readdata
		output wire [31:0] performance_counter_0_control_slave_writedata,              //                                                     .writedata
		output wire        performance_counter_0_control_slave_begintransfer,          //                                                     .begintransfer
		output wire        req_fifo_in_write,                                          //                                          req_fifo_in.write
		output wire [31:0] req_fifo_in_writedata,                                      //                                                     .writedata
		input  wire        req_fifo_in_waitrequest,                                    //                                                     .waitrequest
		output wire [2:0]  req_fifo_in_csr_address,                                    //                                      req_fifo_in_csr.address
		output wire        req_fifo_in_csr_write,                                      //                                                     .write
		output wire        req_fifo_in_csr_read,                                       //                                                     .read
		input  wire [31:0] req_fifo_in_csr_readdata,                                   //                                                     .readdata
		output wire [31:0] req_fifo_in_csr_writedata,                                  //                                                     .writedata
		output wire        req_fifo_out_read,                                          //                                         req_fifo_out.read
		input  wire [31:0] req_fifo_out_readdata,                                      //                                                     .readdata
		input  wire        req_fifo_out_waitrequest,                                   //                                                     .waitrequest
		output wire [2:0]  req_fifo_out_csr_address,                                   //                                     req_fifo_out_csr.address
		output wire        req_fifo_out_csr_write,                                     //                                                     .write
		output wire        req_fifo_out_csr_read,                                      //                                                     .read
		input  wire [31:0] req_fifo_out_csr_readdata,                                  //                                                     .readdata
		output wire [31:0] req_fifo_out_csr_writedata,                                 //                                                     .writedata
		output wire [25:0] sdram_0_sdout_address,                                      //                                        sdram_0_sdout.address
		output wire        sdram_0_sdout_write,                                        //                                                     .write
		output wire        sdram_0_sdout_read,                                         //                                                     .read
		input  wire [31:0] sdram_0_sdout_readdata,                                     //                                                     .readdata
		output wire [31:0] sdram_0_sdout_writedata,                                    //                                                     .writedata
		output wire [0:0]  sdram_0_sdout_burstcount,                                   //                                                     .burstcount
		output wire [3:0]  sdram_0_sdout_byteenable,                                   //                                                     .byteenable
		input  wire        sdram_0_sdout_readdatavalid,                                //                                                     .readdatavalid
		input  wire        sdram_0_sdout_waitrequest,                                  //                                                     .waitrequest
		output wire        sdram_0_sdout_debugaccess,                                  //                                                     .debugaccess
		output wire [7:0]  shared_ocm_s1_address,                                      //                                        shared_ocm_s1.address
		output wire        shared_ocm_s1_write,                                        //                                                     .write
		input  wire [31:0] shared_ocm_s1_readdata,                                     //                                                     .readdata
		output wire [31:0] shared_ocm_s1_writedata,                                    //                                                     .writedata
		output wire [3:0]  shared_ocm_s1_byteenable,                                   //                                                     .byteenable
		output wire        shared_ocm_s1_chipselect,                                   //                                                     .chipselect
		output wire        shared_ocm_s1_clken,                                        //                                                     .clken
		output wire [7:0]  shared_ocm_s2_address,                                      //                                        shared_ocm_s2.address
		output wire        shared_ocm_s2_write,                                        //                                                     .write
		input  wire [31:0] shared_ocm_s2_readdata,                                     //                                                     .readdata
		output wire [31:0] shared_ocm_s2_writedata,                                    //                                                     .writedata
		output wire [3:0]  shared_ocm_s2_byteenable,                                   //                                                     .byteenable
		output wire        shared_ocm_s2_chipselect,                                   //                                                     .chipselect
		output wire        shared_ocm_s2_clken                                         //                                                     .clken
	);

	wire          manager_data_master_translator_avalon_universal_master_0_waitrequest;          // manager_data_master_agent:av_waitrequest -> manager_data_master_translator:uav_waitrequest
	wire   [31:0] manager_data_master_translator_avalon_universal_master_0_readdata;             // manager_data_master_agent:av_readdata -> manager_data_master_translator:uav_readdata
	wire          manager_data_master_translator_avalon_universal_master_0_debugaccess;          // manager_data_master_translator:uav_debugaccess -> manager_data_master_agent:av_debugaccess
	wire   [27:0] manager_data_master_translator_avalon_universal_master_0_address;              // manager_data_master_translator:uav_address -> manager_data_master_agent:av_address
	wire          manager_data_master_translator_avalon_universal_master_0_read;                 // manager_data_master_translator:uav_read -> manager_data_master_agent:av_read
	wire    [3:0] manager_data_master_translator_avalon_universal_master_0_byteenable;           // manager_data_master_translator:uav_byteenable -> manager_data_master_agent:av_byteenable
	wire          manager_data_master_translator_avalon_universal_master_0_readdatavalid;        // manager_data_master_agent:av_readdatavalid -> manager_data_master_translator:uav_readdatavalid
	wire          manager_data_master_translator_avalon_universal_master_0_lock;                 // manager_data_master_translator:uav_lock -> manager_data_master_agent:av_lock
	wire          manager_data_master_translator_avalon_universal_master_0_write;                // manager_data_master_translator:uav_write -> manager_data_master_agent:av_write
	wire   [31:0] manager_data_master_translator_avalon_universal_master_0_writedata;            // manager_data_master_translator:uav_writedata -> manager_data_master_agent:av_writedata
	wire    [2:0] manager_data_master_translator_avalon_universal_master_0_burstcount;           // manager_data_master_translator:uav_burstcount -> manager_data_master_agent:av_burstcount
	wire          manager_instruction_master_translator_avalon_universal_master_0_waitrequest;   // manager_instruction_master_agent:av_waitrequest -> manager_instruction_master_translator:uav_waitrequest
	wire   [31:0] manager_instruction_master_translator_avalon_universal_master_0_readdata;      // manager_instruction_master_agent:av_readdata -> manager_instruction_master_translator:uav_readdata
	wire          manager_instruction_master_translator_avalon_universal_master_0_debugaccess;   // manager_instruction_master_translator:uav_debugaccess -> manager_instruction_master_agent:av_debugaccess
	wire   [27:0] manager_instruction_master_translator_avalon_universal_master_0_address;       // manager_instruction_master_translator:uav_address -> manager_instruction_master_agent:av_address
	wire          manager_instruction_master_translator_avalon_universal_master_0_read;          // manager_instruction_master_translator:uav_read -> manager_instruction_master_agent:av_read
	wire    [3:0] manager_instruction_master_translator_avalon_universal_master_0_byteenable;    // manager_instruction_master_translator:uav_byteenable -> manager_instruction_master_agent:av_byteenable
	wire          manager_instruction_master_translator_avalon_universal_master_0_readdatavalid; // manager_instruction_master_agent:av_readdatavalid -> manager_instruction_master_translator:uav_readdatavalid
	wire          manager_instruction_master_translator_avalon_universal_master_0_lock;          // manager_instruction_master_translator:uav_lock -> manager_instruction_master_agent:av_lock
	wire          manager_instruction_master_translator_avalon_universal_master_0_write;         // manager_instruction_master_translator:uav_write -> manager_instruction_master_agent:av_write
	wire   [31:0] manager_instruction_master_translator_avalon_universal_master_0_writedata;     // manager_instruction_master_translator:uav_writedata -> manager_instruction_master_agent:av_writedata
	wire    [2:0] manager_instruction_master_translator_avalon_universal_master_0_burstcount;    // manager_instruction_master_translator:uav_burstcount -> manager_instruction_master_agent:av_burstcount
	wire          worker0_wout_translator_avalon_universal_master_0_waitrequest;                 // worker0_wout_agent:av_waitrequest -> worker0_wout_translator:uav_waitrequest
	wire   [31:0] worker0_wout_translator_avalon_universal_master_0_readdata;                    // worker0_wout_agent:av_readdata -> worker0_wout_translator:uav_readdata
	wire          worker0_wout_translator_avalon_universal_master_0_debugaccess;                 // worker0_wout_translator:uav_debugaccess -> worker0_wout_agent:av_debugaccess
	wire   [27:0] worker0_wout_translator_avalon_universal_master_0_address;                     // worker0_wout_translator:uav_address -> worker0_wout_agent:av_address
	wire          worker0_wout_translator_avalon_universal_master_0_read;                        // worker0_wout_translator:uav_read -> worker0_wout_agent:av_read
	wire    [3:0] worker0_wout_translator_avalon_universal_master_0_byteenable;                  // worker0_wout_translator:uav_byteenable -> worker0_wout_agent:av_byteenable
	wire          worker0_wout_translator_avalon_universal_master_0_readdatavalid;               // worker0_wout_agent:av_readdatavalid -> worker0_wout_translator:uav_readdatavalid
	wire          worker0_wout_translator_avalon_universal_master_0_lock;                        // worker0_wout_translator:uav_lock -> worker0_wout_agent:av_lock
	wire          worker0_wout_translator_avalon_universal_master_0_write;                       // worker0_wout_translator:uav_write -> worker0_wout_agent:av_write
	wire   [31:0] worker0_wout_translator_avalon_universal_master_0_writedata;                   // worker0_wout_translator:uav_writedata -> worker0_wout_agent:av_writedata
	wire    [2:0] worker0_wout_translator_avalon_universal_master_0_burstcount;                  // worker0_wout_translator:uav_burstcount -> worker0_wout_agent:av_burstcount
	wire          worker1_wout_translator_avalon_universal_master_0_waitrequest;                 // worker1_wout_agent:av_waitrequest -> worker1_wout_translator:uav_waitrequest
	wire   [31:0] worker1_wout_translator_avalon_universal_master_0_readdata;                    // worker1_wout_agent:av_readdata -> worker1_wout_translator:uav_readdata
	wire          worker1_wout_translator_avalon_universal_master_0_debugaccess;                 // worker1_wout_translator:uav_debugaccess -> worker1_wout_agent:av_debugaccess
	wire   [27:0] worker1_wout_translator_avalon_universal_master_0_address;                     // worker1_wout_translator:uav_address -> worker1_wout_agent:av_address
	wire          worker1_wout_translator_avalon_universal_master_0_read;                        // worker1_wout_translator:uav_read -> worker1_wout_agent:av_read
	wire    [3:0] worker1_wout_translator_avalon_universal_master_0_byteenable;                  // worker1_wout_translator:uav_byteenable -> worker1_wout_agent:av_byteenable
	wire          worker1_wout_translator_avalon_universal_master_0_readdatavalid;               // worker1_wout_agent:av_readdatavalid -> worker1_wout_translator:uav_readdatavalid
	wire          worker1_wout_translator_avalon_universal_master_0_lock;                        // worker1_wout_translator:uav_lock -> worker1_wout_agent:av_lock
	wire          worker1_wout_translator_avalon_universal_master_0_write;                       // worker1_wout_translator:uav_write -> worker1_wout_agent:av_write
	wire   [31:0] worker1_wout_translator_avalon_universal_master_0_writedata;                   // worker1_wout_translator:uav_writedata -> worker1_wout_agent:av_writedata
	wire    [2:0] worker1_wout_translator_avalon_universal_master_0_burstcount;                  // worker1_wout_translator:uav_burstcount -> worker1_wout_agent:av_burstcount
	wire          worker2_wout_translator_avalon_universal_master_0_waitrequest;                 // worker2_wout_agent:av_waitrequest -> worker2_wout_translator:uav_waitrequest
	wire   [31:0] worker2_wout_translator_avalon_universal_master_0_readdata;                    // worker2_wout_agent:av_readdata -> worker2_wout_translator:uav_readdata
	wire          worker2_wout_translator_avalon_universal_master_0_debugaccess;                 // worker2_wout_translator:uav_debugaccess -> worker2_wout_agent:av_debugaccess
	wire   [27:0] worker2_wout_translator_avalon_universal_master_0_address;                     // worker2_wout_translator:uav_address -> worker2_wout_agent:av_address
	wire          worker2_wout_translator_avalon_universal_master_0_read;                        // worker2_wout_translator:uav_read -> worker2_wout_agent:av_read
	wire    [3:0] worker2_wout_translator_avalon_universal_master_0_byteenable;                  // worker2_wout_translator:uav_byteenable -> worker2_wout_agent:av_byteenable
	wire          worker2_wout_translator_avalon_universal_master_0_readdatavalid;               // worker2_wout_agent:av_readdatavalid -> worker2_wout_translator:uav_readdatavalid
	wire          worker2_wout_translator_avalon_universal_master_0_lock;                        // worker2_wout_translator:uav_lock -> worker2_wout_agent:av_lock
	wire          worker2_wout_translator_avalon_universal_master_0_write;                       // worker2_wout_translator:uav_write -> worker2_wout_agent:av_write
	wire   [31:0] worker2_wout_translator_avalon_universal_master_0_writedata;                   // worker2_wout_translator:uav_writedata -> worker2_wout_agent:av_writedata
	wire    [2:0] worker2_wout_translator_avalon_universal_master_0_burstcount;                  // worker2_wout_translator:uav_burstcount -> worker2_wout_agent:av_burstcount
	wire          worker3_wout_translator_avalon_universal_master_0_waitrequest;                 // worker3_wout_agent:av_waitrequest -> worker3_wout_translator:uav_waitrequest
	wire   [31:0] worker3_wout_translator_avalon_universal_master_0_readdata;                    // worker3_wout_agent:av_readdata -> worker3_wout_translator:uav_readdata
	wire          worker3_wout_translator_avalon_universal_master_0_debugaccess;                 // worker3_wout_translator:uav_debugaccess -> worker3_wout_agent:av_debugaccess
	wire   [27:0] worker3_wout_translator_avalon_universal_master_0_address;                     // worker3_wout_translator:uav_address -> worker3_wout_agent:av_address
	wire          worker3_wout_translator_avalon_universal_master_0_read;                        // worker3_wout_translator:uav_read -> worker3_wout_agent:av_read
	wire    [3:0] worker3_wout_translator_avalon_universal_master_0_byteenable;                  // worker3_wout_translator:uav_byteenable -> worker3_wout_agent:av_byteenable
	wire          worker3_wout_translator_avalon_universal_master_0_readdatavalid;               // worker3_wout_agent:av_readdatavalid -> worker3_wout_translator:uav_readdatavalid
	wire          worker3_wout_translator_avalon_universal_master_0_lock;                        // worker3_wout_translator:uav_lock -> worker3_wout_agent:av_lock
	wire          worker3_wout_translator_avalon_universal_master_0_write;                       // worker3_wout_translator:uav_write -> worker3_wout_agent:av_write
	wire   [31:0] worker3_wout_translator_avalon_universal_master_0_writedata;                   // worker3_wout_translator:uav_writedata -> worker3_wout_agent:av_writedata
	wire    [2:0] worker3_wout_translator_avalon_universal_master_0_burstcount;                  // worker3_wout_translator:uav_burstcount -> worker3_wout_agent:av_burstcount
	wire   [31:0] jtag_uart_0_avalon_jtag_slave_agent_m0_readdata;                               // jtag_uart_0_avalon_jtag_slave_translator:uav_readdata -> jtag_uart_0_avalon_jtag_slave_agent:m0_readdata
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_waitrequest;                            // jtag_uart_0_avalon_jtag_slave_translator:uav_waitrequest -> jtag_uart_0_avalon_jtag_slave_agent:m0_waitrequest
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_debugaccess;                            // jtag_uart_0_avalon_jtag_slave_agent:m0_debugaccess -> jtag_uart_0_avalon_jtag_slave_translator:uav_debugaccess
	wire   [27:0] jtag_uart_0_avalon_jtag_slave_agent_m0_address;                                // jtag_uart_0_avalon_jtag_slave_agent:m0_address -> jtag_uart_0_avalon_jtag_slave_translator:uav_address
	wire    [3:0] jtag_uart_0_avalon_jtag_slave_agent_m0_byteenable;                             // jtag_uart_0_avalon_jtag_slave_agent:m0_byteenable -> jtag_uart_0_avalon_jtag_slave_translator:uav_byteenable
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_read;                                   // jtag_uart_0_avalon_jtag_slave_agent:m0_read -> jtag_uart_0_avalon_jtag_slave_translator:uav_read
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_readdatavalid;                          // jtag_uart_0_avalon_jtag_slave_translator:uav_readdatavalid -> jtag_uart_0_avalon_jtag_slave_agent:m0_readdatavalid
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_lock;                                   // jtag_uart_0_avalon_jtag_slave_agent:m0_lock -> jtag_uart_0_avalon_jtag_slave_translator:uav_lock
	wire   [31:0] jtag_uart_0_avalon_jtag_slave_agent_m0_writedata;                              // jtag_uart_0_avalon_jtag_slave_agent:m0_writedata -> jtag_uart_0_avalon_jtag_slave_translator:uav_writedata
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_write;                                  // jtag_uart_0_avalon_jtag_slave_agent:m0_write -> jtag_uart_0_avalon_jtag_slave_translator:uav_write
	wire    [2:0] jtag_uart_0_avalon_jtag_slave_agent_m0_burstcount;                             // jtag_uart_0_avalon_jtag_slave_agent:m0_burstcount -> jtag_uart_0_avalon_jtag_slave_translator:uav_burstcount
	wire          jtag_uart_0_avalon_jtag_slave_agent_rf_source_valid;                           // jtag_uart_0_avalon_jtag_slave_agent:rf_source_valid -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_valid
	wire  [108:0] jtag_uart_0_avalon_jtag_slave_agent_rf_source_data;                            // jtag_uart_0_avalon_jtag_slave_agent:rf_source_data -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_data
	wire          jtag_uart_0_avalon_jtag_slave_agent_rf_source_ready;                           // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_ready -> jtag_uart_0_avalon_jtag_slave_agent:rf_source_ready
	wire          jtag_uart_0_avalon_jtag_slave_agent_rf_source_startofpacket;                   // jtag_uart_0_avalon_jtag_slave_agent:rf_source_startofpacket -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_startofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rf_source_endofpacket;                     // jtag_uart_0_avalon_jtag_slave_agent:rf_source_endofpacket -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_endofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_valid;                        // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_valid -> jtag_uart_0_avalon_jtag_slave_agent:rf_sink_valid
	wire  [108:0] jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_data;                         // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_data -> jtag_uart_0_avalon_jtag_slave_agent:rf_sink_data
	wire          jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_ready;                        // jtag_uart_0_avalon_jtag_slave_agent:rf_sink_ready -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_ready
	wire          jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket;                // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_startofpacket -> jtag_uart_0_avalon_jtag_slave_agent:rf_sink_startofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket;                  // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_endofpacket -> jtag_uart_0_avalon_jtag_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_src_valid;                                                             // cmd_mux:src_valid -> jtag_uart_0_avalon_jtag_slave_agent:cp_valid
	wire  [107:0] cmd_mux_src_data;                                                              // cmd_mux:src_data -> jtag_uart_0_avalon_jtag_slave_agent:cp_data
	wire          cmd_mux_src_ready;                                                             // jtag_uart_0_avalon_jtag_slave_agent:cp_ready -> cmd_mux:src_ready
	wire   [18:0] cmd_mux_src_channel;                                                           // cmd_mux:src_channel -> jtag_uart_0_avalon_jtag_slave_agent:cp_channel
	wire          cmd_mux_src_startofpacket;                                                     // cmd_mux:src_startofpacket -> jtag_uart_0_avalon_jtag_slave_agent:cp_startofpacket
	wire          cmd_mux_src_endofpacket;                                                       // cmd_mux:src_endofpacket -> jtag_uart_0_avalon_jtag_slave_agent:cp_endofpacket
	wire   [31:0] mbox_m_w0_avmm_msg_sender_agent_m0_readdata;                                   // mbox_m_w0_avmm_msg_sender_translator:uav_readdata -> mbox_m_w0_avmm_msg_sender_agent:m0_readdata
	wire          mbox_m_w0_avmm_msg_sender_agent_m0_waitrequest;                                // mbox_m_w0_avmm_msg_sender_translator:uav_waitrequest -> mbox_m_w0_avmm_msg_sender_agent:m0_waitrequest
	wire          mbox_m_w0_avmm_msg_sender_agent_m0_debugaccess;                                // mbox_m_w0_avmm_msg_sender_agent:m0_debugaccess -> mbox_m_w0_avmm_msg_sender_translator:uav_debugaccess
	wire   [27:0] mbox_m_w0_avmm_msg_sender_agent_m0_address;                                    // mbox_m_w0_avmm_msg_sender_agent:m0_address -> mbox_m_w0_avmm_msg_sender_translator:uav_address
	wire    [3:0] mbox_m_w0_avmm_msg_sender_agent_m0_byteenable;                                 // mbox_m_w0_avmm_msg_sender_agent:m0_byteenable -> mbox_m_w0_avmm_msg_sender_translator:uav_byteenable
	wire          mbox_m_w0_avmm_msg_sender_agent_m0_read;                                       // mbox_m_w0_avmm_msg_sender_agent:m0_read -> mbox_m_w0_avmm_msg_sender_translator:uav_read
	wire          mbox_m_w0_avmm_msg_sender_agent_m0_readdatavalid;                              // mbox_m_w0_avmm_msg_sender_translator:uav_readdatavalid -> mbox_m_w0_avmm_msg_sender_agent:m0_readdatavalid
	wire          mbox_m_w0_avmm_msg_sender_agent_m0_lock;                                       // mbox_m_w0_avmm_msg_sender_agent:m0_lock -> mbox_m_w0_avmm_msg_sender_translator:uav_lock
	wire   [31:0] mbox_m_w0_avmm_msg_sender_agent_m0_writedata;                                  // mbox_m_w0_avmm_msg_sender_agent:m0_writedata -> mbox_m_w0_avmm_msg_sender_translator:uav_writedata
	wire          mbox_m_w0_avmm_msg_sender_agent_m0_write;                                      // mbox_m_w0_avmm_msg_sender_agent:m0_write -> mbox_m_w0_avmm_msg_sender_translator:uav_write
	wire    [2:0] mbox_m_w0_avmm_msg_sender_agent_m0_burstcount;                                 // mbox_m_w0_avmm_msg_sender_agent:m0_burstcount -> mbox_m_w0_avmm_msg_sender_translator:uav_burstcount
	wire          mbox_m_w0_avmm_msg_sender_agent_rf_source_valid;                               // mbox_m_w0_avmm_msg_sender_agent:rf_source_valid -> mbox_m_w0_avmm_msg_sender_agent_rsp_fifo:in_valid
	wire  [108:0] mbox_m_w0_avmm_msg_sender_agent_rf_source_data;                                // mbox_m_w0_avmm_msg_sender_agent:rf_source_data -> mbox_m_w0_avmm_msg_sender_agent_rsp_fifo:in_data
	wire          mbox_m_w0_avmm_msg_sender_agent_rf_source_ready;                               // mbox_m_w0_avmm_msg_sender_agent_rsp_fifo:in_ready -> mbox_m_w0_avmm_msg_sender_agent:rf_source_ready
	wire          mbox_m_w0_avmm_msg_sender_agent_rf_source_startofpacket;                       // mbox_m_w0_avmm_msg_sender_agent:rf_source_startofpacket -> mbox_m_w0_avmm_msg_sender_agent_rsp_fifo:in_startofpacket
	wire          mbox_m_w0_avmm_msg_sender_agent_rf_source_endofpacket;                         // mbox_m_w0_avmm_msg_sender_agent:rf_source_endofpacket -> mbox_m_w0_avmm_msg_sender_agent_rsp_fifo:in_endofpacket
	wire          mbox_m_w0_avmm_msg_sender_agent_rsp_fifo_out_valid;                            // mbox_m_w0_avmm_msg_sender_agent_rsp_fifo:out_valid -> mbox_m_w0_avmm_msg_sender_agent:rf_sink_valid
	wire  [108:0] mbox_m_w0_avmm_msg_sender_agent_rsp_fifo_out_data;                             // mbox_m_w0_avmm_msg_sender_agent_rsp_fifo:out_data -> mbox_m_w0_avmm_msg_sender_agent:rf_sink_data
	wire          mbox_m_w0_avmm_msg_sender_agent_rsp_fifo_out_ready;                            // mbox_m_w0_avmm_msg_sender_agent:rf_sink_ready -> mbox_m_w0_avmm_msg_sender_agent_rsp_fifo:out_ready
	wire          mbox_m_w0_avmm_msg_sender_agent_rsp_fifo_out_startofpacket;                    // mbox_m_w0_avmm_msg_sender_agent_rsp_fifo:out_startofpacket -> mbox_m_w0_avmm_msg_sender_agent:rf_sink_startofpacket
	wire          mbox_m_w0_avmm_msg_sender_agent_rsp_fifo_out_endofpacket;                      // mbox_m_w0_avmm_msg_sender_agent_rsp_fifo:out_endofpacket -> mbox_m_w0_avmm_msg_sender_agent:rf_sink_endofpacket
	wire          cmd_mux_001_src_valid;                                                         // cmd_mux_001:src_valid -> mbox_m_w0_avmm_msg_sender_agent:cp_valid
	wire  [107:0] cmd_mux_001_src_data;                                                          // cmd_mux_001:src_data -> mbox_m_w0_avmm_msg_sender_agent:cp_data
	wire          cmd_mux_001_src_ready;                                                         // mbox_m_w0_avmm_msg_sender_agent:cp_ready -> cmd_mux_001:src_ready
	wire   [18:0] cmd_mux_001_src_channel;                                                       // cmd_mux_001:src_channel -> mbox_m_w0_avmm_msg_sender_agent:cp_channel
	wire          cmd_mux_001_src_startofpacket;                                                 // cmd_mux_001:src_startofpacket -> mbox_m_w0_avmm_msg_sender_agent:cp_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                                   // cmd_mux_001:src_endofpacket -> mbox_m_w0_avmm_msg_sender_agent:cp_endofpacket
	wire   [31:0] mbox_m_w1_avmm_msg_sender_agent_m0_readdata;                                   // mbox_m_w1_avmm_msg_sender_translator:uav_readdata -> mbox_m_w1_avmm_msg_sender_agent:m0_readdata
	wire          mbox_m_w1_avmm_msg_sender_agent_m0_waitrequest;                                // mbox_m_w1_avmm_msg_sender_translator:uav_waitrequest -> mbox_m_w1_avmm_msg_sender_agent:m0_waitrequest
	wire          mbox_m_w1_avmm_msg_sender_agent_m0_debugaccess;                                // mbox_m_w1_avmm_msg_sender_agent:m0_debugaccess -> mbox_m_w1_avmm_msg_sender_translator:uav_debugaccess
	wire   [27:0] mbox_m_w1_avmm_msg_sender_agent_m0_address;                                    // mbox_m_w1_avmm_msg_sender_agent:m0_address -> mbox_m_w1_avmm_msg_sender_translator:uav_address
	wire    [3:0] mbox_m_w1_avmm_msg_sender_agent_m0_byteenable;                                 // mbox_m_w1_avmm_msg_sender_agent:m0_byteenable -> mbox_m_w1_avmm_msg_sender_translator:uav_byteenable
	wire          mbox_m_w1_avmm_msg_sender_agent_m0_read;                                       // mbox_m_w1_avmm_msg_sender_agent:m0_read -> mbox_m_w1_avmm_msg_sender_translator:uav_read
	wire          mbox_m_w1_avmm_msg_sender_agent_m0_readdatavalid;                              // mbox_m_w1_avmm_msg_sender_translator:uav_readdatavalid -> mbox_m_w1_avmm_msg_sender_agent:m0_readdatavalid
	wire          mbox_m_w1_avmm_msg_sender_agent_m0_lock;                                       // mbox_m_w1_avmm_msg_sender_agent:m0_lock -> mbox_m_w1_avmm_msg_sender_translator:uav_lock
	wire   [31:0] mbox_m_w1_avmm_msg_sender_agent_m0_writedata;                                  // mbox_m_w1_avmm_msg_sender_agent:m0_writedata -> mbox_m_w1_avmm_msg_sender_translator:uav_writedata
	wire          mbox_m_w1_avmm_msg_sender_agent_m0_write;                                      // mbox_m_w1_avmm_msg_sender_agent:m0_write -> mbox_m_w1_avmm_msg_sender_translator:uav_write
	wire    [2:0] mbox_m_w1_avmm_msg_sender_agent_m0_burstcount;                                 // mbox_m_w1_avmm_msg_sender_agent:m0_burstcount -> mbox_m_w1_avmm_msg_sender_translator:uav_burstcount
	wire          mbox_m_w1_avmm_msg_sender_agent_rf_source_valid;                               // mbox_m_w1_avmm_msg_sender_agent:rf_source_valid -> mbox_m_w1_avmm_msg_sender_agent_rsp_fifo:in_valid
	wire  [108:0] mbox_m_w1_avmm_msg_sender_agent_rf_source_data;                                // mbox_m_w1_avmm_msg_sender_agent:rf_source_data -> mbox_m_w1_avmm_msg_sender_agent_rsp_fifo:in_data
	wire          mbox_m_w1_avmm_msg_sender_agent_rf_source_ready;                               // mbox_m_w1_avmm_msg_sender_agent_rsp_fifo:in_ready -> mbox_m_w1_avmm_msg_sender_agent:rf_source_ready
	wire          mbox_m_w1_avmm_msg_sender_agent_rf_source_startofpacket;                       // mbox_m_w1_avmm_msg_sender_agent:rf_source_startofpacket -> mbox_m_w1_avmm_msg_sender_agent_rsp_fifo:in_startofpacket
	wire          mbox_m_w1_avmm_msg_sender_agent_rf_source_endofpacket;                         // mbox_m_w1_avmm_msg_sender_agent:rf_source_endofpacket -> mbox_m_w1_avmm_msg_sender_agent_rsp_fifo:in_endofpacket
	wire          mbox_m_w1_avmm_msg_sender_agent_rsp_fifo_out_valid;                            // mbox_m_w1_avmm_msg_sender_agent_rsp_fifo:out_valid -> mbox_m_w1_avmm_msg_sender_agent:rf_sink_valid
	wire  [108:0] mbox_m_w1_avmm_msg_sender_agent_rsp_fifo_out_data;                             // mbox_m_w1_avmm_msg_sender_agent_rsp_fifo:out_data -> mbox_m_w1_avmm_msg_sender_agent:rf_sink_data
	wire          mbox_m_w1_avmm_msg_sender_agent_rsp_fifo_out_ready;                            // mbox_m_w1_avmm_msg_sender_agent:rf_sink_ready -> mbox_m_w1_avmm_msg_sender_agent_rsp_fifo:out_ready
	wire          mbox_m_w1_avmm_msg_sender_agent_rsp_fifo_out_startofpacket;                    // mbox_m_w1_avmm_msg_sender_agent_rsp_fifo:out_startofpacket -> mbox_m_w1_avmm_msg_sender_agent:rf_sink_startofpacket
	wire          mbox_m_w1_avmm_msg_sender_agent_rsp_fifo_out_endofpacket;                      // mbox_m_w1_avmm_msg_sender_agent_rsp_fifo:out_endofpacket -> mbox_m_w1_avmm_msg_sender_agent:rf_sink_endofpacket
	wire          cmd_mux_002_src_valid;                                                         // cmd_mux_002:src_valid -> mbox_m_w1_avmm_msg_sender_agent:cp_valid
	wire  [107:0] cmd_mux_002_src_data;                                                          // cmd_mux_002:src_data -> mbox_m_w1_avmm_msg_sender_agent:cp_data
	wire          cmd_mux_002_src_ready;                                                         // mbox_m_w1_avmm_msg_sender_agent:cp_ready -> cmd_mux_002:src_ready
	wire   [18:0] cmd_mux_002_src_channel;                                                       // cmd_mux_002:src_channel -> mbox_m_w1_avmm_msg_sender_agent:cp_channel
	wire          cmd_mux_002_src_startofpacket;                                                 // cmd_mux_002:src_startofpacket -> mbox_m_w1_avmm_msg_sender_agent:cp_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                                   // cmd_mux_002:src_endofpacket -> mbox_m_w1_avmm_msg_sender_agent:cp_endofpacket
	wire   [31:0] mbox_m_w2_avmm_msg_sender_agent_m0_readdata;                                   // mbox_m_w2_avmm_msg_sender_translator:uav_readdata -> mbox_m_w2_avmm_msg_sender_agent:m0_readdata
	wire          mbox_m_w2_avmm_msg_sender_agent_m0_waitrequest;                                // mbox_m_w2_avmm_msg_sender_translator:uav_waitrequest -> mbox_m_w2_avmm_msg_sender_agent:m0_waitrequest
	wire          mbox_m_w2_avmm_msg_sender_agent_m0_debugaccess;                                // mbox_m_w2_avmm_msg_sender_agent:m0_debugaccess -> mbox_m_w2_avmm_msg_sender_translator:uav_debugaccess
	wire   [27:0] mbox_m_w2_avmm_msg_sender_agent_m0_address;                                    // mbox_m_w2_avmm_msg_sender_agent:m0_address -> mbox_m_w2_avmm_msg_sender_translator:uav_address
	wire    [3:0] mbox_m_w2_avmm_msg_sender_agent_m0_byteenable;                                 // mbox_m_w2_avmm_msg_sender_agent:m0_byteenable -> mbox_m_w2_avmm_msg_sender_translator:uav_byteenable
	wire          mbox_m_w2_avmm_msg_sender_agent_m0_read;                                       // mbox_m_w2_avmm_msg_sender_agent:m0_read -> mbox_m_w2_avmm_msg_sender_translator:uav_read
	wire          mbox_m_w2_avmm_msg_sender_agent_m0_readdatavalid;                              // mbox_m_w2_avmm_msg_sender_translator:uav_readdatavalid -> mbox_m_w2_avmm_msg_sender_agent:m0_readdatavalid
	wire          mbox_m_w2_avmm_msg_sender_agent_m0_lock;                                       // mbox_m_w2_avmm_msg_sender_agent:m0_lock -> mbox_m_w2_avmm_msg_sender_translator:uav_lock
	wire   [31:0] mbox_m_w2_avmm_msg_sender_agent_m0_writedata;                                  // mbox_m_w2_avmm_msg_sender_agent:m0_writedata -> mbox_m_w2_avmm_msg_sender_translator:uav_writedata
	wire          mbox_m_w2_avmm_msg_sender_agent_m0_write;                                      // mbox_m_w2_avmm_msg_sender_agent:m0_write -> mbox_m_w2_avmm_msg_sender_translator:uav_write
	wire    [2:0] mbox_m_w2_avmm_msg_sender_agent_m0_burstcount;                                 // mbox_m_w2_avmm_msg_sender_agent:m0_burstcount -> mbox_m_w2_avmm_msg_sender_translator:uav_burstcount
	wire          mbox_m_w2_avmm_msg_sender_agent_rf_source_valid;                               // mbox_m_w2_avmm_msg_sender_agent:rf_source_valid -> mbox_m_w2_avmm_msg_sender_agent_rsp_fifo:in_valid
	wire  [108:0] mbox_m_w2_avmm_msg_sender_agent_rf_source_data;                                // mbox_m_w2_avmm_msg_sender_agent:rf_source_data -> mbox_m_w2_avmm_msg_sender_agent_rsp_fifo:in_data
	wire          mbox_m_w2_avmm_msg_sender_agent_rf_source_ready;                               // mbox_m_w2_avmm_msg_sender_agent_rsp_fifo:in_ready -> mbox_m_w2_avmm_msg_sender_agent:rf_source_ready
	wire          mbox_m_w2_avmm_msg_sender_agent_rf_source_startofpacket;                       // mbox_m_w2_avmm_msg_sender_agent:rf_source_startofpacket -> mbox_m_w2_avmm_msg_sender_agent_rsp_fifo:in_startofpacket
	wire          mbox_m_w2_avmm_msg_sender_agent_rf_source_endofpacket;                         // mbox_m_w2_avmm_msg_sender_agent:rf_source_endofpacket -> mbox_m_w2_avmm_msg_sender_agent_rsp_fifo:in_endofpacket
	wire          mbox_m_w2_avmm_msg_sender_agent_rsp_fifo_out_valid;                            // mbox_m_w2_avmm_msg_sender_agent_rsp_fifo:out_valid -> mbox_m_w2_avmm_msg_sender_agent:rf_sink_valid
	wire  [108:0] mbox_m_w2_avmm_msg_sender_agent_rsp_fifo_out_data;                             // mbox_m_w2_avmm_msg_sender_agent_rsp_fifo:out_data -> mbox_m_w2_avmm_msg_sender_agent:rf_sink_data
	wire          mbox_m_w2_avmm_msg_sender_agent_rsp_fifo_out_ready;                            // mbox_m_w2_avmm_msg_sender_agent:rf_sink_ready -> mbox_m_w2_avmm_msg_sender_agent_rsp_fifo:out_ready
	wire          mbox_m_w2_avmm_msg_sender_agent_rsp_fifo_out_startofpacket;                    // mbox_m_w2_avmm_msg_sender_agent_rsp_fifo:out_startofpacket -> mbox_m_w2_avmm_msg_sender_agent:rf_sink_startofpacket
	wire          mbox_m_w2_avmm_msg_sender_agent_rsp_fifo_out_endofpacket;                      // mbox_m_w2_avmm_msg_sender_agent_rsp_fifo:out_endofpacket -> mbox_m_w2_avmm_msg_sender_agent:rf_sink_endofpacket
	wire          cmd_mux_003_src_valid;                                                         // cmd_mux_003:src_valid -> mbox_m_w2_avmm_msg_sender_agent:cp_valid
	wire  [107:0] cmd_mux_003_src_data;                                                          // cmd_mux_003:src_data -> mbox_m_w2_avmm_msg_sender_agent:cp_data
	wire          cmd_mux_003_src_ready;                                                         // mbox_m_w2_avmm_msg_sender_agent:cp_ready -> cmd_mux_003:src_ready
	wire   [18:0] cmd_mux_003_src_channel;                                                       // cmd_mux_003:src_channel -> mbox_m_w2_avmm_msg_sender_agent:cp_channel
	wire          cmd_mux_003_src_startofpacket;                                                 // cmd_mux_003:src_startofpacket -> mbox_m_w2_avmm_msg_sender_agent:cp_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                                   // cmd_mux_003:src_endofpacket -> mbox_m_w2_avmm_msg_sender_agent:cp_endofpacket
	wire   [31:0] mbox_m_w3_avmm_msg_sender_agent_m0_readdata;                                   // mbox_m_w3_avmm_msg_sender_translator:uav_readdata -> mbox_m_w3_avmm_msg_sender_agent:m0_readdata
	wire          mbox_m_w3_avmm_msg_sender_agent_m0_waitrequest;                                // mbox_m_w3_avmm_msg_sender_translator:uav_waitrequest -> mbox_m_w3_avmm_msg_sender_agent:m0_waitrequest
	wire          mbox_m_w3_avmm_msg_sender_agent_m0_debugaccess;                                // mbox_m_w3_avmm_msg_sender_agent:m0_debugaccess -> mbox_m_w3_avmm_msg_sender_translator:uav_debugaccess
	wire   [27:0] mbox_m_w3_avmm_msg_sender_agent_m0_address;                                    // mbox_m_w3_avmm_msg_sender_agent:m0_address -> mbox_m_w3_avmm_msg_sender_translator:uav_address
	wire    [3:0] mbox_m_w3_avmm_msg_sender_agent_m0_byteenable;                                 // mbox_m_w3_avmm_msg_sender_agent:m0_byteenable -> mbox_m_w3_avmm_msg_sender_translator:uav_byteenable
	wire          mbox_m_w3_avmm_msg_sender_agent_m0_read;                                       // mbox_m_w3_avmm_msg_sender_agent:m0_read -> mbox_m_w3_avmm_msg_sender_translator:uav_read
	wire          mbox_m_w3_avmm_msg_sender_agent_m0_readdatavalid;                              // mbox_m_w3_avmm_msg_sender_translator:uav_readdatavalid -> mbox_m_w3_avmm_msg_sender_agent:m0_readdatavalid
	wire          mbox_m_w3_avmm_msg_sender_agent_m0_lock;                                       // mbox_m_w3_avmm_msg_sender_agent:m0_lock -> mbox_m_w3_avmm_msg_sender_translator:uav_lock
	wire   [31:0] mbox_m_w3_avmm_msg_sender_agent_m0_writedata;                                  // mbox_m_w3_avmm_msg_sender_agent:m0_writedata -> mbox_m_w3_avmm_msg_sender_translator:uav_writedata
	wire          mbox_m_w3_avmm_msg_sender_agent_m0_write;                                      // mbox_m_w3_avmm_msg_sender_agent:m0_write -> mbox_m_w3_avmm_msg_sender_translator:uav_write
	wire    [2:0] mbox_m_w3_avmm_msg_sender_agent_m0_burstcount;                                 // mbox_m_w3_avmm_msg_sender_agent:m0_burstcount -> mbox_m_w3_avmm_msg_sender_translator:uav_burstcount
	wire          mbox_m_w3_avmm_msg_sender_agent_rf_source_valid;                               // mbox_m_w3_avmm_msg_sender_agent:rf_source_valid -> mbox_m_w3_avmm_msg_sender_agent_rsp_fifo:in_valid
	wire  [108:0] mbox_m_w3_avmm_msg_sender_agent_rf_source_data;                                // mbox_m_w3_avmm_msg_sender_agent:rf_source_data -> mbox_m_w3_avmm_msg_sender_agent_rsp_fifo:in_data
	wire          mbox_m_w3_avmm_msg_sender_agent_rf_source_ready;                               // mbox_m_w3_avmm_msg_sender_agent_rsp_fifo:in_ready -> mbox_m_w3_avmm_msg_sender_agent:rf_source_ready
	wire          mbox_m_w3_avmm_msg_sender_agent_rf_source_startofpacket;                       // mbox_m_w3_avmm_msg_sender_agent:rf_source_startofpacket -> mbox_m_w3_avmm_msg_sender_agent_rsp_fifo:in_startofpacket
	wire          mbox_m_w3_avmm_msg_sender_agent_rf_source_endofpacket;                         // mbox_m_w3_avmm_msg_sender_agent:rf_source_endofpacket -> mbox_m_w3_avmm_msg_sender_agent_rsp_fifo:in_endofpacket
	wire          mbox_m_w3_avmm_msg_sender_agent_rsp_fifo_out_valid;                            // mbox_m_w3_avmm_msg_sender_agent_rsp_fifo:out_valid -> mbox_m_w3_avmm_msg_sender_agent:rf_sink_valid
	wire  [108:0] mbox_m_w3_avmm_msg_sender_agent_rsp_fifo_out_data;                             // mbox_m_w3_avmm_msg_sender_agent_rsp_fifo:out_data -> mbox_m_w3_avmm_msg_sender_agent:rf_sink_data
	wire          mbox_m_w3_avmm_msg_sender_agent_rsp_fifo_out_ready;                            // mbox_m_w3_avmm_msg_sender_agent:rf_sink_ready -> mbox_m_w3_avmm_msg_sender_agent_rsp_fifo:out_ready
	wire          mbox_m_w3_avmm_msg_sender_agent_rsp_fifo_out_startofpacket;                    // mbox_m_w3_avmm_msg_sender_agent_rsp_fifo:out_startofpacket -> mbox_m_w3_avmm_msg_sender_agent:rf_sink_startofpacket
	wire          mbox_m_w3_avmm_msg_sender_agent_rsp_fifo_out_endofpacket;                      // mbox_m_w3_avmm_msg_sender_agent_rsp_fifo:out_endofpacket -> mbox_m_w3_avmm_msg_sender_agent:rf_sink_endofpacket
	wire          cmd_mux_004_src_valid;                                                         // cmd_mux_004:src_valid -> mbox_m_w3_avmm_msg_sender_agent:cp_valid
	wire  [107:0] cmd_mux_004_src_data;                                                          // cmd_mux_004:src_data -> mbox_m_w3_avmm_msg_sender_agent:cp_data
	wire          cmd_mux_004_src_ready;                                                         // mbox_m_w3_avmm_msg_sender_agent:cp_ready -> cmd_mux_004:src_ready
	wire   [18:0] cmd_mux_004_src_channel;                                                       // cmd_mux_004:src_channel -> mbox_m_w3_avmm_msg_sender_agent:cp_channel
	wire          cmd_mux_004_src_startofpacket;                                                 // cmd_mux_004:src_startofpacket -> mbox_m_w3_avmm_msg_sender_agent:cp_startofpacket
	wire          cmd_mux_004_src_endofpacket;                                                   // cmd_mux_004:src_endofpacket -> mbox_m_w3_avmm_msg_sender_agent:cp_endofpacket
	wire   [31:0] performance_counter_0_control_slave_agent_m0_readdata;                         // performance_counter_0_control_slave_translator:uav_readdata -> performance_counter_0_control_slave_agent:m0_readdata
	wire          performance_counter_0_control_slave_agent_m0_waitrequest;                      // performance_counter_0_control_slave_translator:uav_waitrequest -> performance_counter_0_control_slave_agent:m0_waitrequest
	wire          performance_counter_0_control_slave_agent_m0_debugaccess;                      // performance_counter_0_control_slave_agent:m0_debugaccess -> performance_counter_0_control_slave_translator:uav_debugaccess
	wire   [27:0] performance_counter_0_control_slave_agent_m0_address;                          // performance_counter_0_control_slave_agent:m0_address -> performance_counter_0_control_slave_translator:uav_address
	wire    [3:0] performance_counter_0_control_slave_agent_m0_byteenable;                       // performance_counter_0_control_slave_agent:m0_byteenable -> performance_counter_0_control_slave_translator:uav_byteenable
	wire          performance_counter_0_control_slave_agent_m0_read;                             // performance_counter_0_control_slave_agent:m0_read -> performance_counter_0_control_slave_translator:uav_read
	wire          performance_counter_0_control_slave_agent_m0_readdatavalid;                    // performance_counter_0_control_slave_translator:uav_readdatavalid -> performance_counter_0_control_slave_agent:m0_readdatavalid
	wire          performance_counter_0_control_slave_agent_m0_lock;                             // performance_counter_0_control_slave_agent:m0_lock -> performance_counter_0_control_slave_translator:uav_lock
	wire   [31:0] performance_counter_0_control_slave_agent_m0_writedata;                        // performance_counter_0_control_slave_agent:m0_writedata -> performance_counter_0_control_slave_translator:uav_writedata
	wire          performance_counter_0_control_slave_agent_m0_write;                            // performance_counter_0_control_slave_agent:m0_write -> performance_counter_0_control_slave_translator:uav_write
	wire    [2:0] performance_counter_0_control_slave_agent_m0_burstcount;                       // performance_counter_0_control_slave_agent:m0_burstcount -> performance_counter_0_control_slave_translator:uav_burstcount
	wire          performance_counter_0_control_slave_agent_rf_source_valid;                     // performance_counter_0_control_slave_agent:rf_source_valid -> performance_counter_0_control_slave_agent_rsp_fifo:in_valid
	wire  [108:0] performance_counter_0_control_slave_agent_rf_source_data;                      // performance_counter_0_control_slave_agent:rf_source_data -> performance_counter_0_control_slave_agent_rsp_fifo:in_data
	wire          performance_counter_0_control_slave_agent_rf_source_ready;                     // performance_counter_0_control_slave_agent_rsp_fifo:in_ready -> performance_counter_0_control_slave_agent:rf_source_ready
	wire          performance_counter_0_control_slave_agent_rf_source_startofpacket;             // performance_counter_0_control_slave_agent:rf_source_startofpacket -> performance_counter_0_control_slave_agent_rsp_fifo:in_startofpacket
	wire          performance_counter_0_control_slave_agent_rf_source_endofpacket;               // performance_counter_0_control_slave_agent:rf_source_endofpacket -> performance_counter_0_control_slave_agent_rsp_fifo:in_endofpacket
	wire          performance_counter_0_control_slave_agent_rsp_fifo_out_valid;                  // performance_counter_0_control_slave_agent_rsp_fifo:out_valid -> performance_counter_0_control_slave_agent:rf_sink_valid
	wire  [108:0] performance_counter_0_control_slave_agent_rsp_fifo_out_data;                   // performance_counter_0_control_slave_agent_rsp_fifo:out_data -> performance_counter_0_control_slave_agent:rf_sink_data
	wire          performance_counter_0_control_slave_agent_rsp_fifo_out_ready;                  // performance_counter_0_control_slave_agent:rf_sink_ready -> performance_counter_0_control_slave_agent_rsp_fifo:out_ready
	wire          performance_counter_0_control_slave_agent_rsp_fifo_out_startofpacket;          // performance_counter_0_control_slave_agent_rsp_fifo:out_startofpacket -> performance_counter_0_control_slave_agent:rf_sink_startofpacket
	wire          performance_counter_0_control_slave_agent_rsp_fifo_out_endofpacket;            // performance_counter_0_control_slave_agent_rsp_fifo:out_endofpacket -> performance_counter_0_control_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_005_src_valid;                                                         // cmd_mux_005:src_valid -> performance_counter_0_control_slave_agent:cp_valid
	wire  [107:0] cmd_mux_005_src_data;                                                          // cmd_mux_005:src_data -> performance_counter_0_control_slave_agent:cp_data
	wire          cmd_mux_005_src_ready;                                                         // performance_counter_0_control_slave_agent:cp_ready -> cmd_mux_005:src_ready
	wire   [18:0] cmd_mux_005_src_channel;                                                       // cmd_mux_005:src_channel -> performance_counter_0_control_slave_agent:cp_channel
	wire          cmd_mux_005_src_startofpacket;                                                 // cmd_mux_005:src_startofpacket -> performance_counter_0_control_slave_agent:cp_startofpacket
	wire          cmd_mux_005_src_endofpacket;                                                   // cmd_mux_005:src_endofpacket -> performance_counter_0_control_slave_agent:cp_endofpacket
	wire   [31:0] manager_debug_mem_slave_agent_m0_readdata;                                     // manager_debug_mem_slave_translator:uav_readdata -> manager_debug_mem_slave_agent:m0_readdata
	wire          manager_debug_mem_slave_agent_m0_waitrequest;                                  // manager_debug_mem_slave_translator:uav_waitrequest -> manager_debug_mem_slave_agent:m0_waitrequest
	wire          manager_debug_mem_slave_agent_m0_debugaccess;                                  // manager_debug_mem_slave_agent:m0_debugaccess -> manager_debug_mem_slave_translator:uav_debugaccess
	wire   [27:0] manager_debug_mem_slave_agent_m0_address;                                      // manager_debug_mem_slave_agent:m0_address -> manager_debug_mem_slave_translator:uav_address
	wire    [3:0] manager_debug_mem_slave_agent_m0_byteenable;                                   // manager_debug_mem_slave_agent:m0_byteenable -> manager_debug_mem_slave_translator:uav_byteenable
	wire          manager_debug_mem_slave_agent_m0_read;                                         // manager_debug_mem_slave_agent:m0_read -> manager_debug_mem_slave_translator:uav_read
	wire          manager_debug_mem_slave_agent_m0_readdatavalid;                                // manager_debug_mem_slave_translator:uav_readdatavalid -> manager_debug_mem_slave_agent:m0_readdatavalid
	wire          manager_debug_mem_slave_agent_m0_lock;                                         // manager_debug_mem_slave_agent:m0_lock -> manager_debug_mem_slave_translator:uav_lock
	wire   [31:0] manager_debug_mem_slave_agent_m0_writedata;                                    // manager_debug_mem_slave_agent:m0_writedata -> manager_debug_mem_slave_translator:uav_writedata
	wire          manager_debug_mem_slave_agent_m0_write;                                        // manager_debug_mem_slave_agent:m0_write -> manager_debug_mem_slave_translator:uav_write
	wire    [2:0] manager_debug_mem_slave_agent_m0_burstcount;                                   // manager_debug_mem_slave_agent:m0_burstcount -> manager_debug_mem_slave_translator:uav_burstcount
	wire          manager_debug_mem_slave_agent_rf_source_valid;                                 // manager_debug_mem_slave_agent:rf_source_valid -> manager_debug_mem_slave_agent_rsp_fifo:in_valid
	wire  [108:0] manager_debug_mem_slave_agent_rf_source_data;                                  // manager_debug_mem_slave_agent:rf_source_data -> manager_debug_mem_slave_agent_rsp_fifo:in_data
	wire          manager_debug_mem_slave_agent_rf_source_ready;                                 // manager_debug_mem_slave_agent_rsp_fifo:in_ready -> manager_debug_mem_slave_agent:rf_source_ready
	wire          manager_debug_mem_slave_agent_rf_source_startofpacket;                         // manager_debug_mem_slave_agent:rf_source_startofpacket -> manager_debug_mem_slave_agent_rsp_fifo:in_startofpacket
	wire          manager_debug_mem_slave_agent_rf_source_endofpacket;                           // manager_debug_mem_slave_agent:rf_source_endofpacket -> manager_debug_mem_slave_agent_rsp_fifo:in_endofpacket
	wire          manager_debug_mem_slave_agent_rsp_fifo_out_valid;                              // manager_debug_mem_slave_agent_rsp_fifo:out_valid -> manager_debug_mem_slave_agent:rf_sink_valid
	wire  [108:0] manager_debug_mem_slave_agent_rsp_fifo_out_data;                               // manager_debug_mem_slave_agent_rsp_fifo:out_data -> manager_debug_mem_slave_agent:rf_sink_data
	wire          manager_debug_mem_slave_agent_rsp_fifo_out_ready;                              // manager_debug_mem_slave_agent:rf_sink_ready -> manager_debug_mem_slave_agent_rsp_fifo:out_ready
	wire          manager_debug_mem_slave_agent_rsp_fifo_out_startofpacket;                      // manager_debug_mem_slave_agent_rsp_fifo:out_startofpacket -> manager_debug_mem_slave_agent:rf_sink_startofpacket
	wire          manager_debug_mem_slave_agent_rsp_fifo_out_endofpacket;                        // manager_debug_mem_slave_agent_rsp_fifo:out_endofpacket -> manager_debug_mem_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_006_src_valid;                                                         // cmd_mux_006:src_valid -> manager_debug_mem_slave_agent:cp_valid
	wire  [107:0] cmd_mux_006_src_data;                                                          // cmd_mux_006:src_data -> manager_debug_mem_slave_agent:cp_data
	wire          cmd_mux_006_src_ready;                                                         // manager_debug_mem_slave_agent:cp_ready -> cmd_mux_006:src_ready
	wire   [18:0] cmd_mux_006_src_channel;                                                       // cmd_mux_006:src_channel -> manager_debug_mem_slave_agent:cp_channel
	wire          cmd_mux_006_src_startofpacket;                                                 // cmd_mux_006:src_startofpacket -> manager_debug_mem_slave_agent:cp_startofpacket
	wire          cmd_mux_006_src_endofpacket;                                                   // cmd_mux_006:src_endofpacket -> manager_debug_mem_slave_agent:cp_endofpacket
	wire   [31:0] req_fifo_out_agent_m0_readdata;                                                // req_fifo_out_translator:uav_readdata -> req_fifo_out_agent:m0_readdata
	wire          req_fifo_out_agent_m0_waitrequest;                                             // req_fifo_out_translator:uav_waitrequest -> req_fifo_out_agent:m0_waitrequest
	wire          req_fifo_out_agent_m0_debugaccess;                                             // req_fifo_out_agent:m0_debugaccess -> req_fifo_out_translator:uav_debugaccess
	wire   [27:0] req_fifo_out_agent_m0_address;                                                 // req_fifo_out_agent:m0_address -> req_fifo_out_translator:uav_address
	wire    [3:0] req_fifo_out_agent_m0_byteenable;                                              // req_fifo_out_agent:m0_byteenable -> req_fifo_out_translator:uav_byteenable
	wire          req_fifo_out_agent_m0_read;                                                    // req_fifo_out_agent:m0_read -> req_fifo_out_translator:uav_read
	wire          req_fifo_out_agent_m0_readdatavalid;                                           // req_fifo_out_translator:uav_readdatavalid -> req_fifo_out_agent:m0_readdatavalid
	wire          req_fifo_out_agent_m0_lock;                                                    // req_fifo_out_agent:m0_lock -> req_fifo_out_translator:uav_lock
	wire   [31:0] req_fifo_out_agent_m0_writedata;                                               // req_fifo_out_agent:m0_writedata -> req_fifo_out_translator:uav_writedata
	wire          req_fifo_out_agent_m0_write;                                                   // req_fifo_out_agent:m0_write -> req_fifo_out_translator:uav_write
	wire    [2:0] req_fifo_out_agent_m0_burstcount;                                              // req_fifo_out_agent:m0_burstcount -> req_fifo_out_translator:uav_burstcount
	wire          req_fifo_out_agent_rf_source_valid;                                            // req_fifo_out_agent:rf_source_valid -> req_fifo_out_agent_rsp_fifo:in_valid
	wire  [108:0] req_fifo_out_agent_rf_source_data;                                             // req_fifo_out_agent:rf_source_data -> req_fifo_out_agent_rsp_fifo:in_data
	wire          req_fifo_out_agent_rf_source_ready;                                            // req_fifo_out_agent_rsp_fifo:in_ready -> req_fifo_out_agent:rf_source_ready
	wire          req_fifo_out_agent_rf_source_startofpacket;                                    // req_fifo_out_agent:rf_source_startofpacket -> req_fifo_out_agent_rsp_fifo:in_startofpacket
	wire          req_fifo_out_agent_rf_source_endofpacket;                                      // req_fifo_out_agent:rf_source_endofpacket -> req_fifo_out_agent_rsp_fifo:in_endofpacket
	wire          req_fifo_out_agent_rsp_fifo_out_valid;                                         // req_fifo_out_agent_rsp_fifo:out_valid -> req_fifo_out_agent:rf_sink_valid
	wire  [108:0] req_fifo_out_agent_rsp_fifo_out_data;                                          // req_fifo_out_agent_rsp_fifo:out_data -> req_fifo_out_agent:rf_sink_data
	wire          req_fifo_out_agent_rsp_fifo_out_ready;                                         // req_fifo_out_agent:rf_sink_ready -> req_fifo_out_agent_rsp_fifo:out_ready
	wire          req_fifo_out_agent_rsp_fifo_out_startofpacket;                                 // req_fifo_out_agent_rsp_fifo:out_startofpacket -> req_fifo_out_agent:rf_sink_startofpacket
	wire          req_fifo_out_agent_rsp_fifo_out_endofpacket;                                   // req_fifo_out_agent_rsp_fifo:out_endofpacket -> req_fifo_out_agent:rf_sink_endofpacket
	wire          cmd_mux_007_src_valid;                                                         // cmd_mux_007:src_valid -> req_fifo_out_agent:cp_valid
	wire  [107:0] cmd_mux_007_src_data;                                                          // cmd_mux_007:src_data -> req_fifo_out_agent:cp_data
	wire          cmd_mux_007_src_ready;                                                         // req_fifo_out_agent:cp_ready -> cmd_mux_007:src_ready
	wire   [18:0] cmd_mux_007_src_channel;                                                       // cmd_mux_007:src_channel -> req_fifo_out_agent:cp_channel
	wire          cmd_mux_007_src_startofpacket;                                                 // cmd_mux_007:src_startofpacket -> req_fifo_out_agent:cp_startofpacket
	wire          cmd_mux_007_src_endofpacket;                                                   // cmd_mux_007:src_endofpacket -> req_fifo_out_agent:cp_endofpacket
	wire   [31:0] req_fifo_out_csr_agent_m0_readdata;                                            // req_fifo_out_csr_translator:uav_readdata -> req_fifo_out_csr_agent:m0_readdata
	wire          req_fifo_out_csr_agent_m0_waitrequest;                                         // req_fifo_out_csr_translator:uav_waitrequest -> req_fifo_out_csr_agent:m0_waitrequest
	wire          req_fifo_out_csr_agent_m0_debugaccess;                                         // req_fifo_out_csr_agent:m0_debugaccess -> req_fifo_out_csr_translator:uav_debugaccess
	wire   [27:0] req_fifo_out_csr_agent_m0_address;                                             // req_fifo_out_csr_agent:m0_address -> req_fifo_out_csr_translator:uav_address
	wire    [3:0] req_fifo_out_csr_agent_m0_byteenable;                                          // req_fifo_out_csr_agent:m0_byteenable -> req_fifo_out_csr_translator:uav_byteenable
	wire          req_fifo_out_csr_agent_m0_read;                                                // req_fifo_out_csr_agent:m0_read -> req_fifo_out_csr_translator:uav_read
	wire          req_fifo_out_csr_agent_m0_readdatavalid;                                       // req_fifo_out_csr_translator:uav_readdatavalid -> req_fifo_out_csr_agent:m0_readdatavalid
	wire          req_fifo_out_csr_agent_m0_lock;                                                // req_fifo_out_csr_agent:m0_lock -> req_fifo_out_csr_translator:uav_lock
	wire   [31:0] req_fifo_out_csr_agent_m0_writedata;                                           // req_fifo_out_csr_agent:m0_writedata -> req_fifo_out_csr_translator:uav_writedata
	wire          req_fifo_out_csr_agent_m0_write;                                               // req_fifo_out_csr_agent:m0_write -> req_fifo_out_csr_translator:uav_write
	wire    [2:0] req_fifo_out_csr_agent_m0_burstcount;                                          // req_fifo_out_csr_agent:m0_burstcount -> req_fifo_out_csr_translator:uav_burstcount
	wire          req_fifo_out_csr_agent_rf_source_valid;                                        // req_fifo_out_csr_agent:rf_source_valid -> req_fifo_out_csr_agent_rsp_fifo:in_valid
	wire  [108:0] req_fifo_out_csr_agent_rf_source_data;                                         // req_fifo_out_csr_agent:rf_source_data -> req_fifo_out_csr_agent_rsp_fifo:in_data
	wire          req_fifo_out_csr_agent_rf_source_ready;                                        // req_fifo_out_csr_agent_rsp_fifo:in_ready -> req_fifo_out_csr_agent:rf_source_ready
	wire          req_fifo_out_csr_agent_rf_source_startofpacket;                                // req_fifo_out_csr_agent:rf_source_startofpacket -> req_fifo_out_csr_agent_rsp_fifo:in_startofpacket
	wire          req_fifo_out_csr_agent_rf_source_endofpacket;                                  // req_fifo_out_csr_agent:rf_source_endofpacket -> req_fifo_out_csr_agent_rsp_fifo:in_endofpacket
	wire          req_fifo_out_csr_agent_rsp_fifo_out_valid;                                     // req_fifo_out_csr_agent_rsp_fifo:out_valid -> req_fifo_out_csr_agent:rf_sink_valid
	wire  [108:0] req_fifo_out_csr_agent_rsp_fifo_out_data;                                      // req_fifo_out_csr_agent_rsp_fifo:out_data -> req_fifo_out_csr_agent:rf_sink_data
	wire          req_fifo_out_csr_agent_rsp_fifo_out_ready;                                     // req_fifo_out_csr_agent:rf_sink_ready -> req_fifo_out_csr_agent_rsp_fifo:out_ready
	wire          req_fifo_out_csr_agent_rsp_fifo_out_startofpacket;                             // req_fifo_out_csr_agent_rsp_fifo:out_startofpacket -> req_fifo_out_csr_agent:rf_sink_startofpacket
	wire          req_fifo_out_csr_agent_rsp_fifo_out_endofpacket;                               // req_fifo_out_csr_agent_rsp_fifo:out_endofpacket -> req_fifo_out_csr_agent:rf_sink_endofpacket
	wire          cmd_mux_008_src_valid;                                                         // cmd_mux_008:src_valid -> req_fifo_out_csr_agent:cp_valid
	wire  [107:0] cmd_mux_008_src_data;                                                          // cmd_mux_008:src_data -> req_fifo_out_csr_agent:cp_data
	wire          cmd_mux_008_src_ready;                                                         // req_fifo_out_csr_agent:cp_ready -> cmd_mux_008:src_ready
	wire   [18:0] cmd_mux_008_src_channel;                                                       // cmd_mux_008:src_channel -> req_fifo_out_csr_agent:cp_channel
	wire          cmd_mux_008_src_startofpacket;                                                 // cmd_mux_008:src_startofpacket -> req_fifo_out_csr_agent:cp_startofpacket
	wire          cmd_mux_008_src_endofpacket;                                                   // cmd_mux_008:src_endofpacket -> req_fifo_out_csr_agent:cp_endofpacket
	wire   [31:0] altpll_0_pll_slave_agent_m0_readdata;                                          // altpll_0_pll_slave_translator:uav_readdata -> altpll_0_pll_slave_agent:m0_readdata
	wire          altpll_0_pll_slave_agent_m0_waitrequest;                                       // altpll_0_pll_slave_translator:uav_waitrequest -> altpll_0_pll_slave_agent:m0_waitrequest
	wire          altpll_0_pll_slave_agent_m0_debugaccess;                                       // altpll_0_pll_slave_agent:m0_debugaccess -> altpll_0_pll_slave_translator:uav_debugaccess
	wire   [27:0] altpll_0_pll_slave_agent_m0_address;                                           // altpll_0_pll_slave_agent:m0_address -> altpll_0_pll_slave_translator:uav_address
	wire    [3:0] altpll_0_pll_slave_agent_m0_byteenable;                                        // altpll_0_pll_slave_agent:m0_byteenable -> altpll_0_pll_slave_translator:uav_byteenable
	wire          altpll_0_pll_slave_agent_m0_read;                                              // altpll_0_pll_slave_agent:m0_read -> altpll_0_pll_slave_translator:uav_read
	wire          altpll_0_pll_slave_agent_m0_readdatavalid;                                     // altpll_0_pll_slave_translator:uav_readdatavalid -> altpll_0_pll_slave_agent:m0_readdatavalid
	wire          altpll_0_pll_slave_agent_m0_lock;                                              // altpll_0_pll_slave_agent:m0_lock -> altpll_0_pll_slave_translator:uav_lock
	wire   [31:0] altpll_0_pll_slave_agent_m0_writedata;                                         // altpll_0_pll_slave_agent:m0_writedata -> altpll_0_pll_slave_translator:uav_writedata
	wire          altpll_0_pll_slave_agent_m0_write;                                             // altpll_0_pll_slave_agent:m0_write -> altpll_0_pll_slave_translator:uav_write
	wire    [2:0] altpll_0_pll_slave_agent_m0_burstcount;                                        // altpll_0_pll_slave_agent:m0_burstcount -> altpll_0_pll_slave_translator:uav_burstcount
	wire          altpll_0_pll_slave_agent_rf_source_valid;                                      // altpll_0_pll_slave_agent:rf_source_valid -> altpll_0_pll_slave_agent_rsp_fifo:in_valid
	wire  [108:0] altpll_0_pll_slave_agent_rf_source_data;                                       // altpll_0_pll_slave_agent:rf_source_data -> altpll_0_pll_slave_agent_rsp_fifo:in_data
	wire          altpll_0_pll_slave_agent_rf_source_ready;                                      // altpll_0_pll_slave_agent_rsp_fifo:in_ready -> altpll_0_pll_slave_agent:rf_source_ready
	wire          altpll_0_pll_slave_agent_rf_source_startofpacket;                              // altpll_0_pll_slave_agent:rf_source_startofpacket -> altpll_0_pll_slave_agent_rsp_fifo:in_startofpacket
	wire          altpll_0_pll_slave_agent_rf_source_endofpacket;                                // altpll_0_pll_slave_agent:rf_source_endofpacket -> altpll_0_pll_slave_agent_rsp_fifo:in_endofpacket
	wire          altpll_0_pll_slave_agent_rsp_fifo_out_valid;                                   // altpll_0_pll_slave_agent_rsp_fifo:out_valid -> altpll_0_pll_slave_agent:rf_sink_valid
	wire  [108:0] altpll_0_pll_slave_agent_rsp_fifo_out_data;                                    // altpll_0_pll_slave_agent_rsp_fifo:out_data -> altpll_0_pll_slave_agent:rf_sink_data
	wire          altpll_0_pll_slave_agent_rsp_fifo_out_ready;                                   // altpll_0_pll_slave_agent:rf_sink_ready -> altpll_0_pll_slave_agent_rsp_fifo:out_ready
	wire          altpll_0_pll_slave_agent_rsp_fifo_out_startofpacket;                           // altpll_0_pll_slave_agent_rsp_fifo:out_startofpacket -> altpll_0_pll_slave_agent:rf_sink_startofpacket
	wire          altpll_0_pll_slave_agent_rsp_fifo_out_endofpacket;                             // altpll_0_pll_slave_agent_rsp_fifo:out_endofpacket -> altpll_0_pll_slave_agent:rf_sink_endofpacket
	wire          altpll_0_pll_slave_agent_rdata_fifo_src_valid;                                 // altpll_0_pll_slave_agent:rdata_fifo_src_valid -> altpll_0_pll_slave_agent_rdata_fifo:in_valid
	wire   [33:0] altpll_0_pll_slave_agent_rdata_fifo_src_data;                                  // altpll_0_pll_slave_agent:rdata_fifo_src_data -> altpll_0_pll_slave_agent_rdata_fifo:in_data
	wire          altpll_0_pll_slave_agent_rdata_fifo_src_ready;                                 // altpll_0_pll_slave_agent_rdata_fifo:in_ready -> altpll_0_pll_slave_agent:rdata_fifo_src_ready
	wire          cmd_mux_009_src_valid;                                                         // cmd_mux_009:src_valid -> altpll_0_pll_slave_agent:cp_valid
	wire  [107:0] cmd_mux_009_src_data;                                                          // cmd_mux_009:src_data -> altpll_0_pll_slave_agent:cp_data
	wire          cmd_mux_009_src_ready;                                                         // altpll_0_pll_slave_agent:cp_ready -> cmd_mux_009:src_ready
	wire   [18:0] cmd_mux_009_src_channel;                                                       // cmd_mux_009:src_channel -> altpll_0_pll_slave_agent:cp_channel
	wire          cmd_mux_009_src_startofpacket;                                                 // cmd_mux_009:src_startofpacket -> altpll_0_pll_slave_agent:cp_startofpacket
	wire          cmd_mux_009_src_endofpacket;                                                   // cmd_mux_009:src_endofpacket -> altpll_0_pll_slave_agent:cp_endofpacket
	wire   [31:0] shared_ocm_s1_agent_m0_readdata;                                               // shared_ocm_s1_translator:uav_readdata -> shared_ocm_s1_agent:m0_readdata
	wire          shared_ocm_s1_agent_m0_waitrequest;                                            // shared_ocm_s1_translator:uav_waitrequest -> shared_ocm_s1_agent:m0_waitrequest
	wire          shared_ocm_s1_agent_m0_debugaccess;                                            // shared_ocm_s1_agent:m0_debugaccess -> shared_ocm_s1_translator:uav_debugaccess
	wire   [27:0] shared_ocm_s1_agent_m0_address;                                                // shared_ocm_s1_agent:m0_address -> shared_ocm_s1_translator:uav_address
	wire    [3:0] shared_ocm_s1_agent_m0_byteenable;                                             // shared_ocm_s1_agent:m0_byteenable -> shared_ocm_s1_translator:uav_byteenable
	wire          shared_ocm_s1_agent_m0_read;                                                   // shared_ocm_s1_agent:m0_read -> shared_ocm_s1_translator:uav_read
	wire          shared_ocm_s1_agent_m0_readdatavalid;                                          // shared_ocm_s1_translator:uav_readdatavalid -> shared_ocm_s1_agent:m0_readdatavalid
	wire          shared_ocm_s1_agent_m0_lock;                                                   // shared_ocm_s1_agent:m0_lock -> shared_ocm_s1_translator:uav_lock
	wire   [31:0] shared_ocm_s1_agent_m0_writedata;                                              // shared_ocm_s1_agent:m0_writedata -> shared_ocm_s1_translator:uav_writedata
	wire          shared_ocm_s1_agent_m0_write;                                                  // shared_ocm_s1_agent:m0_write -> shared_ocm_s1_translator:uav_write
	wire    [2:0] shared_ocm_s1_agent_m0_burstcount;                                             // shared_ocm_s1_agent:m0_burstcount -> shared_ocm_s1_translator:uav_burstcount
	wire          shared_ocm_s1_agent_rf_source_valid;                                           // shared_ocm_s1_agent:rf_source_valid -> shared_ocm_s1_agent_rsp_fifo:in_valid
	wire  [108:0] shared_ocm_s1_agent_rf_source_data;                                            // shared_ocm_s1_agent:rf_source_data -> shared_ocm_s1_agent_rsp_fifo:in_data
	wire          shared_ocm_s1_agent_rf_source_ready;                                           // shared_ocm_s1_agent_rsp_fifo:in_ready -> shared_ocm_s1_agent:rf_source_ready
	wire          shared_ocm_s1_agent_rf_source_startofpacket;                                   // shared_ocm_s1_agent:rf_source_startofpacket -> shared_ocm_s1_agent_rsp_fifo:in_startofpacket
	wire          shared_ocm_s1_agent_rf_source_endofpacket;                                     // shared_ocm_s1_agent:rf_source_endofpacket -> shared_ocm_s1_agent_rsp_fifo:in_endofpacket
	wire          shared_ocm_s1_agent_rsp_fifo_out_valid;                                        // shared_ocm_s1_agent_rsp_fifo:out_valid -> shared_ocm_s1_agent:rf_sink_valid
	wire  [108:0] shared_ocm_s1_agent_rsp_fifo_out_data;                                         // shared_ocm_s1_agent_rsp_fifo:out_data -> shared_ocm_s1_agent:rf_sink_data
	wire          shared_ocm_s1_agent_rsp_fifo_out_ready;                                        // shared_ocm_s1_agent:rf_sink_ready -> shared_ocm_s1_agent_rsp_fifo:out_ready
	wire          shared_ocm_s1_agent_rsp_fifo_out_startofpacket;                                // shared_ocm_s1_agent_rsp_fifo:out_startofpacket -> shared_ocm_s1_agent:rf_sink_startofpacket
	wire          shared_ocm_s1_agent_rsp_fifo_out_endofpacket;                                  // shared_ocm_s1_agent_rsp_fifo:out_endofpacket -> shared_ocm_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_010_src_valid;                                                         // cmd_mux_010:src_valid -> shared_ocm_s1_agent:cp_valid
	wire  [107:0] cmd_mux_010_src_data;                                                          // cmd_mux_010:src_data -> shared_ocm_s1_agent:cp_data
	wire          cmd_mux_010_src_ready;                                                         // shared_ocm_s1_agent:cp_ready -> cmd_mux_010:src_ready
	wire   [18:0] cmd_mux_010_src_channel;                                                       // cmd_mux_010:src_channel -> shared_ocm_s1_agent:cp_channel
	wire          cmd_mux_010_src_startofpacket;                                                 // cmd_mux_010:src_startofpacket -> shared_ocm_s1_agent:cp_startofpacket
	wire          cmd_mux_010_src_endofpacket;                                                   // cmd_mux_010:src_endofpacket -> shared_ocm_s1_agent:cp_endofpacket
	wire   [31:0] sdram_0_sdout_agent_m0_readdata;                                               // sdram_0_sdout_translator:uav_readdata -> sdram_0_sdout_agent:m0_readdata
	wire          sdram_0_sdout_agent_m0_waitrequest;                                            // sdram_0_sdout_translator:uav_waitrequest -> sdram_0_sdout_agent:m0_waitrequest
	wire          sdram_0_sdout_agent_m0_debugaccess;                                            // sdram_0_sdout_agent:m0_debugaccess -> sdram_0_sdout_translator:uav_debugaccess
	wire   [27:0] sdram_0_sdout_agent_m0_address;                                                // sdram_0_sdout_agent:m0_address -> sdram_0_sdout_translator:uav_address
	wire    [3:0] sdram_0_sdout_agent_m0_byteenable;                                             // sdram_0_sdout_agent:m0_byteenable -> sdram_0_sdout_translator:uav_byteenable
	wire          sdram_0_sdout_agent_m0_read;                                                   // sdram_0_sdout_agent:m0_read -> sdram_0_sdout_translator:uav_read
	wire          sdram_0_sdout_agent_m0_readdatavalid;                                          // sdram_0_sdout_translator:uav_readdatavalid -> sdram_0_sdout_agent:m0_readdatavalid
	wire          sdram_0_sdout_agent_m0_lock;                                                   // sdram_0_sdout_agent:m0_lock -> sdram_0_sdout_translator:uav_lock
	wire   [31:0] sdram_0_sdout_agent_m0_writedata;                                              // sdram_0_sdout_agent:m0_writedata -> sdram_0_sdout_translator:uav_writedata
	wire          sdram_0_sdout_agent_m0_write;                                                  // sdram_0_sdout_agent:m0_write -> sdram_0_sdout_translator:uav_write
	wire    [2:0] sdram_0_sdout_agent_m0_burstcount;                                             // sdram_0_sdout_agent:m0_burstcount -> sdram_0_sdout_translator:uav_burstcount
	wire          sdram_0_sdout_agent_rf_source_valid;                                           // sdram_0_sdout_agent:rf_source_valid -> sdram_0_sdout_agent_rsp_fifo:in_valid
	wire  [108:0] sdram_0_sdout_agent_rf_source_data;                                            // sdram_0_sdout_agent:rf_source_data -> sdram_0_sdout_agent_rsp_fifo:in_data
	wire          sdram_0_sdout_agent_rf_source_ready;                                           // sdram_0_sdout_agent_rsp_fifo:in_ready -> sdram_0_sdout_agent:rf_source_ready
	wire          sdram_0_sdout_agent_rf_source_startofpacket;                                   // sdram_0_sdout_agent:rf_source_startofpacket -> sdram_0_sdout_agent_rsp_fifo:in_startofpacket
	wire          sdram_0_sdout_agent_rf_source_endofpacket;                                     // sdram_0_sdout_agent:rf_source_endofpacket -> sdram_0_sdout_agent_rsp_fifo:in_endofpacket
	wire          sdram_0_sdout_agent_rsp_fifo_out_valid;                                        // sdram_0_sdout_agent_rsp_fifo:out_valid -> sdram_0_sdout_agent:rf_sink_valid
	wire  [108:0] sdram_0_sdout_agent_rsp_fifo_out_data;                                         // sdram_0_sdout_agent_rsp_fifo:out_data -> sdram_0_sdout_agent:rf_sink_data
	wire          sdram_0_sdout_agent_rsp_fifo_out_ready;                                        // sdram_0_sdout_agent:rf_sink_ready -> sdram_0_sdout_agent_rsp_fifo:out_ready
	wire          sdram_0_sdout_agent_rsp_fifo_out_startofpacket;                                // sdram_0_sdout_agent_rsp_fifo:out_startofpacket -> sdram_0_sdout_agent:rf_sink_startofpacket
	wire          sdram_0_sdout_agent_rsp_fifo_out_endofpacket;                                  // sdram_0_sdout_agent_rsp_fifo:out_endofpacket -> sdram_0_sdout_agent:rf_sink_endofpacket
	wire          cmd_mux_011_src_valid;                                                         // cmd_mux_011:src_valid -> sdram_0_sdout_agent:cp_valid
	wire  [107:0] cmd_mux_011_src_data;                                                          // cmd_mux_011:src_data -> sdram_0_sdout_agent:cp_data
	wire          cmd_mux_011_src_ready;                                                         // sdram_0_sdout_agent:cp_ready -> cmd_mux_011:src_ready
	wire   [18:0] cmd_mux_011_src_channel;                                                       // cmd_mux_011:src_channel -> sdram_0_sdout_agent:cp_channel
	wire          cmd_mux_011_src_startofpacket;                                                 // cmd_mux_011:src_startofpacket -> sdram_0_sdout_agent:cp_startofpacket
	wire          cmd_mux_011_src_endofpacket;                                                   // cmd_mux_011:src_endofpacket -> sdram_0_sdout_agent:cp_endofpacket
	wire   [31:0] mbox_m_w3_avmm_msg_receiver_agent_m0_readdata;                                 // mbox_m_w3_avmm_msg_receiver_translator:uav_readdata -> mbox_m_w3_avmm_msg_receiver_agent:m0_readdata
	wire          mbox_m_w3_avmm_msg_receiver_agent_m0_waitrequest;                              // mbox_m_w3_avmm_msg_receiver_translator:uav_waitrequest -> mbox_m_w3_avmm_msg_receiver_agent:m0_waitrequest
	wire          mbox_m_w3_avmm_msg_receiver_agent_m0_debugaccess;                              // mbox_m_w3_avmm_msg_receiver_agent:m0_debugaccess -> mbox_m_w3_avmm_msg_receiver_translator:uav_debugaccess
	wire   [27:0] mbox_m_w3_avmm_msg_receiver_agent_m0_address;                                  // mbox_m_w3_avmm_msg_receiver_agent:m0_address -> mbox_m_w3_avmm_msg_receiver_translator:uav_address
	wire    [3:0] mbox_m_w3_avmm_msg_receiver_agent_m0_byteenable;                               // mbox_m_w3_avmm_msg_receiver_agent:m0_byteenable -> mbox_m_w3_avmm_msg_receiver_translator:uav_byteenable
	wire          mbox_m_w3_avmm_msg_receiver_agent_m0_read;                                     // mbox_m_w3_avmm_msg_receiver_agent:m0_read -> mbox_m_w3_avmm_msg_receiver_translator:uav_read
	wire          mbox_m_w3_avmm_msg_receiver_agent_m0_readdatavalid;                            // mbox_m_w3_avmm_msg_receiver_translator:uav_readdatavalid -> mbox_m_w3_avmm_msg_receiver_agent:m0_readdatavalid
	wire          mbox_m_w3_avmm_msg_receiver_agent_m0_lock;                                     // mbox_m_w3_avmm_msg_receiver_agent:m0_lock -> mbox_m_w3_avmm_msg_receiver_translator:uav_lock
	wire   [31:0] mbox_m_w3_avmm_msg_receiver_agent_m0_writedata;                                // mbox_m_w3_avmm_msg_receiver_agent:m0_writedata -> mbox_m_w3_avmm_msg_receiver_translator:uav_writedata
	wire          mbox_m_w3_avmm_msg_receiver_agent_m0_write;                                    // mbox_m_w3_avmm_msg_receiver_agent:m0_write -> mbox_m_w3_avmm_msg_receiver_translator:uav_write
	wire    [2:0] mbox_m_w3_avmm_msg_receiver_agent_m0_burstcount;                               // mbox_m_w3_avmm_msg_receiver_agent:m0_burstcount -> mbox_m_w3_avmm_msg_receiver_translator:uav_burstcount
	wire          mbox_m_w3_avmm_msg_receiver_agent_rf_source_valid;                             // mbox_m_w3_avmm_msg_receiver_agent:rf_source_valid -> mbox_m_w3_avmm_msg_receiver_agent_rsp_fifo:in_valid
	wire  [108:0] mbox_m_w3_avmm_msg_receiver_agent_rf_source_data;                              // mbox_m_w3_avmm_msg_receiver_agent:rf_source_data -> mbox_m_w3_avmm_msg_receiver_agent_rsp_fifo:in_data
	wire          mbox_m_w3_avmm_msg_receiver_agent_rf_source_ready;                             // mbox_m_w3_avmm_msg_receiver_agent_rsp_fifo:in_ready -> mbox_m_w3_avmm_msg_receiver_agent:rf_source_ready
	wire          mbox_m_w3_avmm_msg_receiver_agent_rf_source_startofpacket;                     // mbox_m_w3_avmm_msg_receiver_agent:rf_source_startofpacket -> mbox_m_w3_avmm_msg_receiver_agent_rsp_fifo:in_startofpacket
	wire          mbox_m_w3_avmm_msg_receiver_agent_rf_source_endofpacket;                       // mbox_m_w3_avmm_msg_receiver_agent:rf_source_endofpacket -> mbox_m_w3_avmm_msg_receiver_agent_rsp_fifo:in_endofpacket
	wire          mbox_m_w3_avmm_msg_receiver_agent_rsp_fifo_out_valid;                          // mbox_m_w3_avmm_msg_receiver_agent_rsp_fifo:out_valid -> mbox_m_w3_avmm_msg_receiver_agent:rf_sink_valid
	wire  [108:0] mbox_m_w3_avmm_msg_receiver_agent_rsp_fifo_out_data;                           // mbox_m_w3_avmm_msg_receiver_agent_rsp_fifo:out_data -> mbox_m_w3_avmm_msg_receiver_agent:rf_sink_data
	wire          mbox_m_w3_avmm_msg_receiver_agent_rsp_fifo_out_ready;                          // mbox_m_w3_avmm_msg_receiver_agent:rf_sink_ready -> mbox_m_w3_avmm_msg_receiver_agent_rsp_fifo:out_ready
	wire          mbox_m_w3_avmm_msg_receiver_agent_rsp_fifo_out_startofpacket;                  // mbox_m_w3_avmm_msg_receiver_agent_rsp_fifo:out_startofpacket -> mbox_m_w3_avmm_msg_receiver_agent:rf_sink_startofpacket
	wire          mbox_m_w3_avmm_msg_receiver_agent_rsp_fifo_out_endofpacket;                    // mbox_m_w3_avmm_msg_receiver_agent_rsp_fifo:out_endofpacket -> mbox_m_w3_avmm_msg_receiver_agent:rf_sink_endofpacket
	wire          cmd_mux_012_src_valid;                                                         // cmd_mux_012:src_valid -> mbox_m_w3_avmm_msg_receiver_agent:cp_valid
	wire  [107:0] cmd_mux_012_src_data;                                                          // cmd_mux_012:src_data -> mbox_m_w3_avmm_msg_receiver_agent:cp_data
	wire          cmd_mux_012_src_ready;                                                         // mbox_m_w3_avmm_msg_receiver_agent:cp_ready -> cmd_mux_012:src_ready
	wire   [18:0] cmd_mux_012_src_channel;                                                       // cmd_mux_012:src_channel -> mbox_m_w3_avmm_msg_receiver_agent:cp_channel
	wire          cmd_mux_012_src_startofpacket;                                                 // cmd_mux_012:src_startofpacket -> mbox_m_w3_avmm_msg_receiver_agent:cp_startofpacket
	wire          cmd_mux_012_src_endofpacket;                                                   // cmd_mux_012:src_endofpacket -> mbox_m_w3_avmm_msg_receiver_agent:cp_endofpacket
	wire   [31:0] req_fifo_in_agent_m0_readdata;                                                 // req_fifo_in_translator:uav_readdata -> req_fifo_in_agent:m0_readdata
	wire          req_fifo_in_agent_m0_waitrequest;                                              // req_fifo_in_translator:uav_waitrequest -> req_fifo_in_agent:m0_waitrequest
	wire          req_fifo_in_agent_m0_debugaccess;                                              // req_fifo_in_agent:m0_debugaccess -> req_fifo_in_translator:uav_debugaccess
	wire   [27:0] req_fifo_in_agent_m0_address;                                                  // req_fifo_in_agent:m0_address -> req_fifo_in_translator:uav_address
	wire    [3:0] req_fifo_in_agent_m0_byteenable;                                               // req_fifo_in_agent:m0_byteenable -> req_fifo_in_translator:uav_byteenable
	wire          req_fifo_in_agent_m0_read;                                                     // req_fifo_in_agent:m0_read -> req_fifo_in_translator:uav_read
	wire          req_fifo_in_agent_m0_readdatavalid;                                            // req_fifo_in_translator:uav_readdatavalid -> req_fifo_in_agent:m0_readdatavalid
	wire          req_fifo_in_agent_m0_lock;                                                     // req_fifo_in_agent:m0_lock -> req_fifo_in_translator:uav_lock
	wire   [31:0] req_fifo_in_agent_m0_writedata;                                                // req_fifo_in_agent:m0_writedata -> req_fifo_in_translator:uav_writedata
	wire          req_fifo_in_agent_m0_write;                                                    // req_fifo_in_agent:m0_write -> req_fifo_in_translator:uav_write
	wire    [2:0] req_fifo_in_agent_m0_burstcount;                                               // req_fifo_in_agent:m0_burstcount -> req_fifo_in_translator:uav_burstcount
	wire          req_fifo_in_agent_rf_source_valid;                                             // req_fifo_in_agent:rf_source_valid -> req_fifo_in_agent_rsp_fifo:in_valid
	wire  [108:0] req_fifo_in_agent_rf_source_data;                                              // req_fifo_in_agent:rf_source_data -> req_fifo_in_agent_rsp_fifo:in_data
	wire          req_fifo_in_agent_rf_source_ready;                                             // req_fifo_in_agent_rsp_fifo:in_ready -> req_fifo_in_agent:rf_source_ready
	wire          req_fifo_in_agent_rf_source_startofpacket;                                     // req_fifo_in_agent:rf_source_startofpacket -> req_fifo_in_agent_rsp_fifo:in_startofpacket
	wire          req_fifo_in_agent_rf_source_endofpacket;                                       // req_fifo_in_agent:rf_source_endofpacket -> req_fifo_in_agent_rsp_fifo:in_endofpacket
	wire          req_fifo_in_agent_rsp_fifo_out_valid;                                          // req_fifo_in_agent_rsp_fifo:out_valid -> req_fifo_in_agent:rf_sink_valid
	wire  [108:0] req_fifo_in_agent_rsp_fifo_out_data;                                           // req_fifo_in_agent_rsp_fifo:out_data -> req_fifo_in_agent:rf_sink_data
	wire          req_fifo_in_agent_rsp_fifo_out_ready;                                          // req_fifo_in_agent:rf_sink_ready -> req_fifo_in_agent_rsp_fifo:out_ready
	wire          req_fifo_in_agent_rsp_fifo_out_startofpacket;                                  // req_fifo_in_agent_rsp_fifo:out_startofpacket -> req_fifo_in_agent:rf_sink_startofpacket
	wire          req_fifo_in_agent_rsp_fifo_out_endofpacket;                                    // req_fifo_in_agent_rsp_fifo:out_endofpacket -> req_fifo_in_agent:rf_sink_endofpacket
	wire          cmd_mux_013_src_valid;                                                         // cmd_mux_013:src_valid -> req_fifo_in_agent:cp_valid
	wire  [107:0] cmd_mux_013_src_data;                                                          // cmd_mux_013:src_data -> req_fifo_in_agent:cp_data
	wire          cmd_mux_013_src_ready;                                                         // req_fifo_in_agent:cp_ready -> cmd_mux_013:src_ready
	wire   [18:0] cmd_mux_013_src_channel;                                                       // cmd_mux_013:src_channel -> req_fifo_in_agent:cp_channel
	wire          cmd_mux_013_src_startofpacket;                                                 // cmd_mux_013:src_startofpacket -> req_fifo_in_agent:cp_startofpacket
	wire          cmd_mux_013_src_endofpacket;                                                   // cmd_mux_013:src_endofpacket -> req_fifo_in_agent:cp_endofpacket
	wire   [31:0] req_fifo_in_csr_agent_m0_readdata;                                             // req_fifo_in_csr_translator:uav_readdata -> req_fifo_in_csr_agent:m0_readdata
	wire          req_fifo_in_csr_agent_m0_waitrequest;                                          // req_fifo_in_csr_translator:uav_waitrequest -> req_fifo_in_csr_agent:m0_waitrequest
	wire          req_fifo_in_csr_agent_m0_debugaccess;                                          // req_fifo_in_csr_agent:m0_debugaccess -> req_fifo_in_csr_translator:uav_debugaccess
	wire   [27:0] req_fifo_in_csr_agent_m0_address;                                              // req_fifo_in_csr_agent:m0_address -> req_fifo_in_csr_translator:uav_address
	wire    [3:0] req_fifo_in_csr_agent_m0_byteenable;                                           // req_fifo_in_csr_agent:m0_byteenable -> req_fifo_in_csr_translator:uav_byteenable
	wire          req_fifo_in_csr_agent_m0_read;                                                 // req_fifo_in_csr_agent:m0_read -> req_fifo_in_csr_translator:uav_read
	wire          req_fifo_in_csr_agent_m0_readdatavalid;                                        // req_fifo_in_csr_translator:uav_readdatavalid -> req_fifo_in_csr_agent:m0_readdatavalid
	wire          req_fifo_in_csr_agent_m0_lock;                                                 // req_fifo_in_csr_agent:m0_lock -> req_fifo_in_csr_translator:uav_lock
	wire   [31:0] req_fifo_in_csr_agent_m0_writedata;                                            // req_fifo_in_csr_agent:m0_writedata -> req_fifo_in_csr_translator:uav_writedata
	wire          req_fifo_in_csr_agent_m0_write;                                                // req_fifo_in_csr_agent:m0_write -> req_fifo_in_csr_translator:uav_write
	wire    [2:0] req_fifo_in_csr_agent_m0_burstcount;                                           // req_fifo_in_csr_agent:m0_burstcount -> req_fifo_in_csr_translator:uav_burstcount
	wire          req_fifo_in_csr_agent_rf_source_valid;                                         // req_fifo_in_csr_agent:rf_source_valid -> req_fifo_in_csr_agent_rsp_fifo:in_valid
	wire  [108:0] req_fifo_in_csr_agent_rf_source_data;                                          // req_fifo_in_csr_agent:rf_source_data -> req_fifo_in_csr_agent_rsp_fifo:in_data
	wire          req_fifo_in_csr_agent_rf_source_ready;                                         // req_fifo_in_csr_agent_rsp_fifo:in_ready -> req_fifo_in_csr_agent:rf_source_ready
	wire          req_fifo_in_csr_agent_rf_source_startofpacket;                                 // req_fifo_in_csr_agent:rf_source_startofpacket -> req_fifo_in_csr_agent_rsp_fifo:in_startofpacket
	wire          req_fifo_in_csr_agent_rf_source_endofpacket;                                   // req_fifo_in_csr_agent:rf_source_endofpacket -> req_fifo_in_csr_agent_rsp_fifo:in_endofpacket
	wire          req_fifo_in_csr_agent_rsp_fifo_out_valid;                                      // req_fifo_in_csr_agent_rsp_fifo:out_valid -> req_fifo_in_csr_agent:rf_sink_valid
	wire  [108:0] req_fifo_in_csr_agent_rsp_fifo_out_data;                                       // req_fifo_in_csr_agent_rsp_fifo:out_data -> req_fifo_in_csr_agent:rf_sink_data
	wire          req_fifo_in_csr_agent_rsp_fifo_out_ready;                                      // req_fifo_in_csr_agent:rf_sink_ready -> req_fifo_in_csr_agent_rsp_fifo:out_ready
	wire          req_fifo_in_csr_agent_rsp_fifo_out_startofpacket;                              // req_fifo_in_csr_agent_rsp_fifo:out_startofpacket -> req_fifo_in_csr_agent:rf_sink_startofpacket
	wire          req_fifo_in_csr_agent_rsp_fifo_out_endofpacket;                                // req_fifo_in_csr_agent_rsp_fifo:out_endofpacket -> req_fifo_in_csr_agent:rf_sink_endofpacket
	wire          cmd_mux_014_src_valid;                                                         // cmd_mux_014:src_valid -> req_fifo_in_csr_agent:cp_valid
	wire  [107:0] cmd_mux_014_src_data;                                                          // cmd_mux_014:src_data -> req_fifo_in_csr_agent:cp_data
	wire          cmd_mux_014_src_ready;                                                         // req_fifo_in_csr_agent:cp_ready -> cmd_mux_014:src_ready
	wire   [18:0] cmd_mux_014_src_channel;                                                       // cmd_mux_014:src_channel -> req_fifo_in_csr_agent:cp_channel
	wire          cmd_mux_014_src_startofpacket;                                                 // cmd_mux_014:src_startofpacket -> req_fifo_in_csr_agent:cp_startofpacket
	wire          cmd_mux_014_src_endofpacket;                                                   // cmd_mux_014:src_endofpacket -> req_fifo_in_csr_agent:cp_endofpacket
	wire   [31:0] shared_ocm_s2_agent_m0_readdata;                                               // shared_ocm_s2_translator:uav_readdata -> shared_ocm_s2_agent:m0_readdata
	wire          shared_ocm_s2_agent_m0_waitrequest;                                            // shared_ocm_s2_translator:uav_waitrequest -> shared_ocm_s2_agent:m0_waitrequest
	wire          shared_ocm_s2_agent_m0_debugaccess;                                            // shared_ocm_s2_agent:m0_debugaccess -> shared_ocm_s2_translator:uav_debugaccess
	wire   [27:0] shared_ocm_s2_agent_m0_address;                                                // shared_ocm_s2_agent:m0_address -> shared_ocm_s2_translator:uav_address
	wire    [3:0] shared_ocm_s2_agent_m0_byteenable;                                             // shared_ocm_s2_agent:m0_byteenable -> shared_ocm_s2_translator:uav_byteenable
	wire          shared_ocm_s2_agent_m0_read;                                                   // shared_ocm_s2_agent:m0_read -> shared_ocm_s2_translator:uav_read
	wire          shared_ocm_s2_agent_m0_readdatavalid;                                          // shared_ocm_s2_translator:uav_readdatavalid -> shared_ocm_s2_agent:m0_readdatavalid
	wire          shared_ocm_s2_agent_m0_lock;                                                   // shared_ocm_s2_agent:m0_lock -> shared_ocm_s2_translator:uav_lock
	wire   [31:0] shared_ocm_s2_agent_m0_writedata;                                              // shared_ocm_s2_agent:m0_writedata -> shared_ocm_s2_translator:uav_writedata
	wire          shared_ocm_s2_agent_m0_write;                                                  // shared_ocm_s2_agent:m0_write -> shared_ocm_s2_translator:uav_write
	wire    [2:0] shared_ocm_s2_agent_m0_burstcount;                                             // shared_ocm_s2_agent:m0_burstcount -> shared_ocm_s2_translator:uav_burstcount
	wire          shared_ocm_s2_agent_rf_source_valid;                                           // shared_ocm_s2_agent:rf_source_valid -> shared_ocm_s2_agent_rsp_fifo:in_valid
	wire  [108:0] shared_ocm_s2_agent_rf_source_data;                                            // shared_ocm_s2_agent:rf_source_data -> shared_ocm_s2_agent_rsp_fifo:in_data
	wire          shared_ocm_s2_agent_rf_source_ready;                                           // shared_ocm_s2_agent_rsp_fifo:in_ready -> shared_ocm_s2_agent:rf_source_ready
	wire          shared_ocm_s2_agent_rf_source_startofpacket;                                   // shared_ocm_s2_agent:rf_source_startofpacket -> shared_ocm_s2_agent_rsp_fifo:in_startofpacket
	wire          shared_ocm_s2_agent_rf_source_endofpacket;                                     // shared_ocm_s2_agent:rf_source_endofpacket -> shared_ocm_s2_agent_rsp_fifo:in_endofpacket
	wire          shared_ocm_s2_agent_rsp_fifo_out_valid;                                        // shared_ocm_s2_agent_rsp_fifo:out_valid -> shared_ocm_s2_agent:rf_sink_valid
	wire  [108:0] shared_ocm_s2_agent_rsp_fifo_out_data;                                         // shared_ocm_s2_agent_rsp_fifo:out_data -> shared_ocm_s2_agent:rf_sink_data
	wire          shared_ocm_s2_agent_rsp_fifo_out_ready;                                        // shared_ocm_s2_agent:rf_sink_ready -> shared_ocm_s2_agent_rsp_fifo:out_ready
	wire          shared_ocm_s2_agent_rsp_fifo_out_startofpacket;                                // shared_ocm_s2_agent_rsp_fifo:out_startofpacket -> shared_ocm_s2_agent:rf_sink_startofpacket
	wire          shared_ocm_s2_agent_rsp_fifo_out_endofpacket;                                  // shared_ocm_s2_agent_rsp_fifo:out_endofpacket -> shared_ocm_s2_agent:rf_sink_endofpacket
	wire          cmd_mux_015_src_valid;                                                         // cmd_mux_015:src_valid -> shared_ocm_s2_agent:cp_valid
	wire  [107:0] cmd_mux_015_src_data;                                                          // cmd_mux_015:src_data -> shared_ocm_s2_agent:cp_data
	wire          cmd_mux_015_src_ready;                                                         // shared_ocm_s2_agent:cp_ready -> cmd_mux_015:src_ready
	wire   [18:0] cmd_mux_015_src_channel;                                                       // cmd_mux_015:src_channel -> shared_ocm_s2_agent:cp_channel
	wire          cmd_mux_015_src_startofpacket;                                                 // cmd_mux_015:src_startofpacket -> shared_ocm_s2_agent:cp_startofpacket
	wire          cmd_mux_015_src_endofpacket;                                                   // cmd_mux_015:src_endofpacket -> shared_ocm_s2_agent:cp_endofpacket
	wire   [31:0] mbox_m_w2_avmm_msg_receiver_agent_m0_readdata;                                 // mbox_m_w2_avmm_msg_receiver_translator:uav_readdata -> mbox_m_w2_avmm_msg_receiver_agent:m0_readdata
	wire          mbox_m_w2_avmm_msg_receiver_agent_m0_waitrequest;                              // mbox_m_w2_avmm_msg_receiver_translator:uav_waitrequest -> mbox_m_w2_avmm_msg_receiver_agent:m0_waitrequest
	wire          mbox_m_w2_avmm_msg_receiver_agent_m0_debugaccess;                              // mbox_m_w2_avmm_msg_receiver_agent:m0_debugaccess -> mbox_m_w2_avmm_msg_receiver_translator:uav_debugaccess
	wire   [27:0] mbox_m_w2_avmm_msg_receiver_agent_m0_address;                                  // mbox_m_w2_avmm_msg_receiver_agent:m0_address -> mbox_m_w2_avmm_msg_receiver_translator:uav_address
	wire    [3:0] mbox_m_w2_avmm_msg_receiver_agent_m0_byteenable;                               // mbox_m_w2_avmm_msg_receiver_agent:m0_byteenable -> mbox_m_w2_avmm_msg_receiver_translator:uav_byteenable
	wire          mbox_m_w2_avmm_msg_receiver_agent_m0_read;                                     // mbox_m_w2_avmm_msg_receiver_agent:m0_read -> mbox_m_w2_avmm_msg_receiver_translator:uav_read
	wire          mbox_m_w2_avmm_msg_receiver_agent_m0_readdatavalid;                            // mbox_m_w2_avmm_msg_receiver_translator:uav_readdatavalid -> mbox_m_w2_avmm_msg_receiver_agent:m0_readdatavalid
	wire          mbox_m_w2_avmm_msg_receiver_agent_m0_lock;                                     // mbox_m_w2_avmm_msg_receiver_agent:m0_lock -> mbox_m_w2_avmm_msg_receiver_translator:uav_lock
	wire   [31:0] mbox_m_w2_avmm_msg_receiver_agent_m0_writedata;                                // mbox_m_w2_avmm_msg_receiver_agent:m0_writedata -> mbox_m_w2_avmm_msg_receiver_translator:uav_writedata
	wire          mbox_m_w2_avmm_msg_receiver_agent_m0_write;                                    // mbox_m_w2_avmm_msg_receiver_agent:m0_write -> mbox_m_w2_avmm_msg_receiver_translator:uav_write
	wire    [2:0] mbox_m_w2_avmm_msg_receiver_agent_m0_burstcount;                               // mbox_m_w2_avmm_msg_receiver_agent:m0_burstcount -> mbox_m_w2_avmm_msg_receiver_translator:uav_burstcount
	wire          mbox_m_w2_avmm_msg_receiver_agent_rf_source_valid;                             // mbox_m_w2_avmm_msg_receiver_agent:rf_source_valid -> mbox_m_w2_avmm_msg_receiver_agent_rsp_fifo:in_valid
	wire  [108:0] mbox_m_w2_avmm_msg_receiver_agent_rf_source_data;                              // mbox_m_w2_avmm_msg_receiver_agent:rf_source_data -> mbox_m_w2_avmm_msg_receiver_agent_rsp_fifo:in_data
	wire          mbox_m_w2_avmm_msg_receiver_agent_rf_source_ready;                             // mbox_m_w2_avmm_msg_receiver_agent_rsp_fifo:in_ready -> mbox_m_w2_avmm_msg_receiver_agent:rf_source_ready
	wire          mbox_m_w2_avmm_msg_receiver_agent_rf_source_startofpacket;                     // mbox_m_w2_avmm_msg_receiver_agent:rf_source_startofpacket -> mbox_m_w2_avmm_msg_receiver_agent_rsp_fifo:in_startofpacket
	wire          mbox_m_w2_avmm_msg_receiver_agent_rf_source_endofpacket;                       // mbox_m_w2_avmm_msg_receiver_agent:rf_source_endofpacket -> mbox_m_w2_avmm_msg_receiver_agent_rsp_fifo:in_endofpacket
	wire          mbox_m_w2_avmm_msg_receiver_agent_rsp_fifo_out_valid;                          // mbox_m_w2_avmm_msg_receiver_agent_rsp_fifo:out_valid -> mbox_m_w2_avmm_msg_receiver_agent:rf_sink_valid
	wire  [108:0] mbox_m_w2_avmm_msg_receiver_agent_rsp_fifo_out_data;                           // mbox_m_w2_avmm_msg_receiver_agent_rsp_fifo:out_data -> mbox_m_w2_avmm_msg_receiver_agent:rf_sink_data
	wire          mbox_m_w2_avmm_msg_receiver_agent_rsp_fifo_out_ready;                          // mbox_m_w2_avmm_msg_receiver_agent:rf_sink_ready -> mbox_m_w2_avmm_msg_receiver_agent_rsp_fifo:out_ready
	wire          mbox_m_w2_avmm_msg_receiver_agent_rsp_fifo_out_startofpacket;                  // mbox_m_w2_avmm_msg_receiver_agent_rsp_fifo:out_startofpacket -> mbox_m_w2_avmm_msg_receiver_agent:rf_sink_startofpacket
	wire          mbox_m_w2_avmm_msg_receiver_agent_rsp_fifo_out_endofpacket;                    // mbox_m_w2_avmm_msg_receiver_agent_rsp_fifo:out_endofpacket -> mbox_m_w2_avmm_msg_receiver_agent:rf_sink_endofpacket
	wire          cmd_mux_016_src_valid;                                                         // cmd_mux_016:src_valid -> mbox_m_w2_avmm_msg_receiver_agent:cp_valid
	wire  [107:0] cmd_mux_016_src_data;                                                          // cmd_mux_016:src_data -> mbox_m_w2_avmm_msg_receiver_agent:cp_data
	wire          cmd_mux_016_src_ready;                                                         // mbox_m_w2_avmm_msg_receiver_agent:cp_ready -> cmd_mux_016:src_ready
	wire   [18:0] cmd_mux_016_src_channel;                                                       // cmd_mux_016:src_channel -> mbox_m_w2_avmm_msg_receiver_agent:cp_channel
	wire          cmd_mux_016_src_startofpacket;                                                 // cmd_mux_016:src_startofpacket -> mbox_m_w2_avmm_msg_receiver_agent:cp_startofpacket
	wire          cmd_mux_016_src_endofpacket;                                                   // cmd_mux_016:src_endofpacket -> mbox_m_w2_avmm_msg_receiver_agent:cp_endofpacket
	wire   [31:0] mbox_m_w1_avmm_msg_receiver_agent_m0_readdata;                                 // mbox_m_w1_avmm_msg_receiver_translator:uav_readdata -> mbox_m_w1_avmm_msg_receiver_agent:m0_readdata
	wire          mbox_m_w1_avmm_msg_receiver_agent_m0_waitrequest;                              // mbox_m_w1_avmm_msg_receiver_translator:uav_waitrequest -> mbox_m_w1_avmm_msg_receiver_agent:m0_waitrequest
	wire          mbox_m_w1_avmm_msg_receiver_agent_m0_debugaccess;                              // mbox_m_w1_avmm_msg_receiver_agent:m0_debugaccess -> mbox_m_w1_avmm_msg_receiver_translator:uav_debugaccess
	wire   [27:0] mbox_m_w1_avmm_msg_receiver_agent_m0_address;                                  // mbox_m_w1_avmm_msg_receiver_agent:m0_address -> mbox_m_w1_avmm_msg_receiver_translator:uav_address
	wire    [3:0] mbox_m_w1_avmm_msg_receiver_agent_m0_byteenable;                               // mbox_m_w1_avmm_msg_receiver_agent:m0_byteenable -> mbox_m_w1_avmm_msg_receiver_translator:uav_byteenable
	wire          mbox_m_w1_avmm_msg_receiver_agent_m0_read;                                     // mbox_m_w1_avmm_msg_receiver_agent:m0_read -> mbox_m_w1_avmm_msg_receiver_translator:uav_read
	wire          mbox_m_w1_avmm_msg_receiver_agent_m0_readdatavalid;                            // mbox_m_w1_avmm_msg_receiver_translator:uav_readdatavalid -> mbox_m_w1_avmm_msg_receiver_agent:m0_readdatavalid
	wire          mbox_m_w1_avmm_msg_receiver_agent_m0_lock;                                     // mbox_m_w1_avmm_msg_receiver_agent:m0_lock -> mbox_m_w1_avmm_msg_receiver_translator:uav_lock
	wire   [31:0] mbox_m_w1_avmm_msg_receiver_agent_m0_writedata;                                // mbox_m_w1_avmm_msg_receiver_agent:m0_writedata -> mbox_m_w1_avmm_msg_receiver_translator:uav_writedata
	wire          mbox_m_w1_avmm_msg_receiver_agent_m0_write;                                    // mbox_m_w1_avmm_msg_receiver_agent:m0_write -> mbox_m_w1_avmm_msg_receiver_translator:uav_write
	wire    [2:0] mbox_m_w1_avmm_msg_receiver_agent_m0_burstcount;                               // mbox_m_w1_avmm_msg_receiver_agent:m0_burstcount -> mbox_m_w1_avmm_msg_receiver_translator:uav_burstcount
	wire          mbox_m_w1_avmm_msg_receiver_agent_rf_source_valid;                             // mbox_m_w1_avmm_msg_receiver_agent:rf_source_valid -> mbox_m_w1_avmm_msg_receiver_agent_rsp_fifo:in_valid
	wire  [108:0] mbox_m_w1_avmm_msg_receiver_agent_rf_source_data;                              // mbox_m_w1_avmm_msg_receiver_agent:rf_source_data -> mbox_m_w1_avmm_msg_receiver_agent_rsp_fifo:in_data
	wire          mbox_m_w1_avmm_msg_receiver_agent_rf_source_ready;                             // mbox_m_w1_avmm_msg_receiver_agent_rsp_fifo:in_ready -> mbox_m_w1_avmm_msg_receiver_agent:rf_source_ready
	wire          mbox_m_w1_avmm_msg_receiver_agent_rf_source_startofpacket;                     // mbox_m_w1_avmm_msg_receiver_agent:rf_source_startofpacket -> mbox_m_w1_avmm_msg_receiver_agent_rsp_fifo:in_startofpacket
	wire          mbox_m_w1_avmm_msg_receiver_agent_rf_source_endofpacket;                       // mbox_m_w1_avmm_msg_receiver_agent:rf_source_endofpacket -> mbox_m_w1_avmm_msg_receiver_agent_rsp_fifo:in_endofpacket
	wire          mbox_m_w1_avmm_msg_receiver_agent_rsp_fifo_out_valid;                          // mbox_m_w1_avmm_msg_receiver_agent_rsp_fifo:out_valid -> mbox_m_w1_avmm_msg_receiver_agent:rf_sink_valid
	wire  [108:0] mbox_m_w1_avmm_msg_receiver_agent_rsp_fifo_out_data;                           // mbox_m_w1_avmm_msg_receiver_agent_rsp_fifo:out_data -> mbox_m_w1_avmm_msg_receiver_agent:rf_sink_data
	wire          mbox_m_w1_avmm_msg_receiver_agent_rsp_fifo_out_ready;                          // mbox_m_w1_avmm_msg_receiver_agent:rf_sink_ready -> mbox_m_w1_avmm_msg_receiver_agent_rsp_fifo:out_ready
	wire          mbox_m_w1_avmm_msg_receiver_agent_rsp_fifo_out_startofpacket;                  // mbox_m_w1_avmm_msg_receiver_agent_rsp_fifo:out_startofpacket -> mbox_m_w1_avmm_msg_receiver_agent:rf_sink_startofpacket
	wire          mbox_m_w1_avmm_msg_receiver_agent_rsp_fifo_out_endofpacket;                    // mbox_m_w1_avmm_msg_receiver_agent_rsp_fifo:out_endofpacket -> mbox_m_w1_avmm_msg_receiver_agent:rf_sink_endofpacket
	wire          cmd_mux_017_src_valid;                                                         // cmd_mux_017:src_valid -> mbox_m_w1_avmm_msg_receiver_agent:cp_valid
	wire  [107:0] cmd_mux_017_src_data;                                                          // cmd_mux_017:src_data -> mbox_m_w1_avmm_msg_receiver_agent:cp_data
	wire          cmd_mux_017_src_ready;                                                         // mbox_m_w1_avmm_msg_receiver_agent:cp_ready -> cmd_mux_017:src_ready
	wire   [18:0] cmd_mux_017_src_channel;                                                       // cmd_mux_017:src_channel -> mbox_m_w1_avmm_msg_receiver_agent:cp_channel
	wire          cmd_mux_017_src_startofpacket;                                                 // cmd_mux_017:src_startofpacket -> mbox_m_w1_avmm_msg_receiver_agent:cp_startofpacket
	wire          cmd_mux_017_src_endofpacket;                                                   // cmd_mux_017:src_endofpacket -> mbox_m_w1_avmm_msg_receiver_agent:cp_endofpacket
	wire   [31:0] mbox_m_w0_avmm_msg_receiver_agent_m0_readdata;                                 // mbox_m_w0_avmm_msg_receiver_translator:uav_readdata -> mbox_m_w0_avmm_msg_receiver_agent:m0_readdata
	wire          mbox_m_w0_avmm_msg_receiver_agent_m0_waitrequest;                              // mbox_m_w0_avmm_msg_receiver_translator:uav_waitrequest -> mbox_m_w0_avmm_msg_receiver_agent:m0_waitrequest
	wire          mbox_m_w0_avmm_msg_receiver_agent_m0_debugaccess;                              // mbox_m_w0_avmm_msg_receiver_agent:m0_debugaccess -> mbox_m_w0_avmm_msg_receiver_translator:uav_debugaccess
	wire   [27:0] mbox_m_w0_avmm_msg_receiver_agent_m0_address;                                  // mbox_m_w0_avmm_msg_receiver_agent:m0_address -> mbox_m_w0_avmm_msg_receiver_translator:uav_address
	wire    [3:0] mbox_m_w0_avmm_msg_receiver_agent_m0_byteenable;                               // mbox_m_w0_avmm_msg_receiver_agent:m0_byteenable -> mbox_m_w0_avmm_msg_receiver_translator:uav_byteenable
	wire          mbox_m_w0_avmm_msg_receiver_agent_m0_read;                                     // mbox_m_w0_avmm_msg_receiver_agent:m0_read -> mbox_m_w0_avmm_msg_receiver_translator:uav_read
	wire          mbox_m_w0_avmm_msg_receiver_agent_m0_readdatavalid;                            // mbox_m_w0_avmm_msg_receiver_translator:uav_readdatavalid -> mbox_m_w0_avmm_msg_receiver_agent:m0_readdatavalid
	wire          mbox_m_w0_avmm_msg_receiver_agent_m0_lock;                                     // mbox_m_w0_avmm_msg_receiver_agent:m0_lock -> mbox_m_w0_avmm_msg_receiver_translator:uav_lock
	wire   [31:0] mbox_m_w0_avmm_msg_receiver_agent_m0_writedata;                                // mbox_m_w0_avmm_msg_receiver_agent:m0_writedata -> mbox_m_w0_avmm_msg_receiver_translator:uav_writedata
	wire          mbox_m_w0_avmm_msg_receiver_agent_m0_write;                                    // mbox_m_w0_avmm_msg_receiver_agent:m0_write -> mbox_m_w0_avmm_msg_receiver_translator:uav_write
	wire    [2:0] mbox_m_w0_avmm_msg_receiver_agent_m0_burstcount;                               // mbox_m_w0_avmm_msg_receiver_agent:m0_burstcount -> mbox_m_w0_avmm_msg_receiver_translator:uav_burstcount
	wire          mbox_m_w0_avmm_msg_receiver_agent_rf_source_valid;                             // mbox_m_w0_avmm_msg_receiver_agent:rf_source_valid -> mbox_m_w0_avmm_msg_receiver_agent_rsp_fifo:in_valid
	wire  [108:0] mbox_m_w0_avmm_msg_receiver_agent_rf_source_data;                              // mbox_m_w0_avmm_msg_receiver_agent:rf_source_data -> mbox_m_w0_avmm_msg_receiver_agent_rsp_fifo:in_data
	wire          mbox_m_w0_avmm_msg_receiver_agent_rf_source_ready;                             // mbox_m_w0_avmm_msg_receiver_agent_rsp_fifo:in_ready -> mbox_m_w0_avmm_msg_receiver_agent:rf_source_ready
	wire          mbox_m_w0_avmm_msg_receiver_agent_rf_source_startofpacket;                     // mbox_m_w0_avmm_msg_receiver_agent:rf_source_startofpacket -> mbox_m_w0_avmm_msg_receiver_agent_rsp_fifo:in_startofpacket
	wire          mbox_m_w0_avmm_msg_receiver_agent_rf_source_endofpacket;                       // mbox_m_w0_avmm_msg_receiver_agent:rf_source_endofpacket -> mbox_m_w0_avmm_msg_receiver_agent_rsp_fifo:in_endofpacket
	wire          mbox_m_w0_avmm_msg_receiver_agent_rsp_fifo_out_valid;                          // mbox_m_w0_avmm_msg_receiver_agent_rsp_fifo:out_valid -> mbox_m_w0_avmm_msg_receiver_agent:rf_sink_valid
	wire  [108:0] mbox_m_w0_avmm_msg_receiver_agent_rsp_fifo_out_data;                           // mbox_m_w0_avmm_msg_receiver_agent_rsp_fifo:out_data -> mbox_m_w0_avmm_msg_receiver_agent:rf_sink_data
	wire          mbox_m_w0_avmm_msg_receiver_agent_rsp_fifo_out_ready;                          // mbox_m_w0_avmm_msg_receiver_agent:rf_sink_ready -> mbox_m_w0_avmm_msg_receiver_agent_rsp_fifo:out_ready
	wire          mbox_m_w0_avmm_msg_receiver_agent_rsp_fifo_out_startofpacket;                  // mbox_m_w0_avmm_msg_receiver_agent_rsp_fifo:out_startofpacket -> mbox_m_w0_avmm_msg_receiver_agent:rf_sink_startofpacket
	wire          mbox_m_w0_avmm_msg_receiver_agent_rsp_fifo_out_endofpacket;                    // mbox_m_w0_avmm_msg_receiver_agent_rsp_fifo:out_endofpacket -> mbox_m_w0_avmm_msg_receiver_agent:rf_sink_endofpacket
	wire          cmd_mux_018_src_valid;                                                         // cmd_mux_018:src_valid -> mbox_m_w0_avmm_msg_receiver_agent:cp_valid
	wire  [107:0] cmd_mux_018_src_data;                                                          // cmd_mux_018:src_data -> mbox_m_w0_avmm_msg_receiver_agent:cp_data
	wire          cmd_mux_018_src_ready;                                                         // mbox_m_w0_avmm_msg_receiver_agent:cp_ready -> cmd_mux_018:src_ready
	wire   [18:0] cmd_mux_018_src_channel;                                                       // cmd_mux_018:src_channel -> mbox_m_w0_avmm_msg_receiver_agent:cp_channel
	wire          cmd_mux_018_src_startofpacket;                                                 // cmd_mux_018:src_startofpacket -> mbox_m_w0_avmm_msg_receiver_agent:cp_startofpacket
	wire          cmd_mux_018_src_endofpacket;                                                   // cmd_mux_018:src_endofpacket -> mbox_m_w0_avmm_msg_receiver_agent:cp_endofpacket
	wire          manager_data_master_agent_cp_valid;                                            // manager_data_master_agent:cp_valid -> router:sink_valid
	wire  [107:0] manager_data_master_agent_cp_data;                                             // manager_data_master_agent:cp_data -> router:sink_data
	wire          manager_data_master_agent_cp_ready;                                            // router:sink_ready -> manager_data_master_agent:cp_ready
	wire          manager_data_master_agent_cp_startofpacket;                                    // manager_data_master_agent:cp_startofpacket -> router:sink_startofpacket
	wire          manager_data_master_agent_cp_endofpacket;                                      // manager_data_master_agent:cp_endofpacket -> router:sink_endofpacket
	wire          manager_instruction_master_agent_cp_valid;                                     // manager_instruction_master_agent:cp_valid -> router_001:sink_valid
	wire  [107:0] manager_instruction_master_agent_cp_data;                                      // manager_instruction_master_agent:cp_data -> router_001:sink_data
	wire          manager_instruction_master_agent_cp_ready;                                     // router_001:sink_ready -> manager_instruction_master_agent:cp_ready
	wire          manager_instruction_master_agent_cp_startofpacket;                             // manager_instruction_master_agent:cp_startofpacket -> router_001:sink_startofpacket
	wire          manager_instruction_master_agent_cp_endofpacket;                               // manager_instruction_master_agent:cp_endofpacket -> router_001:sink_endofpacket
	wire          worker0_wout_agent_cp_valid;                                                   // worker0_wout_agent:cp_valid -> router_002:sink_valid
	wire  [107:0] worker0_wout_agent_cp_data;                                                    // worker0_wout_agent:cp_data -> router_002:sink_data
	wire          worker0_wout_agent_cp_ready;                                                   // router_002:sink_ready -> worker0_wout_agent:cp_ready
	wire          worker0_wout_agent_cp_startofpacket;                                           // worker0_wout_agent:cp_startofpacket -> router_002:sink_startofpacket
	wire          worker0_wout_agent_cp_endofpacket;                                             // worker0_wout_agent:cp_endofpacket -> router_002:sink_endofpacket
	wire          worker1_wout_agent_cp_valid;                                                   // worker1_wout_agent:cp_valid -> router_003:sink_valid
	wire  [107:0] worker1_wout_agent_cp_data;                                                    // worker1_wout_agent:cp_data -> router_003:sink_data
	wire          worker1_wout_agent_cp_ready;                                                   // router_003:sink_ready -> worker1_wout_agent:cp_ready
	wire          worker1_wout_agent_cp_startofpacket;                                           // worker1_wout_agent:cp_startofpacket -> router_003:sink_startofpacket
	wire          worker1_wout_agent_cp_endofpacket;                                             // worker1_wout_agent:cp_endofpacket -> router_003:sink_endofpacket
	wire          worker2_wout_agent_cp_valid;                                                   // worker2_wout_agent:cp_valid -> router_004:sink_valid
	wire  [107:0] worker2_wout_agent_cp_data;                                                    // worker2_wout_agent:cp_data -> router_004:sink_data
	wire          worker2_wout_agent_cp_ready;                                                   // router_004:sink_ready -> worker2_wout_agent:cp_ready
	wire          worker2_wout_agent_cp_startofpacket;                                           // worker2_wout_agent:cp_startofpacket -> router_004:sink_startofpacket
	wire          worker2_wout_agent_cp_endofpacket;                                             // worker2_wout_agent:cp_endofpacket -> router_004:sink_endofpacket
	wire          worker3_wout_agent_cp_valid;                                                   // worker3_wout_agent:cp_valid -> router_005:sink_valid
	wire  [107:0] worker3_wout_agent_cp_data;                                                    // worker3_wout_agent:cp_data -> router_005:sink_data
	wire          worker3_wout_agent_cp_ready;                                                   // router_005:sink_ready -> worker3_wout_agent:cp_ready
	wire          worker3_wout_agent_cp_startofpacket;                                           // worker3_wout_agent:cp_startofpacket -> router_005:sink_startofpacket
	wire          worker3_wout_agent_cp_endofpacket;                                             // worker3_wout_agent:cp_endofpacket -> router_005:sink_endofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rp_valid;                                  // jtag_uart_0_avalon_jtag_slave_agent:rp_valid -> router_006:sink_valid
	wire  [107:0] jtag_uart_0_avalon_jtag_slave_agent_rp_data;                                   // jtag_uart_0_avalon_jtag_slave_agent:rp_data -> router_006:sink_data
	wire          jtag_uart_0_avalon_jtag_slave_agent_rp_ready;                                  // router_006:sink_ready -> jtag_uart_0_avalon_jtag_slave_agent:rp_ready
	wire          jtag_uart_0_avalon_jtag_slave_agent_rp_startofpacket;                          // jtag_uart_0_avalon_jtag_slave_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rp_endofpacket;                            // jtag_uart_0_avalon_jtag_slave_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire          router_006_src_valid;                                                          // router_006:src_valid -> rsp_demux:sink_valid
	wire  [107:0] router_006_src_data;                                                           // router_006:src_data -> rsp_demux:sink_data
	wire          router_006_src_ready;                                                          // rsp_demux:sink_ready -> router_006:src_ready
	wire   [18:0] router_006_src_channel;                                                        // router_006:src_channel -> rsp_demux:sink_channel
	wire          router_006_src_startofpacket;                                                  // router_006:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_006_src_endofpacket;                                                    // router_006:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          mbox_m_w0_avmm_msg_sender_agent_rp_valid;                                      // mbox_m_w0_avmm_msg_sender_agent:rp_valid -> router_007:sink_valid
	wire  [107:0] mbox_m_w0_avmm_msg_sender_agent_rp_data;                                       // mbox_m_w0_avmm_msg_sender_agent:rp_data -> router_007:sink_data
	wire          mbox_m_w0_avmm_msg_sender_agent_rp_ready;                                      // router_007:sink_ready -> mbox_m_w0_avmm_msg_sender_agent:rp_ready
	wire          mbox_m_w0_avmm_msg_sender_agent_rp_startofpacket;                              // mbox_m_w0_avmm_msg_sender_agent:rp_startofpacket -> router_007:sink_startofpacket
	wire          mbox_m_w0_avmm_msg_sender_agent_rp_endofpacket;                                // mbox_m_w0_avmm_msg_sender_agent:rp_endofpacket -> router_007:sink_endofpacket
	wire          router_007_src_valid;                                                          // router_007:src_valid -> rsp_demux_001:sink_valid
	wire  [107:0] router_007_src_data;                                                           // router_007:src_data -> rsp_demux_001:sink_data
	wire          router_007_src_ready;                                                          // rsp_demux_001:sink_ready -> router_007:src_ready
	wire   [18:0] router_007_src_channel;                                                        // router_007:src_channel -> rsp_demux_001:sink_channel
	wire          router_007_src_startofpacket;                                                  // router_007:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_007_src_endofpacket;                                                    // router_007:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          mbox_m_w1_avmm_msg_sender_agent_rp_valid;                                      // mbox_m_w1_avmm_msg_sender_agent:rp_valid -> router_008:sink_valid
	wire  [107:0] mbox_m_w1_avmm_msg_sender_agent_rp_data;                                       // mbox_m_w1_avmm_msg_sender_agent:rp_data -> router_008:sink_data
	wire          mbox_m_w1_avmm_msg_sender_agent_rp_ready;                                      // router_008:sink_ready -> mbox_m_w1_avmm_msg_sender_agent:rp_ready
	wire          mbox_m_w1_avmm_msg_sender_agent_rp_startofpacket;                              // mbox_m_w1_avmm_msg_sender_agent:rp_startofpacket -> router_008:sink_startofpacket
	wire          mbox_m_w1_avmm_msg_sender_agent_rp_endofpacket;                                // mbox_m_w1_avmm_msg_sender_agent:rp_endofpacket -> router_008:sink_endofpacket
	wire          router_008_src_valid;                                                          // router_008:src_valid -> rsp_demux_002:sink_valid
	wire  [107:0] router_008_src_data;                                                           // router_008:src_data -> rsp_demux_002:sink_data
	wire          router_008_src_ready;                                                          // rsp_demux_002:sink_ready -> router_008:src_ready
	wire   [18:0] router_008_src_channel;                                                        // router_008:src_channel -> rsp_demux_002:sink_channel
	wire          router_008_src_startofpacket;                                                  // router_008:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_008_src_endofpacket;                                                    // router_008:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          mbox_m_w2_avmm_msg_sender_agent_rp_valid;                                      // mbox_m_w2_avmm_msg_sender_agent:rp_valid -> router_009:sink_valid
	wire  [107:0] mbox_m_w2_avmm_msg_sender_agent_rp_data;                                       // mbox_m_w2_avmm_msg_sender_agent:rp_data -> router_009:sink_data
	wire          mbox_m_w2_avmm_msg_sender_agent_rp_ready;                                      // router_009:sink_ready -> mbox_m_w2_avmm_msg_sender_agent:rp_ready
	wire          mbox_m_w2_avmm_msg_sender_agent_rp_startofpacket;                              // mbox_m_w2_avmm_msg_sender_agent:rp_startofpacket -> router_009:sink_startofpacket
	wire          mbox_m_w2_avmm_msg_sender_agent_rp_endofpacket;                                // mbox_m_w2_avmm_msg_sender_agent:rp_endofpacket -> router_009:sink_endofpacket
	wire          router_009_src_valid;                                                          // router_009:src_valid -> rsp_demux_003:sink_valid
	wire  [107:0] router_009_src_data;                                                           // router_009:src_data -> rsp_demux_003:sink_data
	wire          router_009_src_ready;                                                          // rsp_demux_003:sink_ready -> router_009:src_ready
	wire   [18:0] router_009_src_channel;                                                        // router_009:src_channel -> rsp_demux_003:sink_channel
	wire          router_009_src_startofpacket;                                                  // router_009:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          router_009_src_endofpacket;                                                    // router_009:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          mbox_m_w3_avmm_msg_sender_agent_rp_valid;                                      // mbox_m_w3_avmm_msg_sender_agent:rp_valid -> router_010:sink_valid
	wire  [107:0] mbox_m_w3_avmm_msg_sender_agent_rp_data;                                       // mbox_m_w3_avmm_msg_sender_agent:rp_data -> router_010:sink_data
	wire          mbox_m_w3_avmm_msg_sender_agent_rp_ready;                                      // router_010:sink_ready -> mbox_m_w3_avmm_msg_sender_agent:rp_ready
	wire          mbox_m_w3_avmm_msg_sender_agent_rp_startofpacket;                              // mbox_m_w3_avmm_msg_sender_agent:rp_startofpacket -> router_010:sink_startofpacket
	wire          mbox_m_w3_avmm_msg_sender_agent_rp_endofpacket;                                // mbox_m_w3_avmm_msg_sender_agent:rp_endofpacket -> router_010:sink_endofpacket
	wire          router_010_src_valid;                                                          // router_010:src_valid -> rsp_demux_004:sink_valid
	wire  [107:0] router_010_src_data;                                                           // router_010:src_data -> rsp_demux_004:sink_data
	wire          router_010_src_ready;                                                          // rsp_demux_004:sink_ready -> router_010:src_ready
	wire   [18:0] router_010_src_channel;                                                        // router_010:src_channel -> rsp_demux_004:sink_channel
	wire          router_010_src_startofpacket;                                                  // router_010:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire          router_010_src_endofpacket;                                                    // router_010:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          performance_counter_0_control_slave_agent_rp_valid;                            // performance_counter_0_control_slave_agent:rp_valid -> router_011:sink_valid
	wire  [107:0] performance_counter_0_control_slave_agent_rp_data;                             // performance_counter_0_control_slave_agent:rp_data -> router_011:sink_data
	wire          performance_counter_0_control_slave_agent_rp_ready;                            // router_011:sink_ready -> performance_counter_0_control_slave_agent:rp_ready
	wire          performance_counter_0_control_slave_agent_rp_startofpacket;                    // performance_counter_0_control_slave_agent:rp_startofpacket -> router_011:sink_startofpacket
	wire          performance_counter_0_control_slave_agent_rp_endofpacket;                      // performance_counter_0_control_slave_agent:rp_endofpacket -> router_011:sink_endofpacket
	wire          router_011_src_valid;                                                          // router_011:src_valid -> rsp_demux_005:sink_valid
	wire  [107:0] router_011_src_data;                                                           // router_011:src_data -> rsp_demux_005:sink_data
	wire          router_011_src_ready;                                                          // rsp_demux_005:sink_ready -> router_011:src_ready
	wire   [18:0] router_011_src_channel;                                                        // router_011:src_channel -> rsp_demux_005:sink_channel
	wire          router_011_src_startofpacket;                                                  // router_011:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire          router_011_src_endofpacket;                                                    // router_011:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire          manager_debug_mem_slave_agent_rp_valid;                                        // manager_debug_mem_slave_agent:rp_valid -> router_012:sink_valid
	wire  [107:0] manager_debug_mem_slave_agent_rp_data;                                         // manager_debug_mem_slave_agent:rp_data -> router_012:sink_data
	wire          manager_debug_mem_slave_agent_rp_ready;                                        // router_012:sink_ready -> manager_debug_mem_slave_agent:rp_ready
	wire          manager_debug_mem_slave_agent_rp_startofpacket;                                // manager_debug_mem_slave_agent:rp_startofpacket -> router_012:sink_startofpacket
	wire          manager_debug_mem_slave_agent_rp_endofpacket;                                  // manager_debug_mem_slave_agent:rp_endofpacket -> router_012:sink_endofpacket
	wire          router_012_src_valid;                                                          // router_012:src_valid -> rsp_demux_006:sink_valid
	wire  [107:0] router_012_src_data;                                                           // router_012:src_data -> rsp_demux_006:sink_data
	wire          router_012_src_ready;                                                          // rsp_demux_006:sink_ready -> router_012:src_ready
	wire   [18:0] router_012_src_channel;                                                        // router_012:src_channel -> rsp_demux_006:sink_channel
	wire          router_012_src_startofpacket;                                                  // router_012:src_startofpacket -> rsp_demux_006:sink_startofpacket
	wire          router_012_src_endofpacket;                                                    // router_012:src_endofpacket -> rsp_demux_006:sink_endofpacket
	wire          req_fifo_out_agent_rp_valid;                                                   // req_fifo_out_agent:rp_valid -> router_013:sink_valid
	wire  [107:0] req_fifo_out_agent_rp_data;                                                    // req_fifo_out_agent:rp_data -> router_013:sink_data
	wire          req_fifo_out_agent_rp_ready;                                                   // router_013:sink_ready -> req_fifo_out_agent:rp_ready
	wire          req_fifo_out_agent_rp_startofpacket;                                           // req_fifo_out_agent:rp_startofpacket -> router_013:sink_startofpacket
	wire          req_fifo_out_agent_rp_endofpacket;                                             // req_fifo_out_agent:rp_endofpacket -> router_013:sink_endofpacket
	wire          router_013_src_valid;                                                          // router_013:src_valid -> rsp_demux_007:sink_valid
	wire  [107:0] router_013_src_data;                                                           // router_013:src_data -> rsp_demux_007:sink_data
	wire          router_013_src_ready;                                                          // rsp_demux_007:sink_ready -> router_013:src_ready
	wire   [18:0] router_013_src_channel;                                                        // router_013:src_channel -> rsp_demux_007:sink_channel
	wire          router_013_src_startofpacket;                                                  // router_013:src_startofpacket -> rsp_demux_007:sink_startofpacket
	wire          router_013_src_endofpacket;                                                    // router_013:src_endofpacket -> rsp_demux_007:sink_endofpacket
	wire          req_fifo_out_csr_agent_rp_valid;                                               // req_fifo_out_csr_agent:rp_valid -> router_014:sink_valid
	wire  [107:0] req_fifo_out_csr_agent_rp_data;                                                // req_fifo_out_csr_agent:rp_data -> router_014:sink_data
	wire          req_fifo_out_csr_agent_rp_ready;                                               // router_014:sink_ready -> req_fifo_out_csr_agent:rp_ready
	wire          req_fifo_out_csr_agent_rp_startofpacket;                                       // req_fifo_out_csr_agent:rp_startofpacket -> router_014:sink_startofpacket
	wire          req_fifo_out_csr_agent_rp_endofpacket;                                         // req_fifo_out_csr_agent:rp_endofpacket -> router_014:sink_endofpacket
	wire          router_014_src_valid;                                                          // router_014:src_valid -> rsp_demux_008:sink_valid
	wire  [107:0] router_014_src_data;                                                           // router_014:src_data -> rsp_demux_008:sink_data
	wire          router_014_src_ready;                                                          // rsp_demux_008:sink_ready -> router_014:src_ready
	wire   [18:0] router_014_src_channel;                                                        // router_014:src_channel -> rsp_demux_008:sink_channel
	wire          router_014_src_startofpacket;                                                  // router_014:src_startofpacket -> rsp_demux_008:sink_startofpacket
	wire          router_014_src_endofpacket;                                                    // router_014:src_endofpacket -> rsp_demux_008:sink_endofpacket
	wire          altpll_0_pll_slave_agent_rp_valid;                                             // altpll_0_pll_slave_agent:rp_valid -> router_015:sink_valid
	wire  [107:0] altpll_0_pll_slave_agent_rp_data;                                              // altpll_0_pll_slave_agent:rp_data -> router_015:sink_data
	wire          altpll_0_pll_slave_agent_rp_ready;                                             // router_015:sink_ready -> altpll_0_pll_slave_agent:rp_ready
	wire          altpll_0_pll_slave_agent_rp_startofpacket;                                     // altpll_0_pll_slave_agent:rp_startofpacket -> router_015:sink_startofpacket
	wire          altpll_0_pll_slave_agent_rp_endofpacket;                                       // altpll_0_pll_slave_agent:rp_endofpacket -> router_015:sink_endofpacket
	wire          router_015_src_valid;                                                          // router_015:src_valid -> rsp_demux_009:sink_valid
	wire  [107:0] router_015_src_data;                                                           // router_015:src_data -> rsp_demux_009:sink_data
	wire          router_015_src_ready;                                                          // rsp_demux_009:sink_ready -> router_015:src_ready
	wire   [18:0] router_015_src_channel;                                                        // router_015:src_channel -> rsp_demux_009:sink_channel
	wire          router_015_src_startofpacket;                                                  // router_015:src_startofpacket -> rsp_demux_009:sink_startofpacket
	wire          router_015_src_endofpacket;                                                    // router_015:src_endofpacket -> rsp_demux_009:sink_endofpacket
	wire          shared_ocm_s1_agent_rp_valid;                                                  // shared_ocm_s1_agent:rp_valid -> router_016:sink_valid
	wire  [107:0] shared_ocm_s1_agent_rp_data;                                                   // shared_ocm_s1_agent:rp_data -> router_016:sink_data
	wire          shared_ocm_s1_agent_rp_ready;                                                  // router_016:sink_ready -> shared_ocm_s1_agent:rp_ready
	wire          shared_ocm_s1_agent_rp_startofpacket;                                          // shared_ocm_s1_agent:rp_startofpacket -> router_016:sink_startofpacket
	wire          shared_ocm_s1_agent_rp_endofpacket;                                            // shared_ocm_s1_agent:rp_endofpacket -> router_016:sink_endofpacket
	wire          router_016_src_valid;                                                          // router_016:src_valid -> rsp_demux_010:sink_valid
	wire  [107:0] router_016_src_data;                                                           // router_016:src_data -> rsp_demux_010:sink_data
	wire          router_016_src_ready;                                                          // rsp_demux_010:sink_ready -> router_016:src_ready
	wire   [18:0] router_016_src_channel;                                                        // router_016:src_channel -> rsp_demux_010:sink_channel
	wire          router_016_src_startofpacket;                                                  // router_016:src_startofpacket -> rsp_demux_010:sink_startofpacket
	wire          router_016_src_endofpacket;                                                    // router_016:src_endofpacket -> rsp_demux_010:sink_endofpacket
	wire          sdram_0_sdout_agent_rp_valid;                                                  // sdram_0_sdout_agent:rp_valid -> router_017:sink_valid
	wire  [107:0] sdram_0_sdout_agent_rp_data;                                                   // sdram_0_sdout_agent:rp_data -> router_017:sink_data
	wire          sdram_0_sdout_agent_rp_ready;                                                  // router_017:sink_ready -> sdram_0_sdout_agent:rp_ready
	wire          sdram_0_sdout_agent_rp_startofpacket;                                          // sdram_0_sdout_agent:rp_startofpacket -> router_017:sink_startofpacket
	wire          sdram_0_sdout_agent_rp_endofpacket;                                            // sdram_0_sdout_agent:rp_endofpacket -> router_017:sink_endofpacket
	wire          router_017_src_valid;                                                          // router_017:src_valid -> rsp_demux_011:sink_valid
	wire  [107:0] router_017_src_data;                                                           // router_017:src_data -> rsp_demux_011:sink_data
	wire          router_017_src_ready;                                                          // rsp_demux_011:sink_ready -> router_017:src_ready
	wire   [18:0] router_017_src_channel;                                                        // router_017:src_channel -> rsp_demux_011:sink_channel
	wire          router_017_src_startofpacket;                                                  // router_017:src_startofpacket -> rsp_demux_011:sink_startofpacket
	wire          router_017_src_endofpacket;                                                    // router_017:src_endofpacket -> rsp_demux_011:sink_endofpacket
	wire          mbox_m_w3_avmm_msg_receiver_agent_rp_valid;                                    // mbox_m_w3_avmm_msg_receiver_agent:rp_valid -> router_018:sink_valid
	wire  [107:0] mbox_m_w3_avmm_msg_receiver_agent_rp_data;                                     // mbox_m_w3_avmm_msg_receiver_agent:rp_data -> router_018:sink_data
	wire          mbox_m_w3_avmm_msg_receiver_agent_rp_ready;                                    // router_018:sink_ready -> mbox_m_w3_avmm_msg_receiver_agent:rp_ready
	wire          mbox_m_w3_avmm_msg_receiver_agent_rp_startofpacket;                            // mbox_m_w3_avmm_msg_receiver_agent:rp_startofpacket -> router_018:sink_startofpacket
	wire          mbox_m_w3_avmm_msg_receiver_agent_rp_endofpacket;                              // mbox_m_w3_avmm_msg_receiver_agent:rp_endofpacket -> router_018:sink_endofpacket
	wire          router_018_src_valid;                                                          // router_018:src_valid -> rsp_demux_012:sink_valid
	wire  [107:0] router_018_src_data;                                                           // router_018:src_data -> rsp_demux_012:sink_data
	wire          router_018_src_ready;                                                          // rsp_demux_012:sink_ready -> router_018:src_ready
	wire   [18:0] router_018_src_channel;                                                        // router_018:src_channel -> rsp_demux_012:sink_channel
	wire          router_018_src_startofpacket;                                                  // router_018:src_startofpacket -> rsp_demux_012:sink_startofpacket
	wire          router_018_src_endofpacket;                                                    // router_018:src_endofpacket -> rsp_demux_012:sink_endofpacket
	wire          req_fifo_in_agent_rp_valid;                                                    // req_fifo_in_agent:rp_valid -> router_019:sink_valid
	wire  [107:0] req_fifo_in_agent_rp_data;                                                     // req_fifo_in_agent:rp_data -> router_019:sink_data
	wire          req_fifo_in_agent_rp_ready;                                                    // router_019:sink_ready -> req_fifo_in_agent:rp_ready
	wire          req_fifo_in_agent_rp_startofpacket;                                            // req_fifo_in_agent:rp_startofpacket -> router_019:sink_startofpacket
	wire          req_fifo_in_agent_rp_endofpacket;                                              // req_fifo_in_agent:rp_endofpacket -> router_019:sink_endofpacket
	wire          router_019_src_valid;                                                          // router_019:src_valid -> rsp_demux_013:sink_valid
	wire  [107:0] router_019_src_data;                                                           // router_019:src_data -> rsp_demux_013:sink_data
	wire          router_019_src_ready;                                                          // rsp_demux_013:sink_ready -> router_019:src_ready
	wire   [18:0] router_019_src_channel;                                                        // router_019:src_channel -> rsp_demux_013:sink_channel
	wire          router_019_src_startofpacket;                                                  // router_019:src_startofpacket -> rsp_demux_013:sink_startofpacket
	wire          router_019_src_endofpacket;                                                    // router_019:src_endofpacket -> rsp_demux_013:sink_endofpacket
	wire          req_fifo_in_csr_agent_rp_valid;                                                // req_fifo_in_csr_agent:rp_valid -> router_020:sink_valid
	wire  [107:0] req_fifo_in_csr_agent_rp_data;                                                 // req_fifo_in_csr_agent:rp_data -> router_020:sink_data
	wire          req_fifo_in_csr_agent_rp_ready;                                                // router_020:sink_ready -> req_fifo_in_csr_agent:rp_ready
	wire          req_fifo_in_csr_agent_rp_startofpacket;                                        // req_fifo_in_csr_agent:rp_startofpacket -> router_020:sink_startofpacket
	wire          req_fifo_in_csr_agent_rp_endofpacket;                                          // req_fifo_in_csr_agent:rp_endofpacket -> router_020:sink_endofpacket
	wire          router_020_src_valid;                                                          // router_020:src_valid -> rsp_demux_014:sink_valid
	wire  [107:0] router_020_src_data;                                                           // router_020:src_data -> rsp_demux_014:sink_data
	wire          router_020_src_ready;                                                          // rsp_demux_014:sink_ready -> router_020:src_ready
	wire   [18:0] router_020_src_channel;                                                        // router_020:src_channel -> rsp_demux_014:sink_channel
	wire          router_020_src_startofpacket;                                                  // router_020:src_startofpacket -> rsp_demux_014:sink_startofpacket
	wire          router_020_src_endofpacket;                                                    // router_020:src_endofpacket -> rsp_demux_014:sink_endofpacket
	wire          shared_ocm_s2_agent_rp_valid;                                                  // shared_ocm_s2_agent:rp_valid -> router_021:sink_valid
	wire  [107:0] shared_ocm_s2_agent_rp_data;                                                   // shared_ocm_s2_agent:rp_data -> router_021:sink_data
	wire          shared_ocm_s2_agent_rp_ready;                                                  // router_021:sink_ready -> shared_ocm_s2_agent:rp_ready
	wire          shared_ocm_s2_agent_rp_startofpacket;                                          // shared_ocm_s2_agent:rp_startofpacket -> router_021:sink_startofpacket
	wire          shared_ocm_s2_agent_rp_endofpacket;                                            // shared_ocm_s2_agent:rp_endofpacket -> router_021:sink_endofpacket
	wire          router_021_src_valid;                                                          // router_021:src_valid -> rsp_demux_015:sink_valid
	wire  [107:0] router_021_src_data;                                                           // router_021:src_data -> rsp_demux_015:sink_data
	wire          router_021_src_ready;                                                          // rsp_demux_015:sink_ready -> router_021:src_ready
	wire   [18:0] router_021_src_channel;                                                        // router_021:src_channel -> rsp_demux_015:sink_channel
	wire          router_021_src_startofpacket;                                                  // router_021:src_startofpacket -> rsp_demux_015:sink_startofpacket
	wire          router_021_src_endofpacket;                                                    // router_021:src_endofpacket -> rsp_demux_015:sink_endofpacket
	wire          mbox_m_w2_avmm_msg_receiver_agent_rp_valid;                                    // mbox_m_w2_avmm_msg_receiver_agent:rp_valid -> router_022:sink_valid
	wire  [107:0] mbox_m_w2_avmm_msg_receiver_agent_rp_data;                                     // mbox_m_w2_avmm_msg_receiver_agent:rp_data -> router_022:sink_data
	wire          mbox_m_w2_avmm_msg_receiver_agent_rp_ready;                                    // router_022:sink_ready -> mbox_m_w2_avmm_msg_receiver_agent:rp_ready
	wire          mbox_m_w2_avmm_msg_receiver_agent_rp_startofpacket;                            // mbox_m_w2_avmm_msg_receiver_agent:rp_startofpacket -> router_022:sink_startofpacket
	wire          mbox_m_w2_avmm_msg_receiver_agent_rp_endofpacket;                              // mbox_m_w2_avmm_msg_receiver_agent:rp_endofpacket -> router_022:sink_endofpacket
	wire          router_022_src_valid;                                                          // router_022:src_valid -> rsp_demux_016:sink_valid
	wire  [107:0] router_022_src_data;                                                           // router_022:src_data -> rsp_demux_016:sink_data
	wire          router_022_src_ready;                                                          // rsp_demux_016:sink_ready -> router_022:src_ready
	wire   [18:0] router_022_src_channel;                                                        // router_022:src_channel -> rsp_demux_016:sink_channel
	wire          router_022_src_startofpacket;                                                  // router_022:src_startofpacket -> rsp_demux_016:sink_startofpacket
	wire          router_022_src_endofpacket;                                                    // router_022:src_endofpacket -> rsp_demux_016:sink_endofpacket
	wire          mbox_m_w1_avmm_msg_receiver_agent_rp_valid;                                    // mbox_m_w1_avmm_msg_receiver_agent:rp_valid -> router_023:sink_valid
	wire  [107:0] mbox_m_w1_avmm_msg_receiver_agent_rp_data;                                     // mbox_m_w1_avmm_msg_receiver_agent:rp_data -> router_023:sink_data
	wire          mbox_m_w1_avmm_msg_receiver_agent_rp_ready;                                    // router_023:sink_ready -> mbox_m_w1_avmm_msg_receiver_agent:rp_ready
	wire          mbox_m_w1_avmm_msg_receiver_agent_rp_startofpacket;                            // mbox_m_w1_avmm_msg_receiver_agent:rp_startofpacket -> router_023:sink_startofpacket
	wire          mbox_m_w1_avmm_msg_receiver_agent_rp_endofpacket;                              // mbox_m_w1_avmm_msg_receiver_agent:rp_endofpacket -> router_023:sink_endofpacket
	wire          router_023_src_valid;                                                          // router_023:src_valid -> rsp_demux_017:sink_valid
	wire  [107:0] router_023_src_data;                                                           // router_023:src_data -> rsp_demux_017:sink_data
	wire          router_023_src_ready;                                                          // rsp_demux_017:sink_ready -> router_023:src_ready
	wire   [18:0] router_023_src_channel;                                                        // router_023:src_channel -> rsp_demux_017:sink_channel
	wire          router_023_src_startofpacket;                                                  // router_023:src_startofpacket -> rsp_demux_017:sink_startofpacket
	wire          router_023_src_endofpacket;                                                    // router_023:src_endofpacket -> rsp_demux_017:sink_endofpacket
	wire          mbox_m_w0_avmm_msg_receiver_agent_rp_valid;                                    // mbox_m_w0_avmm_msg_receiver_agent:rp_valid -> router_024:sink_valid
	wire  [107:0] mbox_m_w0_avmm_msg_receiver_agent_rp_data;                                     // mbox_m_w0_avmm_msg_receiver_agent:rp_data -> router_024:sink_data
	wire          mbox_m_w0_avmm_msg_receiver_agent_rp_ready;                                    // router_024:sink_ready -> mbox_m_w0_avmm_msg_receiver_agent:rp_ready
	wire          mbox_m_w0_avmm_msg_receiver_agent_rp_startofpacket;                            // mbox_m_w0_avmm_msg_receiver_agent:rp_startofpacket -> router_024:sink_startofpacket
	wire          mbox_m_w0_avmm_msg_receiver_agent_rp_endofpacket;                              // mbox_m_w0_avmm_msg_receiver_agent:rp_endofpacket -> router_024:sink_endofpacket
	wire          router_024_src_valid;                                                          // router_024:src_valid -> rsp_demux_018:sink_valid
	wire  [107:0] router_024_src_data;                                                           // router_024:src_data -> rsp_demux_018:sink_data
	wire          router_024_src_ready;                                                          // rsp_demux_018:sink_ready -> router_024:src_ready
	wire   [18:0] router_024_src_channel;                                                        // router_024:src_channel -> rsp_demux_018:sink_channel
	wire          router_024_src_startofpacket;                                                  // router_024:src_startofpacket -> rsp_demux_018:sink_startofpacket
	wire          router_024_src_endofpacket;                                                    // router_024:src_endofpacket -> rsp_demux_018:sink_endofpacket
	wire          router_src_valid;                                                              // router:src_valid -> manager_data_master_limiter:cmd_sink_valid
	wire  [107:0] router_src_data;                                                               // router:src_data -> manager_data_master_limiter:cmd_sink_data
	wire          router_src_ready;                                                              // manager_data_master_limiter:cmd_sink_ready -> router:src_ready
	wire   [18:0] router_src_channel;                                                            // router:src_channel -> manager_data_master_limiter:cmd_sink_channel
	wire          router_src_startofpacket;                                                      // router:src_startofpacket -> manager_data_master_limiter:cmd_sink_startofpacket
	wire          router_src_endofpacket;                                                        // router:src_endofpacket -> manager_data_master_limiter:cmd_sink_endofpacket
	wire  [107:0] manager_data_master_limiter_cmd_src_data;                                      // manager_data_master_limiter:cmd_src_data -> cmd_demux:sink_data
	wire          manager_data_master_limiter_cmd_src_ready;                                     // cmd_demux:sink_ready -> manager_data_master_limiter:cmd_src_ready
	wire   [18:0] manager_data_master_limiter_cmd_src_channel;                                   // manager_data_master_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire          manager_data_master_limiter_cmd_src_startofpacket;                             // manager_data_master_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire          manager_data_master_limiter_cmd_src_endofpacket;                               // manager_data_master_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire          rsp_mux_src_valid;                                                             // rsp_mux:src_valid -> manager_data_master_limiter:rsp_sink_valid
	wire  [107:0] rsp_mux_src_data;                                                              // rsp_mux:src_data -> manager_data_master_limiter:rsp_sink_data
	wire          rsp_mux_src_ready;                                                             // manager_data_master_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire   [18:0] rsp_mux_src_channel;                                                           // rsp_mux:src_channel -> manager_data_master_limiter:rsp_sink_channel
	wire          rsp_mux_src_startofpacket;                                                     // rsp_mux:src_startofpacket -> manager_data_master_limiter:rsp_sink_startofpacket
	wire          rsp_mux_src_endofpacket;                                                       // rsp_mux:src_endofpacket -> manager_data_master_limiter:rsp_sink_endofpacket
	wire          manager_data_master_limiter_rsp_src_valid;                                     // manager_data_master_limiter:rsp_src_valid -> manager_data_master_agent:rp_valid
	wire  [107:0] manager_data_master_limiter_rsp_src_data;                                      // manager_data_master_limiter:rsp_src_data -> manager_data_master_agent:rp_data
	wire          manager_data_master_limiter_rsp_src_ready;                                     // manager_data_master_agent:rp_ready -> manager_data_master_limiter:rsp_src_ready
	wire   [18:0] manager_data_master_limiter_rsp_src_channel;                                   // manager_data_master_limiter:rsp_src_channel -> manager_data_master_agent:rp_channel
	wire          manager_data_master_limiter_rsp_src_startofpacket;                             // manager_data_master_limiter:rsp_src_startofpacket -> manager_data_master_agent:rp_startofpacket
	wire          manager_data_master_limiter_rsp_src_endofpacket;                               // manager_data_master_limiter:rsp_src_endofpacket -> manager_data_master_agent:rp_endofpacket
	wire          router_001_src_valid;                                                          // router_001:src_valid -> manager_instruction_master_limiter:cmd_sink_valid
	wire  [107:0] router_001_src_data;                                                           // router_001:src_data -> manager_instruction_master_limiter:cmd_sink_data
	wire          router_001_src_ready;                                                          // manager_instruction_master_limiter:cmd_sink_ready -> router_001:src_ready
	wire   [18:0] router_001_src_channel;                                                        // router_001:src_channel -> manager_instruction_master_limiter:cmd_sink_channel
	wire          router_001_src_startofpacket;                                                  // router_001:src_startofpacket -> manager_instruction_master_limiter:cmd_sink_startofpacket
	wire          router_001_src_endofpacket;                                                    // router_001:src_endofpacket -> manager_instruction_master_limiter:cmd_sink_endofpacket
	wire  [107:0] manager_instruction_master_limiter_cmd_src_data;                               // manager_instruction_master_limiter:cmd_src_data -> cmd_demux_001:sink_data
	wire          manager_instruction_master_limiter_cmd_src_ready;                              // cmd_demux_001:sink_ready -> manager_instruction_master_limiter:cmd_src_ready
	wire   [18:0] manager_instruction_master_limiter_cmd_src_channel;                            // manager_instruction_master_limiter:cmd_src_channel -> cmd_demux_001:sink_channel
	wire          manager_instruction_master_limiter_cmd_src_startofpacket;                      // manager_instruction_master_limiter:cmd_src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          manager_instruction_master_limiter_cmd_src_endofpacket;                        // manager_instruction_master_limiter:cmd_src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          rsp_mux_001_src_valid;                                                         // rsp_mux_001:src_valid -> manager_instruction_master_limiter:rsp_sink_valid
	wire  [107:0] rsp_mux_001_src_data;                                                          // rsp_mux_001:src_data -> manager_instruction_master_limiter:rsp_sink_data
	wire          rsp_mux_001_src_ready;                                                         // manager_instruction_master_limiter:rsp_sink_ready -> rsp_mux_001:src_ready
	wire   [18:0] rsp_mux_001_src_channel;                                                       // rsp_mux_001:src_channel -> manager_instruction_master_limiter:rsp_sink_channel
	wire          rsp_mux_001_src_startofpacket;                                                 // rsp_mux_001:src_startofpacket -> manager_instruction_master_limiter:rsp_sink_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                                   // rsp_mux_001:src_endofpacket -> manager_instruction_master_limiter:rsp_sink_endofpacket
	wire          manager_instruction_master_limiter_rsp_src_valid;                              // manager_instruction_master_limiter:rsp_src_valid -> manager_instruction_master_agent:rp_valid
	wire  [107:0] manager_instruction_master_limiter_rsp_src_data;                               // manager_instruction_master_limiter:rsp_src_data -> manager_instruction_master_agent:rp_data
	wire          manager_instruction_master_limiter_rsp_src_ready;                              // manager_instruction_master_agent:rp_ready -> manager_instruction_master_limiter:rsp_src_ready
	wire   [18:0] manager_instruction_master_limiter_rsp_src_channel;                            // manager_instruction_master_limiter:rsp_src_channel -> manager_instruction_master_agent:rp_channel
	wire          manager_instruction_master_limiter_rsp_src_startofpacket;                      // manager_instruction_master_limiter:rsp_src_startofpacket -> manager_instruction_master_agent:rp_startofpacket
	wire          manager_instruction_master_limiter_rsp_src_endofpacket;                        // manager_instruction_master_limiter:rsp_src_endofpacket -> manager_instruction_master_agent:rp_endofpacket
	wire          router_002_src_valid;                                                          // router_002:src_valid -> worker0_wout_limiter:cmd_sink_valid
	wire  [107:0] router_002_src_data;                                                           // router_002:src_data -> worker0_wout_limiter:cmd_sink_data
	wire          router_002_src_ready;                                                          // worker0_wout_limiter:cmd_sink_ready -> router_002:src_ready
	wire   [18:0] router_002_src_channel;                                                        // router_002:src_channel -> worker0_wout_limiter:cmd_sink_channel
	wire          router_002_src_startofpacket;                                                  // router_002:src_startofpacket -> worker0_wout_limiter:cmd_sink_startofpacket
	wire          router_002_src_endofpacket;                                                    // router_002:src_endofpacket -> worker0_wout_limiter:cmd_sink_endofpacket
	wire  [107:0] worker0_wout_limiter_cmd_src_data;                                             // worker0_wout_limiter:cmd_src_data -> cmd_demux_002:sink_data
	wire          worker0_wout_limiter_cmd_src_ready;                                            // cmd_demux_002:sink_ready -> worker0_wout_limiter:cmd_src_ready
	wire   [18:0] worker0_wout_limiter_cmd_src_channel;                                          // worker0_wout_limiter:cmd_src_channel -> cmd_demux_002:sink_channel
	wire          worker0_wout_limiter_cmd_src_startofpacket;                                    // worker0_wout_limiter:cmd_src_startofpacket -> cmd_demux_002:sink_startofpacket
	wire          worker0_wout_limiter_cmd_src_endofpacket;                                      // worker0_wout_limiter:cmd_src_endofpacket -> cmd_demux_002:sink_endofpacket
	wire          rsp_mux_002_src_valid;                                                         // rsp_mux_002:src_valid -> worker0_wout_limiter:rsp_sink_valid
	wire  [107:0] rsp_mux_002_src_data;                                                          // rsp_mux_002:src_data -> worker0_wout_limiter:rsp_sink_data
	wire          rsp_mux_002_src_ready;                                                         // worker0_wout_limiter:rsp_sink_ready -> rsp_mux_002:src_ready
	wire   [18:0] rsp_mux_002_src_channel;                                                       // rsp_mux_002:src_channel -> worker0_wout_limiter:rsp_sink_channel
	wire          rsp_mux_002_src_startofpacket;                                                 // rsp_mux_002:src_startofpacket -> worker0_wout_limiter:rsp_sink_startofpacket
	wire          rsp_mux_002_src_endofpacket;                                                   // rsp_mux_002:src_endofpacket -> worker0_wout_limiter:rsp_sink_endofpacket
	wire          worker0_wout_limiter_rsp_src_valid;                                            // worker0_wout_limiter:rsp_src_valid -> worker0_wout_agent:rp_valid
	wire  [107:0] worker0_wout_limiter_rsp_src_data;                                             // worker0_wout_limiter:rsp_src_data -> worker0_wout_agent:rp_data
	wire          worker0_wout_limiter_rsp_src_ready;                                            // worker0_wout_agent:rp_ready -> worker0_wout_limiter:rsp_src_ready
	wire   [18:0] worker0_wout_limiter_rsp_src_channel;                                          // worker0_wout_limiter:rsp_src_channel -> worker0_wout_agent:rp_channel
	wire          worker0_wout_limiter_rsp_src_startofpacket;                                    // worker0_wout_limiter:rsp_src_startofpacket -> worker0_wout_agent:rp_startofpacket
	wire          worker0_wout_limiter_rsp_src_endofpacket;                                      // worker0_wout_limiter:rsp_src_endofpacket -> worker0_wout_agent:rp_endofpacket
	wire          router_003_src_valid;                                                          // router_003:src_valid -> worker1_wout_limiter:cmd_sink_valid
	wire  [107:0] router_003_src_data;                                                           // router_003:src_data -> worker1_wout_limiter:cmd_sink_data
	wire          router_003_src_ready;                                                          // worker1_wout_limiter:cmd_sink_ready -> router_003:src_ready
	wire   [18:0] router_003_src_channel;                                                        // router_003:src_channel -> worker1_wout_limiter:cmd_sink_channel
	wire          router_003_src_startofpacket;                                                  // router_003:src_startofpacket -> worker1_wout_limiter:cmd_sink_startofpacket
	wire          router_003_src_endofpacket;                                                    // router_003:src_endofpacket -> worker1_wout_limiter:cmd_sink_endofpacket
	wire  [107:0] worker1_wout_limiter_cmd_src_data;                                             // worker1_wout_limiter:cmd_src_data -> cmd_demux_003:sink_data
	wire          worker1_wout_limiter_cmd_src_ready;                                            // cmd_demux_003:sink_ready -> worker1_wout_limiter:cmd_src_ready
	wire   [18:0] worker1_wout_limiter_cmd_src_channel;                                          // worker1_wout_limiter:cmd_src_channel -> cmd_demux_003:sink_channel
	wire          worker1_wout_limiter_cmd_src_startofpacket;                                    // worker1_wout_limiter:cmd_src_startofpacket -> cmd_demux_003:sink_startofpacket
	wire          worker1_wout_limiter_cmd_src_endofpacket;                                      // worker1_wout_limiter:cmd_src_endofpacket -> cmd_demux_003:sink_endofpacket
	wire          rsp_mux_003_src_valid;                                                         // rsp_mux_003:src_valid -> worker1_wout_limiter:rsp_sink_valid
	wire  [107:0] rsp_mux_003_src_data;                                                          // rsp_mux_003:src_data -> worker1_wout_limiter:rsp_sink_data
	wire          rsp_mux_003_src_ready;                                                         // worker1_wout_limiter:rsp_sink_ready -> rsp_mux_003:src_ready
	wire   [18:0] rsp_mux_003_src_channel;                                                       // rsp_mux_003:src_channel -> worker1_wout_limiter:rsp_sink_channel
	wire          rsp_mux_003_src_startofpacket;                                                 // rsp_mux_003:src_startofpacket -> worker1_wout_limiter:rsp_sink_startofpacket
	wire          rsp_mux_003_src_endofpacket;                                                   // rsp_mux_003:src_endofpacket -> worker1_wout_limiter:rsp_sink_endofpacket
	wire          worker1_wout_limiter_rsp_src_valid;                                            // worker1_wout_limiter:rsp_src_valid -> worker1_wout_agent:rp_valid
	wire  [107:0] worker1_wout_limiter_rsp_src_data;                                             // worker1_wout_limiter:rsp_src_data -> worker1_wout_agent:rp_data
	wire          worker1_wout_limiter_rsp_src_ready;                                            // worker1_wout_agent:rp_ready -> worker1_wout_limiter:rsp_src_ready
	wire   [18:0] worker1_wout_limiter_rsp_src_channel;                                          // worker1_wout_limiter:rsp_src_channel -> worker1_wout_agent:rp_channel
	wire          worker1_wout_limiter_rsp_src_startofpacket;                                    // worker1_wout_limiter:rsp_src_startofpacket -> worker1_wout_agent:rp_startofpacket
	wire          worker1_wout_limiter_rsp_src_endofpacket;                                      // worker1_wout_limiter:rsp_src_endofpacket -> worker1_wout_agent:rp_endofpacket
	wire          router_004_src_valid;                                                          // router_004:src_valid -> worker2_wout_limiter:cmd_sink_valid
	wire  [107:0] router_004_src_data;                                                           // router_004:src_data -> worker2_wout_limiter:cmd_sink_data
	wire          router_004_src_ready;                                                          // worker2_wout_limiter:cmd_sink_ready -> router_004:src_ready
	wire   [18:0] router_004_src_channel;                                                        // router_004:src_channel -> worker2_wout_limiter:cmd_sink_channel
	wire          router_004_src_startofpacket;                                                  // router_004:src_startofpacket -> worker2_wout_limiter:cmd_sink_startofpacket
	wire          router_004_src_endofpacket;                                                    // router_004:src_endofpacket -> worker2_wout_limiter:cmd_sink_endofpacket
	wire  [107:0] worker2_wout_limiter_cmd_src_data;                                             // worker2_wout_limiter:cmd_src_data -> cmd_demux_004:sink_data
	wire          worker2_wout_limiter_cmd_src_ready;                                            // cmd_demux_004:sink_ready -> worker2_wout_limiter:cmd_src_ready
	wire   [18:0] worker2_wout_limiter_cmd_src_channel;                                          // worker2_wout_limiter:cmd_src_channel -> cmd_demux_004:sink_channel
	wire          worker2_wout_limiter_cmd_src_startofpacket;                                    // worker2_wout_limiter:cmd_src_startofpacket -> cmd_demux_004:sink_startofpacket
	wire          worker2_wout_limiter_cmd_src_endofpacket;                                      // worker2_wout_limiter:cmd_src_endofpacket -> cmd_demux_004:sink_endofpacket
	wire          rsp_mux_004_src_valid;                                                         // rsp_mux_004:src_valid -> worker2_wout_limiter:rsp_sink_valid
	wire  [107:0] rsp_mux_004_src_data;                                                          // rsp_mux_004:src_data -> worker2_wout_limiter:rsp_sink_data
	wire          rsp_mux_004_src_ready;                                                         // worker2_wout_limiter:rsp_sink_ready -> rsp_mux_004:src_ready
	wire   [18:0] rsp_mux_004_src_channel;                                                       // rsp_mux_004:src_channel -> worker2_wout_limiter:rsp_sink_channel
	wire          rsp_mux_004_src_startofpacket;                                                 // rsp_mux_004:src_startofpacket -> worker2_wout_limiter:rsp_sink_startofpacket
	wire          rsp_mux_004_src_endofpacket;                                                   // rsp_mux_004:src_endofpacket -> worker2_wout_limiter:rsp_sink_endofpacket
	wire          worker2_wout_limiter_rsp_src_valid;                                            // worker2_wout_limiter:rsp_src_valid -> worker2_wout_agent:rp_valid
	wire  [107:0] worker2_wout_limiter_rsp_src_data;                                             // worker2_wout_limiter:rsp_src_data -> worker2_wout_agent:rp_data
	wire          worker2_wout_limiter_rsp_src_ready;                                            // worker2_wout_agent:rp_ready -> worker2_wout_limiter:rsp_src_ready
	wire   [18:0] worker2_wout_limiter_rsp_src_channel;                                          // worker2_wout_limiter:rsp_src_channel -> worker2_wout_agent:rp_channel
	wire          worker2_wout_limiter_rsp_src_startofpacket;                                    // worker2_wout_limiter:rsp_src_startofpacket -> worker2_wout_agent:rp_startofpacket
	wire          worker2_wout_limiter_rsp_src_endofpacket;                                      // worker2_wout_limiter:rsp_src_endofpacket -> worker2_wout_agent:rp_endofpacket
	wire          router_005_src_valid;                                                          // router_005:src_valid -> worker3_wout_limiter:cmd_sink_valid
	wire  [107:0] router_005_src_data;                                                           // router_005:src_data -> worker3_wout_limiter:cmd_sink_data
	wire          router_005_src_ready;                                                          // worker3_wout_limiter:cmd_sink_ready -> router_005:src_ready
	wire   [18:0] router_005_src_channel;                                                        // router_005:src_channel -> worker3_wout_limiter:cmd_sink_channel
	wire          router_005_src_startofpacket;                                                  // router_005:src_startofpacket -> worker3_wout_limiter:cmd_sink_startofpacket
	wire          router_005_src_endofpacket;                                                    // router_005:src_endofpacket -> worker3_wout_limiter:cmd_sink_endofpacket
	wire  [107:0] worker3_wout_limiter_cmd_src_data;                                             // worker3_wout_limiter:cmd_src_data -> cmd_demux_005:sink_data
	wire          worker3_wout_limiter_cmd_src_ready;                                            // cmd_demux_005:sink_ready -> worker3_wout_limiter:cmd_src_ready
	wire   [18:0] worker3_wout_limiter_cmd_src_channel;                                          // worker3_wout_limiter:cmd_src_channel -> cmd_demux_005:sink_channel
	wire          worker3_wout_limiter_cmd_src_startofpacket;                                    // worker3_wout_limiter:cmd_src_startofpacket -> cmd_demux_005:sink_startofpacket
	wire          worker3_wout_limiter_cmd_src_endofpacket;                                      // worker3_wout_limiter:cmd_src_endofpacket -> cmd_demux_005:sink_endofpacket
	wire          rsp_mux_005_src_valid;                                                         // rsp_mux_005:src_valid -> worker3_wout_limiter:rsp_sink_valid
	wire  [107:0] rsp_mux_005_src_data;                                                          // rsp_mux_005:src_data -> worker3_wout_limiter:rsp_sink_data
	wire          rsp_mux_005_src_ready;                                                         // worker3_wout_limiter:rsp_sink_ready -> rsp_mux_005:src_ready
	wire   [18:0] rsp_mux_005_src_channel;                                                       // rsp_mux_005:src_channel -> worker3_wout_limiter:rsp_sink_channel
	wire          rsp_mux_005_src_startofpacket;                                                 // rsp_mux_005:src_startofpacket -> worker3_wout_limiter:rsp_sink_startofpacket
	wire          rsp_mux_005_src_endofpacket;                                                   // rsp_mux_005:src_endofpacket -> worker3_wout_limiter:rsp_sink_endofpacket
	wire          worker3_wout_limiter_rsp_src_valid;                                            // worker3_wout_limiter:rsp_src_valid -> worker3_wout_agent:rp_valid
	wire  [107:0] worker3_wout_limiter_rsp_src_data;                                             // worker3_wout_limiter:rsp_src_data -> worker3_wout_agent:rp_data
	wire          worker3_wout_limiter_rsp_src_ready;                                            // worker3_wout_agent:rp_ready -> worker3_wout_limiter:rsp_src_ready
	wire   [18:0] worker3_wout_limiter_rsp_src_channel;                                          // worker3_wout_limiter:rsp_src_channel -> worker3_wout_agent:rp_channel
	wire          worker3_wout_limiter_rsp_src_startofpacket;                                    // worker3_wout_limiter:rsp_src_startofpacket -> worker3_wout_agent:rp_startofpacket
	wire          worker3_wout_limiter_rsp_src_endofpacket;                                      // worker3_wout_limiter:rsp_src_endofpacket -> worker3_wout_agent:rp_endofpacket
	wire          cmd_demux_src0_valid;                                                          // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [107:0] cmd_demux_src0_data;                                                           // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                                          // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire   [18:0] cmd_demux_src0_channel;                                                        // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                                  // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                    // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                                          // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire  [107:0] cmd_demux_src1_data;                                                           // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire          cmd_demux_src1_ready;                                                          // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire   [18:0] cmd_demux_src1_channel;                                                        // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_src1_startofpacket;                                                  // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          cmd_demux_src1_endofpacket;                                                    // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_src2_valid;                                                          // cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	wire  [107:0] cmd_demux_src2_data;                                                           // cmd_demux:src2_data -> cmd_mux_002:sink0_data
	wire          cmd_demux_src2_ready;                                                          // cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	wire   [18:0] cmd_demux_src2_channel;                                                        // cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	wire          cmd_demux_src2_startofpacket;                                                  // cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          cmd_demux_src2_endofpacket;                                                    // cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_src3_valid;                                                          // cmd_demux:src3_valid -> cmd_mux_003:sink0_valid
	wire  [107:0] cmd_demux_src3_data;                                                           // cmd_demux:src3_data -> cmd_mux_003:sink0_data
	wire          cmd_demux_src3_ready;                                                          // cmd_mux_003:sink0_ready -> cmd_demux:src3_ready
	wire   [18:0] cmd_demux_src3_channel;                                                        // cmd_demux:src3_channel -> cmd_mux_003:sink0_channel
	wire          cmd_demux_src3_startofpacket;                                                  // cmd_demux:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          cmd_demux_src3_endofpacket;                                                    // cmd_demux:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_src4_valid;                                                          // cmd_demux:src4_valid -> cmd_mux_004:sink0_valid
	wire  [107:0] cmd_demux_src4_data;                                                           // cmd_demux:src4_data -> cmd_mux_004:sink0_data
	wire          cmd_demux_src4_ready;                                                          // cmd_mux_004:sink0_ready -> cmd_demux:src4_ready
	wire   [18:0] cmd_demux_src4_channel;                                                        // cmd_demux:src4_channel -> cmd_mux_004:sink0_channel
	wire          cmd_demux_src4_startofpacket;                                                  // cmd_demux:src4_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire          cmd_demux_src4_endofpacket;                                                    // cmd_demux:src4_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          cmd_demux_src5_valid;                                                          // cmd_demux:src5_valid -> cmd_mux_005:sink0_valid
	wire  [107:0] cmd_demux_src5_data;                                                           // cmd_demux:src5_data -> cmd_mux_005:sink0_data
	wire          cmd_demux_src5_ready;                                                          // cmd_mux_005:sink0_ready -> cmd_demux:src5_ready
	wire   [18:0] cmd_demux_src5_channel;                                                        // cmd_demux:src5_channel -> cmd_mux_005:sink0_channel
	wire          cmd_demux_src5_startofpacket;                                                  // cmd_demux:src5_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire          cmd_demux_src5_endofpacket;                                                    // cmd_demux:src5_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire          cmd_demux_src6_valid;                                                          // cmd_demux:src6_valid -> cmd_mux_006:sink0_valid
	wire  [107:0] cmd_demux_src6_data;                                                           // cmd_demux:src6_data -> cmd_mux_006:sink0_data
	wire          cmd_demux_src6_ready;                                                          // cmd_mux_006:sink0_ready -> cmd_demux:src6_ready
	wire   [18:0] cmd_demux_src6_channel;                                                        // cmd_demux:src6_channel -> cmd_mux_006:sink0_channel
	wire          cmd_demux_src6_startofpacket;                                                  // cmd_demux:src6_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire          cmd_demux_src6_endofpacket;                                                    // cmd_demux:src6_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire          cmd_demux_src7_valid;                                                          // cmd_demux:src7_valid -> cmd_mux_007:sink0_valid
	wire  [107:0] cmd_demux_src7_data;                                                           // cmd_demux:src7_data -> cmd_mux_007:sink0_data
	wire          cmd_demux_src7_ready;                                                          // cmd_mux_007:sink0_ready -> cmd_demux:src7_ready
	wire   [18:0] cmd_demux_src7_channel;                                                        // cmd_demux:src7_channel -> cmd_mux_007:sink0_channel
	wire          cmd_demux_src7_startofpacket;                                                  // cmd_demux:src7_startofpacket -> cmd_mux_007:sink0_startofpacket
	wire          cmd_demux_src7_endofpacket;                                                    // cmd_demux:src7_endofpacket -> cmd_mux_007:sink0_endofpacket
	wire          cmd_demux_src8_valid;                                                          // cmd_demux:src8_valid -> cmd_mux_008:sink0_valid
	wire  [107:0] cmd_demux_src8_data;                                                           // cmd_demux:src8_data -> cmd_mux_008:sink0_data
	wire          cmd_demux_src8_ready;                                                          // cmd_mux_008:sink0_ready -> cmd_demux:src8_ready
	wire   [18:0] cmd_demux_src8_channel;                                                        // cmd_demux:src8_channel -> cmd_mux_008:sink0_channel
	wire          cmd_demux_src8_startofpacket;                                                  // cmd_demux:src8_startofpacket -> cmd_mux_008:sink0_startofpacket
	wire          cmd_demux_src8_endofpacket;                                                    // cmd_demux:src8_endofpacket -> cmd_mux_008:sink0_endofpacket
	wire          cmd_demux_src10_valid;                                                         // cmd_demux:src10_valid -> cmd_mux_010:sink0_valid
	wire  [107:0] cmd_demux_src10_data;                                                          // cmd_demux:src10_data -> cmd_mux_010:sink0_data
	wire          cmd_demux_src10_ready;                                                         // cmd_mux_010:sink0_ready -> cmd_demux:src10_ready
	wire   [18:0] cmd_demux_src10_channel;                                                       // cmd_demux:src10_channel -> cmd_mux_010:sink0_channel
	wire          cmd_demux_src10_startofpacket;                                                 // cmd_demux:src10_startofpacket -> cmd_mux_010:sink0_startofpacket
	wire          cmd_demux_src10_endofpacket;                                                   // cmd_demux:src10_endofpacket -> cmd_mux_010:sink0_endofpacket
	wire          cmd_demux_src11_valid;                                                         // cmd_demux:src11_valid -> cmd_mux_011:sink0_valid
	wire  [107:0] cmd_demux_src11_data;                                                          // cmd_demux:src11_data -> cmd_mux_011:sink0_data
	wire          cmd_demux_src11_ready;                                                         // cmd_mux_011:sink0_ready -> cmd_demux:src11_ready
	wire   [18:0] cmd_demux_src11_channel;                                                       // cmd_demux:src11_channel -> cmd_mux_011:sink0_channel
	wire          cmd_demux_src11_startofpacket;                                                 // cmd_demux:src11_startofpacket -> cmd_mux_011:sink0_startofpacket
	wire          cmd_demux_src11_endofpacket;                                                   // cmd_demux:src11_endofpacket -> cmd_mux_011:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                                      // cmd_demux_001:src0_valid -> cmd_mux:sink1_valid
	wire  [107:0] cmd_demux_001_src0_data;                                                       // cmd_demux_001:src0_data -> cmd_mux:sink1_data
	wire          cmd_demux_001_src0_ready;                                                      // cmd_mux:sink1_ready -> cmd_demux_001:src0_ready
	wire   [18:0] cmd_demux_001_src0_channel;                                                    // cmd_demux_001:src0_channel -> cmd_mux:sink1_channel
	wire          cmd_demux_001_src0_startofpacket;                                              // cmd_demux_001:src0_startofpacket -> cmd_mux:sink1_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                                // cmd_demux_001:src0_endofpacket -> cmd_mux:sink1_endofpacket
	wire          cmd_demux_001_src1_valid;                                                      // cmd_demux_001:src1_valid -> cmd_mux_006:sink1_valid
	wire  [107:0] cmd_demux_001_src1_data;                                                       // cmd_demux_001:src1_data -> cmd_mux_006:sink1_data
	wire          cmd_demux_001_src1_ready;                                                      // cmd_mux_006:sink1_ready -> cmd_demux_001:src1_ready
	wire   [18:0] cmd_demux_001_src1_channel;                                                    // cmd_demux_001:src1_channel -> cmd_mux_006:sink1_channel
	wire          cmd_demux_001_src1_startofpacket;                                              // cmd_demux_001:src1_startofpacket -> cmd_mux_006:sink1_startofpacket
	wire          cmd_demux_001_src1_endofpacket;                                                // cmd_demux_001:src1_endofpacket -> cmd_mux_006:sink1_endofpacket
	wire          cmd_demux_001_src2_valid;                                                      // cmd_demux_001:src2_valid -> cmd_mux_011:sink1_valid
	wire  [107:0] cmd_demux_001_src2_data;                                                       // cmd_demux_001:src2_data -> cmd_mux_011:sink1_data
	wire          cmd_demux_001_src2_ready;                                                      // cmd_mux_011:sink1_ready -> cmd_demux_001:src2_ready
	wire   [18:0] cmd_demux_001_src2_channel;                                                    // cmd_demux_001:src2_channel -> cmd_mux_011:sink1_channel
	wire          cmd_demux_001_src2_startofpacket;                                              // cmd_demux_001:src2_startofpacket -> cmd_mux_011:sink1_startofpacket
	wire          cmd_demux_001_src2_endofpacket;                                                // cmd_demux_001:src2_endofpacket -> cmd_mux_011:sink1_endofpacket
	wire          cmd_demux_002_src0_valid;                                                      // cmd_demux_002:src0_valid -> cmd_mux_011:sink2_valid
	wire  [107:0] cmd_demux_002_src0_data;                                                       // cmd_demux_002:src0_data -> cmd_mux_011:sink2_data
	wire          cmd_demux_002_src0_ready;                                                      // cmd_mux_011:sink2_ready -> cmd_demux_002:src0_ready
	wire   [18:0] cmd_demux_002_src0_channel;                                                    // cmd_demux_002:src0_channel -> cmd_mux_011:sink2_channel
	wire          cmd_demux_002_src0_startofpacket;                                              // cmd_demux_002:src0_startofpacket -> cmd_mux_011:sink2_startofpacket
	wire          cmd_demux_002_src0_endofpacket;                                                // cmd_demux_002:src0_endofpacket -> cmd_mux_011:sink2_endofpacket
	wire          cmd_demux_002_src1_valid;                                                      // cmd_demux_002:src1_valid -> cmd_mux_013:sink0_valid
	wire  [107:0] cmd_demux_002_src1_data;                                                       // cmd_demux_002:src1_data -> cmd_mux_013:sink0_data
	wire          cmd_demux_002_src1_ready;                                                      // cmd_mux_013:sink0_ready -> cmd_demux_002:src1_ready
	wire   [18:0] cmd_demux_002_src1_channel;                                                    // cmd_demux_002:src1_channel -> cmd_mux_013:sink0_channel
	wire          cmd_demux_002_src1_startofpacket;                                              // cmd_demux_002:src1_startofpacket -> cmd_mux_013:sink0_startofpacket
	wire          cmd_demux_002_src1_endofpacket;                                                // cmd_demux_002:src1_endofpacket -> cmd_mux_013:sink0_endofpacket
	wire          cmd_demux_002_src2_valid;                                                      // cmd_demux_002:src2_valid -> cmd_mux_014:sink0_valid
	wire  [107:0] cmd_demux_002_src2_data;                                                       // cmd_demux_002:src2_data -> cmd_mux_014:sink0_data
	wire          cmd_demux_002_src2_ready;                                                      // cmd_mux_014:sink0_ready -> cmd_demux_002:src2_ready
	wire   [18:0] cmd_demux_002_src2_channel;                                                    // cmd_demux_002:src2_channel -> cmd_mux_014:sink0_channel
	wire          cmd_demux_002_src2_startofpacket;                                              // cmd_demux_002:src2_startofpacket -> cmd_mux_014:sink0_startofpacket
	wire          cmd_demux_002_src2_endofpacket;                                                // cmd_demux_002:src2_endofpacket -> cmd_mux_014:sink0_endofpacket
	wire          cmd_demux_002_src3_valid;                                                      // cmd_demux_002:src3_valid -> cmd_mux_015:sink0_valid
	wire  [107:0] cmd_demux_002_src3_data;                                                       // cmd_demux_002:src3_data -> cmd_mux_015:sink0_data
	wire          cmd_demux_002_src3_ready;                                                      // cmd_mux_015:sink0_ready -> cmd_demux_002:src3_ready
	wire   [18:0] cmd_demux_002_src3_channel;                                                    // cmd_demux_002:src3_channel -> cmd_mux_015:sink0_channel
	wire          cmd_demux_002_src3_startofpacket;                                              // cmd_demux_002:src3_startofpacket -> cmd_mux_015:sink0_startofpacket
	wire          cmd_demux_002_src3_endofpacket;                                                // cmd_demux_002:src3_endofpacket -> cmd_mux_015:sink0_endofpacket
	wire          cmd_demux_002_src4_valid;                                                      // cmd_demux_002:src4_valid -> cmd_mux_018:sink0_valid
	wire  [107:0] cmd_demux_002_src4_data;                                                       // cmd_demux_002:src4_data -> cmd_mux_018:sink0_data
	wire          cmd_demux_002_src4_ready;                                                      // cmd_mux_018:sink0_ready -> cmd_demux_002:src4_ready
	wire   [18:0] cmd_demux_002_src4_channel;                                                    // cmd_demux_002:src4_channel -> cmd_mux_018:sink0_channel
	wire          cmd_demux_002_src4_startofpacket;                                              // cmd_demux_002:src4_startofpacket -> cmd_mux_018:sink0_startofpacket
	wire          cmd_demux_002_src4_endofpacket;                                                // cmd_demux_002:src4_endofpacket -> cmd_mux_018:sink0_endofpacket
	wire          cmd_demux_003_src0_valid;                                                      // cmd_demux_003:src0_valid -> cmd_mux_011:sink3_valid
	wire  [107:0] cmd_demux_003_src0_data;                                                       // cmd_demux_003:src0_data -> cmd_mux_011:sink3_data
	wire          cmd_demux_003_src0_ready;                                                      // cmd_mux_011:sink3_ready -> cmd_demux_003:src0_ready
	wire   [18:0] cmd_demux_003_src0_channel;                                                    // cmd_demux_003:src0_channel -> cmd_mux_011:sink3_channel
	wire          cmd_demux_003_src0_startofpacket;                                              // cmd_demux_003:src0_startofpacket -> cmd_mux_011:sink3_startofpacket
	wire          cmd_demux_003_src0_endofpacket;                                                // cmd_demux_003:src0_endofpacket -> cmd_mux_011:sink3_endofpacket
	wire          cmd_demux_003_src1_valid;                                                      // cmd_demux_003:src1_valid -> cmd_mux_013:sink1_valid
	wire  [107:0] cmd_demux_003_src1_data;                                                       // cmd_demux_003:src1_data -> cmd_mux_013:sink1_data
	wire          cmd_demux_003_src1_ready;                                                      // cmd_mux_013:sink1_ready -> cmd_demux_003:src1_ready
	wire   [18:0] cmd_demux_003_src1_channel;                                                    // cmd_demux_003:src1_channel -> cmd_mux_013:sink1_channel
	wire          cmd_demux_003_src1_startofpacket;                                              // cmd_demux_003:src1_startofpacket -> cmd_mux_013:sink1_startofpacket
	wire          cmd_demux_003_src1_endofpacket;                                                // cmd_demux_003:src1_endofpacket -> cmd_mux_013:sink1_endofpacket
	wire          cmd_demux_003_src2_valid;                                                      // cmd_demux_003:src2_valid -> cmd_mux_014:sink1_valid
	wire  [107:0] cmd_demux_003_src2_data;                                                       // cmd_demux_003:src2_data -> cmd_mux_014:sink1_data
	wire          cmd_demux_003_src2_ready;                                                      // cmd_mux_014:sink1_ready -> cmd_demux_003:src2_ready
	wire   [18:0] cmd_demux_003_src2_channel;                                                    // cmd_demux_003:src2_channel -> cmd_mux_014:sink1_channel
	wire          cmd_demux_003_src2_startofpacket;                                              // cmd_demux_003:src2_startofpacket -> cmd_mux_014:sink1_startofpacket
	wire          cmd_demux_003_src2_endofpacket;                                                // cmd_demux_003:src2_endofpacket -> cmd_mux_014:sink1_endofpacket
	wire          cmd_demux_003_src3_valid;                                                      // cmd_demux_003:src3_valid -> cmd_mux_015:sink1_valid
	wire  [107:0] cmd_demux_003_src3_data;                                                       // cmd_demux_003:src3_data -> cmd_mux_015:sink1_data
	wire          cmd_demux_003_src3_ready;                                                      // cmd_mux_015:sink1_ready -> cmd_demux_003:src3_ready
	wire   [18:0] cmd_demux_003_src3_channel;                                                    // cmd_demux_003:src3_channel -> cmd_mux_015:sink1_channel
	wire          cmd_demux_003_src3_startofpacket;                                              // cmd_demux_003:src3_startofpacket -> cmd_mux_015:sink1_startofpacket
	wire          cmd_demux_003_src3_endofpacket;                                                // cmd_demux_003:src3_endofpacket -> cmd_mux_015:sink1_endofpacket
	wire          cmd_demux_003_src4_valid;                                                      // cmd_demux_003:src4_valid -> cmd_mux_017:sink0_valid
	wire  [107:0] cmd_demux_003_src4_data;                                                       // cmd_demux_003:src4_data -> cmd_mux_017:sink0_data
	wire          cmd_demux_003_src4_ready;                                                      // cmd_mux_017:sink0_ready -> cmd_demux_003:src4_ready
	wire   [18:0] cmd_demux_003_src4_channel;                                                    // cmd_demux_003:src4_channel -> cmd_mux_017:sink0_channel
	wire          cmd_demux_003_src4_startofpacket;                                              // cmd_demux_003:src4_startofpacket -> cmd_mux_017:sink0_startofpacket
	wire          cmd_demux_003_src4_endofpacket;                                                // cmd_demux_003:src4_endofpacket -> cmd_mux_017:sink0_endofpacket
	wire          cmd_demux_004_src0_valid;                                                      // cmd_demux_004:src0_valid -> cmd_mux_011:sink4_valid
	wire  [107:0] cmd_demux_004_src0_data;                                                       // cmd_demux_004:src0_data -> cmd_mux_011:sink4_data
	wire          cmd_demux_004_src0_ready;                                                      // cmd_mux_011:sink4_ready -> cmd_demux_004:src0_ready
	wire   [18:0] cmd_demux_004_src0_channel;                                                    // cmd_demux_004:src0_channel -> cmd_mux_011:sink4_channel
	wire          cmd_demux_004_src0_startofpacket;                                              // cmd_demux_004:src0_startofpacket -> cmd_mux_011:sink4_startofpacket
	wire          cmd_demux_004_src0_endofpacket;                                                // cmd_demux_004:src0_endofpacket -> cmd_mux_011:sink4_endofpacket
	wire          cmd_demux_004_src1_valid;                                                      // cmd_demux_004:src1_valid -> cmd_mux_013:sink2_valid
	wire  [107:0] cmd_demux_004_src1_data;                                                       // cmd_demux_004:src1_data -> cmd_mux_013:sink2_data
	wire          cmd_demux_004_src1_ready;                                                      // cmd_mux_013:sink2_ready -> cmd_demux_004:src1_ready
	wire   [18:0] cmd_demux_004_src1_channel;                                                    // cmd_demux_004:src1_channel -> cmd_mux_013:sink2_channel
	wire          cmd_demux_004_src1_startofpacket;                                              // cmd_demux_004:src1_startofpacket -> cmd_mux_013:sink2_startofpacket
	wire          cmd_demux_004_src1_endofpacket;                                                // cmd_demux_004:src1_endofpacket -> cmd_mux_013:sink2_endofpacket
	wire          cmd_demux_004_src2_valid;                                                      // cmd_demux_004:src2_valid -> cmd_mux_014:sink2_valid
	wire  [107:0] cmd_demux_004_src2_data;                                                       // cmd_demux_004:src2_data -> cmd_mux_014:sink2_data
	wire          cmd_demux_004_src2_ready;                                                      // cmd_mux_014:sink2_ready -> cmd_demux_004:src2_ready
	wire   [18:0] cmd_demux_004_src2_channel;                                                    // cmd_demux_004:src2_channel -> cmd_mux_014:sink2_channel
	wire          cmd_demux_004_src2_startofpacket;                                              // cmd_demux_004:src2_startofpacket -> cmd_mux_014:sink2_startofpacket
	wire          cmd_demux_004_src2_endofpacket;                                                // cmd_demux_004:src2_endofpacket -> cmd_mux_014:sink2_endofpacket
	wire          cmd_demux_004_src3_valid;                                                      // cmd_demux_004:src3_valid -> cmd_mux_015:sink2_valid
	wire  [107:0] cmd_demux_004_src3_data;                                                       // cmd_demux_004:src3_data -> cmd_mux_015:sink2_data
	wire          cmd_demux_004_src3_ready;                                                      // cmd_mux_015:sink2_ready -> cmd_demux_004:src3_ready
	wire   [18:0] cmd_demux_004_src3_channel;                                                    // cmd_demux_004:src3_channel -> cmd_mux_015:sink2_channel
	wire          cmd_demux_004_src3_startofpacket;                                              // cmd_demux_004:src3_startofpacket -> cmd_mux_015:sink2_startofpacket
	wire          cmd_demux_004_src3_endofpacket;                                                // cmd_demux_004:src3_endofpacket -> cmd_mux_015:sink2_endofpacket
	wire          cmd_demux_004_src4_valid;                                                      // cmd_demux_004:src4_valid -> cmd_mux_016:sink0_valid
	wire  [107:0] cmd_demux_004_src4_data;                                                       // cmd_demux_004:src4_data -> cmd_mux_016:sink0_data
	wire          cmd_demux_004_src4_ready;                                                      // cmd_mux_016:sink0_ready -> cmd_demux_004:src4_ready
	wire   [18:0] cmd_demux_004_src4_channel;                                                    // cmd_demux_004:src4_channel -> cmd_mux_016:sink0_channel
	wire          cmd_demux_004_src4_startofpacket;                                              // cmd_demux_004:src4_startofpacket -> cmd_mux_016:sink0_startofpacket
	wire          cmd_demux_004_src4_endofpacket;                                                // cmd_demux_004:src4_endofpacket -> cmd_mux_016:sink0_endofpacket
	wire          cmd_demux_005_src0_valid;                                                      // cmd_demux_005:src0_valid -> cmd_mux_011:sink5_valid
	wire  [107:0] cmd_demux_005_src0_data;                                                       // cmd_demux_005:src0_data -> cmd_mux_011:sink5_data
	wire          cmd_demux_005_src0_ready;                                                      // cmd_mux_011:sink5_ready -> cmd_demux_005:src0_ready
	wire   [18:0] cmd_demux_005_src0_channel;                                                    // cmd_demux_005:src0_channel -> cmd_mux_011:sink5_channel
	wire          cmd_demux_005_src0_startofpacket;                                              // cmd_demux_005:src0_startofpacket -> cmd_mux_011:sink5_startofpacket
	wire          cmd_demux_005_src0_endofpacket;                                                // cmd_demux_005:src0_endofpacket -> cmd_mux_011:sink5_endofpacket
	wire          cmd_demux_005_src1_valid;                                                      // cmd_demux_005:src1_valid -> cmd_mux_012:sink0_valid
	wire  [107:0] cmd_demux_005_src1_data;                                                       // cmd_demux_005:src1_data -> cmd_mux_012:sink0_data
	wire          cmd_demux_005_src1_ready;                                                      // cmd_mux_012:sink0_ready -> cmd_demux_005:src1_ready
	wire   [18:0] cmd_demux_005_src1_channel;                                                    // cmd_demux_005:src1_channel -> cmd_mux_012:sink0_channel
	wire          cmd_demux_005_src1_startofpacket;                                              // cmd_demux_005:src1_startofpacket -> cmd_mux_012:sink0_startofpacket
	wire          cmd_demux_005_src1_endofpacket;                                                // cmd_demux_005:src1_endofpacket -> cmd_mux_012:sink0_endofpacket
	wire          cmd_demux_005_src2_valid;                                                      // cmd_demux_005:src2_valid -> cmd_mux_013:sink3_valid
	wire  [107:0] cmd_demux_005_src2_data;                                                       // cmd_demux_005:src2_data -> cmd_mux_013:sink3_data
	wire          cmd_demux_005_src2_ready;                                                      // cmd_mux_013:sink3_ready -> cmd_demux_005:src2_ready
	wire   [18:0] cmd_demux_005_src2_channel;                                                    // cmd_demux_005:src2_channel -> cmd_mux_013:sink3_channel
	wire          cmd_demux_005_src2_startofpacket;                                              // cmd_demux_005:src2_startofpacket -> cmd_mux_013:sink3_startofpacket
	wire          cmd_demux_005_src2_endofpacket;                                                // cmd_demux_005:src2_endofpacket -> cmd_mux_013:sink3_endofpacket
	wire          cmd_demux_005_src3_valid;                                                      // cmd_demux_005:src3_valid -> cmd_mux_014:sink3_valid
	wire  [107:0] cmd_demux_005_src3_data;                                                       // cmd_demux_005:src3_data -> cmd_mux_014:sink3_data
	wire          cmd_demux_005_src3_ready;                                                      // cmd_mux_014:sink3_ready -> cmd_demux_005:src3_ready
	wire   [18:0] cmd_demux_005_src3_channel;                                                    // cmd_demux_005:src3_channel -> cmd_mux_014:sink3_channel
	wire          cmd_demux_005_src3_startofpacket;                                              // cmd_demux_005:src3_startofpacket -> cmd_mux_014:sink3_startofpacket
	wire          cmd_demux_005_src3_endofpacket;                                                // cmd_demux_005:src3_endofpacket -> cmd_mux_014:sink3_endofpacket
	wire          cmd_demux_005_src4_valid;                                                      // cmd_demux_005:src4_valid -> cmd_mux_015:sink3_valid
	wire  [107:0] cmd_demux_005_src4_data;                                                       // cmd_demux_005:src4_data -> cmd_mux_015:sink3_data
	wire          cmd_demux_005_src4_ready;                                                      // cmd_mux_015:sink3_ready -> cmd_demux_005:src4_ready
	wire   [18:0] cmd_demux_005_src4_channel;                                                    // cmd_demux_005:src4_channel -> cmd_mux_015:sink3_channel
	wire          cmd_demux_005_src4_startofpacket;                                              // cmd_demux_005:src4_startofpacket -> cmd_mux_015:sink3_startofpacket
	wire          cmd_demux_005_src4_endofpacket;                                                // cmd_demux_005:src4_endofpacket -> cmd_mux_015:sink3_endofpacket
	wire          rsp_demux_src0_valid;                                                          // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [107:0] rsp_demux_src0_data;                                                           // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                                          // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire   [18:0] rsp_demux_src0_channel;                                                        // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                                  // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                    // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_src1_valid;                                                          // rsp_demux:src1_valid -> rsp_mux_001:sink0_valid
	wire  [107:0] rsp_demux_src1_data;                                                           // rsp_demux:src1_data -> rsp_mux_001:sink0_data
	wire          rsp_demux_src1_ready;                                                          // rsp_mux_001:sink0_ready -> rsp_demux:src1_ready
	wire   [18:0] rsp_demux_src1_channel;                                                        // rsp_demux:src1_channel -> rsp_mux_001:sink0_channel
	wire          rsp_demux_src1_startofpacket;                                                  // rsp_demux:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          rsp_demux_src1_endofpacket;                                                    // rsp_demux:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                                      // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire  [107:0] rsp_demux_001_src0_data;                                                       // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire          rsp_demux_001_src0_ready;                                                      // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire   [18:0] rsp_demux_001_src0_channel;                                                    // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire          rsp_demux_001_src0_startofpacket;                                              // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                                // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_002_src0_valid;                                                      // rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	wire  [107:0] rsp_demux_002_src0_data;                                                       // rsp_demux_002:src0_data -> rsp_mux:sink2_data
	wire          rsp_demux_002_src0_ready;                                                      // rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	wire   [18:0] rsp_demux_002_src0_channel;                                                    // rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	wire          rsp_demux_002_src0_startofpacket;                                              // rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                                // rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire          rsp_demux_003_src0_valid;                                                      // rsp_demux_003:src0_valid -> rsp_mux:sink3_valid
	wire  [107:0] rsp_demux_003_src0_data;                                                       // rsp_demux_003:src0_data -> rsp_mux:sink3_data
	wire          rsp_demux_003_src0_ready;                                                      // rsp_mux:sink3_ready -> rsp_demux_003:src0_ready
	wire   [18:0] rsp_demux_003_src0_channel;                                                    // rsp_demux_003:src0_channel -> rsp_mux:sink3_channel
	wire          rsp_demux_003_src0_startofpacket;                                              // rsp_demux_003:src0_startofpacket -> rsp_mux:sink3_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                                // rsp_demux_003:src0_endofpacket -> rsp_mux:sink3_endofpacket
	wire          rsp_demux_004_src0_valid;                                                      // rsp_demux_004:src0_valid -> rsp_mux:sink4_valid
	wire  [107:0] rsp_demux_004_src0_data;                                                       // rsp_demux_004:src0_data -> rsp_mux:sink4_data
	wire          rsp_demux_004_src0_ready;                                                      // rsp_mux:sink4_ready -> rsp_demux_004:src0_ready
	wire   [18:0] rsp_demux_004_src0_channel;                                                    // rsp_demux_004:src0_channel -> rsp_mux:sink4_channel
	wire          rsp_demux_004_src0_startofpacket;                                              // rsp_demux_004:src0_startofpacket -> rsp_mux:sink4_startofpacket
	wire          rsp_demux_004_src0_endofpacket;                                                // rsp_demux_004:src0_endofpacket -> rsp_mux:sink4_endofpacket
	wire          rsp_demux_005_src0_valid;                                                      // rsp_demux_005:src0_valid -> rsp_mux:sink5_valid
	wire  [107:0] rsp_demux_005_src0_data;                                                       // rsp_demux_005:src0_data -> rsp_mux:sink5_data
	wire          rsp_demux_005_src0_ready;                                                      // rsp_mux:sink5_ready -> rsp_demux_005:src0_ready
	wire   [18:0] rsp_demux_005_src0_channel;                                                    // rsp_demux_005:src0_channel -> rsp_mux:sink5_channel
	wire          rsp_demux_005_src0_startofpacket;                                              // rsp_demux_005:src0_startofpacket -> rsp_mux:sink5_startofpacket
	wire          rsp_demux_005_src0_endofpacket;                                                // rsp_demux_005:src0_endofpacket -> rsp_mux:sink5_endofpacket
	wire          rsp_demux_006_src0_valid;                                                      // rsp_demux_006:src0_valid -> rsp_mux:sink6_valid
	wire  [107:0] rsp_demux_006_src0_data;                                                       // rsp_demux_006:src0_data -> rsp_mux:sink6_data
	wire          rsp_demux_006_src0_ready;                                                      // rsp_mux:sink6_ready -> rsp_demux_006:src0_ready
	wire   [18:0] rsp_demux_006_src0_channel;                                                    // rsp_demux_006:src0_channel -> rsp_mux:sink6_channel
	wire          rsp_demux_006_src0_startofpacket;                                              // rsp_demux_006:src0_startofpacket -> rsp_mux:sink6_startofpacket
	wire          rsp_demux_006_src0_endofpacket;                                                // rsp_demux_006:src0_endofpacket -> rsp_mux:sink6_endofpacket
	wire          rsp_demux_006_src1_valid;                                                      // rsp_demux_006:src1_valid -> rsp_mux_001:sink1_valid
	wire  [107:0] rsp_demux_006_src1_data;                                                       // rsp_demux_006:src1_data -> rsp_mux_001:sink1_data
	wire          rsp_demux_006_src1_ready;                                                      // rsp_mux_001:sink1_ready -> rsp_demux_006:src1_ready
	wire   [18:0] rsp_demux_006_src1_channel;                                                    // rsp_demux_006:src1_channel -> rsp_mux_001:sink1_channel
	wire          rsp_demux_006_src1_startofpacket;                                              // rsp_demux_006:src1_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire          rsp_demux_006_src1_endofpacket;                                                // rsp_demux_006:src1_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire          rsp_demux_007_src0_valid;                                                      // rsp_demux_007:src0_valid -> rsp_mux:sink7_valid
	wire  [107:0] rsp_demux_007_src0_data;                                                       // rsp_demux_007:src0_data -> rsp_mux:sink7_data
	wire          rsp_demux_007_src0_ready;                                                      // rsp_mux:sink7_ready -> rsp_demux_007:src0_ready
	wire   [18:0] rsp_demux_007_src0_channel;                                                    // rsp_demux_007:src0_channel -> rsp_mux:sink7_channel
	wire          rsp_demux_007_src0_startofpacket;                                              // rsp_demux_007:src0_startofpacket -> rsp_mux:sink7_startofpacket
	wire          rsp_demux_007_src0_endofpacket;                                                // rsp_demux_007:src0_endofpacket -> rsp_mux:sink7_endofpacket
	wire          rsp_demux_008_src0_valid;                                                      // rsp_demux_008:src0_valid -> rsp_mux:sink8_valid
	wire  [107:0] rsp_demux_008_src0_data;                                                       // rsp_demux_008:src0_data -> rsp_mux:sink8_data
	wire          rsp_demux_008_src0_ready;                                                      // rsp_mux:sink8_ready -> rsp_demux_008:src0_ready
	wire   [18:0] rsp_demux_008_src0_channel;                                                    // rsp_demux_008:src0_channel -> rsp_mux:sink8_channel
	wire          rsp_demux_008_src0_startofpacket;                                              // rsp_demux_008:src0_startofpacket -> rsp_mux:sink8_startofpacket
	wire          rsp_demux_008_src0_endofpacket;                                                // rsp_demux_008:src0_endofpacket -> rsp_mux:sink8_endofpacket
	wire          rsp_demux_010_src0_valid;                                                      // rsp_demux_010:src0_valid -> rsp_mux:sink10_valid
	wire  [107:0] rsp_demux_010_src0_data;                                                       // rsp_demux_010:src0_data -> rsp_mux:sink10_data
	wire          rsp_demux_010_src0_ready;                                                      // rsp_mux:sink10_ready -> rsp_demux_010:src0_ready
	wire   [18:0] rsp_demux_010_src0_channel;                                                    // rsp_demux_010:src0_channel -> rsp_mux:sink10_channel
	wire          rsp_demux_010_src0_startofpacket;                                              // rsp_demux_010:src0_startofpacket -> rsp_mux:sink10_startofpacket
	wire          rsp_demux_010_src0_endofpacket;                                                // rsp_demux_010:src0_endofpacket -> rsp_mux:sink10_endofpacket
	wire          rsp_demux_011_src0_valid;                                                      // rsp_demux_011:src0_valid -> rsp_mux:sink11_valid
	wire  [107:0] rsp_demux_011_src0_data;                                                       // rsp_demux_011:src0_data -> rsp_mux:sink11_data
	wire          rsp_demux_011_src0_ready;                                                      // rsp_mux:sink11_ready -> rsp_demux_011:src0_ready
	wire   [18:0] rsp_demux_011_src0_channel;                                                    // rsp_demux_011:src0_channel -> rsp_mux:sink11_channel
	wire          rsp_demux_011_src0_startofpacket;                                              // rsp_demux_011:src0_startofpacket -> rsp_mux:sink11_startofpacket
	wire          rsp_demux_011_src0_endofpacket;                                                // rsp_demux_011:src0_endofpacket -> rsp_mux:sink11_endofpacket
	wire          rsp_demux_011_src1_valid;                                                      // rsp_demux_011:src1_valid -> rsp_mux_001:sink2_valid
	wire  [107:0] rsp_demux_011_src1_data;                                                       // rsp_demux_011:src1_data -> rsp_mux_001:sink2_data
	wire          rsp_demux_011_src1_ready;                                                      // rsp_mux_001:sink2_ready -> rsp_demux_011:src1_ready
	wire   [18:0] rsp_demux_011_src1_channel;                                                    // rsp_demux_011:src1_channel -> rsp_mux_001:sink2_channel
	wire          rsp_demux_011_src1_startofpacket;                                              // rsp_demux_011:src1_startofpacket -> rsp_mux_001:sink2_startofpacket
	wire          rsp_demux_011_src1_endofpacket;                                                // rsp_demux_011:src1_endofpacket -> rsp_mux_001:sink2_endofpacket
	wire          rsp_demux_011_src2_valid;                                                      // rsp_demux_011:src2_valid -> rsp_mux_002:sink0_valid
	wire  [107:0] rsp_demux_011_src2_data;                                                       // rsp_demux_011:src2_data -> rsp_mux_002:sink0_data
	wire          rsp_demux_011_src2_ready;                                                      // rsp_mux_002:sink0_ready -> rsp_demux_011:src2_ready
	wire   [18:0] rsp_demux_011_src2_channel;                                                    // rsp_demux_011:src2_channel -> rsp_mux_002:sink0_channel
	wire          rsp_demux_011_src2_startofpacket;                                              // rsp_demux_011:src2_startofpacket -> rsp_mux_002:sink0_startofpacket
	wire          rsp_demux_011_src2_endofpacket;                                                // rsp_demux_011:src2_endofpacket -> rsp_mux_002:sink0_endofpacket
	wire          rsp_demux_011_src3_valid;                                                      // rsp_demux_011:src3_valid -> rsp_mux_003:sink0_valid
	wire  [107:0] rsp_demux_011_src3_data;                                                       // rsp_demux_011:src3_data -> rsp_mux_003:sink0_data
	wire          rsp_demux_011_src3_ready;                                                      // rsp_mux_003:sink0_ready -> rsp_demux_011:src3_ready
	wire   [18:0] rsp_demux_011_src3_channel;                                                    // rsp_demux_011:src3_channel -> rsp_mux_003:sink0_channel
	wire          rsp_demux_011_src3_startofpacket;                                              // rsp_demux_011:src3_startofpacket -> rsp_mux_003:sink0_startofpacket
	wire          rsp_demux_011_src3_endofpacket;                                                // rsp_demux_011:src3_endofpacket -> rsp_mux_003:sink0_endofpacket
	wire          rsp_demux_011_src4_valid;                                                      // rsp_demux_011:src4_valid -> rsp_mux_004:sink0_valid
	wire  [107:0] rsp_demux_011_src4_data;                                                       // rsp_demux_011:src4_data -> rsp_mux_004:sink0_data
	wire          rsp_demux_011_src4_ready;                                                      // rsp_mux_004:sink0_ready -> rsp_demux_011:src4_ready
	wire   [18:0] rsp_demux_011_src4_channel;                                                    // rsp_demux_011:src4_channel -> rsp_mux_004:sink0_channel
	wire          rsp_demux_011_src4_startofpacket;                                              // rsp_demux_011:src4_startofpacket -> rsp_mux_004:sink0_startofpacket
	wire          rsp_demux_011_src4_endofpacket;                                                // rsp_demux_011:src4_endofpacket -> rsp_mux_004:sink0_endofpacket
	wire          rsp_demux_011_src5_valid;                                                      // rsp_demux_011:src5_valid -> rsp_mux_005:sink0_valid
	wire  [107:0] rsp_demux_011_src5_data;                                                       // rsp_demux_011:src5_data -> rsp_mux_005:sink0_data
	wire          rsp_demux_011_src5_ready;                                                      // rsp_mux_005:sink0_ready -> rsp_demux_011:src5_ready
	wire   [18:0] rsp_demux_011_src5_channel;                                                    // rsp_demux_011:src5_channel -> rsp_mux_005:sink0_channel
	wire          rsp_demux_011_src5_startofpacket;                                              // rsp_demux_011:src5_startofpacket -> rsp_mux_005:sink0_startofpacket
	wire          rsp_demux_011_src5_endofpacket;                                                // rsp_demux_011:src5_endofpacket -> rsp_mux_005:sink0_endofpacket
	wire          rsp_demux_012_src0_valid;                                                      // rsp_demux_012:src0_valid -> rsp_mux_005:sink1_valid
	wire  [107:0] rsp_demux_012_src0_data;                                                       // rsp_demux_012:src0_data -> rsp_mux_005:sink1_data
	wire          rsp_demux_012_src0_ready;                                                      // rsp_mux_005:sink1_ready -> rsp_demux_012:src0_ready
	wire   [18:0] rsp_demux_012_src0_channel;                                                    // rsp_demux_012:src0_channel -> rsp_mux_005:sink1_channel
	wire          rsp_demux_012_src0_startofpacket;                                              // rsp_demux_012:src0_startofpacket -> rsp_mux_005:sink1_startofpacket
	wire          rsp_demux_012_src0_endofpacket;                                                // rsp_demux_012:src0_endofpacket -> rsp_mux_005:sink1_endofpacket
	wire          rsp_demux_013_src0_valid;                                                      // rsp_demux_013:src0_valid -> rsp_mux_002:sink1_valid
	wire  [107:0] rsp_demux_013_src0_data;                                                       // rsp_demux_013:src0_data -> rsp_mux_002:sink1_data
	wire          rsp_demux_013_src0_ready;                                                      // rsp_mux_002:sink1_ready -> rsp_demux_013:src0_ready
	wire   [18:0] rsp_demux_013_src0_channel;                                                    // rsp_demux_013:src0_channel -> rsp_mux_002:sink1_channel
	wire          rsp_demux_013_src0_startofpacket;                                              // rsp_demux_013:src0_startofpacket -> rsp_mux_002:sink1_startofpacket
	wire          rsp_demux_013_src0_endofpacket;                                                // rsp_demux_013:src0_endofpacket -> rsp_mux_002:sink1_endofpacket
	wire          rsp_demux_013_src1_valid;                                                      // rsp_demux_013:src1_valid -> rsp_mux_003:sink1_valid
	wire  [107:0] rsp_demux_013_src1_data;                                                       // rsp_demux_013:src1_data -> rsp_mux_003:sink1_data
	wire          rsp_demux_013_src1_ready;                                                      // rsp_mux_003:sink1_ready -> rsp_demux_013:src1_ready
	wire   [18:0] rsp_demux_013_src1_channel;                                                    // rsp_demux_013:src1_channel -> rsp_mux_003:sink1_channel
	wire          rsp_demux_013_src1_startofpacket;                                              // rsp_demux_013:src1_startofpacket -> rsp_mux_003:sink1_startofpacket
	wire          rsp_demux_013_src1_endofpacket;                                                // rsp_demux_013:src1_endofpacket -> rsp_mux_003:sink1_endofpacket
	wire          rsp_demux_013_src2_valid;                                                      // rsp_demux_013:src2_valid -> rsp_mux_004:sink1_valid
	wire  [107:0] rsp_demux_013_src2_data;                                                       // rsp_demux_013:src2_data -> rsp_mux_004:sink1_data
	wire          rsp_demux_013_src2_ready;                                                      // rsp_mux_004:sink1_ready -> rsp_demux_013:src2_ready
	wire   [18:0] rsp_demux_013_src2_channel;                                                    // rsp_demux_013:src2_channel -> rsp_mux_004:sink1_channel
	wire          rsp_demux_013_src2_startofpacket;                                              // rsp_demux_013:src2_startofpacket -> rsp_mux_004:sink1_startofpacket
	wire          rsp_demux_013_src2_endofpacket;                                                // rsp_demux_013:src2_endofpacket -> rsp_mux_004:sink1_endofpacket
	wire          rsp_demux_013_src3_valid;                                                      // rsp_demux_013:src3_valid -> rsp_mux_005:sink2_valid
	wire  [107:0] rsp_demux_013_src3_data;                                                       // rsp_demux_013:src3_data -> rsp_mux_005:sink2_data
	wire          rsp_demux_013_src3_ready;                                                      // rsp_mux_005:sink2_ready -> rsp_demux_013:src3_ready
	wire   [18:0] rsp_demux_013_src3_channel;                                                    // rsp_demux_013:src3_channel -> rsp_mux_005:sink2_channel
	wire          rsp_demux_013_src3_startofpacket;                                              // rsp_demux_013:src3_startofpacket -> rsp_mux_005:sink2_startofpacket
	wire          rsp_demux_013_src3_endofpacket;                                                // rsp_demux_013:src3_endofpacket -> rsp_mux_005:sink2_endofpacket
	wire          rsp_demux_014_src0_valid;                                                      // rsp_demux_014:src0_valid -> rsp_mux_002:sink2_valid
	wire  [107:0] rsp_demux_014_src0_data;                                                       // rsp_demux_014:src0_data -> rsp_mux_002:sink2_data
	wire          rsp_demux_014_src0_ready;                                                      // rsp_mux_002:sink2_ready -> rsp_demux_014:src0_ready
	wire   [18:0] rsp_demux_014_src0_channel;                                                    // rsp_demux_014:src0_channel -> rsp_mux_002:sink2_channel
	wire          rsp_demux_014_src0_startofpacket;                                              // rsp_demux_014:src0_startofpacket -> rsp_mux_002:sink2_startofpacket
	wire          rsp_demux_014_src0_endofpacket;                                                // rsp_demux_014:src0_endofpacket -> rsp_mux_002:sink2_endofpacket
	wire          rsp_demux_014_src1_valid;                                                      // rsp_demux_014:src1_valid -> rsp_mux_003:sink2_valid
	wire  [107:0] rsp_demux_014_src1_data;                                                       // rsp_demux_014:src1_data -> rsp_mux_003:sink2_data
	wire          rsp_demux_014_src1_ready;                                                      // rsp_mux_003:sink2_ready -> rsp_demux_014:src1_ready
	wire   [18:0] rsp_demux_014_src1_channel;                                                    // rsp_demux_014:src1_channel -> rsp_mux_003:sink2_channel
	wire          rsp_demux_014_src1_startofpacket;                                              // rsp_demux_014:src1_startofpacket -> rsp_mux_003:sink2_startofpacket
	wire          rsp_demux_014_src1_endofpacket;                                                // rsp_demux_014:src1_endofpacket -> rsp_mux_003:sink2_endofpacket
	wire          rsp_demux_014_src2_valid;                                                      // rsp_demux_014:src2_valid -> rsp_mux_004:sink2_valid
	wire  [107:0] rsp_demux_014_src2_data;                                                       // rsp_demux_014:src2_data -> rsp_mux_004:sink2_data
	wire          rsp_demux_014_src2_ready;                                                      // rsp_mux_004:sink2_ready -> rsp_demux_014:src2_ready
	wire   [18:0] rsp_demux_014_src2_channel;                                                    // rsp_demux_014:src2_channel -> rsp_mux_004:sink2_channel
	wire          rsp_demux_014_src2_startofpacket;                                              // rsp_demux_014:src2_startofpacket -> rsp_mux_004:sink2_startofpacket
	wire          rsp_demux_014_src2_endofpacket;                                                // rsp_demux_014:src2_endofpacket -> rsp_mux_004:sink2_endofpacket
	wire          rsp_demux_014_src3_valid;                                                      // rsp_demux_014:src3_valid -> rsp_mux_005:sink3_valid
	wire  [107:0] rsp_demux_014_src3_data;                                                       // rsp_demux_014:src3_data -> rsp_mux_005:sink3_data
	wire          rsp_demux_014_src3_ready;                                                      // rsp_mux_005:sink3_ready -> rsp_demux_014:src3_ready
	wire   [18:0] rsp_demux_014_src3_channel;                                                    // rsp_demux_014:src3_channel -> rsp_mux_005:sink3_channel
	wire          rsp_demux_014_src3_startofpacket;                                              // rsp_demux_014:src3_startofpacket -> rsp_mux_005:sink3_startofpacket
	wire          rsp_demux_014_src3_endofpacket;                                                // rsp_demux_014:src3_endofpacket -> rsp_mux_005:sink3_endofpacket
	wire          rsp_demux_015_src0_valid;                                                      // rsp_demux_015:src0_valid -> rsp_mux_002:sink3_valid
	wire  [107:0] rsp_demux_015_src0_data;                                                       // rsp_demux_015:src0_data -> rsp_mux_002:sink3_data
	wire          rsp_demux_015_src0_ready;                                                      // rsp_mux_002:sink3_ready -> rsp_demux_015:src0_ready
	wire   [18:0] rsp_demux_015_src0_channel;                                                    // rsp_demux_015:src0_channel -> rsp_mux_002:sink3_channel
	wire          rsp_demux_015_src0_startofpacket;                                              // rsp_demux_015:src0_startofpacket -> rsp_mux_002:sink3_startofpacket
	wire          rsp_demux_015_src0_endofpacket;                                                // rsp_demux_015:src0_endofpacket -> rsp_mux_002:sink3_endofpacket
	wire          rsp_demux_015_src1_valid;                                                      // rsp_demux_015:src1_valid -> rsp_mux_003:sink3_valid
	wire  [107:0] rsp_demux_015_src1_data;                                                       // rsp_demux_015:src1_data -> rsp_mux_003:sink3_data
	wire          rsp_demux_015_src1_ready;                                                      // rsp_mux_003:sink3_ready -> rsp_demux_015:src1_ready
	wire   [18:0] rsp_demux_015_src1_channel;                                                    // rsp_demux_015:src1_channel -> rsp_mux_003:sink3_channel
	wire          rsp_demux_015_src1_startofpacket;                                              // rsp_demux_015:src1_startofpacket -> rsp_mux_003:sink3_startofpacket
	wire          rsp_demux_015_src1_endofpacket;                                                // rsp_demux_015:src1_endofpacket -> rsp_mux_003:sink3_endofpacket
	wire          rsp_demux_015_src2_valid;                                                      // rsp_demux_015:src2_valid -> rsp_mux_004:sink3_valid
	wire  [107:0] rsp_demux_015_src2_data;                                                       // rsp_demux_015:src2_data -> rsp_mux_004:sink3_data
	wire          rsp_demux_015_src2_ready;                                                      // rsp_mux_004:sink3_ready -> rsp_demux_015:src2_ready
	wire   [18:0] rsp_demux_015_src2_channel;                                                    // rsp_demux_015:src2_channel -> rsp_mux_004:sink3_channel
	wire          rsp_demux_015_src2_startofpacket;                                              // rsp_demux_015:src2_startofpacket -> rsp_mux_004:sink3_startofpacket
	wire          rsp_demux_015_src2_endofpacket;                                                // rsp_demux_015:src2_endofpacket -> rsp_mux_004:sink3_endofpacket
	wire          rsp_demux_015_src3_valid;                                                      // rsp_demux_015:src3_valid -> rsp_mux_005:sink4_valid
	wire  [107:0] rsp_demux_015_src3_data;                                                       // rsp_demux_015:src3_data -> rsp_mux_005:sink4_data
	wire          rsp_demux_015_src3_ready;                                                      // rsp_mux_005:sink4_ready -> rsp_demux_015:src3_ready
	wire   [18:0] rsp_demux_015_src3_channel;                                                    // rsp_demux_015:src3_channel -> rsp_mux_005:sink4_channel
	wire          rsp_demux_015_src3_startofpacket;                                              // rsp_demux_015:src3_startofpacket -> rsp_mux_005:sink4_startofpacket
	wire          rsp_demux_015_src3_endofpacket;                                                // rsp_demux_015:src3_endofpacket -> rsp_mux_005:sink4_endofpacket
	wire          rsp_demux_016_src0_valid;                                                      // rsp_demux_016:src0_valid -> rsp_mux_004:sink4_valid
	wire  [107:0] rsp_demux_016_src0_data;                                                       // rsp_demux_016:src0_data -> rsp_mux_004:sink4_data
	wire          rsp_demux_016_src0_ready;                                                      // rsp_mux_004:sink4_ready -> rsp_demux_016:src0_ready
	wire   [18:0] rsp_demux_016_src0_channel;                                                    // rsp_demux_016:src0_channel -> rsp_mux_004:sink4_channel
	wire          rsp_demux_016_src0_startofpacket;                                              // rsp_demux_016:src0_startofpacket -> rsp_mux_004:sink4_startofpacket
	wire          rsp_demux_016_src0_endofpacket;                                                // rsp_demux_016:src0_endofpacket -> rsp_mux_004:sink4_endofpacket
	wire          rsp_demux_017_src0_valid;                                                      // rsp_demux_017:src0_valid -> rsp_mux_003:sink4_valid
	wire  [107:0] rsp_demux_017_src0_data;                                                       // rsp_demux_017:src0_data -> rsp_mux_003:sink4_data
	wire          rsp_demux_017_src0_ready;                                                      // rsp_mux_003:sink4_ready -> rsp_demux_017:src0_ready
	wire   [18:0] rsp_demux_017_src0_channel;                                                    // rsp_demux_017:src0_channel -> rsp_mux_003:sink4_channel
	wire          rsp_demux_017_src0_startofpacket;                                              // rsp_demux_017:src0_startofpacket -> rsp_mux_003:sink4_startofpacket
	wire          rsp_demux_017_src0_endofpacket;                                                // rsp_demux_017:src0_endofpacket -> rsp_mux_003:sink4_endofpacket
	wire          rsp_demux_018_src0_valid;                                                      // rsp_demux_018:src0_valid -> rsp_mux_002:sink4_valid
	wire  [107:0] rsp_demux_018_src0_data;                                                       // rsp_demux_018:src0_data -> rsp_mux_002:sink4_data
	wire          rsp_demux_018_src0_ready;                                                      // rsp_mux_002:sink4_ready -> rsp_demux_018:src0_ready
	wire   [18:0] rsp_demux_018_src0_channel;                                                    // rsp_demux_018:src0_channel -> rsp_mux_002:sink4_channel
	wire          rsp_demux_018_src0_startofpacket;                                              // rsp_demux_018:src0_startofpacket -> rsp_mux_002:sink4_startofpacket
	wire          rsp_demux_018_src0_endofpacket;                                                // rsp_demux_018:src0_endofpacket -> rsp_mux_002:sink4_endofpacket
	wire          cmd_demux_src9_valid;                                                          // cmd_demux:src9_valid -> crosser:in_valid
	wire  [107:0] cmd_demux_src9_data;                                                           // cmd_demux:src9_data -> crosser:in_data
	wire          cmd_demux_src9_ready;                                                          // crosser:in_ready -> cmd_demux:src9_ready
	wire   [18:0] cmd_demux_src9_channel;                                                        // cmd_demux:src9_channel -> crosser:in_channel
	wire          cmd_demux_src9_startofpacket;                                                  // cmd_demux:src9_startofpacket -> crosser:in_startofpacket
	wire          cmd_demux_src9_endofpacket;                                                    // cmd_demux:src9_endofpacket -> crosser:in_endofpacket
	wire          crosser_out_valid;                                                             // crosser:out_valid -> cmd_mux_009:sink0_valid
	wire  [107:0] crosser_out_data;                                                              // crosser:out_data -> cmd_mux_009:sink0_data
	wire          crosser_out_ready;                                                             // cmd_mux_009:sink0_ready -> crosser:out_ready
	wire   [18:0] crosser_out_channel;                                                           // crosser:out_channel -> cmd_mux_009:sink0_channel
	wire          crosser_out_startofpacket;                                                     // crosser:out_startofpacket -> cmd_mux_009:sink0_startofpacket
	wire          crosser_out_endofpacket;                                                       // crosser:out_endofpacket -> cmd_mux_009:sink0_endofpacket
	wire          rsp_demux_009_src0_valid;                                                      // rsp_demux_009:src0_valid -> crosser_001:in_valid
	wire  [107:0] rsp_demux_009_src0_data;                                                       // rsp_demux_009:src0_data -> crosser_001:in_data
	wire          rsp_demux_009_src0_ready;                                                      // crosser_001:in_ready -> rsp_demux_009:src0_ready
	wire   [18:0] rsp_demux_009_src0_channel;                                                    // rsp_demux_009:src0_channel -> crosser_001:in_channel
	wire          rsp_demux_009_src0_startofpacket;                                              // rsp_demux_009:src0_startofpacket -> crosser_001:in_startofpacket
	wire          rsp_demux_009_src0_endofpacket;                                                // rsp_demux_009:src0_endofpacket -> crosser_001:in_endofpacket
	wire          crosser_001_out_valid;                                                         // crosser_001:out_valid -> rsp_mux:sink9_valid
	wire  [107:0] crosser_001_out_data;                                                          // crosser_001:out_data -> rsp_mux:sink9_data
	wire          crosser_001_out_ready;                                                         // rsp_mux:sink9_ready -> crosser_001:out_ready
	wire   [18:0] crosser_001_out_channel;                                                       // crosser_001:out_channel -> rsp_mux:sink9_channel
	wire          crosser_001_out_startofpacket;                                                 // crosser_001:out_startofpacket -> rsp_mux:sink9_startofpacket
	wire          crosser_001_out_endofpacket;                                                   // crosser_001:out_endofpacket -> rsp_mux:sink9_endofpacket
	wire   [18:0] manager_data_master_limiter_cmd_valid_data;                                    // manager_data_master_limiter:cmd_src_valid -> cmd_demux:sink_valid
	wire   [18:0] manager_instruction_master_limiter_cmd_valid_data;                             // manager_instruction_master_limiter:cmd_src_valid -> cmd_demux_001:sink_valid
	wire   [18:0] worker0_wout_limiter_cmd_valid_data;                                           // worker0_wout_limiter:cmd_src_valid -> cmd_demux_002:sink_valid
	wire   [18:0] worker1_wout_limiter_cmd_valid_data;                                           // worker1_wout_limiter:cmd_src_valid -> cmd_demux_003:sink_valid
	wire   [18:0] worker2_wout_limiter_cmd_valid_data;                                           // worker2_wout_limiter:cmd_src_valid -> cmd_demux_004:sink_valid
	wire   [18:0] worker3_wout_limiter_cmd_valid_data;                                           // worker3_wout_limiter:cmd_src_valid -> cmd_demux_005:sink_valid
	wire          jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_valid;                      // jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter:in_0_valid
	wire   [33:0] jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_data;                       // jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_src_data -> avalon_st_adapter:in_0_data
	wire          jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_ready;                      // avalon_st_adapter:in_0_ready -> jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_out_0_valid;                                                 // avalon_st_adapter:out_0_valid -> jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_out_0_data;                                                  // avalon_st_adapter:out_0_data -> jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                                 // jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                                 // avalon_st_adapter:out_0_error -> jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_sink_error
	wire          mbox_m_w0_avmm_msg_sender_agent_rdata_fifo_src_valid;                          // mbox_m_w0_avmm_msg_sender_agent:rdata_fifo_src_valid -> avalon_st_adapter_001:in_0_valid
	wire   [33:0] mbox_m_w0_avmm_msg_sender_agent_rdata_fifo_src_data;                           // mbox_m_w0_avmm_msg_sender_agent:rdata_fifo_src_data -> avalon_st_adapter_001:in_0_data
	wire          mbox_m_w0_avmm_msg_sender_agent_rdata_fifo_src_ready;                          // avalon_st_adapter_001:in_0_ready -> mbox_m_w0_avmm_msg_sender_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_001_out_0_valid;                                             // avalon_st_adapter_001:out_0_valid -> mbox_m_w0_avmm_msg_sender_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_001_out_0_data;                                              // avalon_st_adapter_001:out_0_data -> mbox_m_w0_avmm_msg_sender_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                                             // mbox_m_w0_avmm_msg_sender_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                                             // avalon_st_adapter_001:out_0_error -> mbox_m_w0_avmm_msg_sender_agent:rdata_fifo_sink_error
	wire          mbox_m_w1_avmm_msg_sender_agent_rdata_fifo_src_valid;                          // mbox_m_w1_avmm_msg_sender_agent:rdata_fifo_src_valid -> avalon_st_adapter_002:in_0_valid
	wire   [33:0] mbox_m_w1_avmm_msg_sender_agent_rdata_fifo_src_data;                           // mbox_m_w1_avmm_msg_sender_agent:rdata_fifo_src_data -> avalon_st_adapter_002:in_0_data
	wire          mbox_m_w1_avmm_msg_sender_agent_rdata_fifo_src_ready;                          // avalon_st_adapter_002:in_0_ready -> mbox_m_w1_avmm_msg_sender_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_002_out_0_valid;                                             // avalon_st_adapter_002:out_0_valid -> mbox_m_w1_avmm_msg_sender_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_002_out_0_data;                                              // avalon_st_adapter_002:out_0_data -> mbox_m_w1_avmm_msg_sender_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_002_out_0_ready;                                             // mbox_m_w1_avmm_msg_sender_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire    [0:0] avalon_st_adapter_002_out_0_error;                                             // avalon_st_adapter_002:out_0_error -> mbox_m_w1_avmm_msg_sender_agent:rdata_fifo_sink_error
	wire          mbox_m_w2_avmm_msg_sender_agent_rdata_fifo_src_valid;                          // mbox_m_w2_avmm_msg_sender_agent:rdata_fifo_src_valid -> avalon_st_adapter_003:in_0_valid
	wire   [33:0] mbox_m_w2_avmm_msg_sender_agent_rdata_fifo_src_data;                           // mbox_m_w2_avmm_msg_sender_agent:rdata_fifo_src_data -> avalon_st_adapter_003:in_0_data
	wire          mbox_m_w2_avmm_msg_sender_agent_rdata_fifo_src_ready;                          // avalon_st_adapter_003:in_0_ready -> mbox_m_w2_avmm_msg_sender_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_003_out_0_valid;                                             // avalon_st_adapter_003:out_0_valid -> mbox_m_w2_avmm_msg_sender_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_003_out_0_data;                                              // avalon_st_adapter_003:out_0_data -> mbox_m_w2_avmm_msg_sender_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_003_out_0_ready;                                             // mbox_m_w2_avmm_msg_sender_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire    [0:0] avalon_st_adapter_003_out_0_error;                                             // avalon_st_adapter_003:out_0_error -> mbox_m_w2_avmm_msg_sender_agent:rdata_fifo_sink_error
	wire          mbox_m_w3_avmm_msg_sender_agent_rdata_fifo_src_valid;                          // mbox_m_w3_avmm_msg_sender_agent:rdata_fifo_src_valid -> avalon_st_adapter_004:in_0_valid
	wire   [33:0] mbox_m_w3_avmm_msg_sender_agent_rdata_fifo_src_data;                           // mbox_m_w3_avmm_msg_sender_agent:rdata_fifo_src_data -> avalon_st_adapter_004:in_0_data
	wire          mbox_m_w3_avmm_msg_sender_agent_rdata_fifo_src_ready;                          // avalon_st_adapter_004:in_0_ready -> mbox_m_w3_avmm_msg_sender_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_004_out_0_valid;                                             // avalon_st_adapter_004:out_0_valid -> mbox_m_w3_avmm_msg_sender_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_004_out_0_data;                                              // avalon_st_adapter_004:out_0_data -> mbox_m_w3_avmm_msg_sender_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_004_out_0_ready;                                             // mbox_m_w3_avmm_msg_sender_agent:rdata_fifo_sink_ready -> avalon_st_adapter_004:out_0_ready
	wire    [0:0] avalon_st_adapter_004_out_0_error;                                             // avalon_st_adapter_004:out_0_error -> mbox_m_w3_avmm_msg_sender_agent:rdata_fifo_sink_error
	wire          performance_counter_0_control_slave_agent_rdata_fifo_src_valid;                // performance_counter_0_control_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_005:in_0_valid
	wire   [33:0] performance_counter_0_control_slave_agent_rdata_fifo_src_data;                 // performance_counter_0_control_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_005:in_0_data
	wire          performance_counter_0_control_slave_agent_rdata_fifo_src_ready;                // avalon_st_adapter_005:in_0_ready -> performance_counter_0_control_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_005_out_0_valid;                                             // avalon_st_adapter_005:out_0_valid -> performance_counter_0_control_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_005_out_0_data;                                              // avalon_st_adapter_005:out_0_data -> performance_counter_0_control_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_005_out_0_ready;                                             // performance_counter_0_control_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_005:out_0_ready
	wire    [0:0] avalon_st_adapter_005_out_0_error;                                             // avalon_st_adapter_005:out_0_error -> performance_counter_0_control_slave_agent:rdata_fifo_sink_error
	wire          manager_debug_mem_slave_agent_rdata_fifo_src_valid;                            // manager_debug_mem_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_006:in_0_valid
	wire   [33:0] manager_debug_mem_slave_agent_rdata_fifo_src_data;                             // manager_debug_mem_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_006:in_0_data
	wire          manager_debug_mem_slave_agent_rdata_fifo_src_ready;                            // avalon_st_adapter_006:in_0_ready -> manager_debug_mem_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_006_out_0_valid;                                             // avalon_st_adapter_006:out_0_valid -> manager_debug_mem_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_006_out_0_data;                                              // avalon_st_adapter_006:out_0_data -> manager_debug_mem_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_006_out_0_ready;                                             // manager_debug_mem_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_006:out_0_ready
	wire    [0:0] avalon_st_adapter_006_out_0_error;                                             // avalon_st_adapter_006:out_0_error -> manager_debug_mem_slave_agent:rdata_fifo_sink_error
	wire          req_fifo_out_agent_rdata_fifo_src_valid;                                       // req_fifo_out_agent:rdata_fifo_src_valid -> avalon_st_adapter_007:in_0_valid
	wire   [33:0] req_fifo_out_agent_rdata_fifo_src_data;                                        // req_fifo_out_agent:rdata_fifo_src_data -> avalon_st_adapter_007:in_0_data
	wire          req_fifo_out_agent_rdata_fifo_src_ready;                                       // avalon_st_adapter_007:in_0_ready -> req_fifo_out_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_007_out_0_valid;                                             // avalon_st_adapter_007:out_0_valid -> req_fifo_out_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_007_out_0_data;                                              // avalon_st_adapter_007:out_0_data -> req_fifo_out_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_007_out_0_ready;                                             // req_fifo_out_agent:rdata_fifo_sink_ready -> avalon_st_adapter_007:out_0_ready
	wire    [0:0] avalon_st_adapter_007_out_0_error;                                             // avalon_st_adapter_007:out_0_error -> req_fifo_out_agent:rdata_fifo_sink_error
	wire          req_fifo_out_csr_agent_rdata_fifo_src_valid;                                   // req_fifo_out_csr_agent:rdata_fifo_src_valid -> avalon_st_adapter_008:in_0_valid
	wire   [33:0] req_fifo_out_csr_agent_rdata_fifo_src_data;                                    // req_fifo_out_csr_agent:rdata_fifo_src_data -> avalon_st_adapter_008:in_0_data
	wire          req_fifo_out_csr_agent_rdata_fifo_src_ready;                                   // avalon_st_adapter_008:in_0_ready -> req_fifo_out_csr_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_008_out_0_valid;                                             // avalon_st_adapter_008:out_0_valid -> req_fifo_out_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_008_out_0_data;                                              // avalon_st_adapter_008:out_0_data -> req_fifo_out_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_008_out_0_ready;                                             // req_fifo_out_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_008:out_0_ready
	wire    [0:0] avalon_st_adapter_008_out_0_error;                                             // avalon_st_adapter_008:out_0_error -> req_fifo_out_csr_agent:rdata_fifo_sink_error
	wire          altpll_0_pll_slave_agent_rdata_fifo_out_valid;                                 // altpll_0_pll_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_009:in_0_valid
	wire   [33:0] altpll_0_pll_slave_agent_rdata_fifo_out_data;                                  // altpll_0_pll_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_009:in_0_data
	wire          altpll_0_pll_slave_agent_rdata_fifo_out_ready;                                 // avalon_st_adapter_009:in_0_ready -> altpll_0_pll_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_009_out_0_valid;                                             // avalon_st_adapter_009:out_0_valid -> altpll_0_pll_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_009_out_0_data;                                              // avalon_st_adapter_009:out_0_data -> altpll_0_pll_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_009_out_0_ready;                                             // altpll_0_pll_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_009:out_0_ready
	wire    [0:0] avalon_st_adapter_009_out_0_error;                                             // avalon_st_adapter_009:out_0_error -> altpll_0_pll_slave_agent:rdata_fifo_sink_error
	wire          shared_ocm_s1_agent_rdata_fifo_src_valid;                                      // shared_ocm_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_010:in_0_valid
	wire   [33:0] shared_ocm_s1_agent_rdata_fifo_src_data;                                       // shared_ocm_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_010:in_0_data
	wire          shared_ocm_s1_agent_rdata_fifo_src_ready;                                      // avalon_st_adapter_010:in_0_ready -> shared_ocm_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_010_out_0_valid;                                             // avalon_st_adapter_010:out_0_valid -> shared_ocm_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_010_out_0_data;                                              // avalon_st_adapter_010:out_0_data -> shared_ocm_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_010_out_0_ready;                                             // shared_ocm_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_010:out_0_ready
	wire    [0:0] avalon_st_adapter_010_out_0_error;                                             // avalon_st_adapter_010:out_0_error -> shared_ocm_s1_agent:rdata_fifo_sink_error
	wire          sdram_0_sdout_agent_rdata_fifo_src_valid;                                      // sdram_0_sdout_agent:rdata_fifo_src_valid -> avalon_st_adapter_011:in_0_valid
	wire   [33:0] sdram_0_sdout_agent_rdata_fifo_src_data;                                       // sdram_0_sdout_agent:rdata_fifo_src_data -> avalon_st_adapter_011:in_0_data
	wire          sdram_0_sdout_agent_rdata_fifo_src_ready;                                      // avalon_st_adapter_011:in_0_ready -> sdram_0_sdout_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_011_out_0_valid;                                             // avalon_st_adapter_011:out_0_valid -> sdram_0_sdout_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_011_out_0_data;                                              // avalon_st_adapter_011:out_0_data -> sdram_0_sdout_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_011_out_0_ready;                                             // sdram_0_sdout_agent:rdata_fifo_sink_ready -> avalon_st_adapter_011:out_0_ready
	wire    [0:0] avalon_st_adapter_011_out_0_error;                                             // avalon_st_adapter_011:out_0_error -> sdram_0_sdout_agent:rdata_fifo_sink_error
	wire          mbox_m_w3_avmm_msg_receiver_agent_rdata_fifo_src_valid;                        // mbox_m_w3_avmm_msg_receiver_agent:rdata_fifo_src_valid -> avalon_st_adapter_012:in_0_valid
	wire   [33:0] mbox_m_w3_avmm_msg_receiver_agent_rdata_fifo_src_data;                         // mbox_m_w3_avmm_msg_receiver_agent:rdata_fifo_src_data -> avalon_st_adapter_012:in_0_data
	wire          mbox_m_w3_avmm_msg_receiver_agent_rdata_fifo_src_ready;                        // avalon_st_adapter_012:in_0_ready -> mbox_m_w3_avmm_msg_receiver_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_012_out_0_valid;                                             // avalon_st_adapter_012:out_0_valid -> mbox_m_w3_avmm_msg_receiver_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_012_out_0_data;                                              // avalon_st_adapter_012:out_0_data -> mbox_m_w3_avmm_msg_receiver_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_012_out_0_ready;                                             // mbox_m_w3_avmm_msg_receiver_agent:rdata_fifo_sink_ready -> avalon_st_adapter_012:out_0_ready
	wire    [0:0] avalon_st_adapter_012_out_0_error;                                             // avalon_st_adapter_012:out_0_error -> mbox_m_w3_avmm_msg_receiver_agent:rdata_fifo_sink_error
	wire          req_fifo_in_agent_rdata_fifo_src_valid;                                        // req_fifo_in_agent:rdata_fifo_src_valid -> avalon_st_adapter_013:in_0_valid
	wire   [33:0] req_fifo_in_agent_rdata_fifo_src_data;                                         // req_fifo_in_agent:rdata_fifo_src_data -> avalon_st_adapter_013:in_0_data
	wire          req_fifo_in_agent_rdata_fifo_src_ready;                                        // avalon_st_adapter_013:in_0_ready -> req_fifo_in_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_013_out_0_valid;                                             // avalon_st_adapter_013:out_0_valid -> req_fifo_in_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_013_out_0_data;                                              // avalon_st_adapter_013:out_0_data -> req_fifo_in_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_013_out_0_ready;                                             // req_fifo_in_agent:rdata_fifo_sink_ready -> avalon_st_adapter_013:out_0_ready
	wire    [0:0] avalon_st_adapter_013_out_0_error;                                             // avalon_st_adapter_013:out_0_error -> req_fifo_in_agent:rdata_fifo_sink_error
	wire          req_fifo_in_csr_agent_rdata_fifo_src_valid;                                    // req_fifo_in_csr_agent:rdata_fifo_src_valid -> avalon_st_adapter_014:in_0_valid
	wire   [33:0] req_fifo_in_csr_agent_rdata_fifo_src_data;                                     // req_fifo_in_csr_agent:rdata_fifo_src_data -> avalon_st_adapter_014:in_0_data
	wire          req_fifo_in_csr_agent_rdata_fifo_src_ready;                                    // avalon_st_adapter_014:in_0_ready -> req_fifo_in_csr_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_014_out_0_valid;                                             // avalon_st_adapter_014:out_0_valid -> req_fifo_in_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_014_out_0_data;                                              // avalon_st_adapter_014:out_0_data -> req_fifo_in_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_014_out_0_ready;                                             // req_fifo_in_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_014:out_0_ready
	wire    [0:0] avalon_st_adapter_014_out_0_error;                                             // avalon_st_adapter_014:out_0_error -> req_fifo_in_csr_agent:rdata_fifo_sink_error
	wire          shared_ocm_s2_agent_rdata_fifo_src_valid;                                      // shared_ocm_s2_agent:rdata_fifo_src_valid -> avalon_st_adapter_015:in_0_valid
	wire   [33:0] shared_ocm_s2_agent_rdata_fifo_src_data;                                       // shared_ocm_s2_agent:rdata_fifo_src_data -> avalon_st_adapter_015:in_0_data
	wire          shared_ocm_s2_agent_rdata_fifo_src_ready;                                      // avalon_st_adapter_015:in_0_ready -> shared_ocm_s2_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_015_out_0_valid;                                             // avalon_st_adapter_015:out_0_valid -> shared_ocm_s2_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_015_out_0_data;                                              // avalon_st_adapter_015:out_0_data -> shared_ocm_s2_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_015_out_0_ready;                                             // shared_ocm_s2_agent:rdata_fifo_sink_ready -> avalon_st_adapter_015:out_0_ready
	wire    [0:0] avalon_st_adapter_015_out_0_error;                                             // avalon_st_adapter_015:out_0_error -> shared_ocm_s2_agent:rdata_fifo_sink_error
	wire          mbox_m_w2_avmm_msg_receiver_agent_rdata_fifo_src_valid;                        // mbox_m_w2_avmm_msg_receiver_agent:rdata_fifo_src_valid -> avalon_st_adapter_016:in_0_valid
	wire   [33:0] mbox_m_w2_avmm_msg_receiver_agent_rdata_fifo_src_data;                         // mbox_m_w2_avmm_msg_receiver_agent:rdata_fifo_src_data -> avalon_st_adapter_016:in_0_data
	wire          mbox_m_w2_avmm_msg_receiver_agent_rdata_fifo_src_ready;                        // avalon_st_adapter_016:in_0_ready -> mbox_m_w2_avmm_msg_receiver_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_016_out_0_valid;                                             // avalon_st_adapter_016:out_0_valid -> mbox_m_w2_avmm_msg_receiver_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_016_out_0_data;                                              // avalon_st_adapter_016:out_0_data -> mbox_m_w2_avmm_msg_receiver_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_016_out_0_ready;                                             // mbox_m_w2_avmm_msg_receiver_agent:rdata_fifo_sink_ready -> avalon_st_adapter_016:out_0_ready
	wire    [0:0] avalon_st_adapter_016_out_0_error;                                             // avalon_st_adapter_016:out_0_error -> mbox_m_w2_avmm_msg_receiver_agent:rdata_fifo_sink_error
	wire          mbox_m_w1_avmm_msg_receiver_agent_rdata_fifo_src_valid;                        // mbox_m_w1_avmm_msg_receiver_agent:rdata_fifo_src_valid -> avalon_st_adapter_017:in_0_valid
	wire   [33:0] mbox_m_w1_avmm_msg_receiver_agent_rdata_fifo_src_data;                         // mbox_m_w1_avmm_msg_receiver_agent:rdata_fifo_src_data -> avalon_st_adapter_017:in_0_data
	wire          mbox_m_w1_avmm_msg_receiver_agent_rdata_fifo_src_ready;                        // avalon_st_adapter_017:in_0_ready -> mbox_m_w1_avmm_msg_receiver_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_017_out_0_valid;                                             // avalon_st_adapter_017:out_0_valid -> mbox_m_w1_avmm_msg_receiver_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_017_out_0_data;                                              // avalon_st_adapter_017:out_0_data -> mbox_m_w1_avmm_msg_receiver_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_017_out_0_ready;                                             // mbox_m_w1_avmm_msg_receiver_agent:rdata_fifo_sink_ready -> avalon_st_adapter_017:out_0_ready
	wire    [0:0] avalon_st_adapter_017_out_0_error;                                             // avalon_st_adapter_017:out_0_error -> mbox_m_w1_avmm_msg_receiver_agent:rdata_fifo_sink_error
	wire          mbox_m_w0_avmm_msg_receiver_agent_rdata_fifo_src_valid;                        // mbox_m_w0_avmm_msg_receiver_agent:rdata_fifo_src_valid -> avalon_st_adapter_018:in_0_valid
	wire   [33:0] mbox_m_w0_avmm_msg_receiver_agent_rdata_fifo_src_data;                         // mbox_m_w0_avmm_msg_receiver_agent:rdata_fifo_src_data -> avalon_st_adapter_018:in_0_data
	wire          mbox_m_w0_avmm_msg_receiver_agent_rdata_fifo_src_ready;                        // avalon_st_adapter_018:in_0_ready -> mbox_m_w0_avmm_msg_receiver_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_018_out_0_valid;                                             // avalon_st_adapter_018:out_0_valid -> mbox_m_w0_avmm_msg_receiver_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_018_out_0_data;                                              // avalon_st_adapter_018:out_0_data -> mbox_m_w0_avmm_msg_receiver_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_018_out_0_ready;                                             // mbox_m_w0_avmm_msg_receiver_agent:rdata_fifo_sink_ready -> avalon_st_adapter_018:out_0_ready
	wire    [0:0] avalon_st_adapter_018_out_0_error;                                             // avalon_st_adapter_018:out_0_error -> mbox_m_w0_avmm_msg_receiver_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (27),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (28),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) manager_data_master_translator (
		.clk                    (altpll_0_c0_clk),                                                        //                       clk.clk
		.reset                  (manager_reset_reset_bridge_in_reset_reset),                              //                     reset.reset
		.uav_address            (manager_data_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (manager_data_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (manager_data_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (manager_data_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (manager_data_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (manager_data_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (manager_data_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (manager_data_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (manager_data_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (manager_data_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (manager_data_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (manager_data_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (manager_data_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (manager_data_master_byteenable),                                         //                          .byteenable
		.av_read                (manager_data_master_read),                                               //                          .read
		.av_readdata            (manager_data_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (manager_data_master_readdatavalid),                                      //                          .readdatavalid
		.av_write               (manager_data_master_write),                                              //                          .write
		.av_writedata           (manager_data_master_writedata),                                          //                          .writedata
		.av_debugaccess         (manager_data_master_debugaccess),                                        //                          .debugaccess
		.av_burstcount          (1'b1),                                                                   //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                   //               (terminated)
		.av_begintransfer       (1'b0),                                                                   //               (terminated)
		.av_chipselect          (1'b0),                                                                   //               (terminated)
		.av_lock                (1'b0),                                                                   //               (terminated)
		.uav_clken              (),                                                                       //               (terminated)
		.av_clken               (1'b1),                                                                   //               (terminated)
		.uav_response           (2'b00),                                                                  //               (terminated)
		.av_response            (),                                                                       //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                   //               (terminated)
		.av_writeresponsevalid  ()                                                                        //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (27),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (28),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (1),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) manager_instruction_master_translator (
		.clk                    (altpll_0_c0_clk),                                                               //                       clk.clk
		.reset                  (manager_reset_reset_bridge_in_reset_reset),                                     //                     reset.reset
		.uav_address            (manager_instruction_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (manager_instruction_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (manager_instruction_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (manager_instruction_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (manager_instruction_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (manager_instruction_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (manager_instruction_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (manager_instruction_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (manager_instruction_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (manager_instruction_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (manager_instruction_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (manager_instruction_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (manager_instruction_master_waitrequest),                                        //                          .waitrequest
		.av_read                (manager_instruction_master_read),                                               //                          .read
		.av_readdata            (manager_instruction_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (manager_instruction_master_readdatavalid),                                      //                          .readdatavalid
		.av_burstcount          (1'b1),                                                                          //               (terminated)
		.av_byteenable          (4'b1111),                                                                       //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                          //               (terminated)
		.av_begintransfer       (1'b0),                                                                          //               (terminated)
		.av_chipselect          (1'b0),                                                                          //               (terminated)
		.av_write               (1'b0),                                                                          //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                                          //               (terminated)
		.av_lock                (1'b0),                                                                          //               (terminated)
		.av_debugaccess         (1'b0),                                                                          //               (terminated)
		.uav_clken              (),                                                                              //               (terminated)
		.av_clken               (1'b1),                                                                          //               (terminated)
		.uav_response           (2'b00),                                                                         //               (terminated)
		.av_response            (),                                                                              //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                          //               (terminated)
		.av_writeresponsevalid  ()                                                                               //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (28),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (28),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) worker0_wout_translator (
		.clk                    (altpll_0_c0_clk),                                                 //                       clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset),                   //                     reset.reset
		.uav_address            (worker0_wout_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (worker0_wout_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (worker0_wout_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (worker0_wout_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (worker0_wout_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (worker0_wout_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (worker0_wout_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (worker0_wout_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (worker0_wout_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (worker0_wout_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (worker0_wout_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (worker0_wout_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (worker0_wout_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (worker0_wout_burstcount),                                         //                          .burstcount
		.av_byteenable          (worker0_wout_byteenable),                                         //                          .byteenable
		.av_read                (worker0_wout_read),                                               //                          .read
		.av_readdata            (worker0_wout_readdata),                                           //                          .readdata
		.av_readdatavalid       (worker0_wout_readdatavalid),                                      //                          .readdatavalid
		.av_write               (worker0_wout_write),                                              //                          .write
		.av_writedata           (worker0_wout_writedata),                                          //                          .writedata
		.av_debugaccess         (worker0_wout_debugaccess),                                        //                          .debugaccess
		.av_beginbursttransfer  (1'b0),                                                            //               (terminated)
		.av_begintransfer       (1'b0),                                                            //               (terminated)
		.av_chipselect          (1'b0),                                                            //               (terminated)
		.av_lock                (1'b0),                                                            //               (terminated)
		.uav_clken              (),                                                                //               (terminated)
		.av_clken               (1'b1),                                                            //               (terminated)
		.uav_response           (2'b00),                                                           //               (terminated)
		.av_response            (),                                                                //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                            //               (terminated)
		.av_writeresponsevalid  ()                                                                 //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (28),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (28),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) worker1_wout_translator (
		.clk                    (altpll_0_c0_clk),                                                 //                       clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset),                   //                     reset.reset
		.uav_address            (worker1_wout_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (worker1_wout_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (worker1_wout_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (worker1_wout_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (worker1_wout_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (worker1_wout_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (worker1_wout_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (worker1_wout_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (worker1_wout_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (worker1_wout_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (worker1_wout_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (worker1_wout_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (worker1_wout_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (worker1_wout_burstcount),                                         //                          .burstcount
		.av_byteenable          (worker1_wout_byteenable),                                         //                          .byteenable
		.av_read                (worker1_wout_read),                                               //                          .read
		.av_readdata            (worker1_wout_readdata),                                           //                          .readdata
		.av_readdatavalid       (worker1_wout_readdatavalid),                                      //                          .readdatavalid
		.av_write               (worker1_wout_write),                                              //                          .write
		.av_writedata           (worker1_wout_writedata),                                          //                          .writedata
		.av_debugaccess         (worker1_wout_debugaccess),                                        //                          .debugaccess
		.av_beginbursttransfer  (1'b0),                                                            //               (terminated)
		.av_begintransfer       (1'b0),                                                            //               (terminated)
		.av_chipselect          (1'b0),                                                            //               (terminated)
		.av_lock                (1'b0),                                                            //               (terminated)
		.uav_clken              (),                                                                //               (terminated)
		.av_clken               (1'b1),                                                            //               (terminated)
		.uav_response           (2'b00),                                                           //               (terminated)
		.av_response            (),                                                                //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                            //               (terminated)
		.av_writeresponsevalid  ()                                                                 //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (28),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (28),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) worker2_wout_translator (
		.clk                    (altpll_0_c0_clk),                                                 //                       clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset),                   //                     reset.reset
		.uav_address            (worker2_wout_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (worker2_wout_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (worker2_wout_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (worker2_wout_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (worker2_wout_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (worker2_wout_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (worker2_wout_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (worker2_wout_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (worker2_wout_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (worker2_wout_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (worker2_wout_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (worker2_wout_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (worker2_wout_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (worker2_wout_burstcount),                                         //                          .burstcount
		.av_byteenable          (worker2_wout_byteenable),                                         //                          .byteenable
		.av_read                (worker2_wout_read),                                               //                          .read
		.av_readdata            (worker2_wout_readdata),                                           //                          .readdata
		.av_readdatavalid       (worker2_wout_readdatavalid),                                      //                          .readdatavalid
		.av_write               (worker2_wout_write),                                              //                          .write
		.av_writedata           (worker2_wout_writedata),                                          //                          .writedata
		.av_debugaccess         (worker2_wout_debugaccess),                                        //                          .debugaccess
		.av_beginbursttransfer  (1'b0),                                                            //               (terminated)
		.av_begintransfer       (1'b0),                                                            //               (terminated)
		.av_chipselect          (1'b0),                                                            //               (terminated)
		.av_lock                (1'b0),                                                            //               (terminated)
		.uav_clken              (),                                                                //               (terminated)
		.av_clken               (1'b1),                                                            //               (terminated)
		.uav_response           (2'b00),                                                           //               (terminated)
		.av_response            (),                                                                //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                            //               (terminated)
		.av_writeresponsevalid  ()                                                                 //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (28),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (28),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) worker3_wout_translator (
		.clk                    (altpll_0_c0_clk),                                                 //                       clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset),                   //                     reset.reset
		.uav_address            (worker3_wout_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (worker3_wout_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (worker3_wout_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (worker3_wout_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (worker3_wout_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (worker3_wout_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (worker3_wout_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (worker3_wout_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (worker3_wout_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (worker3_wout_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (worker3_wout_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (worker3_wout_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (worker3_wout_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (worker3_wout_burstcount),                                         //                          .burstcount
		.av_byteenable          (worker3_wout_byteenable),                                         //                          .byteenable
		.av_read                (worker3_wout_read),                                               //                          .read
		.av_readdata            (worker3_wout_readdata),                                           //                          .readdata
		.av_readdatavalid       (worker3_wout_readdatavalid),                                      //                          .readdatavalid
		.av_write               (worker3_wout_write),                                              //                          .write
		.av_writedata           (worker3_wout_writedata),                                          //                          .writedata
		.av_debugaccess         (worker3_wout_debugaccess),                                        //                          .debugaccess
		.av_beginbursttransfer  (1'b0),                                                            //               (terminated)
		.av_begintransfer       (1'b0),                                                            //               (terminated)
		.av_chipselect          (1'b0),                                                            //               (terminated)
		.av_lock                (1'b0),                                                            //               (terminated)
		.uav_clken              (),                                                                //               (terminated)
		.av_clken               (1'b1),                                                            //               (terminated)
		.uav_response           (2'b00),                                                           //               (terminated)
		.av_response            (),                                                                //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                            //               (terminated)
		.av_writeresponsevalid  ()                                                                 //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) jtag_uart_0_avalon_jtag_slave_translator (
		.clk                    (altpll_0_c0_clk),                                      //                      clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset),        //                    reset.reset
		.uav_address            (jtag_uart_0_avalon_jtag_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (jtag_uart_0_avalon_jtag_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (jtag_uart_0_avalon_jtag_slave_agent_m0_read),          //                         .read
		.uav_write              (jtag_uart_0_avalon_jtag_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (jtag_uart_0_avalon_jtag_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (jtag_uart_0_avalon_jtag_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (jtag_uart_0_avalon_jtag_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (jtag_uart_0_avalon_jtag_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (jtag_uart_0_avalon_jtag_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (jtag_uart_0_avalon_jtag_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (jtag_uart_0_avalon_jtag_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (jtag_uart_0_avalon_jtag_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (jtag_uart_0_avalon_jtag_slave_write),                  //                         .write
		.av_read                (jtag_uart_0_avalon_jtag_slave_read),                   //                         .read
		.av_readdata            (jtag_uart_0_avalon_jtag_slave_readdata),               //                         .readdata
		.av_writedata           (jtag_uart_0_avalon_jtag_slave_writedata),              //                         .writedata
		.av_waitrequest         (jtag_uart_0_avalon_jtag_slave_waitrequest),            //                         .waitrequest
		.av_chipselect          (jtag_uart_0_avalon_jtag_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                     //              (terminated)
		.av_beginbursttransfer  (),                                                     //              (terminated)
		.av_burstcount          (),                                                     //              (terminated)
		.av_byteenable          (),                                                     //              (terminated)
		.av_readdatavalid       (1'b0),                                                 //              (terminated)
		.av_writebyteenable     (),                                                     //              (terminated)
		.av_lock                (),                                                     //              (terminated)
		.av_clken               (),                                                     //              (terminated)
		.uav_clken              (1'b0),                                                 //              (terminated)
		.av_debugaccess         (),                                                     //              (terminated)
		.av_outputenable        (),                                                     //              (terminated)
		.uav_response           (),                                                     //              (terminated)
		.av_response            (2'b00),                                                //              (terminated)
		.uav_writeresponsevalid (),                                                     //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                  //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) mbox_m_w0_avmm_msg_sender_translator (
		.clk                    (altpll_0_c0_clk),                                  //                      clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset),    //                    reset.reset
		.uav_address            (mbox_m_w0_avmm_msg_sender_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (mbox_m_w0_avmm_msg_sender_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (mbox_m_w0_avmm_msg_sender_agent_m0_read),          //                         .read
		.uav_write              (mbox_m_w0_avmm_msg_sender_agent_m0_write),         //                         .write
		.uav_waitrequest        (mbox_m_w0_avmm_msg_sender_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (mbox_m_w0_avmm_msg_sender_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (mbox_m_w0_avmm_msg_sender_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (mbox_m_w0_avmm_msg_sender_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (mbox_m_w0_avmm_msg_sender_agent_m0_writedata),     //                         .writedata
		.uav_lock               (mbox_m_w0_avmm_msg_sender_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (mbox_m_w0_avmm_msg_sender_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (mbox_m_w0_avmm_msg_sender_address),                //      avalon_anti_slave_0.address
		.av_write               (mbox_m_w0_avmm_msg_sender_write),                  //                         .write
		.av_read                (mbox_m_w0_avmm_msg_sender_read),                   //                         .read
		.av_readdata            (mbox_m_w0_avmm_msg_sender_readdata),               //                         .readdata
		.av_writedata           (mbox_m_w0_avmm_msg_sender_writedata),              //                         .writedata
		.av_waitrequest         (mbox_m_w0_avmm_msg_sender_waitrequest),            //                         .waitrequest
		.av_begintransfer       (),                                                 //              (terminated)
		.av_beginbursttransfer  (),                                                 //              (terminated)
		.av_burstcount          (),                                                 //              (terminated)
		.av_byteenable          (),                                                 //              (terminated)
		.av_readdatavalid       (1'b0),                                             //              (terminated)
		.av_writebyteenable     (),                                                 //              (terminated)
		.av_lock                (),                                                 //              (terminated)
		.av_chipselect          (),                                                 //              (terminated)
		.av_clken               (),                                                 //              (terminated)
		.uav_clken              (1'b0),                                             //              (terminated)
		.av_debugaccess         (),                                                 //              (terminated)
		.av_outputenable        (),                                                 //              (terminated)
		.uav_response           (),                                                 //              (terminated)
		.av_response            (2'b00),                                            //              (terminated)
		.uav_writeresponsevalid (),                                                 //              (terminated)
		.av_writeresponsevalid  (1'b0)                                              //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) mbox_m_w1_avmm_msg_sender_translator (
		.clk                    (altpll_0_c0_clk),                                  //                      clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset),    //                    reset.reset
		.uav_address            (mbox_m_w1_avmm_msg_sender_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (mbox_m_w1_avmm_msg_sender_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (mbox_m_w1_avmm_msg_sender_agent_m0_read),          //                         .read
		.uav_write              (mbox_m_w1_avmm_msg_sender_agent_m0_write),         //                         .write
		.uav_waitrequest        (mbox_m_w1_avmm_msg_sender_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (mbox_m_w1_avmm_msg_sender_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (mbox_m_w1_avmm_msg_sender_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (mbox_m_w1_avmm_msg_sender_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (mbox_m_w1_avmm_msg_sender_agent_m0_writedata),     //                         .writedata
		.uav_lock               (mbox_m_w1_avmm_msg_sender_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (mbox_m_w1_avmm_msg_sender_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (mbox_m_w1_avmm_msg_sender_address),                //      avalon_anti_slave_0.address
		.av_write               (mbox_m_w1_avmm_msg_sender_write),                  //                         .write
		.av_read                (mbox_m_w1_avmm_msg_sender_read),                   //                         .read
		.av_readdata            (mbox_m_w1_avmm_msg_sender_readdata),               //                         .readdata
		.av_writedata           (mbox_m_w1_avmm_msg_sender_writedata),              //                         .writedata
		.av_waitrequest         (mbox_m_w1_avmm_msg_sender_waitrequest),            //                         .waitrequest
		.av_begintransfer       (),                                                 //              (terminated)
		.av_beginbursttransfer  (),                                                 //              (terminated)
		.av_burstcount          (),                                                 //              (terminated)
		.av_byteenable          (),                                                 //              (terminated)
		.av_readdatavalid       (1'b0),                                             //              (terminated)
		.av_writebyteenable     (),                                                 //              (terminated)
		.av_lock                (),                                                 //              (terminated)
		.av_chipselect          (),                                                 //              (terminated)
		.av_clken               (),                                                 //              (terminated)
		.uav_clken              (1'b0),                                             //              (terminated)
		.av_debugaccess         (),                                                 //              (terminated)
		.av_outputenable        (),                                                 //              (terminated)
		.uav_response           (),                                                 //              (terminated)
		.av_response            (2'b00),                                            //              (terminated)
		.uav_writeresponsevalid (),                                                 //              (terminated)
		.av_writeresponsevalid  (1'b0)                                              //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) mbox_m_w2_avmm_msg_sender_translator (
		.clk                    (altpll_0_c0_clk),                                  //                      clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset),    //                    reset.reset
		.uav_address            (mbox_m_w2_avmm_msg_sender_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (mbox_m_w2_avmm_msg_sender_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (mbox_m_w2_avmm_msg_sender_agent_m0_read),          //                         .read
		.uav_write              (mbox_m_w2_avmm_msg_sender_agent_m0_write),         //                         .write
		.uav_waitrequest        (mbox_m_w2_avmm_msg_sender_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (mbox_m_w2_avmm_msg_sender_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (mbox_m_w2_avmm_msg_sender_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (mbox_m_w2_avmm_msg_sender_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (mbox_m_w2_avmm_msg_sender_agent_m0_writedata),     //                         .writedata
		.uav_lock               (mbox_m_w2_avmm_msg_sender_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (mbox_m_w2_avmm_msg_sender_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (mbox_m_w2_avmm_msg_sender_address),                //      avalon_anti_slave_0.address
		.av_write               (mbox_m_w2_avmm_msg_sender_write),                  //                         .write
		.av_read                (mbox_m_w2_avmm_msg_sender_read),                   //                         .read
		.av_readdata            (mbox_m_w2_avmm_msg_sender_readdata),               //                         .readdata
		.av_writedata           (mbox_m_w2_avmm_msg_sender_writedata),              //                         .writedata
		.av_waitrequest         (mbox_m_w2_avmm_msg_sender_waitrequest),            //                         .waitrequest
		.av_begintransfer       (),                                                 //              (terminated)
		.av_beginbursttransfer  (),                                                 //              (terminated)
		.av_burstcount          (),                                                 //              (terminated)
		.av_byteenable          (),                                                 //              (terminated)
		.av_readdatavalid       (1'b0),                                             //              (terminated)
		.av_writebyteenable     (),                                                 //              (terminated)
		.av_lock                (),                                                 //              (terminated)
		.av_chipselect          (),                                                 //              (terminated)
		.av_clken               (),                                                 //              (terminated)
		.uav_clken              (1'b0),                                             //              (terminated)
		.av_debugaccess         (),                                                 //              (terminated)
		.av_outputenable        (),                                                 //              (terminated)
		.uav_response           (),                                                 //              (terminated)
		.av_response            (2'b00),                                            //              (terminated)
		.uav_writeresponsevalid (),                                                 //              (terminated)
		.av_writeresponsevalid  (1'b0)                                              //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) mbox_m_w3_avmm_msg_sender_translator (
		.clk                    (altpll_0_c0_clk),                                  //                      clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset),    //                    reset.reset
		.uav_address            (mbox_m_w3_avmm_msg_sender_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (mbox_m_w3_avmm_msg_sender_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (mbox_m_w3_avmm_msg_sender_agent_m0_read),          //                         .read
		.uav_write              (mbox_m_w3_avmm_msg_sender_agent_m0_write),         //                         .write
		.uav_waitrequest        (mbox_m_w3_avmm_msg_sender_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (mbox_m_w3_avmm_msg_sender_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (mbox_m_w3_avmm_msg_sender_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (mbox_m_w3_avmm_msg_sender_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (mbox_m_w3_avmm_msg_sender_agent_m0_writedata),     //                         .writedata
		.uav_lock               (mbox_m_w3_avmm_msg_sender_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (mbox_m_w3_avmm_msg_sender_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (mbox_m_w3_avmm_msg_sender_address),                //      avalon_anti_slave_0.address
		.av_write               (mbox_m_w3_avmm_msg_sender_write),                  //                         .write
		.av_read                (mbox_m_w3_avmm_msg_sender_read),                   //                         .read
		.av_readdata            (mbox_m_w3_avmm_msg_sender_readdata),               //                         .readdata
		.av_writedata           (mbox_m_w3_avmm_msg_sender_writedata),              //                         .writedata
		.av_waitrequest         (mbox_m_w3_avmm_msg_sender_waitrequest),            //                         .waitrequest
		.av_begintransfer       (),                                                 //              (terminated)
		.av_beginbursttransfer  (),                                                 //              (terminated)
		.av_burstcount          (),                                                 //              (terminated)
		.av_byteenable          (),                                                 //              (terminated)
		.av_readdatavalid       (1'b0),                                             //              (terminated)
		.av_writebyteenable     (),                                                 //              (terminated)
		.av_lock                (),                                                 //              (terminated)
		.av_chipselect          (),                                                 //              (terminated)
		.av_clken               (),                                                 //              (terminated)
		.uav_clken              (1'b0),                                             //              (terminated)
		.av_debugaccess         (),                                                 //              (terminated)
		.av_outputenable        (),                                                 //              (terminated)
		.uav_response           (),                                                 //              (terminated)
		.av_response            (2'b00),                                            //              (terminated)
		.uav_writeresponsevalid (),                                                 //              (terminated)
		.av_writeresponsevalid  (1'b0)                                              //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) performance_counter_0_control_slave_translator (
		.clk                    (altpll_0_c0_clk),                                            //                      clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset),              //                    reset.reset
		.uav_address            (performance_counter_0_control_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (performance_counter_0_control_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (performance_counter_0_control_slave_agent_m0_read),          //                         .read
		.uav_write              (performance_counter_0_control_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (performance_counter_0_control_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (performance_counter_0_control_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (performance_counter_0_control_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (performance_counter_0_control_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (performance_counter_0_control_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (performance_counter_0_control_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (performance_counter_0_control_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (performance_counter_0_control_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (performance_counter_0_control_slave_write),                  //                         .write
		.av_readdata            (performance_counter_0_control_slave_readdata),               //                         .readdata
		.av_writedata           (performance_counter_0_control_slave_writedata),              //                         .writedata
		.av_begintransfer       (performance_counter_0_control_slave_begintransfer),          //                         .begintransfer
		.av_read                (),                                                           //              (terminated)
		.av_beginbursttransfer  (),                                                           //              (terminated)
		.av_burstcount          (),                                                           //              (terminated)
		.av_byteenable          (),                                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                                       //              (terminated)
		.av_waitrequest         (1'b0),                                                       //              (terminated)
		.av_writebyteenable     (),                                                           //              (terminated)
		.av_lock                (),                                                           //              (terminated)
		.av_chipselect          (),                                                           //              (terminated)
		.av_clken               (),                                                           //              (terminated)
		.uav_clken              (1'b0),                                                       //              (terminated)
		.av_debugaccess         (),                                                           //              (terminated)
		.av_outputenable        (),                                                           //              (terminated)
		.uav_response           (),                                                           //              (terminated)
		.av_response            (2'b00),                                                      //              (terminated)
		.uav_writeresponsevalid (),                                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) manager_debug_mem_slave_translator (
		.clk                    (altpll_0_c0_clk),                                //                      clk.clk
		.reset                  (manager_reset_reset_bridge_in_reset_reset),      //                    reset.reset
		.uav_address            (manager_debug_mem_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (manager_debug_mem_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (manager_debug_mem_slave_agent_m0_read),          //                         .read
		.uav_write              (manager_debug_mem_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (manager_debug_mem_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (manager_debug_mem_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (manager_debug_mem_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (manager_debug_mem_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (manager_debug_mem_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (manager_debug_mem_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (manager_debug_mem_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (manager_debug_mem_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (manager_debug_mem_slave_write),                  //                         .write
		.av_read                (manager_debug_mem_slave_read),                   //                         .read
		.av_readdata            (manager_debug_mem_slave_readdata),               //                         .readdata
		.av_writedata           (manager_debug_mem_slave_writedata),              //                         .writedata
		.av_byteenable          (manager_debug_mem_slave_byteenable),             //                         .byteenable
		.av_waitrequest         (manager_debug_mem_slave_waitrequest),            //                         .waitrequest
		.av_debugaccess         (manager_debug_mem_slave_debugaccess),            //                         .debugaccess
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_chipselect          (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) req_fifo_out_translator (
		.clk                    (altpll_0_c0_clk),                               //                      clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (req_fifo_out_agent_m0_address),                 // avalon_universal_slave_0.address
		.uav_burstcount         (req_fifo_out_agent_m0_burstcount),              //                         .burstcount
		.uav_read               (req_fifo_out_agent_m0_read),                    //                         .read
		.uav_write              (req_fifo_out_agent_m0_write),                   //                         .write
		.uav_waitrequest        (req_fifo_out_agent_m0_waitrequest),             //                         .waitrequest
		.uav_readdatavalid      (req_fifo_out_agent_m0_readdatavalid),           //                         .readdatavalid
		.uav_byteenable         (req_fifo_out_agent_m0_byteenable),              //                         .byteenable
		.uav_readdata           (req_fifo_out_agent_m0_readdata),                //                         .readdata
		.uav_writedata          (req_fifo_out_agent_m0_writedata),               //                         .writedata
		.uav_lock               (req_fifo_out_agent_m0_lock),                    //                         .lock
		.uav_debugaccess        (req_fifo_out_agent_m0_debugaccess),             //                         .debugaccess
		.av_read                (req_fifo_out_read),                             //      avalon_anti_slave_0.read
		.av_readdata            (req_fifo_out_readdata),                         //                         .readdata
		.av_waitrequest         (req_fifo_out_waitrequest),                      //                         .waitrequest
		.av_address             (),                                              //              (terminated)
		.av_write               (),                                              //              (terminated)
		.av_writedata           (),                                              //              (terminated)
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_byteenable          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_chipselect          (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) req_fifo_out_csr_translator (
		.clk                    (altpll_0_c0_clk),                               //                      clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (req_fifo_out_csr_agent_m0_address),             // avalon_universal_slave_0.address
		.uav_burstcount         (req_fifo_out_csr_agent_m0_burstcount),          //                         .burstcount
		.uav_read               (req_fifo_out_csr_agent_m0_read),                //                         .read
		.uav_write              (req_fifo_out_csr_agent_m0_write),               //                         .write
		.uav_waitrequest        (req_fifo_out_csr_agent_m0_waitrequest),         //                         .waitrequest
		.uav_readdatavalid      (req_fifo_out_csr_agent_m0_readdatavalid),       //                         .readdatavalid
		.uav_byteenable         (req_fifo_out_csr_agent_m0_byteenable),          //                         .byteenable
		.uav_readdata           (req_fifo_out_csr_agent_m0_readdata),            //                         .readdata
		.uav_writedata          (req_fifo_out_csr_agent_m0_writedata),           //                         .writedata
		.uav_lock               (req_fifo_out_csr_agent_m0_lock),                //                         .lock
		.uav_debugaccess        (req_fifo_out_csr_agent_m0_debugaccess),         //                         .debugaccess
		.av_address             (req_fifo_out_csr_address),                      //      avalon_anti_slave_0.address
		.av_write               (req_fifo_out_csr_write),                        //                         .write
		.av_read                (req_fifo_out_csr_read),                         //                         .read
		.av_readdata            (req_fifo_out_csr_readdata),                     //                         .readdata
		.av_writedata           (req_fifo_out_csr_writedata),                    //                         .writedata
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_byteenable          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_chipselect          (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) altpll_0_pll_slave_translator (
		.clk                    (clk_0_clk_clk),                                              //                      clk.clk
		.reset                  (altpll_0_inclk_interface_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (altpll_0_pll_slave_agent_m0_address),                        // avalon_universal_slave_0.address
		.uav_burstcount         (altpll_0_pll_slave_agent_m0_burstcount),                     //                         .burstcount
		.uav_read               (altpll_0_pll_slave_agent_m0_read),                           //                         .read
		.uav_write              (altpll_0_pll_slave_agent_m0_write),                          //                         .write
		.uav_waitrequest        (altpll_0_pll_slave_agent_m0_waitrequest),                    //                         .waitrequest
		.uav_readdatavalid      (altpll_0_pll_slave_agent_m0_readdatavalid),                  //                         .readdatavalid
		.uav_byteenable         (altpll_0_pll_slave_agent_m0_byteenable),                     //                         .byteenable
		.uav_readdata           (altpll_0_pll_slave_agent_m0_readdata),                       //                         .readdata
		.uav_writedata          (altpll_0_pll_slave_agent_m0_writedata),                      //                         .writedata
		.uav_lock               (altpll_0_pll_slave_agent_m0_lock),                           //                         .lock
		.uav_debugaccess        (altpll_0_pll_slave_agent_m0_debugaccess),                    //                         .debugaccess
		.av_address             (altpll_0_pll_slave_address),                                 //      avalon_anti_slave_0.address
		.av_write               (altpll_0_pll_slave_write),                                   //                         .write
		.av_read                (altpll_0_pll_slave_read),                                    //                         .read
		.av_readdata            (altpll_0_pll_slave_readdata),                                //                         .readdata
		.av_writedata           (altpll_0_pll_slave_writedata),                               //                         .writedata
		.av_begintransfer       (),                                                           //              (terminated)
		.av_beginbursttransfer  (),                                                           //              (terminated)
		.av_burstcount          (),                                                           //              (terminated)
		.av_byteenable          (),                                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                                       //              (terminated)
		.av_waitrequest         (1'b0),                                                       //              (terminated)
		.av_writebyteenable     (),                                                           //              (terminated)
		.av_lock                (),                                                           //              (terminated)
		.av_chipselect          (),                                                           //              (terminated)
		.av_clken               (),                                                           //              (terminated)
		.uav_clken              (1'b0),                                                       //              (terminated)
		.av_debugaccess         (),                                                           //              (terminated)
		.av_outputenable        (),                                                           //              (terminated)
		.uav_response           (),                                                           //              (terminated)
		.av_response            (2'b00),                                                      //              (terminated)
		.uav_writeresponsevalid (),                                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (8),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) shared_ocm_s1_translator (
		.clk                    (altpll_0_c0_clk),                           //                      clk.clk
		.reset                  (manager_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (shared_ocm_s1_agent_m0_address),            // avalon_universal_slave_0.address
		.uav_burstcount         (shared_ocm_s1_agent_m0_burstcount),         //                         .burstcount
		.uav_read               (shared_ocm_s1_agent_m0_read),               //                         .read
		.uav_write              (shared_ocm_s1_agent_m0_write),              //                         .write
		.uav_waitrequest        (shared_ocm_s1_agent_m0_waitrequest),        //                         .waitrequest
		.uav_readdatavalid      (shared_ocm_s1_agent_m0_readdatavalid),      //                         .readdatavalid
		.uav_byteenable         (shared_ocm_s1_agent_m0_byteenable),         //                         .byteenable
		.uav_readdata           (shared_ocm_s1_agent_m0_readdata),           //                         .readdata
		.uav_writedata          (shared_ocm_s1_agent_m0_writedata),          //                         .writedata
		.uav_lock               (shared_ocm_s1_agent_m0_lock),               //                         .lock
		.uav_debugaccess        (shared_ocm_s1_agent_m0_debugaccess),        //                         .debugaccess
		.av_address             (shared_ocm_s1_address),                     //      avalon_anti_slave_0.address
		.av_write               (shared_ocm_s1_write),                       //                         .write
		.av_readdata            (shared_ocm_s1_readdata),                    //                         .readdata
		.av_writedata           (shared_ocm_s1_writedata),                   //                         .writedata
		.av_byteenable          (shared_ocm_s1_byteenable),                  //                         .byteenable
		.av_chipselect          (shared_ocm_s1_chipselect),                  //                         .chipselect
		.av_clken               (shared_ocm_s1_clken),                       //                         .clken
		.av_read                (),                                          //              (terminated)
		.av_begintransfer       (),                                          //              (terminated)
		.av_beginbursttransfer  (),                                          //              (terminated)
		.av_burstcount          (),                                          //              (terminated)
		.av_readdatavalid       (1'b0),                                      //              (terminated)
		.av_waitrequest         (1'b0),                                      //              (terminated)
		.av_writebyteenable     (),                                          //              (terminated)
		.av_lock                (),                                          //              (terminated)
		.uav_clken              (1'b0),                                      //              (terminated)
		.av_debugaccess         (),                                          //              (terminated)
		.av_outputenable        (),                                          //              (terminated)
		.uav_response           (),                                          //              (terminated)
		.av_response            (2'b00),                                     //              (terminated)
		.uav_writeresponsevalid (),                                          //              (terminated)
		.av_writeresponsevalid  (1'b0)                                       //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (26),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sdram_0_sdout_translator (
		.clk                    (altpll_0_c0_clk),                           //                      clk.clk
		.reset                  (manager_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sdram_0_sdout_agent_m0_address),            // avalon_universal_slave_0.address
		.uav_burstcount         (sdram_0_sdout_agent_m0_burstcount),         //                         .burstcount
		.uav_read               (sdram_0_sdout_agent_m0_read),               //                         .read
		.uav_write              (sdram_0_sdout_agent_m0_write),              //                         .write
		.uav_waitrequest        (sdram_0_sdout_agent_m0_waitrequest),        //                         .waitrequest
		.uav_readdatavalid      (sdram_0_sdout_agent_m0_readdatavalid),      //                         .readdatavalid
		.uav_byteenable         (sdram_0_sdout_agent_m0_byteenable),         //                         .byteenable
		.uav_readdata           (sdram_0_sdout_agent_m0_readdata),           //                         .readdata
		.uav_writedata          (sdram_0_sdout_agent_m0_writedata),          //                         .writedata
		.uav_lock               (sdram_0_sdout_agent_m0_lock),               //                         .lock
		.uav_debugaccess        (sdram_0_sdout_agent_m0_debugaccess),        //                         .debugaccess
		.av_address             (sdram_0_sdout_address),                     //      avalon_anti_slave_0.address
		.av_write               (sdram_0_sdout_write),                       //                         .write
		.av_read                (sdram_0_sdout_read),                        //                         .read
		.av_readdata            (sdram_0_sdout_readdata),                    //                         .readdata
		.av_writedata           (sdram_0_sdout_writedata),                   //                         .writedata
		.av_burstcount          (sdram_0_sdout_burstcount),                  //                         .burstcount
		.av_byteenable          (sdram_0_sdout_byteenable),                  //                         .byteenable
		.av_readdatavalid       (sdram_0_sdout_readdatavalid),               //                         .readdatavalid
		.av_waitrequest         (sdram_0_sdout_waitrequest),                 //                         .waitrequest
		.av_debugaccess         (sdram_0_sdout_debugaccess),                 //                         .debugaccess
		.av_begintransfer       (),                                          //              (terminated)
		.av_beginbursttransfer  (),                                          //              (terminated)
		.av_writebyteenable     (),                                          //              (terminated)
		.av_lock                (),                                          //              (terminated)
		.av_chipselect          (),                                          //              (terminated)
		.av_clken               (),                                          //              (terminated)
		.uav_clken              (1'b0),                                      //              (terminated)
		.av_outputenable        (),                                          //              (terminated)
		.uav_response           (),                                          //              (terminated)
		.av_response            (2'b00),                                     //              (terminated)
		.uav_writeresponsevalid (),                                          //              (terminated)
		.av_writeresponsevalid  (1'b0)                                       //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) mbox_m_w3_avmm_msg_receiver_translator (
		.clk                    (altpll_0_c0_clk),                                    //                      clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset),      //                    reset.reset
		.uav_address            (mbox_m_w3_avmm_msg_receiver_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (mbox_m_w3_avmm_msg_receiver_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (mbox_m_w3_avmm_msg_receiver_agent_m0_read),          //                         .read
		.uav_write              (mbox_m_w3_avmm_msg_receiver_agent_m0_write),         //                         .write
		.uav_waitrequest        (mbox_m_w3_avmm_msg_receiver_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (mbox_m_w3_avmm_msg_receiver_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (mbox_m_w3_avmm_msg_receiver_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (mbox_m_w3_avmm_msg_receiver_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (mbox_m_w3_avmm_msg_receiver_agent_m0_writedata),     //                         .writedata
		.uav_lock               (mbox_m_w3_avmm_msg_receiver_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (mbox_m_w3_avmm_msg_receiver_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (mbox_m_w3_avmm_msg_receiver_address),                //      avalon_anti_slave_0.address
		.av_write               (mbox_m_w3_avmm_msg_receiver_write),                  //                         .write
		.av_read                (mbox_m_w3_avmm_msg_receiver_read),                   //                         .read
		.av_readdata            (mbox_m_w3_avmm_msg_receiver_readdata),               //                         .readdata
		.av_writedata           (mbox_m_w3_avmm_msg_receiver_writedata),              //                         .writedata
		.av_begintransfer       (),                                                   //              (terminated)
		.av_beginbursttransfer  (),                                                   //              (terminated)
		.av_burstcount          (),                                                   //              (terminated)
		.av_byteenable          (),                                                   //              (terminated)
		.av_readdatavalid       (1'b0),                                               //              (terminated)
		.av_waitrequest         (1'b0),                                               //              (terminated)
		.av_writebyteenable     (),                                                   //              (terminated)
		.av_lock                (),                                                   //              (terminated)
		.av_chipselect          (),                                                   //              (terminated)
		.av_clken               (),                                                   //              (terminated)
		.uav_clken              (1'b0),                                               //              (terminated)
		.av_debugaccess         (),                                                   //              (terminated)
		.av_outputenable        (),                                                   //              (terminated)
		.uav_response           (),                                                   //              (terminated)
		.av_response            (2'b00),                                              //              (terminated)
		.uav_writeresponsevalid (),                                                   //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) req_fifo_in_translator (
		.clk                    (altpll_0_c0_clk),                               //                      clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (req_fifo_in_agent_m0_address),                  // avalon_universal_slave_0.address
		.uav_burstcount         (req_fifo_in_agent_m0_burstcount),               //                         .burstcount
		.uav_read               (req_fifo_in_agent_m0_read),                     //                         .read
		.uav_write              (req_fifo_in_agent_m0_write),                    //                         .write
		.uav_waitrequest        (req_fifo_in_agent_m0_waitrequest),              //                         .waitrequest
		.uav_readdatavalid      (req_fifo_in_agent_m0_readdatavalid),            //                         .readdatavalid
		.uav_byteenable         (req_fifo_in_agent_m0_byteenable),               //                         .byteenable
		.uav_readdata           (req_fifo_in_agent_m0_readdata),                 //                         .readdata
		.uav_writedata          (req_fifo_in_agent_m0_writedata),                //                         .writedata
		.uav_lock               (req_fifo_in_agent_m0_lock),                     //                         .lock
		.uav_debugaccess        (req_fifo_in_agent_m0_debugaccess),              //                         .debugaccess
		.av_write               (req_fifo_in_write),                             //      avalon_anti_slave_0.write
		.av_writedata           (req_fifo_in_writedata),                         //                         .writedata
		.av_waitrequest         (req_fifo_in_waitrequest),                       //                         .waitrequest
		.av_address             (),                                              //              (terminated)
		.av_read                (),                                              //              (terminated)
		.av_readdata            (32'b11011110101011011101111010101101),          //              (terminated)
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_byteenable          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_chipselect          (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) req_fifo_in_csr_translator (
		.clk                    (altpll_0_c0_clk),                               //                      clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (req_fifo_in_csr_agent_m0_address),              // avalon_universal_slave_0.address
		.uav_burstcount         (req_fifo_in_csr_agent_m0_burstcount),           //                         .burstcount
		.uav_read               (req_fifo_in_csr_agent_m0_read),                 //                         .read
		.uav_write              (req_fifo_in_csr_agent_m0_write),                //                         .write
		.uav_waitrequest        (req_fifo_in_csr_agent_m0_waitrequest),          //                         .waitrequest
		.uav_readdatavalid      (req_fifo_in_csr_agent_m0_readdatavalid),        //                         .readdatavalid
		.uav_byteenable         (req_fifo_in_csr_agent_m0_byteenable),           //                         .byteenable
		.uav_readdata           (req_fifo_in_csr_agent_m0_readdata),             //                         .readdata
		.uav_writedata          (req_fifo_in_csr_agent_m0_writedata),            //                         .writedata
		.uav_lock               (req_fifo_in_csr_agent_m0_lock),                 //                         .lock
		.uav_debugaccess        (req_fifo_in_csr_agent_m0_debugaccess),          //                         .debugaccess
		.av_address             (req_fifo_in_csr_address),                       //      avalon_anti_slave_0.address
		.av_write               (req_fifo_in_csr_write),                         //                         .write
		.av_read                (req_fifo_in_csr_read),                          //                         .read
		.av_readdata            (req_fifo_in_csr_readdata),                      //                         .readdata
		.av_writedata           (req_fifo_in_csr_writedata),                     //                         .writedata
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_byteenable          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_chipselect          (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (8),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) shared_ocm_s2_translator (
		.clk                    (altpll_0_c0_clk),                           //                      clk.clk
		.reset                  (manager_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (shared_ocm_s2_agent_m0_address),            // avalon_universal_slave_0.address
		.uav_burstcount         (shared_ocm_s2_agent_m0_burstcount),         //                         .burstcount
		.uav_read               (shared_ocm_s2_agent_m0_read),               //                         .read
		.uav_write              (shared_ocm_s2_agent_m0_write),              //                         .write
		.uav_waitrequest        (shared_ocm_s2_agent_m0_waitrequest),        //                         .waitrequest
		.uav_readdatavalid      (shared_ocm_s2_agent_m0_readdatavalid),      //                         .readdatavalid
		.uav_byteenable         (shared_ocm_s2_agent_m0_byteenable),         //                         .byteenable
		.uav_readdata           (shared_ocm_s2_agent_m0_readdata),           //                         .readdata
		.uav_writedata          (shared_ocm_s2_agent_m0_writedata),          //                         .writedata
		.uav_lock               (shared_ocm_s2_agent_m0_lock),               //                         .lock
		.uav_debugaccess        (shared_ocm_s2_agent_m0_debugaccess),        //                         .debugaccess
		.av_address             (shared_ocm_s2_address),                     //      avalon_anti_slave_0.address
		.av_write               (shared_ocm_s2_write),                       //                         .write
		.av_readdata            (shared_ocm_s2_readdata),                    //                         .readdata
		.av_writedata           (shared_ocm_s2_writedata),                   //                         .writedata
		.av_byteenable          (shared_ocm_s2_byteenable),                  //                         .byteenable
		.av_chipselect          (shared_ocm_s2_chipselect),                  //                         .chipselect
		.av_clken               (shared_ocm_s2_clken),                       //                         .clken
		.av_read                (),                                          //              (terminated)
		.av_begintransfer       (),                                          //              (terminated)
		.av_beginbursttransfer  (),                                          //              (terminated)
		.av_burstcount          (),                                          //              (terminated)
		.av_readdatavalid       (1'b0),                                      //              (terminated)
		.av_waitrequest         (1'b0),                                      //              (terminated)
		.av_writebyteenable     (),                                          //              (terminated)
		.av_lock                (),                                          //              (terminated)
		.uav_clken              (1'b0),                                      //              (terminated)
		.av_debugaccess         (),                                          //              (terminated)
		.av_outputenable        (),                                          //              (terminated)
		.uav_response           (),                                          //              (terminated)
		.av_response            (2'b00),                                     //              (terminated)
		.uav_writeresponsevalid (),                                          //              (terminated)
		.av_writeresponsevalid  (1'b0)                                       //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) mbox_m_w2_avmm_msg_receiver_translator (
		.clk                    (altpll_0_c0_clk),                                    //                      clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset),      //                    reset.reset
		.uav_address            (mbox_m_w2_avmm_msg_receiver_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (mbox_m_w2_avmm_msg_receiver_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (mbox_m_w2_avmm_msg_receiver_agent_m0_read),          //                         .read
		.uav_write              (mbox_m_w2_avmm_msg_receiver_agent_m0_write),         //                         .write
		.uav_waitrequest        (mbox_m_w2_avmm_msg_receiver_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (mbox_m_w2_avmm_msg_receiver_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (mbox_m_w2_avmm_msg_receiver_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (mbox_m_w2_avmm_msg_receiver_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (mbox_m_w2_avmm_msg_receiver_agent_m0_writedata),     //                         .writedata
		.uav_lock               (mbox_m_w2_avmm_msg_receiver_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (mbox_m_w2_avmm_msg_receiver_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (mbox_m_w2_avmm_msg_receiver_address),                //      avalon_anti_slave_0.address
		.av_write               (mbox_m_w2_avmm_msg_receiver_write),                  //                         .write
		.av_read                (mbox_m_w2_avmm_msg_receiver_read),                   //                         .read
		.av_readdata            (mbox_m_w2_avmm_msg_receiver_readdata),               //                         .readdata
		.av_writedata           (mbox_m_w2_avmm_msg_receiver_writedata),              //                         .writedata
		.av_begintransfer       (),                                                   //              (terminated)
		.av_beginbursttransfer  (),                                                   //              (terminated)
		.av_burstcount          (),                                                   //              (terminated)
		.av_byteenable          (),                                                   //              (terminated)
		.av_readdatavalid       (1'b0),                                               //              (terminated)
		.av_waitrequest         (1'b0),                                               //              (terminated)
		.av_writebyteenable     (),                                                   //              (terminated)
		.av_lock                (),                                                   //              (terminated)
		.av_chipselect          (),                                                   //              (terminated)
		.av_clken               (),                                                   //              (terminated)
		.uav_clken              (1'b0),                                               //              (terminated)
		.av_debugaccess         (),                                                   //              (terminated)
		.av_outputenable        (),                                                   //              (terminated)
		.uav_response           (),                                                   //              (terminated)
		.av_response            (2'b00),                                              //              (terminated)
		.uav_writeresponsevalid (),                                                   //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) mbox_m_w0_avmm_msg_receiver_translator (
		.clk                    (altpll_0_c0_clk),                                    //                      clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset),      //                    reset.reset
		.uav_address            (mbox_m_w0_avmm_msg_receiver_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (mbox_m_w0_avmm_msg_receiver_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (mbox_m_w0_avmm_msg_receiver_agent_m0_read),          //                         .read
		.uav_write              (mbox_m_w0_avmm_msg_receiver_agent_m0_write),         //                         .write
		.uav_waitrequest        (mbox_m_w0_avmm_msg_receiver_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (mbox_m_w0_avmm_msg_receiver_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (mbox_m_w0_avmm_msg_receiver_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (mbox_m_w0_avmm_msg_receiver_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (mbox_m_w0_avmm_msg_receiver_agent_m0_writedata),     //                         .writedata
		.uav_lock               (mbox_m_w0_avmm_msg_receiver_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (mbox_m_w0_avmm_msg_receiver_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (mbox_m_w0_avmm_msg_receiver_address),                //      avalon_anti_slave_0.address
		.av_write               (mbox_m_w0_avmm_msg_receiver_write),                  //                         .write
		.av_read                (mbox_m_w0_avmm_msg_receiver_read),                   //                         .read
		.av_readdata            (mbox_m_w0_avmm_msg_receiver_readdata),               //                         .readdata
		.av_writedata           (mbox_m_w0_avmm_msg_receiver_writedata),              //                         .writedata
		.av_begintransfer       (),                                                   //              (terminated)
		.av_beginbursttransfer  (),                                                   //              (terminated)
		.av_burstcount          (),                                                   //              (terminated)
		.av_byteenable          (),                                                   //              (terminated)
		.av_readdatavalid       (1'b0),                                               //              (terminated)
		.av_waitrequest         (1'b0),                                               //              (terminated)
		.av_writebyteenable     (),                                                   //              (terminated)
		.av_lock                (),                                                   //              (terminated)
		.av_chipselect          (),                                                   //              (terminated)
		.av_clken               (),                                                   //              (terminated)
		.uav_clken              (1'b0),                                               //              (terminated)
		.av_debugaccess         (),                                                   //              (terminated)
		.av_outputenable        (),                                                   //              (terminated)
		.uav_response           (),                                                   //              (terminated)
		.av_response            (2'b00),                                              //              (terminated)
		.uav_writeresponsevalid (),                                                   //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) mbox_m_w1_avmm_msg_receiver_translator (
		.clk                    (altpll_0_c0_clk),                                    //                      clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset),      //                    reset.reset
		.uav_address            (mbox_m_w1_avmm_msg_receiver_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (mbox_m_w1_avmm_msg_receiver_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (mbox_m_w1_avmm_msg_receiver_agent_m0_read),          //                         .read
		.uav_write              (mbox_m_w1_avmm_msg_receiver_agent_m0_write),         //                         .write
		.uav_waitrequest        (mbox_m_w1_avmm_msg_receiver_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (mbox_m_w1_avmm_msg_receiver_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (mbox_m_w1_avmm_msg_receiver_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (mbox_m_w1_avmm_msg_receiver_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (mbox_m_w1_avmm_msg_receiver_agent_m0_writedata),     //                         .writedata
		.uav_lock               (mbox_m_w1_avmm_msg_receiver_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (mbox_m_w1_avmm_msg_receiver_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (mbox_m_w1_avmm_msg_receiver_address),                //      avalon_anti_slave_0.address
		.av_write               (mbox_m_w1_avmm_msg_receiver_write),                  //                         .write
		.av_read                (mbox_m_w1_avmm_msg_receiver_read),                   //                         .read
		.av_readdata            (mbox_m_w1_avmm_msg_receiver_readdata),               //                         .readdata
		.av_writedata           (mbox_m_w1_avmm_msg_receiver_writedata),              //                         .writedata
		.av_begintransfer       (),                                                   //              (terminated)
		.av_beginbursttransfer  (),                                                   //              (terminated)
		.av_burstcount          (),                                                   //              (terminated)
		.av_byteenable          (),                                                   //              (terminated)
		.av_readdatavalid       (1'b0),                                               //              (terminated)
		.av_waitrequest         (1'b0),                                               //              (terminated)
		.av_writebyteenable     (),                                                   //              (terminated)
		.av_lock                (),                                                   //              (terminated)
		.av_chipselect          (),                                                   //              (terminated)
		.av_clken               (),                                                   //              (terminated)
		.uav_clken              (1'b0),                                               //              (terminated)
		.av_debugaccess         (),                                                   //              (terminated)
		.av_outputenable        (),                                                   //              (terminated)
		.uav_response           (),                                                   //              (terminated)
		.av_response            (2'b00),                                              //              (terminated)
		.uav_writeresponsevalid (),                                                   //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_QOS_H                 (84),
		.PKT_QOS_L                 (84),
		.PKT_DATA_SIDEBAND_H       (82),
		.PKT_DATA_SIDEBAND_L       (82),
		.PKT_ADDR_SIDEBAND_H       (81),
		.PKT_ADDR_SIDEBAND_L       (81),
		.PKT_BURST_TYPE_H          (80),
		.PKT_BURST_TYPE_L          (79),
		.PKT_CACHE_H               (102),
		.PKT_CACHE_L               (99),
		.PKT_THREAD_ID_H           (95),
		.PKT_THREAD_ID_L           (95),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_EXCLUSIVE       (69),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.ST_DATA_W                 (108),
		.ST_CHANNEL_W              (19),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) manager_data_master_agent (
		.clk                   (altpll_0_c0_clk),                                                        //       clk.clk
		.reset                 (manager_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.av_address            (manager_data_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (manager_data_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (manager_data_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (manager_data_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (manager_data_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (manager_data_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (manager_data_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (manager_data_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (manager_data_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (manager_data_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (manager_data_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (manager_data_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (manager_data_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (manager_data_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (manager_data_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (manager_data_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (manager_data_master_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (manager_data_master_limiter_rsp_src_data),                               //          .data
		.rp_channel            (manager_data_master_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (manager_data_master_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (manager_data_master_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (manager_data_master_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                       // (terminated)
		.av_writeresponsevalid ()                                                                        // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_QOS_H                 (84),
		.PKT_QOS_L                 (84),
		.PKT_DATA_SIDEBAND_H       (82),
		.PKT_DATA_SIDEBAND_L       (82),
		.PKT_ADDR_SIDEBAND_H       (81),
		.PKT_ADDR_SIDEBAND_L       (81),
		.PKT_BURST_TYPE_H          (80),
		.PKT_BURST_TYPE_L          (79),
		.PKT_CACHE_H               (102),
		.PKT_CACHE_L               (99),
		.PKT_THREAD_ID_H           (95),
		.PKT_THREAD_ID_L           (95),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_EXCLUSIVE       (69),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.ST_DATA_W                 (108),
		.ST_CHANNEL_W              (19),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (1),
		.BURSTWRAP_VALUE           (3),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) manager_instruction_master_agent (
		.clk                   (altpll_0_c0_clk),                                                               //       clk.clk
		.reset                 (manager_reset_reset_bridge_in_reset_reset),                                     // clk_reset.reset
		.av_address            (manager_instruction_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (manager_instruction_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (manager_instruction_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (manager_instruction_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (manager_instruction_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (manager_instruction_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (manager_instruction_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (manager_instruction_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (manager_instruction_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (manager_instruction_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (manager_instruction_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (manager_instruction_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (manager_instruction_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (manager_instruction_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (manager_instruction_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (manager_instruction_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (manager_instruction_master_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (manager_instruction_master_limiter_rsp_src_data),                               //          .data
		.rp_channel            (manager_instruction_master_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (manager_instruction_master_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (manager_instruction_master_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (manager_instruction_master_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                              // (terminated)
		.av_writeresponsevalid ()                                                                               // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_QOS_H                 (84),
		.PKT_QOS_L                 (84),
		.PKT_DATA_SIDEBAND_H       (82),
		.PKT_DATA_SIDEBAND_L       (82),
		.PKT_ADDR_SIDEBAND_H       (81),
		.PKT_ADDR_SIDEBAND_L       (81),
		.PKT_BURST_TYPE_H          (80),
		.PKT_BURST_TYPE_L          (79),
		.PKT_CACHE_H               (102),
		.PKT_CACHE_L               (99),
		.PKT_THREAD_ID_H           (95),
		.PKT_THREAD_ID_L           (95),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_EXCLUSIVE       (69),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.ST_DATA_W                 (108),
		.ST_CHANNEL_W              (19),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (2),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) worker0_wout_agent (
		.clk                   (altpll_0_c0_clk),                                                 //       clk.clk
		.reset                 (jtag_uart_0_reset_reset_bridge_in_reset_reset),                   // clk_reset.reset
		.av_address            (worker0_wout_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (worker0_wout_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (worker0_wout_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (worker0_wout_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (worker0_wout_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (worker0_wout_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (worker0_wout_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (worker0_wout_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (worker0_wout_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (worker0_wout_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (worker0_wout_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (worker0_wout_agent_cp_valid),                                     //        cp.valid
		.cp_data               (worker0_wout_agent_cp_data),                                      //          .data
		.cp_startofpacket      (worker0_wout_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (worker0_wout_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (worker0_wout_agent_cp_ready),                                     //          .ready
		.rp_valid              (worker0_wout_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (worker0_wout_limiter_rsp_src_data),                               //          .data
		.rp_channel            (worker0_wout_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (worker0_wout_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (worker0_wout_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (worker0_wout_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                // (terminated)
		.av_writeresponsevalid ()                                                                 // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_QOS_H                 (84),
		.PKT_QOS_L                 (84),
		.PKT_DATA_SIDEBAND_H       (82),
		.PKT_DATA_SIDEBAND_L       (82),
		.PKT_ADDR_SIDEBAND_H       (81),
		.PKT_ADDR_SIDEBAND_L       (81),
		.PKT_BURST_TYPE_H          (80),
		.PKT_BURST_TYPE_L          (79),
		.PKT_CACHE_H               (102),
		.PKT_CACHE_L               (99),
		.PKT_THREAD_ID_H           (95),
		.PKT_THREAD_ID_L           (95),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_EXCLUSIVE       (69),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.ST_DATA_W                 (108),
		.ST_CHANNEL_W              (19),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (3),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) worker1_wout_agent (
		.clk                   (altpll_0_c0_clk),                                                 //       clk.clk
		.reset                 (jtag_uart_0_reset_reset_bridge_in_reset_reset),                   // clk_reset.reset
		.av_address            (worker1_wout_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (worker1_wout_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (worker1_wout_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (worker1_wout_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (worker1_wout_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (worker1_wout_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (worker1_wout_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (worker1_wout_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (worker1_wout_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (worker1_wout_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (worker1_wout_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (worker1_wout_agent_cp_valid),                                     //        cp.valid
		.cp_data               (worker1_wout_agent_cp_data),                                      //          .data
		.cp_startofpacket      (worker1_wout_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (worker1_wout_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (worker1_wout_agent_cp_ready),                                     //          .ready
		.rp_valid              (worker1_wout_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (worker1_wout_limiter_rsp_src_data),                               //          .data
		.rp_channel            (worker1_wout_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (worker1_wout_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (worker1_wout_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (worker1_wout_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                // (terminated)
		.av_writeresponsevalid ()                                                                 // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_QOS_H                 (84),
		.PKT_QOS_L                 (84),
		.PKT_DATA_SIDEBAND_H       (82),
		.PKT_DATA_SIDEBAND_L       (82),
		.PKT_ADDR_SIDEBAND_H       (81),
		.PKT_ADDR_SIDEBAND_L       (81),
		.PKT_BURST_TYPE_H          (80),
		.PKT_BURST_TYPE_L          (79),
		.PKT_CACHE_H               (102),
		.PKT_CACHE_L               (99),
		.PKT_THREAD_ID_H           (95),
		.PKT_THREAD_ID_L           (95),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_EXCLUSIVE       (69),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.ST_DATA_W                 (108),
		.ST_CHANNEL_W              (19),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (4),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) worker2_wout_agent (
		.clk                   (altpll_0_c0_clk),                                                 //       clk.clk
		.reset                 (jtag_uart_0_reset_reset_bridge_in_reset_reset),                   // clk_reset.reset
		.av_address            (worker2_wout_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (worker2_wout_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (worker2_wout_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (worker2_wout_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (worker2_wout_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (worker2_wout_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (worker2_wout_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (worker2_wout_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (worker2_wout_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (worker2_wout_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (worker2_wout_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (worker2_wout_agent_cp_valid),                                     //        cp.valid
		.cp_data               (worker2_wout_agent_cp_data),                                      //          .data
		.cp_startofpacket      (worker2_wout_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (worker2_wout_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (worker2_wout_agent_cp_ready),                                     //          .ready
		.rp_valid              (worker2_wout_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (worker2_wout_limiter_rsp_src_data),                               //          .data
		.rp_channel            (worker2_wout_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (worker2_wout_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (worker2_wout_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (worker2_wout_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                // (terminated)
		.av_writeresponsevalid ()                                                                 // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_QOS_H                 (84),
		.PKT_QOS_L                 (84),
		.PKT_DATA_SIDEBAND_H       (82),
		.PKT_DATA_SIDEBAND_L       (82),
		.PKT_ADDR_SIDEBAND_H       (81),
		.PKT_ADDR_SIDEBAND_L       (81),
		.PKT_BURST_TYPE_H          (80),
		.PKT_BURST_TYPE_L          (79),
		.PKT_CACHE_H               (102),
		.PKT_CACHE_L               (99),
		.PKT_THREAD_ID_H           (95),
		.PKT_THREAD_ID_L           (95),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_EXCLUSIVE       (69),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.ST_DATA_W                 (108),
		.ST_CHANNEL_W              (19),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (5),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) worker3_wout_agent (
		.clk                   (altpll_0_c0_clk),                                                 //       clk.clk
		.reset                 (jtag_uart_0_reset_reset_bridge_in_reset_reset),                   // clk_reset.reset
		.av_address            (worker3_wout_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (worker3_wout_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (worker3_wout_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (worker3_wout_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (worker3_wout_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (worker3_wout_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (worker3_wout_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (worker3_wout_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (worker3_wout_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (worker3_wout_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (worker3_wout_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (worker3_wout_agent_cp_valid),                                     //        cp.valid
		.cp_data               (worker3_wout_agent_cp_data),                                      //          .data
		.cp_startofpacket      (worker3_wout_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (worker3_wout_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (worker3_wout_agent_cp_ready),                                     //          .ready
		.rp_valid              (worker3_wout_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (worker3_wout_limiter_rsp_src_data),                               //          .data
		.rp_channel            (worker3_wout_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (worker3_wout_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (worker3_wout_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (worker3_wout_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                // (terminated)
		.av_writeresponsevalid ()                                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) jtag_uart_0_avalon_jtag_slave_agent (
		.clk                     (altpll_0_c0_clk),                                                //             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset),                  //       clk_reset.reset
		.m0_address              (jtag_uart_0_avalon_jtag_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (jtag_uart_0_avalon_jtag_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (jtag_uart_0_avalon_jtag_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (jtag_uart_0_avalon_jtag_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (jtag_uart_0_avalon_jtag_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (jtag_uart_0_avalon_jtag_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (jtag_uart_0_avalon_jtag_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (jtag_uart_0_avalon_jtag_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (jtag_uart_0_avalon_jtag_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (jtag_uart_0_avalon_jtag_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (jtag_uart_0_avalon_jtag_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (jtag_uart_0_avalon_jtag_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (jtag_uart_0_avalon_jtag_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (jtag_uart_0_avalon_jtag_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (jtag_uart_0_avalon_jtag_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (jtag_uart_0_avalon_jtag_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_src_ready),                                              //              cp.ready
		.cp_valid                (cmd_mux_src_valid),                                              //                .valid
		.cp_data                 (cmd_mux_src_data),                                               //                .data
		.cp_startofpacket        (cmd_mux_src_startofpacket),                                      //                .startofpacket
		.cp_endofpacket          (cmd_mux_src_endofpacket),                                        //                .endofpacket
		.cp_channel              (cmd_mux_src_channel),                                            //                .channel
		.rf_sink_ready           (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (jtag_uart_0_avalon_jtag_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (jtag_uart_0_avalon_jtag_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (jtag_uart_0_avalon_jtag_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (jtag_uart_0_avalon_jtag_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (jtag_uart_0_avalon_jtag_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                                  //                .error
		.rdata_fifo_src_ready    (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo (
		.clk               (altpll_0_c0_clk),                                                //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.in_data           (jtag_uart_0_avalon_jtag_slave_agent_rf_source_data),             //        in.data
		.in_valid          (jtag_uart_0_avalon_jtag_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (jtag_uart_0_avalon_jtag_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (jtag_uart_0_avalon_jtag_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (jtag_uart_0_avalon_jtag_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                          // (terminated)
		.csr_read          (1'b0),                                                           // (terminated)
		.csr_write         (1'b0),                                                           // (terminated)
		.csr_readdata      (),                                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                           // (terminated)
		.almost_full_data  (),                                                               // (terminated)
		.almost_empty_data (),                                                               // (terminated)
		.in_empty          (1'b0),                                                           // (terminated)
		.out_empty         (),                                                               // (terminated)
		.in_error          (1'b0),                                                           // (terminated)
		.out_error         (),                                                               // (terminated)
		.in_channel        (1'b0),                                                           // (terminated)
		.out_channel       ()                                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) mbox_m_w0_avmm_msg_sender_agent (
		.clk                     (altpll_0_c0_clk),                                            //             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset),              //       clk_reset.reset
		.m0_address              (mbox_m_w0_avmm_msg_sender_agent_m0_address),                 //              m0.address
		.m0_burstcount           (mbox_m_w0_avmm_msg_sender_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (mbox_m_w0_avmm_msg_sender_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (mbox_m_w0_avmm_msg_sender_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (mbox_m_w0_avmm_msg_sender_agent_m0_lock),                    //                .lock
		.m0_readdata             (mbox_m_w0_avmm_msg_sender_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (mbox_m_w0_avmm_msg_sender_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (mbox_m_w0_avmm_msg_sender_agent_m0_read),                    //                .read
		.m0_waitrequest          (mbox_m_w0_avmm_msg_sender_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (mbox_m_w0_avmm_msg_sender_agent_m0_writedata),               //                .writedata
		.m0_write                (mbox_m_w0_avmm_msg_sender_agent_m0_write),                   //                .write
		.rp_endofpacket          (mbox_m_w0_avmm_msg_sender_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (mbox_m_w0_avmm_msg_sender_agent_rp_ready),                   //                .ready
		.rp_valid                (mbox_m_w0_avmm_msg_sender_agent_rp_valid),                   //                .valid
		.rp_data                 (mbox_m_w0_avmm_msg_sender_agent_rp_data),                    //                .data
		.rp_startofpacket        (mbox_m_w0_avmm_msg_sender_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_001_src_ready),                                      //              cp.ready
		.cp_valid                (cmd_mux_001_src_valid),                                      //                .valid
		.cp_data                 (cmd_mux_001_src_data),                                       //                .data
		.cp_startofpacket        (cmd_mux_001_src_startofpacket),                              //                .startofpacket
		.cp_endofpacket          (cmd_mux_001_src_endofpacket),                                //                .endofpacket
		.cp_channel              (cmd_mux_001_src_channel),                                    //                .channel
		.rf_sink_ready           (mbox_m_w0_avmm_msg_sender_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (mbox_m_w0_avmm_msg_sender_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (mbox_m_w0_avmm_msg_sender_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (mbox_m_w0_avmm_msg_sender_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (mbox_m_w0_avmm_msg_sender_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (mbox_m_w0_avmm_msg_sender_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (mbox_m_w0_avmm_msg_sender_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (mbox_m_w0_avmm_msg_sender_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (mbox_m_w0_avmm_msg_sender_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (mbox_m_w0_avmm_msg_sender_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                          //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                           //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                          //                .error
		.rdata_fifo_src_ready    (mbox_m_w0_avmm_msg_sender_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (mbox_m_w0_avmm_msg_sender_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (mbox_m_w0_avmm_msg_sender_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                      //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                        //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) mbox_m_w0_avmm_msg_sender_agent_rsp_fifo (
		.clk               (altpll_0_c0_clk),                                            //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),              // clk_reset.reset
		.in_data           (mbox_m_w0_avmm_msg_sender_agent_rf_source_data),             //        in.data
		.in_valid          (mbox_m_w0_avmm_msg_sender_agent_rf_source_valid),            //          .valid
		.in_ready          (mbox_m_w0_avmm_msg_sender_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (mbox_m_w0_avmm_msg_sender_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (mbox_m_w0_avmm_msg_sender_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (mbox_m_w0_avmm_msg_sender_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (mbox_m_w0_avmm_msg_sender_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (mbox_m_w0_avmm_msg_sender_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (mbox_m_w0_avmm_msg_sender_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (mbox_m_w0_avmm_msg_sender_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                      // (terminated)
		.csr_read          (1'b0),                                                       // (terminated)
		.csr_write         (1'b0),                                                       // (terminated)
		.csr_readdata      (),                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                       // (terminated)
		.almost_full_data  (),                                                           // (terminated)
		.almost_empty_data (),                                                           // (terminated)
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.in_error          (1'b0),                                                       // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_channel        (1'b0),                                                       // (terminated)
		.out_channel       ()                                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) mbox_m_w1_avmm_msg_sender_agent (
		.clk                     (altpll_0_c0_clk),                                            //             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset),              //       clk_reset.reset
		.m0_address              (mbox_m_w1_avmm_msg_sender_agent_m0_address),                 //              m0.address
		.m0_burstcount           (mbox_m_w1_avmm_msg_sender_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (mbox_m_w1_avmm_msg_sender_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (mbox_m_w1_avmm_msg_sender_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (mbox_m_w1_avmm_msg_sender_agent_m0_lock),                    //                .lock
		.m0_readdata             (mbox_m_w1_avmm_msg_sender_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (mbox_m_w1_avmm_msg_sender_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (mbox_m_w1_avmm_msg_sender_agent_m0_read),                    //                .read
		.m0_waitrequest          (mbox_m_w1_avmm_msg_sender_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (mbox_m_w1_avmm_msg_sender_agent_m0_writedata),               //                .writedata
		.m0_write                (mbox_m_w1_avmm_msg_sender_agent_m0_write),                   //                .write
		.rp_endofpacket          (mbox_m_w1_avmm_msg_sender_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (mbox_m_w1_avmm_msg_sender_agent_rp_ready),                   //                .ready
		.rp_valid                (mbox_m_w1_avmm_msg_sender_agent_rp_valid),                   //                .valid
		.rp_data                 (mbox_m_w1_avmm_msg_sender_agent_rp_data),                    //                .data
		.rp_startofpacket        (mbox_m_w1_avmm_msg_sender_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_002_src_ready),                                      //              cp.ready
		.cp_valid                (cmd_mux_002_src_valid),                                      //                .valid
		.cp_data                 (cmd_mux_002_src_data),                                       //                .data
		.cp_startofpacket        (cmd_mux_002_src_startofpacket),                              //                .startofpacket
		.cp_endofpacket          (cmd_mux_002_src_endofpacket),                                //                .endofpacket
		.cp_channel              (cmd_mux_002_src_channel),                                    //                .channel
		.rf_sink_ready           (mbox_m_w1_avmm_msg_sender_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (mbox_m_w1_avmm_msg_sender_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (mbox_m_w1_avmm_msg_sender_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (mbox_m_w1_avmm_msg_sender_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (mbox_m_w1_avmm_msg_sender_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (mbox_m_w1_avmm_msg_sender_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (mbox_m_w1_avmm_msg_sender_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (mbox_m_w1_avmm_msg_sender_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (mbox_m_w1_avmm_msg_sender_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (mbox_m_w1_avmm_msg_sender_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                          //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                           //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                          //                .error
		.rdata_fifo_src_ready    (mbox_m_w1_avmm_msg_sender_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (mbox_m_w1_avmm_msg_sender_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (mbox_m_w1_avmm_msg_sender_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                      //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                        //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) mbox_m_w1_avmm_msg_sender_agent_rsp_fifo (
		.clk               (altpll_0_c0_clk),                                            //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),              // clk_reset.reset
		.in_data           (mbox_m_w1_avmm_msg_sender_agent_rf_source_data),             //        in.data
		.in_valid          (mbox_m_w1_avmm_msg_sender_agent_rf_source_valid),            //          .valid
		.in_ready          (mbox_m_w1_avmm_msg_sender_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (mbox_m_w1_avmm_msg_sender_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (mbox_m_w1_avmm_msg_sender_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (mbox_m_w1_avmm_msg_sender_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (mbox_m_w1_avmm_msg_sender_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (mbox_m_w1_avmm_msg_sender_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (mbox_m_w1_avmm_msg_sender_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (mbox_m_w1_avmm_msg_sender_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                      // (terminated)
		.csr_read          (1'b0),                                                       // (terminated)
		.csr_write         (1'b0),                                                       // (terminated)
		.csr_readdata      (),                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                       // (terminated)
		.almost_full_data  (),                                                           // (terminated)
		.almost_empty_data (),                                                           // (terminated)
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.in_error          (1'b0),                                                       // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_channel        (1'b0),                                                       // (terminated)
		.out_channel       ()                                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) mbox_m_w2_avmm_msg_sender_agent (
		.clk                     (altpll_0_c0_clk),                                            //             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset),              //       clk_reset.reset
		.m0_address              (mbox_m_w2_avmm_msg_sender_agent_m0_address),                 //              m0.address
		.m0_burstcount           (mbox_m_w2_avmm_msg_sender_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (mbox_m_w2_avmm_msg_sender_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (mbox_m_w2_avmm_msg_sender_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (mbox_m_w2_avmm_msg_sender_agent_m0_lock),                    //                .lock
		.m0_readdata             (mbox_m_w2_avmm_msg_sender_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (mbox_m_w2_avmm_msg_sender_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (mbox_m_w2_avmm_msg_sender_agent_m0_read),                    //                .read
		.m0_waitrequest          (mbox_m_w2_avmm_msg_sender_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (mbox_m_w2_avmm_msg_sender_agent_m0_writedata),               //                .writedata
		.m0_write                (mbox_m_w2_avmm_msg_sender_agent_m0_write),                   //                .write
		.rp_endofpacket          (mbox_m_w2_avmm_msg_sender_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (mbox_m_w2_avmm_msg_sender_agent_rp_ready),                   //                .ready
		.rp_valid                (mbox_m_w2_avmm_msg_sender_agent_rp_valid),                   //                .valid
		.rp_data                 (mbox_m_w2_avmm_msg_sender_agent_rp_data),                    //                .data
		.rp_startofpacket        (mbox_m_w2_avmm_msg_sender_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_003_src_ready),                                      //              cp.ready
		.cp_valid                (cmd_mux_003_src_valid),                                      //                .valid
		.cp_data                 (cmd_mux_003_src_data),                                       //                .data
		.cp_startofpacket        (cmd_mux_003_src_startofpacket),                              //                .startofpacket
		.cp_endofpacket          (cmd_mux_003_src_endofpacket),                                //                .endofpacket
		.cp_channel              (cmd_mux_003_src_channel),                                    //                .channel
		.rf_sink_ready           (mbox_m_w2_avmm_msg_sender_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (mbox_m_w2_avmm_msg_sender_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (mbox_m_w2_avmm_msg_sender_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (mbox_m_w2_avmm_msg_sender_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (mbox_m_w2_avmm_msg_sender_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (mbox_m_w2_avmm_msg_sender_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (mbox_m_w2_avmm_msg_sender_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (mbox_m_w2_avmm_msg_sender_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (mbox_m_w2_avmm_msg_sender_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (mbox_m_w2_avmm_msg_sender_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),                          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),                          //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),                           //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),                          //                .error
		.rdata_fifo_src_ready    (mbox_m_w2_avmm_msg_sender_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (mbox_m_w2_avmm_msg_sender_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (mbox_m_w2_avmm_msg_sender_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                      //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                        //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) mbox_m_w2_avmm_msg_sender_agent_rsp_fifo (
		.clk               (altpll_0_c0_clk),                                            //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),              // clk_reset.reset
		.in_data           (mbox_m_w2_avmm_msg_sender_agent_rf_source_data),             //        in.data
		.in_valid          (mbox_m_w2_avmm_msg_sender_agent_rf_source_valid),            //          .valid
		.in_ready          (mbox_m_w2_avmm_msg_sender_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (mbox_m_w2_avmm_msg_sender_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (mbox_m_w2_avmm_msg_sender_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (mbox_m_w2_avmm_msg_sender_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (mbox_m_w2_avmm_msg_sender_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (mbox_m_w2_avmm_msg_sender_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (mbox_m_w2_avmm_msg_sender_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (mbox_m_w2_avmm_msg_sender_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                      // (terminated)
		.csr_read          (1'b0),                                                       // (terminated)
		.csr_write         (1'b0),                                                       // (terminated)
		.csr_readdata      (),                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                       // (terminated)
		.almost_full_data  (),                                                           // (terminated)
		.almost_empty_data (),                                                           // (terminated)
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.in_error          (1'b0),                                                       // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_channel        (1'b0),                                                       // (terminated)
		.out_channel       ()                                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) mbox_m_w3_avmm_msg_sender_agent (
		.clk                     (altpll_0_c0_clk),                                            //             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset),              //       clk_reset.reset
		.m0_address              (mbox_m_w3_avmm_msg_sender_agent_m0_address),                 //              m0.address
		.m0_burstcount           (mbox_m_w3_avmm_msg_sender_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (mbox_m_w3_avmm_msg_sender_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (mbox_m_w3_avmm_msg_sender_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (mbox_m_w3_avmm_msg_sender_agent_m0_lock),                    //                .lock
		.m0_readdata             (mbox_m_w3_avmm_msg_sender_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (mbox_m_w3_avmm_msg_sender_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (mbox_m_w3_avmm_msg_sender_agent_m0_read),                    //                .read
		.m0_waitrequest          (mbox_m_w3_avmm_msg_sender_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (mbox_m_w3_avmm_msg_sender_agent_m0_writedata),               //                .writedata
		.m0_write                (mbox_m_w3_avmm_msg_sender_agent_m0_write),                   //                .write
		.rp_endofpacket          (mbox_m_w3_avmm_msg_sender_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (mbox_m_w3_avmm_msg_sender_agent_rp_ready),                   //                .ready
		.rp_valid                (mbox_m_w3_avmm_msg_sender_agent_rp_valid),                   //                .valid
		.rp_data                 (mbox_m_w3_avmm_msg_sender_agent_rp_data),                    //                .data
		.rp_startofpacket        (mbox_m_w3_avmm_msg_sender_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_004_src_ready),                                      //              cp.ready
		.cp_valid                (cmd_mux_004_src_valid),                                      //                .valid
		.cp_data                 (cmd_mux_004_src_data),                                       //                .data
		.cp_startofpacket        (cmd_mux_004_src_startofpacket),                              //                .startofpacket
		.cp_endofpacket          (cmd_mux_004_src_endofpacket),                                //                .endofpacket
		.cp_channel              (cmd_mux_004_src_channel),                                    //                .channel
		.rf_sink_ready           (mbox_m_w3_avmm_msg_sender_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (mbox_m_w3_avmm_msg_sender_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (mbox_m_w3_avmm_msg_sender_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (mbox_m_w3_avmm_msg_sender_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (mbox_m_w3_avmm_msg_sender_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (mbox_m_w3_avmm_msg_sender_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (mbox_m_w3_avmm_msg_sender_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (mbox_m_w3_avmm_msg_sender_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (mbox_m_w3_avmm_msg_sender_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (mbox_m_w3_avmm_msg_sender_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_004_out_0_ready),                          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_004_out_0_valid),                          //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_004_out_0_data),                           //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_004_out_0_error),                          //                .error
		.rdata_fifo_src_ready    (mbox_m_w3_avmm_msg_sender_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (mbox_m_w3_avmm_msg_sender_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (mbox_m_w3_avmm_msg_sender_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                      //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                        //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) mbox_m_w3_avmm_msg_sender_agent_rsp_fifo (
		.clk               (altpll_0_c0_clk),                                            //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),              // clk_reset.reset
		.in_data           (mbox_m_w3_avmm_msg_sender_agent_rf_source_data),             //        in.data
		.in_valid          (mbox_m_w3_avmm_msg_sender_agent_rf_source_valid),            //          .valid
		.in_ready          (mbox_m_w3_avmm_msg_sender_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (mbox_m_w3_avmm_msg_sender_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (mbox_m_w3_avmm_msg_sender_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (mbox_m_w3_avmm_msg_sender_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (mbox_m_w3_avmm_msg_sender_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (mbox_m_w3_avmm_msg_sender_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (mbox_m_w3_avmm_msg_sender_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (mbox_m_w3_avmm_msg_sender_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                      // (terminated)
		.csr_read          (1'b0),                                                       // (terminated)
		.csr_write         (1'b0),                                                       // (terminated)
		.csr_readdata      (),                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                       // (terminated)
		.almost_full_data  (),                                                           // (terminated)
		.almost_empty_data (),                                                           // (terminated)
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.in_error          (1'b0),                                                       // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_channel        (1'b0),                                                       // (terminated)
		.out_channel       ()                                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) performance_counter_0_control_slave_agent (
		.clk                     (altpll_0_c0_clk),                                                      //             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset),                        //       clk_reset.reset
		.m0_address              (performance_counter_0_control_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (performance_counter_0_control_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (performance_counter_0_control_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (performance_counter_0_control_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (performance_counter_0_control_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (performance_counter_0_control_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (performance_counter_0_control_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (performance_counter_0_control_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (performance_counter_0_control_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (performance_counter_0_control_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (performance_counter_0_control_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (performance_counter_0_control_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (performance_counter_0_control_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (performance_counter_0_control_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (performance_counter_0_control_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (performance_counter_0_control_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_005_src_ready),                                                //              cp.ready
		.cp_valid                (cmd_mux_005_src_valid),                                                //                .valid
		.cp_data                 (cmd_mux_005_src_data),                                                 //                .data
		.cp_startofpacket        (cmd_mux_005_src_startofpacket),                                        //                .startofpacket
		.cp_endofpacket          (cmd_mux_005_src_endofpacket),                                          //                .endofpacket
		.cp_channel              (cmd_mux_005_src_channel),                                              //                .channel
		.rf_sink_ready           (performance_counter_0_control_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (performance_counter_0_control_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (performance_counter_0_control_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (performance_counter_0_control_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (performance_counter_0_control_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (performance_counter_0_control_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (performance_counter_0_control_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (performance_counter_0_control_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (performance_counter_0_control_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (performance_counter_0_control_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_005_out_0_ready),                                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_005_out_0_valid),                                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_005_out_0_data),                                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_005_out_0_error),                                    //                .error
		.rdata_fifo_src_ready    (performance_counter_0_control_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (performance_counter_0_control_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (performance_counter_0_control_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) performance_counter_0_control_slave_agent_rsp_fifo (
		.clk               (altpll_0_c0_clk),                                                      //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),                        // clk_reset.reset
		.in_data           (performance_counter_0_control_slave_agent_rf_source_data),             //        in.data
		.in_valid          (performance_counter_0_control_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (performance_counter_0_control_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (performance_counter_0_control_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (performance_counter_0_control_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (performance_counter_0_control_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (performance_counter_0_control_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (performance_counter_0_control_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (performance_counter_0_control_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (performance_counter_0_control_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                // (terminated)
		.csr_read          (1'b0),                                                                 // (terminated)
		.csr_write         (1'b0),                                                                 // (terminated)
		.csr_readdata      (),                                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                 // (terminated)
		.almost_full_data  (),                                                                     // (terminated)
		.almost_empty_data (),                                                                     // (terminated)
		.in_empty          (1'b0),                                                                 // (terminated)
		.out_empty         (),                                                                     // (terminated)
		.in_error          (1'b0),                                                                 // (terminated)
		.out_error         (),                                                                     // (terminated)
		.in_channel        (1'b0),                                                                 // (terminated)
		.out_channel       ()                                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) manager_debug_mem_slave_agent (
		.clk                     (altpll_0_c0_clk),                                          //             clk.clk
		.reset                   (manager_reset_reset_bridge_in_reset_reset),                //       clk_reset.reset
		.m0_address              (manager_debug_mem_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (manager_debug_mem_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (manager_debug_mem_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (manager_debug_mem_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (manager_debug_mem_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (manager_debug_mem_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (manager_debug_mem_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (manager_debug_mem_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (manager_debug_mem_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (manager_debug_mem_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (manager_debug_mem_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (manager_debug_mem_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (manager_debug_mem_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (manager_debug_mem_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (manager_debug_mem_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (manager_debug_mem_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_006_src_ready),                                    //              cp.ready
		.cp_valid                (cmd_mux_006_src_valid),                                    //                .valid
		.cp_data                 (cmd_mux_006_src_data),                                     //                .data
		.cp_startofpacket        (cmd_mux_006_src_startofpacket),                            //                .startofpacket
		.cp_endofpacket          (cmd_mux_006_src_endofpacket),                              //                .endofpacket
		.cp_channel              (cmd_mux_006_src_channel),                                  //                .channel
		.rf_sink_ready           (manager_debug_mem_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (manager_debug_mem_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (manager_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (manager_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (manager_debug_mem_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (manager_debug_mem_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (manager_debug_mem_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (manager_debug_mem_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (manager_debug_mem_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (manager_debug_mem_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_006_out_0_ready),                        // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_006_out_0_valid),                        //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_006_out_0_data),                         //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_006_out_0_error),                        //                .error
		.rdata_fifo_src_ready    (manager_debug_mem_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (manager_debug_mem_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (manager_debug_mem_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                      //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) manager_debug_mem_slave_agent_rsp_fifo (
		.clk               (altpll_0_c0_clk),                                          //       clk.clk
		.reset             (manager_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_data           (manager_debug_mem_slave_agent_rf_source_data),             //        in.data
		.in_valid          (manager_debug_mem_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (manager_debug_mem_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (manager_debug_mem_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (manager_debug_mem_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (manager_debug_mem_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (manager_debug_mem_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (manager_debug_mem_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (manager_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (manager_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                    // (terminated)
		.csr_read          (1'b0),                                                     // (terminated)
		.csr_write         (1'b0),                                                     // (terminated)
		.csr_readdata      (),                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                     // (terminated)
		.almost_full_data  (),                                                         // (terminated)
		.almost_empty_data (),                                                         // (terminated)
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.in_error          (1'b0),                                                     // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_channel        (1'b0),                                                     // (terminated)
		.out_channel       ()                                                          // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) req_fifo_out_agent (
		.clk                     (altpll_0_c0_clk),                               //             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (req_fifo_out_agent_m0_address),                 //              m0.address
		.m0_burstcount           (req_fifo_out_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (req_fifo_out_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (req_fifo_out_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (req_fifo_out_agent_m0_lock),                    //                .lock
		.m0_readdata             (req_fifo_out_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (req_fifo_out_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (req_fifo_out_agent_m0_read),                    //                .read
		.m0_waitrequest          (req_fifo_out_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (req_fifo_out_agent_m0_writedata),               //                .writedata
		.m0_write                (req_fifo_out_agent_m0_write),                   //                .write
		.rp_endofpacket          (req_fifo_out_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (req_fifo_out_agent_rp_ready),                   //                .ready
		.rp_valid                (req_fifo_out_agent_rp_valid),                   //                .valid
		.rp_data                 (req_fifo_out_agent_rp_data),                    //                .data
		.rp_startofpacket        (req_fifo_out_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_007_src_ready),                         //              cp.ready
		.cp_valid                (cmd_mux_007_src_valid),                         //                .valid
		.cp_data                 (cmd_mux_007_src_data),                          //                .data
		.cp_startofpacket        (cmd_mux_007_src_startofpacket),                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_007_src_endofpacket),                   //                .endofpacket
		.cp_channel              (cmd_mux_007_src_channel),                       //                .channel
		.rf_sink_ready           (req_fifo_out_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (req_fifo_out_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (req_fifo_out_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (req_fifo_out_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (req_fifo_out_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (req_fifo_out_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (req_fifo_out_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (req_fifo_out_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (req_fifo_out_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (req_fifo_out_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_007_out_0_ready),             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_007_out_0_valid),             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_007_out_0_data),              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_007_out_0_error),             //                .error
		.rdata_fifo_src_ready    (req_fifo_out_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (req_fifo_out_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (req_fifo_out_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) req_fifo_out_agent_rsp_fifo (
		.clk               (altpll_0_c0_clk),                               //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (req_fifo_out_agent_rf_source_data),             //        in.data
		.in_valid          (req_fifo_out_agent_rf_source_valid),            //          .valid
		.in_ready          (req_fifo_out_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (req_fifo_out_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (req_fifo_out_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (req_fifo_out_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (req_fifo_out_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (req_fifo_out_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (req_fifo_out_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (req_fifo_out_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) req_fifo_out_csr_agent (
		.clk                     (altpll_0_c0_clk),                                   //             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset),     //       clk_reset.reset
		.m0_address              (req_fifo_out_csr_agent_m0_address),                 //              m0.address
		.m0_burstcount           (req_fifo_out_csr_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (req_fifo_out_csr_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (req_fifo_out_csr_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (req_fifo_out_csr_agent_m0_lock),                    //                .lock
		.m0_readdata             (req_fifo_out_csr_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (req_fifo_out_csr_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (req_fifo_out_csr_agent_m0_read),                    //                .read
		.m0_waitrequest          (req_fifo_out_csr_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (req_fifo_out_csr_agent_m0_writedata),               //                .writedata
		.m0_write                (req_fifo_out_csr_agent_m0_write),                   //                .write
		.rp_endofpacket          (req_fifo_out_csr_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (req_fifo_out_csr_agent_rp_ready),                   //                .ready
		.rp_valid                (req_fifo_out_csr_agent_rp_valid),                   //                .valid
		.rp_data                 (req_fifo_out_csr_agent_rp_data),                    //                .data
		.rp_startofpacket        (req_fifo_out_csr_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_008_src_ready),                             //              cp.ready
		.cp_valid                (cmd_mux_008_src_valid),                             //                .valid
		.cp_data                 (cmd_mux_008_src_data),                              //                .data
		.cp_startofpacket        (cmd_mux_008_src_startofpacket),                     //                .startofpacket
		.cp_endofpacket          (cmd_mux_008_src_endofpacket),                       //                .endofpacket
		.cp_channel              (cmd_mux_008_src_channel),                           //                .channel
		.rf_sink_ready           (req_fifo_out_csr_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (req_fifo_out_csr_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (req_fifo_out_csr_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (req_fifo_out_csr_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (req_fifo_out_csr_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (req_fifo_out_csr_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (req_fifo_out_csr_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (req_fifo_out_csr_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (req_fifo_out_csr_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (req_fifo_out_csr_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_008_out_0_ready),                 // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_008_out_0_valid),                 //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_008_out_0_data),                  //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_008_out_0_error),                 //                .error
		.rdata_fifo_src_ready    (req_fifo_out_csr_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (req_fifo_out_csr_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (req_fifo_out_csr_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) req_fifo_out_csr_agent_rsp_fifo (
		.clk               (altpll_0_c0_clk),                                   //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_data           (req_fifo_out_csr_agent_rf_source_data),             //        in.data
		.in_valid          (req_fifo_out_csr_agent_rf_source_valid),            //          .valid
		.in_ready          (req_fifo_out_csr_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (req_fifo_out_csr_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (req_fifo_out_csr_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (req_fifo_out_csr_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (req_fifo_out_csr_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (req_fifo_out_csr_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (req_fifo_out_csr_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (req_fifo_out_csr_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) altpll_0_pll_slave_agent (
		.clk                     (clk_0_clk_clk),                                              //             clk.clk
		.reset                   (altpll_0_inclk_interface_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (altpll_0_pll_slave_agent_m0_address),                        //              m0.address
		.m0_burstcount           (altpll_0_pll_slave_agent_m0_burstcount),                     //                .burstcount
		.m0_byteenable           (altpll_0_pll_slave_agent_m0_byteenable),                     //                .byteenable
		.m0_debugaccess          (altpll_0_pll_slave_agent_m0_debugaccess),                    //                .debugaccess
		.m0_lock                 (altpll_0_pll_slave_agent_m0_lock),                           //                .lock
		.m0_readdata             (altpll_0_pll_slave_agent_m0_readdata),                       //                .readdata
		.m0_readdatavalid        (altpll_0_pll_slave_agent_m0_readdatavalid),                  //                .readdatavalid
		.m0_read                 (altpll_0_pll_slave_agent_m0_read),                           //                .read
		.m0_waitrequest          (altpll_0_pll_slave_agent_m0_waitrequest),                    //                .waitrequest
		.m0_writedata            (altpll_0_pll_slave_agent_m0_writedata),                      //                .writedata
		.m0_write                (altpll_0_pll_slave_agent_m0_write),                          //                .write
		.rp_endofpacket          (altpll_0_pll_slave_agent_rp_endofpacket),                    //              rp.endofpacket
		.rp_ready                (altpll_0_pll_slave_agent_rp_ready),                          //                .ready
		.rp_valid                (altpll_0_pll_slave_agent_rp_valid),                          //                .valid
		.rp_data                 (altpll_0_pll_slave_agent_rp_data),                           //                .data
		.rp_startofpacket        (altpll_0_pll_slave_agent_rp_startofpacket),                  //                .startofpacket
		.cp_ready                (cmd_mux_009_src_ready),                                      //              cp.ready
		.cp_valid                (cmd_mux_009_src_valid),                                      //                .valid
		.cp_data                 (cmd_mux_009_src_data),                                       //                .data
		.cp_startofpacket        (cmd_mux_009_src_startofpacket),                              //                .startofpacket
		.cp_endofpacket          (cmd_mux_009_src_endofpacket),                                //                .endofpacket
		.cp_channel              (cmd_mux_009_src_channel),                                    //                .channel
		.rf_sink_ready           (altpll_0_pll_slave_agent_rsp_fifo_out_ready),                //         rf_sink.ready
		.rf_sink_valid           (altpll_0_pll_slave_agent_rsp_fifo_out_valid),                //                .valid
		.rf_sink_startofpacket   (altpll_0_pll_slave_agent_rsp_fifo_out_startofpacket),        //                .startofpacket
		.rf_sink_endofpacket     (altpll_0_pll_slave_agent_rsp_fifo_out_endofpacket),          //                .endofpacket
		.rf_sink_data            (altpll_0_pll_slave_agent_rsp_fifo_out_data),                 //                .data
		.rf_source_ready         (altpll_0_pll_slave_agent_rf_source_ready),                   //       rf_source.ready
		.rf_source_valid         (altpll_0_pll_slave_agent_rf_source_valid),                   //                .valid
		.rf_source_startofpacket (altpll_0_pll_slave_agent_rf_source_startofpacket),           //                .startofpacket
		.rf_source_endofpacket   (altpll_0_pll_slave_agent_rf_source_endofpacket),             //                .endofpacket
		.rf_source_data          (altpll_0_pll_slave_agent_rf_source_data),                    //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_009_out_0_ready),                          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_009_out_0_valid),                          //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_009_out_0_data),                           //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_009_out_0_error),                          //                .error
		.rdata_fifo_src_ready    (altpll_0_pll_slave_agent_rdata_fifo_src_ready),              //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (altpll_0_pll_slave_agent_rdata_fifo_src_valid),              //                .valid
		.rdata_fifo_src_data     (altpll_0_pll_slave_agent_rdata_fifo_src_data),               //                .data
		.m0_response             (2'b00),                                                      //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                        //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) altpll_0_pll_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                              //       clk.clk
		.reset             (altpll_0_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (altpll_0_pll_slave_agent_rf_source_data),                    //        in.data
		.in_valid          (altpll_0_pll_slave_agent_rf_source_valid),                   //          .valid
		.in_ready          (altpll_0_pll_slave_agent_rf_source_ready),                   //          .ready
		.in_startofpacket  (altpll_0_pll_slave_agent_rf_source_startofpacket),           //          .startofpacket
		.in_endofpacket    (altpll_0_pll_slave_agent_rf_source_endofpacket),             //          .endofpacket
		.out_data          (altpll_0_pll_slave_agent_rsp_fifo_out_data),                 //       out.data
		.out_valid         (altpll_0_pll_slave_agent_rsp_fifo_out_valid),                //          .valid
		.out_ready         (altpll_0_pll_slave_agent_rsp_fifo_out_ready),                //          .ready
		.out_startofpacket (altpll_0_pll_slave_agent_rsp_fifo_out_startofpacket),        //          .startofpacket
		.out_endofpacket   (altpll_0_pll_slave_agent_rsp_fifo_out_endofpacket),          //          .endofpacket
		.csr_address       (2'b00),                                                      // (terminated)
		.csr_read          (1'b0),                                                       // (terminated)
		.csr_write         (1'b0),                                                       // (terminated)
		.csr_readdata      (),                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                       // (terminated)
		.almost_full_data  (),                                                           // (terminated)
		.almost_empty_data (),                                                           // (terminated)
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.in_error          (1'b0),                                                       // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_channel        (1'b0),                                                       // (terminated)
		.out_channel       ()                                                            // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) altpll_0_pll_slave_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                              //       clk.clk
		.reset             (altpll_0_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (altpll_0_pll_slave_agent_rdata_fifo_src_data),               //        in.data
		.in_valid          (altpll_0_pll_slave_agent_rdata_fifo_src_valid),              //          .valid
		.in_ready          (altpll_0_pll_slave_agent_rdata_fifo_src_ready),              //          .ready
		.out_data          (altpll_0_pll_slave_agent_rdata_fifo_out_data),               //       out.data
		.out_valid         (altpll_0_pll_slave_agent_rdata_fifo_out_valid),              //          .valid
		.out_ready         (altpll_0_pll_slave_agent_rdata_fifo_out_ready),              //          .ready
		.csr_address       (2'b00),                                                      // (terminated)
		.csr_read          (1'b0),                                                       // (terminated)
		.csr_write         (1'b0),                                                       // (terminated)
		.csr_readdata      (),                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                       // (terminated)
		.almost_full_data  (),                                                           // (terminated)
		.almost_empty_data (),                                                           // (terminated)
		.in_startofpacket  (1'b0),                                                       // (terminated)
		.in_endofpacket    (1'b0),                                                       // (terminated)
		.out_startofpacket (),                                                           // (terminated)
		.out_endofpacket   (),                                                           // (terminated)
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.in_error          (1'b0),                                                       // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_channel        (1'b0),                                                       // (terminated)
		.out_channel       ()                                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) shared_ocm_s1_agent (
		.clk                     (altpll_0_c0_clk),                                //             clk.clk
		.reset                   (manager_reset_reset_bridge_in_reset_reset),      //       clk_reset.reset
		.m0_address              (shared_ocm_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (shared_ocm_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (shared_ocm_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (shared_ocm_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (shared_ocm_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (shared_ocm_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (shared_ocm_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (shared_ocm_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (shared_ocm_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (shared_ocm_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (shared_ocm_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (shared_ocm_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (shared_ocm_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (shared_ocm_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (shared_ocm_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (shared_ocm_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_010_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_010_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_010_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_010_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_010_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_010_src_channel),                        //                .channel
		.rf_sink_ready           (shared_ocm_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (shared_ocm_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (shared_ocm_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (shared_ocm_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (shared_ocm_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (shared_ocm_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (shared_ocm_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (shared_ocm_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (shared_ocm_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (shared_ocm_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_010_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_010_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_010_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_010_out_0_error),              //                .error
		.rdata_fifo_src_ready    (shared_ocm_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (shared_ocm_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (shared_ocm_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) shared_ocm_s1_agent_rsp_fifo (
		.clk               (altpll_0_c0_clk),                                //       clk.clk
		.reset             (manager_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_data           (shared_ocm_s1_agent_rf_source_data),             //        in.data
		.in_valid          (shared_ocm_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (shared_ocm_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (shared_ocm_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (shared_ocm_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (shared_ocm_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (shared_ocm_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (shared_ocm_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (shared_ocm_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (shared_ocm_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sdram_0_sdout_agent (
		.clk                     (altpll_0_c0_clk),                                //             clk.clk
		.reset                   (manager_reset_reset_bridge_in_reset_reset),      //       clk_reset.reset
		.m0_address              (sdram_0_sdout_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sdram_0_sdout_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sdram_0_sdout_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sdram_0_sdout_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sdram_0_sdout_agent_m0_lock),                    //                .lock
		.m0_readdata             (sdram_0_sdout_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sdram_0_sdout_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sdram_0_sdout_agent_m0_read),                    //                .read
		.m0_waitrequest          (sdram_0_sdout_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sdram_0_sdout_agent_m0_writedata),               //                .writedata
		.m0_write                (sdram_0_sdout_agent_m0_write),                   //                .write
		.rp_endofpacket          (sdram_0_sdout_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sdram_0_sdout_agent_rp_ready),                   //                .ready
		.rp_valid                (sdram_0_sdout_agent_rp_valid),                   //                .valid
		.rp_data                 (sdram_0_sdout_agent_rp_data),                    //                .data
		.rp_startofpacket        (sdram_0_sdout_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_011_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_011_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_011_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_011_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_011_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_011_src_channel),                        //                .channel
		.rf_sink_ready           (sdram_0_sdout_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sdram_0_sdout_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sdram_0_sdout_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sdram_0_sdout_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sdram_0_sdout_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sdram_0_sdout_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sdram_0_sdout_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sdram_0_sdout_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sdram_0_sdout_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sdram_0_sdout_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_011_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_011_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_011_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_011_out_0_error),              //                .error
		.rdata_fifo_src_ready    (sdram_0_sdout_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sdram_0_sdout_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sdram_0_sdout_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (5),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sdram_0_sdout_agent_rsp_fifo (
		.clk               (altpll_0_c0_clk),                                //       clk.clk
		.reset             (manager_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_data           (sdram_0_sdout_agent_rf_source_data),             //        in.data
		.in_valid          (sdram_0_sdout_agent_rf_source_valid),            //          .valid
		.in_ready          (sdram_0_sdout_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sdram_0_sdout_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sdram_0_sdout_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sdram_0_sdout_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sdram_0_sdout_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sdram_0_sdout_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sdram_0_sdout_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sdram_0_sdout_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) mbox_m_w3_avmm_msg_receiver_agent (
		.clk                     (altpll_0_c0_clk),                                              //             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset),                //       clk_reset.reset
		.m0_address              (mbox_m_w3_avmm_msg_receiver_agent_m0_address),                 //              m0.address
		.m0_burstcount           (mbox_m_w3_avmm_msg_receiver_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (mbox_m_w3_avmm_msg_receiver_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (mbox_m_w3_avmm_msg_receiver_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (mbox_m_w3_avmm_msg_receiver_agent_m0_lock),                    //                .lock
		.m0_readdata             (mbox_m_w3_avmm_msg_receiver_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (mbox_m_w3_avmm_msg_receiver_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (mbox_m_w3_avmm_msg_receiver_agent_m0_read),                    //                .read
		.m0_waitrequest          (mbox_m_w3_avmm_msg_receiver_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (mbox_m_w3_avmm_msg_receiver_agent_m0_writedata),               //                .writedata
		.m0_write                (mbox_m_w3_avmm_msg_receiver_agent_m0_write),                   //                .write
		.rp_endofpacket          (mbox_m_w3_avmm_msg_receiver_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (mbox_m_w3_avmm_msg_receiver_agent_rp_ready),                   //                .ready
		.rp_valid                (mbox_m_w3_avmm_msg_receiver_agent_rp_valid),                   //                .valid
		.rp_data                 (mbox_m_w3_avmm_msg_receiver_agent_rp_data),                    //                .data
		.rp_startofpacket        (mbox_m_w3_avmm_msg_receiver_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_012_src_ready),                                        //              cp.ready
		.cp_valid                (cmd_mux_012_src_valid),                                        //                .valid
		.cp_data                 (cmd_mux_012_src_data),                                         //                .data
		.cp_startofpacket        (cmd_mux_012_src_startofpacket),                                //                .startofpacket
		.cp_endofpacket          (cmd_mux_012_src_endofpacket),                                  //                .endofpacket
		.cp_channel              (cmd_mux_012_src_channel),                                      //                .channel
		.rf_sink_ready           (mbox_m_w3_avmm_msg_receiver_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (mbox_m_w3_avmm_msg_receiver_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (mbox_m_w3_avmm_msg_receiver_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (mbox_m_w3_avmm_msg_receiver_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (mbox_m_w3_avmm_msg_receiver_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (mbox_m_w3_avmm_msg_receiver_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (mbox_m_w3_avmm_msg_receiver_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (mbox_m_w3_avmm_msg_receiver_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (mbox_m_w3_avmm_msg_receiver_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (mbox_m_w3_avmm_msg_receiver_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_012_out_0_ready),                            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_012_out_0_valid),                            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_012_out_0_data),                             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_012_out_0_error),                            //                .error
		.rdata_fifo_src_ready    (mbox_m_w3_avmm_msg_receiver_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (mbox_m_w3_avmm_msg_receiver_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (mbox_m_w3_avmm_msg_receiver_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) mbox_m_w3_avmm_msg_receiver_agent_rsp_fifo (
		.clk               (altpll_0_c0_clk),                                              //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_data           (mbox_m_w3_avmm_msg_receiver_agent_rf_source_data),             //        in.data
		.in_valid          (mbox_m_w3_avmm_msg_receiver_agent_rf_source_valid),            //          .valid
		.in_ready          (mbox_m_w3_avmm_msg_receiver_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (mbox_m_w3_avmm_msg_receiver_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (mbox_m_w3_avmm_msg_receiver_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (mbox_m_w3_avmm_msg_receiver_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (mbox_m_w3_avmm_msg_receiver_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (mbox_m_w3_avmm_msg_receiver_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (mbox_m_w3_avmm_msg_receiver_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (mbox_m_w3_avmm_msg_receiver_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                        // (terminated)
		.csr_read          (1'b0),                                                         // (terminated)
		.csr_write         (1'b0),                                                         // (terminated)
		.csr_readdata      (),                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated)
		.almost_full_data  (),                                                             // (terminated)
		.almost_empty_data (),                                                             // (terminated)
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_channel        (1'b0),                                                         // (terminated)
		.out_channel       ()                                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) req_fifo_in_agent (
		.clk                     (altpll_0_c0_clk),                               //             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (req_fifo_in_agent_m0_address),                  //              m0.address
		.m0_burstcount           (req_fifo_in_agent_m0_burstcount),               //                .burstcount
		.m0_byteenable           (req_fifo_in_agent_m0_byteenable),               //                .byteenable
		.m0_debugaccess          (req_fifo_in_agent_m0_debugaccess),              //                .debugaccess
		.m0_lock                 (req_fifo_in_agent_m0_lock),                     //                .lock
		.m0_readdata             (req_fifo_in_agent_m0_readdata),                 //                .readdata
		.m0_readdatavalid        (req_fifo_in_agent_m0_readdatavalid),            //                .readdatavalid
		.m0_read                 (req_fifo_in_agent_m0_read),                     //                .read
		.m0_waitrequest          (req_fifo_in_agent_m0_waitrequest),              //                .waitrequest
		.m0_writedata            (req_fifo_in_agent_m0_writedata),                //                .writedata
		.m0_write                (req_fifo_in_agent_m0_write),                    //                .write
		.rp_endofpacket          (req_fifo_in_agent_rp_endofpacket),              //              rp.endofpacket
		.rp_ready                (req_fifo_in_agent_rp_ready),                    //                .ready
		.rp_valid                (req_fifo_in_agent_rp_valid),                    //                .valid
		.rp_data                 (req_fifo_in_agent_rp_data),                     //                .data
		.rp_startofpacket        (req_fifo_in_agent_rp_startofpacket),            //                .startofpacket
		.cp_ready                (cmd_mux_013_src_ready),                         //              cp.ready
		.cp_valid                (cmd_mux_013_src_valid),                         //                .valid
		.cp_data                 (cmd_mux_013_src_data),                          //                .data
		.cp_startofpacket        (cmd_mux_013_src_startofpacket),                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_013_src_endofpacket),                   //                .endofpacket
		.cp_channel              (cmd_mux_013_src_channel),                       //                .channel
		.rf_sink_ready           (req_fifo_in_agent_rsp_fifo_out_ready),          //         rf_sink.ready
		.rf_sink_valid           (req_fifo_in_agent_rsp_fifo_out_valid),          //                .valid
		.rf_sink_startofpacket   (req_fifo_in_agent_rsp_fifo_out_startofpacket),  //                .startofpacket
		.rf_sink_endofpacket     (req_fifo_in_agent_rsp_fifo_out_endofpacket),    //                .endofpacket
		.rf_sink_data            (req_fifo_in_agent_rsp_fifo_out_data),           //                .data
		.rf_source_ready         (req_fifo_in_agent_rf_source_ready),             //       rf_source.ready
		.rf_source_valid         (req_fifo_in_agent_rf_source_valid),             //                .valid
		.rf_source_startofpacket (req_fifo_in_agent_rf_source_startofpacket),     //                .startofpacket
		.rf_source_endofpacket   (req_fifo_in_agent_rf_source_endofpacket),       //                .endofpacket
		.rf_source_data          (req_fifo_in_agent_rf_source_data),              //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_013_out_0_ready),             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_013_out_0_valid),             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_013_out_0_data),              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_013_out_0_error),             //                .error
		.rdata_fifo_src_ready    (req_fifo_in_agent_rdata_fifo_src_ready),        //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (req_fifo_in_agent_rdata_fifo_src_valid),        //                .valid
		.rdata_fifo_src_data     (req_fifo_in_agent_rdata_fifo_src_data),         //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) req_fifo_in_agent_rsp_fifo (
		.clk               (altpll_0_c0_clk),                               //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (req_fifo_in_agent_rf_source_data),              //        in.data
		.in_valid          (req_fifo_in_agent_rf_source_valid),             //          .valid
		.in_ready          (req_fifo_in_agent_rf_source_ready),             //          .ready
		.in_startofpacket  (req_fifo_in_agent_rf_source_startofpacket),     //          .startofpacket
		.in_endofpacket    (req_fifo_in_agent_rf_source_endofpacket),       //          .endofpacket
		.out_data          (req_fifo_in_agent_rsp_fifo_out_data),           //       out.data
		.out_valid         (req_fifo_in_agent_rsp_fifo_out_valid),          //          .valid
		.out_ready         (req_fifo_in_agent_rsp_fifo_out_ready),          //          .ready
		.out_startofpacket (req_fifo_in_agent_rsp_fifo_out_startofpacket),  //          .startofpacket
		.out_endofpacket   (req_fifo_in_agent_rsp_fifo_out_endofpacket),    //          .endofpacket
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) req_fifo_in_csr_agent (
		.clk                     (altpll_0_c0_clk),                                  //             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset),    //       clk_reset.reset
		.m0_address              (req_fifo_in_csr_agent_m0_address),                 //              m0.address
		.m0_burstcount           (req_fifo_in_csr_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (req_fifo_in_csr_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (req_fifo_in_csr_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (req_fifo_in_csr_agent_m0_lock),                    //                .lock
		.m0_readdata             (req_fifo_in_csr_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (req_fifo_in_csr_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (req_fifo_in_csr_agent_m0_read),                    //                .read
		.m0_waitrequest          (req_fifo_in_csr_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (req_fifo_in_csr_agent_m0_writedata),               //                .writedata
		.m0_write                (req_fifo_in_csr_agent_m0_write),                   //                .write
		.rp_endofpacket          (req_fifo_in_csr_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (req_fifo_in_csr_agent_rp_ready),                   //                .ready
		.rp_valid                (req_fifo_in_csr_agent_rp_valid),                   //                .valid
		.rp_data                 (req_fifo_in_csr_agent_rp_data),                    //                .data
		.rp_startofpacket        (req_fifo_in_csr_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_014_src_ready),                            //              cp.ready
		.cp_valid                (cmd_mux_014_src_valid),                            //                .valid
		.cp_data                 (cmd_mux_014_src_data),                             //                .data
		.cp_startofpacket        (cmd_mux_014_src_startofpacket),                    //                .startofpacket
		.cp_endofpacket          (cmd_mux_014_src_endofpacket),                      //                .endofpacket
		.cp_channel              (cmd_mux_014_src_channel),                          //                .channel
		.rf_sink_ready           (req_fifo_in_csr_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (req_fifo_in_csr_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (req_fifo_in_csr_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (req_fifo_in_csr_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (req_fifo_in_csr_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (req_fifo_in_csr_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (req_fifo_in_csr_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (req_fifo_in_csr_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (req_fifo_in_csr_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (req_fifo_in_csr_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_014_out_0_ready),                // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_014_out_0_valid),                //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_014_out_0_data),                 //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_014_out_0_error),                //                .error
		.rdata_fifo_src_ready    (req_fifo_in_csr_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (req_fifo_in_csr_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (req_fifo_in_csr_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                            //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) req_fifo_in_csr_agent_rsp_fifo (
		.clk               (altpll_0_c0_clk),                                  //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_data           (req_fifo_in_csr_agent_rf_source_data),             //        in.data
		.in_valid          (req_fifo_in_csr_agent_rf_source_valid),            //          .valid
		.in_ready          (req_fifo_in_csr_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (req_fifo_in_csr_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (req_fifo_in_csr_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (req_fifo_in_csr_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (req_fifo_in_csr_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (req_fifo_in_csr_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (req_fifo_in_csr_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (req_fifo_in_csr_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) shared_ocm_s2_agent (
		.clk                     (altpll_0_c0_clk),                                //             clk.clk
		.reset                   (manager_reset_reset_bridge_in_reset_reset),      //       clk_reset.reset
		.m0_address              (shared_ocm_s2_agent_m0_address),                 //              m0.address
		.m0_burstcount           (shared_ocm_s2_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (shared_ocm_s2_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (shared_ocm_s2_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (shared_ocm_s2_agent_m0_lock),                    //                .lock
		.m0_readdata             (shared_ocm_s2_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (shared_ocm_s2_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (shared_ocm_s2_agent_m0_read),                    //                .read
		.m0_waitrequest          (shared_ocm_s2_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (shared_ocm_s2_agent_m0_writedata),               //                .writedata
		.m0_write                (shared_ocm_s2_agent_m0_write),                   //                .write
		.rp_endofpacket          (shared_ocm_s2_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (shared_ocm_s2_agent_rp_ready),                   //                .ready
		.rp_valid                (shared_ocm_s2_agent_rp_valid),                   //                .valid
		.rp_data                 (shared_ocm_s2_agent_rp_data),                    //                .data
		.rp_startofpacket        (shared_ocm_s2_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_015_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_015_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_015_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_015_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_015_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_015_src_channel),                        //                .channel
		.rf_sink_ready           (shared_ocm_s2_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (shared_ocm_s2_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (shared_ocm_s2_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (shared_ocm_s2_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (shared_ocm_s2_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (shared_ocm_s2_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (shared_ocm_s2_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (shared_ocm_s2_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (shared_ocm_s2_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (shared_ocm_s2_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_015_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_015_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_015_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_015_out_0_error),              //                .error
		.rdata_fifo_src_ready    (shared_ocm_s2_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (shared_ocm_s2_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (shared_ocm_s2_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) shared_ocm_s2_agent_rsp_fifo (
		.clk               (altpll_0_c0_clk),                                //       clk.clk
		.reset             (manager_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_data           (shared_ocm_s2_agent_rf_source_data),             //        in.data
		.in_valid          (shared_ocm_s2_agent_rf_source_valid),            //          .valid
		.in_ready          (shared_ocm_s2_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (shared_ocm_s2_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (shared_ocm_s2_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (shared_ocm_s2_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (shared_ocm_s2_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (shared_ocm_s2_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (shared_ocm_s2_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (shared_ocm_s2_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) mbox_m_w2_avmm_msg_receiver_agent (
		.clk                     (altpll_0_c0_clk),                                              //             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset),                //       clk_reset.reset
		.m0_address              (mbox_m_w2_avmm_msg_receiver_agent_m0_address),                 //              m0.address
		.m0_burstcount           (mbox_m_w2_avmm_msg_receiver_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (mbox_m_w2_avmm_msg_receiver_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (mbox_m_w2_avmm_msg_receiver_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (mbox_m_w2_avmm_msg_receiver_agent_m0_lock),                    //                .lock
		.m0_readdata             (mbox_m_w2_avmm_msg_receiver_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (mbox_m_w2_avmm_msg_receiver_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (mbox_m_w2_avmm_msg_receiver_agent_m0_read),                    //                .read
		.m0_waitrequest          (mbox_m_w2_avmm_msg_receiver_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (mbox_m_w2_avmm_msg_receiver_agent_m0_writedata),               //                .writedata
		.m0_write                (mbox_m_w2_avmm_msg_receiver_agent_m0_write),                   //                .write
		.rp_endofpacket          (mbox_m_w2_avmm_msg_receiver_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (mbox_m_w2_avmm_msg_receiver_agent_rp_ready),                   //                .ready
		.rp_valid                (mbox_m_w2_avmm_msg_receiver_agent_rp_valid),                   //                .valid
		.rp_data                 (mbox_m_w2_avmm_msg_receiver_agent_rp_data),                    //                .data
		.rp_startofpacket        (mbox_m_w2_avmm_msg_receiver_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_016_src_ready),                                        //              cp.ready
		.cp_valid                (cmd_mux_016_src_valid),                                        //                .valid
		.cp_data                 (cmd_mux_016_src_data),                                         //                .data
		.cp_startofpacket        (cmd_mux_016_src_startofpacket),                                //                .startofpacket
		.cp_endofpacket          (cmd_mux_016_src_endofpacket),                                  //                .endofpacket
		.cp_channel              (cmd_mux_016_src_channel),                                      //                .channel
		.rf_sink_ready           (mbox_m_w2_avmm_msg_receiver_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (mbox_m_w2_avmm_msg_receiver_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (mbox_m_w2_avmm_msg_receiver_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (mbox_m_w2_avmm_msg_receiver_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (mbox_m_w2_avmm_msg_receiver_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (mbox_m_w2_avmm_msg_receiver_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (mbox_m_w2_avmm_msg_receiver_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (mbox_m_w2_avmm_msg_receiver_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (mbox_m_w2_avmm_msg_receiver_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (mbox_m_w2_avmm_msg_receiver_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_016_out_0_ready),                            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_016_out_0_valid),                            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_016_out_0_data),                             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_016_out_0_error),                            //                .error
		.rdata_fifo_src_ready    (mbox_m_w2_avmm_msg_receiver_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (mbox_m_w2_avmm_msg_receiver_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (mbox_m_w2_avmm_msg_receiver_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) mbox_m_w2_avmm_msg_receiver_agent_rsp_fifo (
		.clk               (altpll_0_c0_clk),                                              //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_data           (mbox_m_w2_avmm_msg_receiver_agent_rf_source_data),             //        in.data
		.in_valid          (mbox_m_w2_avmm_msg_receiver_agent_rf_source_valid),            //          .valid
		.in_ready          (mbox_m_w2_avmm_msg_receiver_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (mbox_m_w2_avmm_msg_receiver_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (mbox_m_w2_avmm_msg_receiver_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (mbox_m_w2_avmm_msg_receiver_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (mbox_m_w2_avmm_msg_receiver_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (mbox_m_w2_avmm_msg_receiver_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (mbox_m_w2_avmm_msg_receiver_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (mbox_m_w2_avmm_msg_receiver_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                        // (terminated)
		.csr_read          (1'b0),                                                         // (terminated)
		.csr_write         (1'b0),                                                         // (terminated)
		.csr_readdata      (),                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated)
		.almost_full_data  (),                                                             // (terminated)
		.almost_empty_data (),                                                             // (terminated)
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_channel        (1'b0),                                                         // (terminated)
		.out_channel       ()                                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) mbox_m_w1_avmm_msg_receiver_agent (
		.clk                     (altpll_0_c0_clk),                                              //             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset),                //       clk_reset.reset
		.m0_address              (mbox_m_w1_avmm_msg_receiver_agent_m0_address),                 //              m0.address
		.m0_burstcount           (mbox_m_w1_avmm_msg_receiver_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (mbox_m_w1_avmm_msg_receiver_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (mbox_m_w1_avmm_msg_receiver_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (mbox_m_w1_avmm_msg_receiver_agent_m0_lock),                    //                .lock
		.m0_readdata             (mbox_m_w1_avmm_msg_receiver_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (mbox_m_w1_avmm_msg_receiver_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (mbox_m_w1_avmm_msg_receiver_agent_m0_read),                    //                .read
		.m0_waitrequest          (mbox_m_w1_avmm_msg_receiver_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (mbox_m_w1_avmm_msg_receiver_agent_m0_writedata),               //                .writedata
		.m0_write                (mbox_m_w1_avmm_msg_receiver_agent_m0_write),                   //                .write
		.rp_endofpacket          (mbox_m_w1_avmm_msg_receiver_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (mbox_m_w1_avmm_msg_receiver_agent_rp_ready),                   //                .ready
		.rp_valid                (mbox_m_w1_avmm_msg_receiver_agent_rp_valid),                   //                .valid
		.rp_data                 (mbox_m_w1_avmm_msg_receiver_agent_rp_data),                    //                .data
		.rp_startofpacket        (mbox_m_w1_avmm_msg_receiver_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_017_src_ready),                                        //              cp.ready
		.cp_valid                (cmd_mux_017_src_valid),                                        //                .valid
		.cp_data                 (cmd_mux_017_src_data),                                         //                .data
		.cp_startofpacket        (cmd_mux_017_src_startofpacket),                                //                .startofpacket
		.cp_endofpacket          (cmd_mux_017_src_endofpacket),                                  //                .endofpacket
		.cp_channel              (cmd_mux_017_src_channel),                                      //                .channel
		.rf_sink_ready           (mbox_m_w1_avmm_msg_receiver_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (mbox_m_w1_avmm_msg_receiver_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (mbox_m_w1_avmm_msg_receiver_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (mbox_m_w1_avmm_msg_receiver_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (mbox_m_w1_avmm_msg_receiver_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (mbox_m_w1_avmm_msg_receiver_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (mbox_m_w1_avmm_msg_receiver_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (mbox_m_w1_avmm_msg_receiver_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (mbox_m_w1_avmm_msg_receiver_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (mbox_m_w1_avmm_msg_receiver_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_017_out_0_ready),                            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_017_out_0_valid),                            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_017_out_0_data),                             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_017_out_0_error),                            //                .error
		.rdata_fifo_src_ready    (mbox_m_w1_avmm_msg_receiver_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (mbox_m_w1_avmm_msg_receiver_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (mbox_m_w1_avmm_msg_receiver_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) mbox_m_w1_avmm_msg_receiver_agent_rsp_fifo (
		.clk               (altpll_0_c0_clk),                                              //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_data           (mbox_m_w1_avmm_msg_receiver_agent_rf_source_data),             //        in.data
		.in_valid          (mbox_m_w1_avmm_msg_receiver_agent_rf_source_valid),            //          .valid
		.in_ready          (mbox_m_w1_avmm_msg_receiver_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (mbox_m_w1_avmm_msg_receiver_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (mbox_m_w1_avmm_msg_receiver_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (mbox_m_w1_avmm_msg_receiver_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (mbox_m_w1_avmm_msg_receiver_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (mbox_m_w1_avmm_msg_receiver_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (mbox_m_w1_avmm_msg_receiver_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (mbox_m_w1_avmm_msg_receiver_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                        // (terminated)
		.csr_read          (1'b0),                                                         // (terminated)
		.csr_write         (1'b0),                                                         // (terminated)
		.csr_readdata      (),                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated)
		.almost_full_data  (),                                                             // (terminated)
		.almost_empty_data (),                                                             // (terminated)
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_channel        (1'b0),                                                         // (terminated)
		.out_channel       ()                                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) mbox_m_w0_avmm_msg_receiver_agent (
		.clk                     (altpll_0_c0_clk),                                              //             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset),                //       clk_reset.reset
		.m0_address              (mbox_m_w0_avmm_msg_receiver_agent_m0_address),                 //              m0.address
		.m0_burstcount           (mbox_m_w0_avmm_msg_receiver_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (mbox_m_w0_avmm_msg_receiver_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (mbox_m_w0_avmm_msg_receiver_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (mbox_m_w0_avmm_msg_receiver_agent_m0_lock),                    //                .lock
		.m0_readdata             (mbox_m_w0_avmm_msg_receiver_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (mbox_m_w0_avmm_msg_receiver_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (mbox_m_w0_avmm_msg_receiver_agent_m0_read),                    //                .read
		.m0_waitrequest          (mbox_m_w0_avmm_msg_receiver_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (mbox_m_w0_avmm_msg_receiver_agent_m0_writedata),               //                .writedata
		.m0_write                (mbox_m_w0_avmm_msg_receiver_agent_m0_write),                   //                .write
		.rp_endofpacket          (mbox_m_w0_avmm_msg_receiver_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (mbox_m_w0_avmm_msg_receiver_agent_rp_ready),                   //                .ready
		.rp_valid                (mbox_m_w0_avmm_msg_receiver_agent_rp_valid),                   //                .valid
		.rp_data                 (mbox_m_w0_avmm_msg_receiver_agent_rp_data),                    //                .data
		.rp_startofpacket        (mbox_m_w0_avmm_msg_receiver_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_018_src_ready),                                        //              cp.ready
		.cp_valid                (cmd_mux_018_src_valid),                                        //                .valid
		.cp_data                 (cmd_mux_018_src_data),                                         //                .data
		.cp_startofpacket        (cmd_mux_018_src_startofpacket),                                //                .startofpacket
		.cp_endofpacket          (cmd_mux_018_src_endofpacket),                                  //                .endofpacket
		.cp_channel              (cmd_mux_018_src_channel),                                      //                .channel
		.rf_sink_ready           (mbox_m_w0_avmm_msg_receiver_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (mbox_m_w0_avmm_msg_receiver_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (mbox_m_w0_avmm_msg_receiver_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (mbox_m_w0_avmm_msg_receiver_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (mbox_m_w0_avmm_msg_receiver_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (mbox_m_w0_avmm_msg_receiver_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (mbox_m_w0_avmm_msg_receiver_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (mbox_m_w0_avmm_msg_receiver_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (mbox_m_w0_avmm_msg_receiver_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (mbox_m_w0_avmm_msg_receiver_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_018_out_0_ready),                            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_018_out_0_valid),                            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_018_out_0_data),                             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_018_out_0_error),                            //                .error
		.rdata_fifo_src_ready    (mbox_m_w0_avmm_msg_receiver_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (mbox_m_w0_avmm_msg_receiver_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (mbox_m_w0_avmm_msg_receiver_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) mbox_m_w0_avmm_msg_receiver_agent_rsp_fifo (
		.clk               (altpll_0_c0_clk),                                              //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_data           (mbox_m_w0_avmm_msg_receiver_agent_rf_source_data),             //        in.data
		.in_valid          (mbox_m_w0_avmm_msg_receiver_agent_rf_source_valid),            //          .valid
		.in_ready          (mbox_m_w0_avmm_msg_receiver_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (mbox_m_w0_avmm_msg_receiver_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (mbox_m_w0_avmm_msg_receiver_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (mbox_m_w0_avmm_msg_receiver_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (mbox_m_w0_avmm_msg_receiver_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (mbox_m_w0_avmm_msg_receiver_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (mbox_m_w0_avmm_msg_receiver_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (mbox_m_w0_avmm_msg_receiver_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                        // (terminated)
		.csr_read          (1'b0),                                                         // (terminated)
		.csr_write         (1'b0),                                                         // (terminated)
		.csr_readdata      (),                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated)
		.almost_full_data  (),                                                             // (terminated)
		.almost_empty_data (),                                                             // (terminated)
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_channel        (1'b0),                                                         // (terminated)
		.out_channel       ()                                                              // (terminated)
	);

	system_mm_interconnect_0_router router (
		.sink_ready         (manager_data_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (manager_data_master_agent_cp_valid),         //          .valid
		.sink_data          (manager_data_master_agent_cp_data),          //          .data
		.sink_startofpacket (manager_data_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (manager_data_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (altpll_0_c0_clk),                            //       clk.clk
		.reset              (manager_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_src_ready),                           //       src.ready
		.src_valid          (router_src_valid),                           //          .valid
		.src_data           (router_src_data),                            //          .data
		.src_channel        (router_src_channel),                         //          .channel
		.src_startofpacket  (router_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                      //          .endofpacket
	);

	system_mm_interconnect_0_router_001 router_001 (
		.sink_ready         (manager_instruction_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (manager_instruction_master_agent_cp_valid),         //          .valid
		.sink_data          (manager_instruction_master_agent_cp_data),          //          .data
		.sink_startofpacket (manager_instruction_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (manager_instruction_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (altpll_0_c0_clk),                                   //       clk.clk
		.reset              (manager_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.src_ready          (router_001_src_ready),                              //       src.ready
		.src_valid          (router_001_src_valid),                              //          .valid
		.src_data           (router_001_src_data),                               //          .data
		.src_channel        (router_001_src_channel),                            //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                         //          .endofpacket
	);

	system_mm_interconnect_0_router_002 router_002 (
		.sink_ready         (worker0_wout_agent_cp_ready),                   //      sink.ready
		.sink_valid         (worker0_wout_agent_cp_valid),                   //          .valid
		.sink_data          (worker0_wout_agent_cp_data),                    //          .data
		.sink_startofpacket (worker0_wout_agent_cp_startofpacket),           //          .startofpacket
		.sink_endofpacket   (worker0_wout_agent_cp_endofpacket),             //          .endofpacket
		.clk                (altpll_0_c0_clk),                               //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_002_src_ready),                          //       src.ready
		.src_valid          (router_002_src_valid),                          //          .valid
		.src_data           (router_002_src_data),                           //          .data
		.src_channel        (router_002_src_channel),                        //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                     //          .endofpacket
	);

	system_mm_interconnect_0_router_003 router_003 (
		.sink_ready         (worker1_wout_agent_cp_ready),                   //      sink.ready
		.sink_valid         (worker1_wout_agent_cp_valid),                   //          .valid
		.sink_data          (worker1_wout_agent_cp_data),                    //          .data
		.sink_startofpacket (worker1_wout_agent_cp_startofpacket),           //          .startofpacket
		.sink_endofpacket   (worker1_wout_agent_cp_endofpacket),             //          .endofpacket
		.clk                (altpll_0_c0_clk),                               //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_003_src_ready),                          //       src.ready
		.src_valid          (router_003_src_valid),                          //          .valid
		.src_data           (router_003_src_data),                           //          .data
		.src_channel        (router_003_src_channel),                        //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                     //          .endofpacket
	);

	system_mm_interconnect_0_router_004 router_004 (
		.sink_ready         (worker2_wout_agent_cp_ready),                   //      sink.ready
		.sink_valid         (worker2_wout_agent_cp_valid),                   //          .valid
		.sink_data          (worker2_wout_agent_cp_data),                    //          .data
		.sink_startofpacket (worker2_wout_agent_cp_startofpacket),           //          .startofpacket
		.sink_endofpacket   (worker2_wout_agent_cp_endofpacket),             //          .endofpacket
		.clk                (altpll_0_c0_clk),                               //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_004_src_ready),                          //       src.ready
		.src_valid          (router_004_src_valid),                          //          .valid
		.src_data           (router_004_src_data),                           //          .data
		.src_channel        (router_004_src_channel),                        //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                     //          .endofpacket
	);

	system_mm_interconnect_0_router_005 router_005 (
		.sink_ready         (worker3_wout_agent_cp_ready),                   //      sink.ready
		.sink_valid         (worker3_wout_agent_cp_valid),                   //          .valid
		.sink_data          (worker3_wout_agent_cp_data),                    //          .data
		.sink_startofpacket (worker3_wout_agent_cp_startofpacket),           //          .startofpacket
		.sink_endofpacket   (worker3_wout_agent_cp_endofpacket),             //          .endofpacket
		.clk                (altpll_0_c0_clk),                               //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_005_src_ready),                          //       src.ready
		.src_valid          (router_005_src_valid),                          //          .valid
		.src_data           (router_005_src_data),                           //          .data
		.src_channel        (router_005_src_channel),                        //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                     //          .endofpacket
	);

	system_mm_interconnect_0_router_006 router_006 (
		.sink_ready         (jtag_uart_0_avalon_jtag_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (jtag_uart_0_avalon_jtag_slave_agent_rp_valid),         //          .valid
		.sink_data          (jtag_uart_0_avalon_jtag_slave_agent_rp_data),          //          .data
		.sink_startofpacket (jtag_uart_0_avalon_jtag_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (jtag_uart_0_avalon_jtag_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (altpll_0_c0_clk),                                      //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.src_ready          (router_006_src_ready),                                 //       src.ready
		.src_valid          (router_006_src_valid),                                 //          .valid
		.src_data           (router_006_src_data),                                  //          .data
		.src_channel        (router_006_src_channel),                               //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                            //          .endofpacket
	);

	system_mm_interconnect_0_router_007 router_007 (
		.sink_ready         (mbox_m_w0_avmm_msg_sender_agent_rp_ready),         //      sink.ready
		.sink_valid         (mbox_m_w0_avmm_msg_sender_agent_rp_valid),         //          .valid
		.sink_data          (mbox_m_w0_avmm_msg_sender_agent_rp_data),          //          .data
		.sink_startofpacket (mbox_m_w0_avmm_msg_sender_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (mbox_m_w0_avmm_msg_sender_agent_rp_endofpacket),   //          .endofpacket
		.clk                (altpll_0_c0_clk),                                  //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.src_ready          (router_007_src_ready),                             //       src.ready
		.src_valid          (router_007_src_valid),                             //          .valid
		.src_data           (router_007_src_data),                              //          .data
		.src_channel        (router_007_src_channel),                           //          .channel
		.src_startofpacket  (router_007_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                        //          .endofpacket
	);

	system_mm_interconnect_0_router_007 router_008 (
		.sink_ready         (mbox_m_w1_avmm_msg_sender_agent_rp_ready),         //      sink.ready
		.sink_valid         (mbox_m_w1_avmm_msg_sender_agent_rp_valid),         //          .valid
		.sink_data          (mbox_m_w1_avmm_msg_sender_agent_rp_data),          //          .data
		.sink_startofpacket (mbox_m_w1_avmm_msg_sender_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (mbox_m_w1_avmm_msg_sender_agent_rp_endofpacket),   //          .endofpacket
		.clk                (altpll_0_c0_clk),                                  //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.src_ready          (router_008_src_ready),                             //       src.ready
		.src_valid          (router_008_src_valid),                             //          .valid
		.src_data           (router_008_src_data),                              //          .data
		.src_channel        (router_008_src_channel),                           //          .channel
		.src_startofpacket  (router_008_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                        //          .endofpacket
	);

	system_mm_interconnect_0_router_007 router_009 (
		.sink_ready         (mbox_m_w2_avmm_msg_sender_agent_rp_ready),         //      sink.ready
		.sink_valid         (mbox_m_w2_avmm_msg_sender_agent_rp_valid),         //          .valid
		.sink_data          (mbox_m_w2_avmm_msg_sender_agent_rp_data),          //          .data
		.sink_startofpacket (mbox_m_w2_avmm_msg_sender_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (mbox_m_w2_avmm_msg_sender_agent_rp_endofpacket),   //          .endofpacket
		.clk                (altpll_0_c0_clk),                                  //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.src_ready          (router_009_src_ready),                             //       src.ready
		.src_valid          (router_009_src_valid),                             //          .valid
		.src_data           (router_009_src_data),                              //          .data
		.src_channel        (router_009_src_channel),                           //          .channel
		.src_startofpacket  (router_009_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)                        //          .endofpacket
	);

	system_mm_interconnect_0_router_007 router_010 (
		.sink_ready         (mbox_m_w3_avmm_msg_sender_agent_rp_ready),         //      sink.ready
		.sink_valid         (mbox_m_w3_avmm_msg_sender_agent_rp_valid),         //          .valid
		.sink_data          (mbox_m_w3_avmm_msg_sender_agent_rp_data),          //          .data
		.sink_startofpacket (mbox_m_w3_avmm_msg_sender_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (mbox_m_w3_avmm_msg_sender_agent_rp_endofpacket),   //          .endofpacket
		.clk                (altpll_0_c0_clk),                                  //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.src_ready          (router_010_src_ready),                             //       src.ready
		.src_valid          (router_010_src_valid),                             //          .valid
		.src_data           (router_010_src_data),                              //          .data
		.src_channel        (router_010_src_channel),                           //          .channel
		.src_startofpacket  (router_010_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_010_src_endofpacket)                        //          .endofpacket
	);

	system_mm_interconnect_0_router_007 router_011 (
		.sink_ready         (performance_counter_0_control_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (performance_counter_0_control_slave_agent_rp_valid),         //          .valid
		.sink_data          (performance_counter_0_control_slave_agent_rp_data),          //          .data
		.sink_startofpacket (performance_counter_0_control_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (performance_counter_0_control_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (altpll_0_c0_clk),                                            //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset),              // clk_reset.reset
		.src_ready          (router_011_src_ready),                                       //       src.ready
		.src_valid          (router_011_src_valid),                                       //          .valid
		.src_data           (router_011_src_data),                                        //          .data
		.src_channel        (router_011_src_channel),                                     //          .channel
		.src_startofpacket  (router_011_src_startofpacket),                               //          .startofpacket
		.src_endofpacket    (router_011_src_endofpacket)                                  //          .endofpacket
	);

	system_mm_interconnect_0_router_006 router_012 (
		.sink_ready         (manager_debug_mem_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (manager_debug_mem_slave_agent_rp_valid),         //          .valid
		.sink_data          (manager_debug_mem_slave_agent_rp_data),          //          .data
		.sink_startofpacket (manager_debug_mem_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (manager_debug_mem_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (altpll_0_c0_clk),                                //       clk.clk
		.reset              (manager_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.src_ready          (router_012_src_ready),                           //       src.ready
		.src_valid          (router_012_src_valid),                           //          .valid
		.src_data           (router_012_src_data),                            //          .data
		.src_channel        (router_012_src_channel),                         //          .channel
		.src_startofpacket  (router_012_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_012_src_endofpacket)                      //          .endofpacket
	);

	system_mm_interconnect_0_router_007 router_013 (
		.sink_ready         (req_fifo_out_agent_rp_ready),                   //      sink.ready
		.sink_valid         (req_fifo_out_agent_rp_valid),                   //          .valid
		.sink_data          (req_fifo_out_agent_rp_data),                    //          .data
		.sink_startofpacket (req_fifo_out_agent_rp_startofpacket),           //          .startofpacket
		.sink_endofpacket   (req_fifo_out_agent_rp_endofpacket),             //          .endofpacket
		.clk                (altpll_0_c0_clk),                               //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_013_src_ready),                          //       src.ready
		.src_valid          (router_013_src_valid),                          //          .valid
		.src_data           (router_013_src_data),                           //          .data
		.src_channel        (router_013_src_channel),                        //          .channel
		.src_startofpacket  (router_013_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_013_src_endofpacket)                     //          .endofpacket
	);

	system_mm_interconnect_0_router_007 router_014 (
		.sink_ready         (req_fifo_out_csr_agent_rp_ready),               //      sink.ready
		.sink_valid         (req_fifo_out_csr_agent_rp_valid),               //          .valid
		.sink_data          (req_fifo_out_csr_agent_rp_data),                //          .data
		.sink_startofpacket (req_fifo_out_csr_agent_rp_startofpacket),       //          .startofpacket
		.sink_endofpacket   (req_fifo_out_csr_agent_rp_endofpacket),         //          .endofpacket
		.clk                (altpll_0_c0_clk),                               //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_014_src_ready),                          //       src.ready
		.src_valid          (router_014_src_valid),                          //          .valid
		.src_data           (router_014_src_data),                           //          .data
		.src_channel        (router_014_src_channel),                        //          .channel
		.src_startofpacket  (router_014_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_014_src_endofpacket)                     //          .endofpacket
	);

	system_mm_interconnect_0_router_007 router_015 (
		.sink_ready         (altpll_0_pll_slave_agent_rp_ready),                          //      sink.ready
		.sink_valid         (altpll_0_pll_slave_agent_rp_valid),                          //          .valid
		.sink_data          (altpll_0_pll_slave_agent_rp_data),                           //          .data
		.sink_startofpacket (altpll_0_pll_slave_agent_rp_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (altpll_0_pll_slave_agent_rp_endofpacket),                    //          .endofpacket
		.clk                (clk_0_clk_clk),                                              //       clk.clk
		.reset              (altpll_0_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_015_src_ready),                                       //       src.ready
		.src_valid          (router_015_src_valid),                                       //          .valid
		.src_data           (router_015_src_data),                                        //          .data
		.src_channel        (router_015_src_channel),                                     //          .channel
		.src_startofpacket  (router_015_src_startofpacket),                               //          .startofpacket
		.src_endofpacket    (router_015_src_endofpacket)                                  //          .endofpacket
	);

	system_mm_interconnect_0_router_007 router_016 (
		.sink_ready         (shared_ocm_s1_agent_rp_ready),              //      sink.ready
		.sink_valid         (shared_ocm_s1_agent_rp_valid),              //          .valid
		.sink_data          (shared_ocm_s1_agent_rp_data),               //          .data
		.sink_startofpacket (shared_ocm_s1_agent_rp_startofpacket),      //          .startofpacket
		.sink_endofpacket   (shared_ocm_s1_agent_rp_endofpacket),        //          .endofpacket
		.clk                (altpll_0_c0_clk),                           //       clk.clk
		.reset              (manager_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_016_src_ready),                      //       src.ready
		.src_valid          (router_016_src_valid),                      //          .valid
		.src_data           (router_016_src_data),                       //          .data
		.src_channel        (router_016_src_channel),                    //          .channel
		.src_startofpacket  (router_016_src_startofpacket),              //          .startofpacket
		.src_endofpacket    (router_016_src_endofpacket)                 //          .endofpacket
	);

	system_mm_interconnect_0_router_017 router_017 (
		.sink_ready         (sdram_0_sdout_agent_rp_ready),              //      sink.ready
		.sink_valid         (sdram_0_sdout_agent_rp_valid),              //          .valid
		.sink_data          (sdram_0_sdout_agent_rp_data),               //          .data
		.sink_startofpacket (sdram_0_sdout_agent_rp_startofpacket),      //          .startofpacket
		.sink_endofpacket   (sdram_0_sdout_agent_rp_endofpacket),        //          .endofpacket
		.clk                (altpll_0_c0_clk),                           //       clk.clk
		.reset              (manager_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_017_src_ready),                      //       src.ready
		.src_valid          (router_017_src_valid),                      //          .valid
		.src_data           (router_017_src_data),                       //          .data
		.src_channel        (router_017_src_channel),                    //          .channel
		.src_startofpacket  (router_017_src_startofpacket),              //          .startofpacket
		.src_endofpacket    (router_017_src_endofpacket)                 //          .endofpacket
	);

	system_mm_interconnect_0_router_018 router_018 (
		.sink_ready         (mbox_m_w3_avmm_msg_receiver_agent_rp_ready),         //      sink.ready
		.sink_valid         (mbox_m_w3_avmm_msg_receiver_agent_rp_valid),         //          .valid
		.sink_data          (mbox_m_w3_avmm_msg_receiver_agent_rp_data),          //          .data
		.sink_startofpacket (mbox_m_w3_avmm_msg_receiver_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (mbox_m_w3_avmm_msg_receiver_agent_rp_endofpacket),   //          .endofpacket
		.clk                (altpll_0_c0_clk),                                    //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.src_ready          (router_018_src_ready),                               //       src.ready
		.src_valid          (router_018_src_valid),                               //          .valid
		.src_data           (router_018_src_data),                                //          .data
		.src_channel        (router_018_src_channel),                             //          .channel
		.src_startofpacket  (router_018_src_startofpacket),                       //          .startofpacket
		.src_endofpacket    (router_018_src_endofpacket)                          //          .endofpacket
	);

	system_mm_interconnect_0_router_019 router_019 (
		.sink_ready         (req_fifo_in_agent_rp_ready),                    //      sink.ready
		.sink_valid         (req_fifo_in_agent_rp_valid),                    //          .valid
		.sink_data          (req_fifo_in_agent_rp_data),                     //          .data
		.sink_startofpacket (req_fifo_in_agent_rp_startofpacket),            //          .startofpacket
		.sink_endofpacket   (req_fifo_in_agent_rp_endofpacket),              //          .endofpacket
		.clk                (altpll_0_c0_clk),                               //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_019_src_ready),                          //       src.ready
		.src_valid          (router_019_src_valid),                          //          .valid
		.src_data           (router_019_src_data),                           //          .data
		.src_channel        (router_019_src_channel),                        //          .channel
		.src_startofpacket  (router_019_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_019_src_endofpacket)                     //          .endofpacket
	);

	system_mm_interconnect_0_router_019 router_020 (
		.sink_ready         (req_fifo_in_csr_agent_rp_ready),                //      sink.ready
		.sink_valid         (req_fifo_in_csr_agent_rp_valid),                //          .valid
		.sink_data          (req_fifo_in_csr_agent_rp_data),                 //          .data
		.sink_startofpacket (req_fifo_in_csr_agent_rp_startofpacket),        //          .startofpacket
		.sink_endofpacket   (req_fifo_in_csr_agent_rp_endofpacket),          //          .endofpacket
		.clk                (altpll_0_c0_clk),                               //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_020_src_ready),                          //       src.ready
		.src_valid          (router_020_src_valid),                          //          .valid
		.src_data           (router_020_src_data),                           //          .data
		.src_channel        (router_020_src_channel),                        //          .channel
		.src_startofpacket  (router_020_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_020_src_endofpacket)                     //          .endofpacket
	);

	system_mm_interconnect_0_router_019 router_021 (
		.sink_ready         (shared_ocm_s2_agent_rp_ready),              //      sink.ready
		.sink_valid         (shared_ocm_s2_agent_rp_valid),              //          .valid
		.sink_data          (shared_ocm_s2_agent_rp_data),               //          .data
		.sink_startofpacket (shared_ocm_s2_agent_rp_startofpacket),      //          .startofpacket
		.sink_endofpacket   (shared_ocm_s2_agent_rp_endofpacket),        //          .endofpacket
		.clk                (altpll_0_c0_clk),                           //       clk.clk
		.reset              (manager_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_021_src_ready),                      //       src.ready
		.src_valid          (router_021_src_valid),                      //          .valid
		.src_data           (router_021_src_data),                       //          .data
		.src_channel        (router_021_src_channel),                    //          .channel
		.src_startofpacket  (router_021_src_startofpacket),              //          .startofpacket
		.src_endofpacket    (router_021_src_endofpacket)                 //          .endofpacket
	);

	system_mm_interconnect_0_router_022 router_022 (
		.sink_ready         (mbox_m_w2_avmm_msg_receiver_agent_rp_ready),         //      sink.ready
		.sink_valid         (mbox_m_w2_avmm_msg_receiver_agent_rp_valid),         //          .valid
		.sink_data          (mbox_m_w2_avmm_msg_receiver_agent_rp_data),          //          .data
		.sink_startofpacket (mbox_m_w2_avmm_msg_receiver_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (mbox_m_w2_avmm_msg_receiver_agent_rp_endofpacket),   //          .endofpacket
		.clk                (altpll_0_c0_clk),                                    //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.src_ready          (router_022_src_ready),                               //       src.ready
		.src_valid          (router_022_src_valid),                               //          .valid
		.src_data           (router_022_src_data),                                //          .data
		.src_channel        (router_022_src_channel),                             //          .channel
		.src_startofpacket  (router_022_src_startofpacket),                       //          .startofpacket
		.src_endofpacket    (router_022_src_endofpacket)                          //          .endofpacket
	);

	system_mm_interconnect_0_router_023 router_023 (
		.sink_ready         (mbox_m_w1_avmm_msg_receiver_agent_rp_ready),         //      sink.ready
		.sink_valid         (mbox_m_w1_avmm_msg_receiver_agent_rp_valid),         //          .valid
		.sink_data          (mbox_m_w1_avmm_msg_receiver_agent_rp_data),          //          .data
		.sink_startofpacket (mbox_m_w1_avmm_msg_receiver_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (mbox_m_w1_avmm_msg_receiver_agent_rp_endofpacket),   //          .endofpacket
		.clk                (altpll_0_c0_clk),                                    //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.src_ready          (router_023_src_ready),                               //       src.ready
		.src_valid          (router_023_src_valid),                               //          .valid
		.src_data           (router_023_src_data),                                //          .data
		.src_channel        (router_023_src_channel),                             //          .channel
		.src_startofpacket  (router_023_src_startofpacket),                       //          .startofpacket
		.src_endofpacket    (router_023_src_endofpacket)                          //          .endofpacket
	);

	system_mm_interconnect_0_router_024 router_024 (
		.sink_ready         (mbox_m_w0_avmm_msg_receiver_agent_rp_ready),         //      sink.ready
		.sink_valid         (mbox_m_w0_avmm_msg_receiver_agent_rp_valid),         //          .valid
		.sink_data          (mbox_m_w0_avmm_msg_receiver_agent_rp_data),          //          .data
		.sink_startofpacket (mbox_m_w0_avmm_msg_receiver_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (mbox_m_w0_avmm_msg_receiver_agent_rp_endofpacket),   //          .endofpacket
		.clk                (altpll_0_c0_clk),                                    //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.src_ready          (router_024_src_ready),                               //       src.ready
		.src_valid          (router_024_src_valid),                               //          .valid
		.src_data           (router_024_src_data),                                //          .data
		.src_channel        (router_024_src_channel),                             //          .channel
		.src_startofpacket  (router_024_src_startofpacket),                       //          .startofpacket
		.src_endofpacket    (router_024_src_endofpacket)                          //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.MAX_OUTSTANDING_RESPONSES (5),
		.PIPELINED                 (0),
		.ST_DATA_W                 (108),
		.ST_CHANNEL_W              (19),
		.VALID_WIDTH               (19),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) manager_data_master_limiter (
		.clk                    (altpll_0_c0_clk),                                   //       clk.clk
		.reset                  (manager_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                  //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                  //          .valid
		.cmd_sink_data          (router_src_data),                                   //          .data
		.cmd_sink_channel       (router_src_channel),                                //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                          //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                            //          .endofpacket
		.cmd_src_ready          (manager_data_master_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (manager_data_master_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (manager_data_master_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (manager_data_master_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (manager_data_master_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                                 //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                                 //          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                               //          .channel
		.rsp_sink_data          (rsp_mux_src_data),                                  //          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                         //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                           //          .endofpacket
		.rsp_src_ready          (manager_data_master_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (manager_data_master_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (manager_data_master_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (manager_data_master_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (manager_data_master_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (manager_data_master_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (manager_data_master_limiter_cmd_valid_data)         // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.MAX_OUTSTANDING_RESPONSES (4),
		.PIPELINED                 (0),
		.ST_DATA_W                 (108),
		.ST_CHANNEL_W              (19),
		.VALID_WIDTH               (19),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) manager_instruction_master_limiter (
		.clk                    (altpll_0_c0_clk),                                          //       clk.clk
		.reset                  (manager_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.cmd_sink_ready         (router_001_src_ready),                                     //  cmd_sink.ready
		.cmd_sink_valid         (router_001_src_valid),                                     //          .valid
		.cmd_sink_data          (router_001_src_data),                                      //          .data
		.cmd_sink_channel       (router_001_src_channel),                                   //          .channel
		.cmd_sink_startofpacket (router_001_src_startofpacket),                             //          .startofpacket
		.cmd_sink_endofpacket   (router_001_src_endofpacket),                               //          .endofpacket
		.cmd_src_ready          (manager_instruction_master_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (manager_instruction_master_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (manager_instruction_master_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (manager_instruction_master_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (manager_instruction_master_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_001_src_ready),                                    //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_001_src_valid),                                    //          .valid
		.rsp_sink_channel       (rsp_mux_001_src_channel),                                  //          .channel
		.rsp_sink_data          (rsp_mux_001_src_data),                                     //          .data
		.rsp_sink_startofpacket (rsp_mux_001_src_startofpacket),                            //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_001_src_endofpacket),                              //          .endofpacket
		.rsp_src_ready          (manager_instruction_master_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (manager_instruction_master_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (manager_instruction_master_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (manager_instruction_master_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (manager_instruction_master_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (manager_instruction_master_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (manager_instruction_master_limiter_cmd_valid_data)         // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.MAX_OUTSTANDING_RESPONSES (4),
		.PIPELINED                 (0),
		.ST_DATA_W                 (108),
		.ST_CHANNEL_W              (19),
		.VALID_WIDTH               (19),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) worker0_wout_limiter (
		.clk                    (altpll_0_c0_clk),                               //       clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_002_src_ready),                          //  cmd_sink.ready
		.cmd_sink_valid         (router_002_src_valid),                          //          .valid
		.cmd_sink_data          (router_002_src_data),                           //          .data
		.cmd_sink_channel       (router_002_src_channel),                        //          .channel
		.cmd_sink_startofpacket (router_002_src_startofpacket),                  //          .startofpacket
		.cmd_sink_endofpacket   (router_002_src_endofpacket),                    //          .endofpacket
		.cmd_src_ready          (worker0_wout_limiter_cmd_src_ready),            //   cmd_src.ready
		.cmd_src_data           (worker0_wout_limiter_cmd_src_data),             //          .data
		.cmd_src_channel        (worker0_wout_limiter_cmd_src_channel),          //          .channel
		.cmd_src_startofpacket  (worker0_wout_limiter_cmd_src_startofpacket),    //          .startofpacket
		.cmd_src_endofpacket    (worker0_wout_limiter_cmd_src_endofpacket),      //          .endofpacket
		.rsp_sink_ready         (rsp_mux_002_src_ready),                         //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_002_src_valid),                         //          .valid
		.rsp_sink_channel       (rsp_mux_002_src_channel),                       //          .channel
		.rsp_sink_data          (rsp_mux_002_src_data),                          //          .data
		.rsp_sink_startofpacket (rsp_mux_002_src_startofpacket),                 //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_002_src_endofpacket),                   //          .endofpacket
		.rsp_src_ready          (worker0_wout_limiter_rsp_src_ready),            //   rsp_src.ready
		.rsp_src_valid          (worker0_wout_limiter_rsp_src_valid),            //          .valid
		.rsp_src_data           (worker0_wout_limiter_rsp_src_data),             //          .data
		.rsp_src_channel        (worker0_wout_limiter_rsp_src_channel),          //          .channel
		.rsp_src_startofpacket  (worker0_wout_limiter_rsp_src_startofpacket),    //          .startofpacket
		.rsp_src_endofpacket    (worker0_wout_limiter_rsp_src_endofpacket),      //          .endofpacket
		.cmd_src_valid          (worker0_wout_limiter_cmd_valid_data)            // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.MAX_OUTSTANDING_RESPONSES (4),
		.PIPELINED                 (0),
		.ST_DATA_W                 (108),
		.ST_CHANNEL_W              (19),
		.VALID_WIDTH               (19),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) worker1_wout_limiter (
		.clk                    (altpll_0_c0_clk),                               //       clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_003_src_ready),                          //  cmd_sink.ready
		.cmd_sink_valid         (router_003_src_valid),                          //          .valid
		.cmd_sink_data          (router_003_src_data),                           //          .data
		.cmd_sink_channel       (router_003_src_channel),                        //          .channel
		.cmd_sink_startofpacket (router_003_src_startofpacket),                  //          .startofpacket
		.cmd_sink_endofpacket   (router_003_src_endofpacket),                    //          .endofpacket
		.cmd_src_ready          (worker1_wout_limiter_cmd_src_ready),            //   cmd_src.ready
		.cmd_src_data           (worker1_wout_limiter_cmd_src_data),             //          .data
		.cmd_src_channel        (worker1_wout_limiter_cmd_src_channel),          //          .channel
		.cmd_src_startofpacket  (worker1_wout_limiter_cmd_src_startofpacket),    //          .startofpacket
		.cmd_src_endofpacket    (worker1_wout_limiter_cmd_src_endofpacket),      //          .endofpacket
		.rsp_sink_ready         (rsp_mux_003_src_ready),                         //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_003_src_valid),                         //          .valid
		.rsp_sink_channel       (rsp_mux_003_src_channel),                       //          .channel
		.rsp_sink_data          (rsp_mux_003_src_data),                          //          .data
		.rsp_sink_startofpacket (rsp_mux_003_src_startofpacket),                 //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_003_src_endofpacket),                   //          .endofpacket
		.rsp_src_ready          (worker1_wout_limiter_rsp_src_ready),            //   rsp_src.ready
		.rsp_src_valid          (worker1_wout_limiter_rsp_src_valid),            //          .valid
		.rsp_src_data           (worker1_wout_limiter_rsp_src_data),             //          .data
		.rsp_src_channel        (worker1_wout_limiter_rsp_src_channel),          //          .channel
		.rsp_src_startofpacket  (worker1_wout_limiter_rsp_src_startofpacket),    //          .startofpacket
		.rsp_src_endofpacket    (worker1_wout_limiter_rsp_src_endofpacket),      //          .endofpacket
		.cmd_src_valid          (worker1_wout_limiter_cmd_valid_data)            // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.MAX_OUTSTANDING_RESPONSES (4),
		.PIPELINED                 (0),
		.ST_DATA_W                 (108),
		.ST_CHANNEL_W              (19),
		.VALID_WIDTH               (19),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) worker2_wout_limiter (
		.clk                    (altpll_0_c0_clk),                               //       clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_004_src_ready),                          //  cmd_sink.ready
		.cmd_sink_valid         (router_004_src_valid),                          //          .valid
		.cmd_sink_data          (router_004_src_data),                           //          .data
		.cmd_sink_channel       (router_004_src_channel),                        //          .channel
		.cmd_sink_startofpacket (router_004_src_startofpacket),                  //          .startofpacket
		.cmd_sink_endofpacket   (router_004_src_endofpacket),                    //          .endofpacket
		.cmd_src_ready          (worker2_wout_limiter_cmd_src_ready),            //   cmd_src.ready
		.cmd_src_data           (worker2_wout_limiter_cmd_src_data),             //          .data
		.cmd_src_channel        (worker2_wout_limiter_cmd_src_channel),          //          .channel
		.cmd_src_startofpacket  (worker2_wout_limiter_cmd_src_startofpacket),    //          .startofpacket
		.cmd_src_endofpacket    (worker2_wout_limiter_cmd_src_endofpacket),      //          .endofpacket
		.rsp_sink_ready         (rsp_mux_004_src_ready),                         //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_004_src_valid),                         //          .valid
		.rsp_sink_channel       (rsp_mux_004_src_channel),                       //          .channel
		.rsp_sink_data          (rsp_mux_004_src_data),                          //          .data
		.rsp_sink_startofpacket (rsp_mux_004_src_startofpacket),                 //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_004_src_endofpacket),                   //          .endofpacket
		.rsp_src_ready          (worker2_wout_limiter_rsp_src_ready),            //   rsp_src.ready
		.rsp_src_valid          (worker2_wout_limiter_rsp_src_valid),            //          .valid
		.rsp_src_data           (worker2_wout_limiter_rsp_src_data),             //          .data
		.rsp_src_channel        (worker2_wout_limiter_rsp_src_channel),          //          .channel
		.rsp_src_startofpacket  (worker2_wout_limiter_rsp_src_startofpacket),    //          .startofpacket
		.rsp_src_endofpacket    (worker2_wout_limiter_rsp_src_endofpacket),      //          .endofpacket
		.cmd_src_valid          (worker2_wout_limiter_cmd_valid_data)            // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (90),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (85),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.MAX_OUTSTANDING_RESPONSES (4),
		.PIPELINED                 (0),
		.ST_DATA_W                 (108),
		.ST_CHANNEL_W              (19),
		.VALID_WIDTH               (19),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) worker3_wout_limiter (
		.clk                    (altpll_0_c0_clk),                               //       clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_005_src_ready),                          //  cmd_sink.ready
		.cmd_sink_valid         (router_005_src_valid),                          //          .valid
		.cmd_sink_data          (router_005_src_data),                           //          .data
		.cmd_sink_channel       (router_005_src_channel),                        //          .channel
		.cmd_sink_startofpacket (router_005_src_startofpacket),                  //          .startofpacket
		.cmd_sink_endofpacket   (router_005_src_endofpacket),                    //          .endofpacket
		.cmd_src_ready          (worker3_wout_limiter_cmd_src_ready),            //   cmd_src.ready
		.cmd_src_data           (worker3_wout_limiter_cmd_src_data),             //          .data
		.cmd_src_channel        (worker3_wout_limiter_cmd_src_channel),          //          .channel
		.cmd_src_startofpacket  (worker3_wout_limiter_cmd_src_startofpacket),    //          .startofpacket
		.cmd_src_endofpacket    (worker3_wout_limiter_cmd_src_endofpacket),      //          .endofpacket
		.rsp_sink_ready         (rsp_mux_005_src_ready),                         //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_005_src_valid),                         //          .valid
		.rsp_sink_channel       (rsp_mux_005_src_channel),                       //          .channel
		.rsp_sink_data          (rsp_mux_005_src_data),                          //          .data
		.rsp_sink_startofpacket (rsp_mux_005_src_startofpacket),                 //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_005_src_endofpacket),                   //          .endofpacket
		.rsp_src_ready          (worker3_wout_limiter_rsp_src_ready),            //   rsp_src.ready
		.rsp_src_valid          (worker3_wout_limiter_rsp_src_valid),            //          .valid
		.rsp_src_data           (worker3_wout_limiter_rsp_src_data),             //          .data
		.rsp_src_channel        (worker3_wout_limiter_rsp_src_channel),          //          .channel
		.rsp_src_startofpacket  (worker3_wout_limiter_rsp_src_startofpacket),    //          .startofpacket
		.rsp_src_endofpacket    (worker3_wout_limiter_rsp_src_endofpacket),      //          .endofpacket
		.cmd_src_valid          (worker3_wout_limiter_cmd_valid_data)            // cmd_valid.data
	);

	system_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                 (altpll_0_c0_clk),                                   //        clk.clk
		.reset               (manager_reset_reset_bridge_in_reset_reset),         //  clk_reset.reset
		.sink_ready          (manager_data_master_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel        (manager_data_master_limiter_cmd_src_channel),       //           .channel
		.sink_data           (manager_data_master_limiter_cmd_src_data),          //           .data
		.sink_startofpacket  (manager_data_master_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket    (manager_data_master_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid          (manager_data_master_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready          (cmd_demux_src0_ready),                              //       src0.ready
		.src0_valid          (cmd_demux_src0_valid),                              //           .valid
		.src0_data           (cmd_demux_src0_data),                               //           .data
		.src0_channel        (cmd_demux_src0_channel),                            //           .channel
		.src0_startofpacket  (cmd_demux_src0_startofpacket),                      //           .startofpacket
		.src0_endofpacket    (cmd_demux_src0_endofpacket),                        //           .endofpacket
		.src1_ready          (cmd_demux_src1_ready),                              //       src1.ready
		.src1_valid          (cmd_demux_src1_valid),                              //           .valid
		.src1_data           (cmd_demux_src1_data),                               //           .data
		.src1_channel        (cmd_demux_src1_channel),                            //           .channel
		.src1_startofpacket  (cmd_demux_src1_startofpacket),                      //           .startofpacket
		.src1_endofpacket    (cmd_demux_src1_endofpacket),                        //           .endofpacket
		.src2_ready          (cmd_demux_src2_ready),                              //       src2.ready
		.src2_valid          (cmd_demux_src2_valid),                              //           .valid
		.src2_data           (cmd_demux_src2_data),                               //           .data
		.src2_channel        (cmd_demux_src2_channel),                            //           .channel
		.src2_startofpacket  (cmd_demux_src2_startofpacket),                      //           .startofpacket
		.src2_endofpacket    (cmd_demux_src2_endofpacket),                        //           .endofpacket
		.src3_ready          (cmd_demux_src3_ready),                              //       src3.ready
		.src3_valid          (cmd_demux_src3_valid),                              //           .valid
		.src3_data           (cmd_demux_src3_data),                               //           .data
		.src3_channel        (cmd_demux_src3_channel),                            //           .channel
		.src3_startofpacket  (cmd_demux_src3_startofpacket),                      //           .startofpacket
		.src3_endofpacket    (cmd_demux_src3_endofpacket),                        //           .endofpacket
		.src4_ready          (cmd_demux_src4_ready),                              //       src4.ready
		.src4_valid          (cmd_demux_src4_valid),                              //           .valid
		.src4_data           (cmd_demux_src4_data),                               //           .data
		.src4_channel        (cmd_demux_src4_channel),                            //           .channel
		.src4_startofpacket  (cmd_demux_src4_startofpacket),                      //           .startofpacket
		.src4_endofpacket    (cmd_demux_src4_endofpacket),                        //           .endofpacket
		.src5_ready          (cmd_demux_src5_ready),                              //       src5.ready
		.src5_valid          (cmd_demux_src5_valid),                              //           .valid
		.src5_data           (cmd_demux_src5_data),                               //           .data
		.src5_channel        (cmd_demux_src5_channel),                            //           .channel
		.src5_startofpacket  (cmd_demux_src5_startofpacket),                      //           .startofpacket
		.src5_endofpacket    (cmd_demux_src5_endofpacket),                        //           .endofpacket
		.src6_ready          (cmd_demux_src6_ready),                              //       src6.ready
		.src6_valid          (cmd_demux_src6_valid),                              //           .valid
		.src6_data           (cmd_demux_src6_data),                               //           .data
		.src6_channel        (cmd_demux_src6_channel),                            //           .channel
		.src6_startofpacket  (cmd_demux_src6_startofpacket),                      //           .startofpacket
		.src6_endofpacket    (cmd_demux_src6_endofpacket),                        //           .endofpacket
		.src7_ready          (cmd_demux_src7_ready),                              //       src7.ready
		.src7_valid          (cmd_demux_src7_valid),                              //           .valid
		.src7_data           (cmd_demux_src7_data),                               //           .data
		.src7_channel        (cmd_demux_src7_channel),                            //           .channel
		.src7_startofpacket  (cmd_demux_src7_startofpacket),                      //           .startofpacket
		.src7_endofpacket    (cmd_demux_src7_endofpacket),                        //           .endofpacket
		.src8_ready          (cmd_demux_src8_ready),                              //       src8.ready
		.src8_valid          (cmd_demux_src8_valid),                              //           .valid
		.src8_data           (cmd_demux_src8_data),                               //           .data
		.src8_channel        (cmd_demux_src8_channel),                            //           .channel
		.src8_startofpacket  (cmd_demux_src8_startofpacket),                      //           .startofpacket
		.src8_endofpacket    (cmd_demux_src8_endofpacket),                        //           .endofpacket
		.src9_ready          (cmd_demux_src9_ready),                              //       src9.ready
		.src9_valid          (cmd_demux_src9_valid),                              //           .valid
		.src9_data           (cmd_demux_src9_data),                               //           .data
		.src9_channel        (cmd_demux_src9_channel),                            //           .channel
		.src9_startofpacket  (cmd_demux_src9_startofpacket),                      //           .startofpacket
		.src9_endofpacket    (cmd_demux_src9_endofpacket),                        //           .endofpacket
		.src10_ready         (cmd_demux_src10_ready),                             //      src10.ready
		.src10_valid         (cmd_demux_src10_valid),                             //           .valid
		.src10_data          (cmd_demux_src10_data),                              //           .data
		.src10_channel       (cmd_demux_src10_channel),                           //           .channel
		.src10_startofpacket (cmd_demux_src10_startofpacket),                     //           .startofpacket
		.src10_endofpacket   (cmd_demux_src10_endofpacket),                       //           .endofpacket
		.src11_ready         (cmd_demux_src11_ready),                             //      src11.ready
		.src11_valid         (cmd_demux_src11_valid),                             //           .valid
		.src11_data          (cmd_demux_src11_data),                              //           .data
		.src11_channel       (cmd_demux_src11_channel),                           //           .channel
		.src11_startofpacket (cmd_demux_src11_startofpacket),                     //           .startofpacket
		.src11_endofpacket   (cmd_demux_src11_endofpacket)                        //           .endofpacket
	);

	system_mm_interconnect_0_cmd_demux_001 cmd_demux_001 (
		.clk                (altpll_0_c0_clk),                                          //        clk.clk
		.reset              (manager_reset_reset_bridge_in_reset_reset),                //  clk_reset.reset
		.sink_ready         (manager_instruction_master_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel       (manager_instruction_master_limiter_cmd_src_channel),       //           .channel
		.sink_data          (manager_instruction_master_limiter_cmd_src_data),          //           .data
		.sink_startofpacket (manager_instruction_master_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket   (manager_instruction_master_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid         (manager_instruction_master_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready         (cmd_demux_001_src0_ready),                                 //       src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                                 //           .valid
		.src0_data          (cmd_demux_001_src0_data),                                  //           .data
		.src0_channel       (cmd_demux_001_src0_channel),                               //           .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                         //           .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket),                           //           .endofpacket
		.src1_ready         (cmd_demux_001_src1_ready),                                 //       src1.ready
		.src1_valid         (cmd_demux_001_src1_valid),                                 //           .valid
		.src1_data          (cmd_demux_001_src1_data),                                  //           .data
		.src1_channel       (cmd_demux_001_src1_channel),                               //           .channel
		.src1_startofpacket (cmd_demux_001_src1_startofpacket),                         //           .startofpacket
		.src1_endofpacket   (cmd_demux_001_src1_endofpacket),                           //           .endofpacket
		.src2_ready         (cmd_demux_001_src2_ready),                                 //       src2.ready
		.src2_valid         (cmd_demux_001_src2_valid),                                 //           .valid
		.src2_data          (cmd_demux_001_src2_data),                                  //           .data
		.src2_channel       (cmd_demux_001_src2_channel),                               //           .channel
		.src2_startofpacket (cmd_demux_001_src2_startofpacket),                         //           .startofpacket
		.src2_endofpacket   (cmd_demux_001_src2_endofpacket)                            //           .endofpacket
	);

	system_mm_interconnect_0_cmd_demux_002 cmd_demux_002 (
		.clk                (altpll_0_c0_clk),                               //        clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready         (worker0_wout_limiter_cmd_src_ready),            //       sink.ready
		.sink_channel       (worker0_wout_limiter_cmd_src_channel),          //           .channel
		.sink_data          (worker0_wout_limiter_cmd_src_data),             //           .data
		.sink_startofpacket (worker0_wout_limiter_cmd_src_startofpacket),    //           .startofpacket
		.sink_endofpacket   (worker0_wout_limiter_cmd_src_endofpacket),      //           .endofpacket
		.sink_valid         (worker0_wout_limiter_cmd_valid_data),           // sink_valid.data
		.src0_ready         (cmd_demux_002_src0_ready),                      //       src0.ready
		.src0_valid         (cmd_demux_002_src0_valid),                      //           .valid
		.src0_data          (cmd_demux_002_src0_data),                       //           .data
		.src0_channel       (cmd_demux_002_src0_channel),                    //           .channel
		.src0_startofpacket (cmd_demux_002_src0_startofpacket),              //           .startofpacket
		.src0_endofpacket   (cmd_demux_002_src0_endofpacket),                //           .endofpacket
		.src1_ready         (cmd_demux_002_src1_ready),                      //       src1.ready
		.src1_valid         (cmd_demux_002_src1_valid),                      //           .valid
		.src1_data          (cmd_demux_002_src1_data),                       //           .data
		.src1_channel       (cmd_demux_002_src1_channel),                    //           .channel
		.src1_startofpacket (cmd_demux_002_src1_startofpacket),              //           .startofpacket
		.src1_endofpacket   (cmd_demux_002_src1_endofpacket),                //           .endofpacket
		.src2_ready         (cmd_demux_002_src2_ready),                      //       src2.ready
		.src2_valid         (cmd_demux_002_src2_valid),                      //           .valid
		.src2_data          (cmd_demux_002_src2_data),                       //           .data
		.src2_channel       (cmd_demux_002_src2_channel),                    //           .channel
		.src2_startofpacket (cmd_demux_002_src2_startofpacket),              //           .startofpacket
		.src2_endofpacket   (cmd_demux_002_src2_endofpacket),                //           .endofpacket
		.src3_ready         (cmd_demux_002_src3_ready),                      //       src3.ready
		.src3_valid         (cmd_demux_002_src3_valid),                      //           .valid
		.src3_data          (cmd_demux_002_src3_data),                       //           .data
		.src3_channel       (cmd_demux_002_src3_channel),                    //           .channel
		.src3_startofpacket (cmd_demux_002_src3_startofpacket),              //           .startofpacket
		.src3_endofpacket   (cmd_demux_002_src3_endofpacket),                //           .endofpacket
		.src4_ready         (cmd_demux_002_src4_ready),                      //       src4.ready
		.src4_valid         (cmd_demux_002_src4_valid),                      //           .valid
		.src4_data          (cmd_demux_002_src4_data),                       //           .data
		.src4_channel       (cmd_demux_002_src4_channel),                    //           .channel
		.src4_startofpacket (cmd_demux_002_src4_startofpacket),              //           .startofpacket
		.src4_endofpacket   (cmd_demux_002_src4_endofpacket)                 //           .endofpacket
	);

	system_mm_interconnect_0_cmd_demux_002 cmd_demux_003 (
		.clk                (altpll_0_c0_clk),                               //        clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready         (worker1_wout_limiter_cmd_src_ready),            //       sink.ready
		.sink_channel       (worker1_wout_limiter_cmd_src_channel),          //           .channel
		.sink_data          (worker1_wout_limiter_cmd_src_data),             //           .data
		.sink_startofpacket (worker1_wout_limiter_cmd_src_startofpacket),    //           .startofpacket
		.sink_endofpacket   (worker1_wout_limiter_cmd_src_endofpacket),      //           .endofpacket
		.sink_valid         (worker1_wout_limiter_cmd_valid_data),           // sink_valid.data
		.src0_ready         (cmd_demux_003_src0_ready),                      //       src0.ready
		.src0_valid         (cmd_demux_003_src0_valid),                      //           .valid
		.src0_data          (cmd_demux_003_src0_data),                       //           .data
		.src0_channel       (cmd_demux_003_src0_channel),                    //           .channel
		.src0_startofpacket (cmd_demux_003_src0_startofpacket),              //           .startofpacket
		.src0_endofpacket   (cmd_demux_003_src0_endofpacket),                //           .endofpacket
		.src1_ready         (cmd_demux_003_src1_ready),                      //       src1.ready
		.src1_valid         (cmd_demux_003_src1_valid),                      //           .valid
		.src1_data          (cmd_demux_003_src1_data),                       //           .data
		.src1_channel       (cmd_demux_003_src1_channel),                    //           .channel
		.src1_startofpacket (cmd_demux_003_src1_startofpacket),              //           .startofpacket
		.src1_endofpacket   (cmd_demux_003_src1_endofpacket),                //           .endofpacket
		.src2_ready         (cmd_demux_003_src2_ready),                      //       src2.ready
		.src2_valid         (cmd_demux_003_src2_valid),                      //           .valid
		.src2_data          (cmd_demux_003_src2_data),                       //           .data
		.src2_channel       (cmd_demux_003_src2_channel),                    //           .channel
		.src2_startofpacket (cmd_demux_003_src2_startofpacket),              //           .startofpacket
		.src2_endofpacket   (cmd_demux_003_src2_endofpacket),                //           .endofpacket
		.src3_ready         (cmd_demux_003_src3_ready),                      //       src3.ready
		.src3_valid         (cmd_demux_003_src3_valid),                      //           .valid
		.src3_data          (cmd_demux_003_src3_data),                       //           .data
		.src3_channel       (cmd_demux_003_src3_channel),                    //           .channel
		.src3_startofpacket (cmd_demux_003_src3_startofpacket),              //           .startofpacket
		.src3_endofpacket   (cmd_demux_003_src3_endofpacket),                //           .endofpacket
		.src4_ready         (cmd_demux_003_src4_ready),                      //       src4.ready
		.src4_valid         (cmd_demux_003_src4_valid),                      //           .valid
		.src4_data          (cmd_demux_003_src4_data),                       //           .data
		.src4_channel       (cmd_demux_003_src4_channel),                    //           .channel
		.src4_startofpacket (cmd_demux_003_src4_startofpacket),              //           .startofpacket
		.src4_endofpacket   (cmd_demux_003_src4_endofpacket)                 //           .endofpacket
	);

	system_mm_interconnect_0_cmd_demux_002 cmd_demux_004 (
		.clk                (altpll_0_c0_clk),                               //        clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready         (worker2_wout_limiter_cmd_src_ready),            //       sink.ready
		.sink_channel       (worker2_wout_limiter_cmd_src_channel),          //           .channel
		.sink_data          (worker2_wout_limiter_cmd_src_data),             //           .data
		.sink_startofpacket (worker2_wout_limiter_cmd_src_startofpacket),    //           .startofpacket
		.sink_endofpacket   (worker2_wout_limiter_cmd_src_endofpacket),      //           .endofpacket
		.sink_valid         (worker2_wout_limiter_cmd_valid_data),           // sink_valid.data
		.src0_ready         (cmd_demux_004_src0_ready),                      //       src0.ready
		.src0_valid         (cmd_demux_004_src0_valid),                      //           .valid
		.src0_data          (cmd_demux_004_src0_data),                       //           .data
		.src0_channel       (cmd_demux_004_src0_channel),                    //           .channel
		.src0_startofpacket (cmd_demux_004_src0_startofpacket),              //           .startofpacket
		.src0_endofpacket   (cmd_demux_004_src0_endofpacket),                //           .endofpacket
		.src1_ready         (cmd_demux_004_src1_ready),                      //       src1.ready
		.src1_valid         (cmd_demux_004_src1_valid),                      //           .valid
		.src1_data          (cmd_demux_004_src1_data),                       //           .data
		.src1_channel       (cmd_demux_004_src1_channel),                    //           .channel
		.src1_startofpacket (cmd_demux_004_src1_startofpacket),              //           .startofpacket
		.src1_endofpacket   (cmd_demux_004_src1_endofpacket),                //           .endofpacket
		.src2_ready         (cmd_demux_004_src2_ready),                      //       src2.ready
		.src2_valid         (cmd_demux_004_src2_valid),                      //           .valid
		.src2_data          (cmd_demux_004_src2_data),                       //           .data
		.src2_channel       (cmd_demux_004_src2_channel),                    //           .channel
		.src2_startofpacket (cmd_demux_004_src2_startofpacket),              //           .startofpacket
		.src2_endofpacket   (cmd_demux_004_src2_endofpacket),                //           .endofpacket
		.src3_ready         (cmd_demux_004_src3_ready),                      //       src3.ready
		.src3_valid         (cmd_demux_004_src3_valid),                      //           .valid
		.src3_data          (cmd_demux_004_src3_data),                       //           .data
		.src3_channel       (cmd_demux_004_src3_channel),                    //           .channel
		.src3_startofpacket (cmd_demux_004_src3_startofpacket),              //           .startofpacket
		.src3_endofpacket   (cmd_demux_004_src3_endofpacket),                //           .endofpacket
		.src4_ready         (cmd_demux_004_src4_ready),                      //       src4.ready
		.src4_valid         (cmd_demux_004_src4_valid),                      //           .valid
		.src4_data          (cmd_demux_004_src4_data),                       //           .data
		.src4_channel       (cmd_demux_004_src4_channel),                    //           .channel
		.src4_startofpacket (cmd_demux_004_src4_startofpacket),              //           .startofpacket
		.src4_endofpacket   (cmd_demux_004_src4_endofpacket)                 //           .endofpacket
	);

	system_mm_interconnect_0_cmd_demux_002 cmd_demux_005 (
		.clk                (altpll_0_c0_clk),                               //        clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready         (worker3_wout_limiter_cmd_src_ready),            //       sink.ready
		.sink_channel       (worker3_wout_limiter_cmd_src_channel),          //           .channel
		.sink_data          (worker3_wout_limiter_cmd_src_data),             //           .data
		.sink_startofpacket (worker3_wout_limiter_cmd_src_startofpacket),    //           .startofpacket
		.sink_endofpacket   (worker3_wout_limiter_cmd_src_endofpacket),      //           .endofpacket
		.sink_valid         (worker3_wout_limiter_cmd_valid_data),           // sink_valid.data
		.src0_ready         (cmd_demux_005_src0_ready),                      //       src0.ready
		.src0_valid         (cmd_demux_005_src0_valid),                      //           .valid
		.src0_data          (cmd_demux_005_src0_data),                       //           .data
		.src0_channel       (cmd_demux_005_src0_channel),                    //           .channel
		.src0_startofpacket (cmd_demux_005_src0_startofpacket),              //           .startofpacket
		.src0_endofpacket   (cmd_demux_005_src0_endofpacket),                //           .endofpacket
		.src1_ready         (cmd_demux_005_src1_ready),                      //       src1.ready
		.src1_valid         (cmd_demux_005_src1_valid),                      //           .valid
		.src1_data          (cmd_demux_005_src1_data),                       //           .data
		.src1_channel       (cmd_demux_005_src1_channel),                    //           .channel
		.src1_startofpacket (cmd_demux_005_src1_startofpacket),              //           .startofpacket
		.src1_endofpacket   (cmd_demux_005_src1_endofpacket),                //           .endofpacket
		.src2_ready         (cmd_demux_005_src2_ready),                      //       src2.ready
		.src2_valid         (cmd_demux_005_src2_valid),                      //           .valid
		.src2_data          (cmd_demux_005_src2_data),                       //           .data
		.src2_channel       (cmd_demux_005_src2_channel),                    //           .channel
		.src2_startofpacket (cmd_demux_005_src2_startofpacket),              //           .startofpacket
		.src2_endofpacket   (cmd_demux_005_src2_endofpacket),                //           .endofpacket
		.src3_ready         (cmd_demux_005_src3_ready),                      //       src3.ready
		.src3_valid         (cmd_demux_005_src3_valid),                      //           .valid
		.src3_data          (cmd_demux_005_src3_data),                       //           .data
		.src3_channel       (cmd_demux_005_src3_channel),                    //           .channel
		.src3_startofpacket (cmd_demux_005_src3_startofpacket),              //           .startofpacket
		.src3_endofpacket   (cmd_demux_005_src3_endofpacket),                //           .endofpacket
		.src4_ready         (cmd_demux_005_src4_ready),                      //       src4.ready
		.src4_valid         (cmd_demux_005_src4_valid),                      //           .valid
		.src4_data          (cmd_demux_005_src4_data),                       //           .data
		.src4_channel       (cmd_demux_005_src4_channel),                    //           .channel
		.src4_startofpacket (cmd_demux_005_src4_startofpacket),              //           .startofpacket
		.src4_endofpacket   (cmd_demux_005_src4_endofpacket)                 //           .endofpacket
	);

	system_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (altpll_0_c0_clk),                               //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_src_valid),                             //          .valid
		.src_data            (cmd_mux_src_data),                              //          .data
		.src_channel         (cmd_mux_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                          //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                        //          .channel
		.sink0_data          (cmd_demux_src0_data),                           //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket),                    //          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),                      //     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),                      //          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),                    //          .channel
		.sink1_data          (cmd_demux_001_src0_data),                       //          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),              //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket)                 //          .endofpacket
	);

	system_mm_interconnect_0_cmd_mux_001 cmd_mux_001 (
		.clk                 (altpll_0_c0_clk),                               //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                         //          .valid
		.src_data            (cmd_mux_001_src_data),                          //          .data
		.src_channel         (cmd_mux_001_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                          //          .valid
		.sink0_channel       (cmd_demux_src1_channel),                        //          .channel
		.sink0_data          (cmd_demux_src1_data),                           //          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket)                     //          .endofpacket
	);

	system_mm_interconnect_0_cmd_mux_001 cmd_mux_002 (
		.clk                 (altpll_0_c0_clk),                               //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                         //          .valid
		.src_data            (cmd_mux_002_src_data),                          //          .data
		.src_channel         (cmd_mux_002_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                          //          .valid
		.sink0_channel       (cmd_demux_src2_channel),                        //          .channel
		.sink0_data          (cmd_demux_src2_data),                           //          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket)                     //          .endofpacket
	);

	system_mm_interconnect_0_cmd_mux_001 cmd_mux_003 (
		.clk                 (altpll_0_c0_clk),                               //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                         //          .valid
		.src_data            (cmd_mux_003_src_data),                          //          .data
		.src_channel         (cmd_mux_003_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src3_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_src3_valid),                          //          .valid
		.sink0_channel       (cmd_demux_src3_channel),                        //          .channel
		.sink0_data          (cmd_demux_src3_data),                           //          .data
		.sink0_startofpacket (cmd_demux_src3_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src3_endofpacket)                     //          .endofpacket
	);

	system_mm_interconnect_0_cmd_mux_001 cmd_mux_004 (
		.clk                 (altpll_0_c0_clk),                               //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                         //          .valid
		.src_data            (cmd_mux_004_src_data),                          //          .data
		.src_channel         (cmd_mux_004_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src4_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_src4_valid),                          //          .valid
		.sink0_channel       (cmd_demux_src4_channel),                        //          .channel
		.sink0_data          (cmd_demux_src4_data),                           //          .data
		.sink0_startofpacket (cmd_demux_src4_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src4_endofpacket)                     //          .endofpacket
	);

	system_mm_interconnect_0_cmd_mux_001 cmd_mux_005 (
		.clk                 (altpll_0_c0_clk),                               //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                         //          .valid
		.src_data            (cmd_mux_005_src_data),                          //          .data
		.src_channel         (cmd_mux_005_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src5_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_src5_valid),                          //          .valid
		.sink0_channel       (cmd_demux_src5_channel),                        //          .channel
		.sink0_data          (cmd_demux_src5_data),                           //          .data
		.sink0_startofpacket (cmd_demux_src5_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src5_endofpacket)                     //          .endofpacket
	);

	system_mm_interconnect_0_cmd_mux cmd_mux_006 (
		.clk                 (altpll_0_c0_clk),                           //       clk.clk
		.reset               (manager_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                     //       src.ready
		.src_valid           (cmd_mux_006_src_valid),                     //          .valid
		.src_data            (cmd_mux_006_src_data),                      //          .data
		.src_channel         (cmd_mux_006_src_channel),                   //          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),             //          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),               //          .endofpacket
		.sink0_ready         (cmd_demux_src6_ready),                      //     sink0.ready
		.sink0_valid         (cmd_demux_src6_valid),                      //          .valid
		.sink0_channel       (cmd_demux_src6_channel),                    //          .channel
		.sink0_data          (cmd_demux_src6_data),                       //          .data
		.sink0_startofpacket (cmd_demux_src6_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src6_endofpacket),                //          .endofpacket
		.sink1_ready         (cmd_demux_001_src1_ready),                  //     sink1.ready
		.sink1_valid         (cmd_demux_001_src1_valid),                  //          .valid
		.sink1_channel       (cmd_demux_001_src1_channel),                //          .channel
		.sink1_data          (cmd_demux_001_src1_data),                   //          .data
		.sink1_startofpacket (cmd_demux_001_src1_startofpacket),          //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src1_endofpacket)             //          .endofpacket
	);

	system_mm_interconnect_0_cmd_mux_001 cmd_mux_007 (
		.clk                 (altpll_0_c0_clk),                               //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_007_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_007_src_valid),                         //          .valid
		.src_data            (cmd_mux_007_src_data),                          //          .data
		.src_channel         (cmd_mux_007_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_007_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_007_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src7_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_src7_valid),                          //          .valid
		.sink0_channel       (cmd_demux_src7_channel),                        //          .channel
		.sink0_data          (cmd_demux_src7_data),                           //          .data
		.sink0_startofpacket (cmd_demux_src7_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src7_endofpacket)                     //          .endofpacket
	);

	system_mm_interconnect_0_cmd_mux_001 cmd_mux_008 (
		.clk                 (altpll_0_c0_clk),                               //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_008_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_008_src_valid),                         //          .valid
		.src_data            (cmd_mux_008_src_data),                          //          .data
		.src_channel         (cmd_mux_008_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_008_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_008_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src8_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_src8_valid),                          //          .valid
		.sink0_channel       (cmd_demux_src8_channel),                        //          .channel
		.sink0_data          (cmd_demux_src8_data),                           //          .data
		.sink0_startofpacket (cmd_demux_src8_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src8_endofpacket)                     //          .endofpacket
	);

	system_mm_interconnect_0_cmd_mux_001 cmd_mux_009 (
		.clk                 (clk_0_clk_clk),                                              //       clk.clk
		.reset               (altpll_0_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_009_src_ready),                                      //       src.ready
		.src_valid           (cmd_mux_009_src_valid),                                      //          .valid
		.src_data            (cmd_mux_009_src_data),                                       //          .data
		.src_channel         (cmd_mux_009_src_channel),                                    //          .channel
		.src_startofpacket   (cmd_mux_009_src_startofpacket),                              //          .startofpacket
		.src_endofpacket     (cmd_mux_009_src_endofpacket),                                //          .endofpacket
		.sink0_ready         (crosser_out_ready),                                          //     sink0.ready
		.sink0_valid         (crosser_out_valid),                                          //          .valid
		.sink0_channel       (crosser_out_channel),                                        //          .channel
		.sink0_data          (crosser_out_data),                                           //          .data
		.sink0_startofpacket (crosser_out_startofpacket),                                  //          .startofpacket
		.sink0_endofpacket   (crosser_out_endofpacket)                                     //          .endofpacket
	);

	system_mm_interconnect_0_cmd_mux_001 cmd_mux_010 (
		.clk                 (altpll_0_c0_clk),                           //       clk.clk
		.reset               (manager_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_010_src_ready),                     //       src.ready
		.src_valid           (cmd_mux_010_src_valid),                     //          .valid
		.src_data            (cmd_mux_010_src_data),                      //          .data
		.src_channel         (cmd_mux_010_src_channel),                   //          .channel
		.src_startofpacket   (cmd_mux_010_src_startofpacket),             //          .startofpacket
		.src_endofpacket     (cmd_mux_010_src_endofpacket),               //          .endofpacket
		.sink0_ready         (cmd_demux_src10_ready),                     //     sink0.ready
		.sink0_valid         (cmd_demux_src10_valid),                     //          .valid
		.sink0_channel       (cmd_demux_src10_channel),                   //          .channel
		.sink0_data          (cmd_demux_src10_data),                      //          .data
		.sink0_startofpacket (cmd_demux_src10_startofpacket),             //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src10_endofpacket)                //          .endofpacket
	);

	system_mm_interconnect_0_cmd_mux_011 cmd_mux_011 (
		.clk                 (altpll_0_c0_clk),                           //       clk.clk
		.reset               (manager_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_011_src_ready),                     //       src.ready
		.src_valid           (cmd_mux_011_src_valid),                     //          .valid
		.src_data            (cmd_mux_011_src_data),                      //          .data
		.src_channel         (cmd_mux_011_src_channel),                   //          .channel
		.src_startofpacket   (cmd_mux_011_src_startofpacket),             //          .startofpacket
		.src_endofpacket     (cmd_mux_011_src_endofpacket),               //          .endofpacket
		.sink0_ready         (cmd_demux_src11_ready),                     //     sink0.ready
		.sink0_valid         (cmd_demux_src11_valid),                     //          .valid
		.sink0_channel       (cmd_demux_src11_channel),                   //          .channel
		.sink0_data          (cmd_demux_src11_data),                      //          .data
		.sink0_startofpacket (cmd_demux_src11_startofpacket),             //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src11_endofpacket),               //          .endofpacket
		.sink1_ready         (cmd_demux_001_src2_ready),                  //     sink1.ready
		.sink1_valid         (cmd_demux_001_src2_valid),                  //          .valid
		.sink1_channel       (cmd_demux_001_src2_channel),                //          .channel
		.sink1_data          (cmd_demux_001_src2_data),                   //          .data
		.sink1_startofpacket (cmd_demux_001_src2_startofpacket),          //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src2_endofpacket),            //          .endofpacket
		.sink2_ready         (cmd_demux_002_src0_ready),                  //     sink2.ready
		.sink2_valid         (cmd_demux_002_src0_valid),                  //          .valid
		.sink2_channel       (cmd_demux_002_src0_channel),                //          .channel
		.sink2_data          (cmd_demux_002_src0_data),                   //          .data
		.sink2_startofpacket (cmd_demux_002_src0_startofpacket),          //          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src0_endofpacket),            //          .endofpacket
		.sink3_ready         (cmd_demux_003_src0_ready),                  //     sink3.ready
		.sink3_valid         (cmd_demux_003_src0_valid),                  //          .valid
		.sink3_channel       (cmd_demux_003_src0_channel),                //          .channel
		.sink3_data          (cmd_demux_003_src0_data),                   //          .data
		.sink3_startofpacket (cmd_demux_003_src0_startofpacket),          //          .startofpacket
		.sink3_endofpacket   (cmd_demux_003_src0_endofpacket),            //          .endofpacket
		.sink4_ready         (cmd_demux_004_src0_ready),                  //     sink4.ready
		.sink4_valid         (cmd_demux_004_src0_valid),                  //          .valid
		.sink4_channel       (cmd_demux_004_src0_channel),                //          .channel
		.sink4_data          (cmd_demux_004_src0_data),                   //          .data
		.sink4_startofpacket (cmd_demux_004_src0_startofpacket),          //          .startofpacket
		.sink4_endofpacket   (cmd_demux_004_src0_endofpacket),            //          .endofpacket
		.sink5_ready         (cmd_demux_005_src0_ready),                  //     sink5.ready
		.sink5_valid         (cmd_demux_005_src0_valid),                  //          .valid
		.sink5_channel       (cmd_demux_005_src0_channel),                //          .channel
		.sink5_data          (cmd_demux_005_src0_data),                   //          .data
		.sink5_startofpacket (cmd_demux_005_src0_startofpacket),          //          .startofpacket
		.sink5_endofpacket   (cmd_demux_005_src0_endofpacket)             //          .endofpacket
	);

	system_mm_interconnect_0_cmd_mux_001 cmd_mux_012 (
		.clk                 (altpll_0_c0_clk),                               //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_012_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_012_src_valid),                         //          .valid
		.src_data            (cmd_mux_012_src_data),                          //          .data
		.src_channel         (cmd_mux_012_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_012_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_012_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_005_src1_ready),                      //     sink0.ready
		.sink0_valid         (cmd_demux_005_src1_valid),                      //          .valid
		.sink0_channel       (cmd_demux_005_src1_channel),                    //          .channel
		.sink0_data          (cmd_demux_005_src1_data),                       //          .data
		.sink0_startofpacket (cmd_demux_005_src1_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (cmd_demux_005_src1_endofpacket)                 //          .endofpacket
	);

	system_mm_interconnect_0_cmd_mux_013 cmd_mux_013 (
		.clk                 (altpll_0_c0_clk),                               //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_013_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_013_src_valid),                         //          .valid
		.src_data            (cmd_mux_013_src_data),                          //          .data
		.src_channel         (cmd_mux_013_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_013_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_013_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_002_src1_ready),                      //     sink0.ready
		.sink0_valid         (cmd_demux_002_src1_valid),                      //          .valid
		.sink0_channel       (cmd_demux_002_src1_channel),                    //          .channel
		.sink0_data          (cmd_demux_002_src1_data),                       //          .data
		.sink0_startofpacket (cmd_demux_002_src1_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src1_endofpacket),                //          .endofpacket
		.sink1_ready         (cmd_demux_003_src1_ready),                      //     sink1.ready
		.sink1_valid         (cmd_demux_003_src1_valid),                      //          .valid
		.sink1_channel       (cmd_demux_003_src1_channel),                    //          .channel
		.sink1_data          (cmd_demux_003_src1_data),                       //          .data
		.sink1_startofpacket (cmd_demux_003_src1_startofpacket),              //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src1_endofpacket),                //          .endofpacket
		.sink2_ready         (cmd_demux_004_src1_ready),                      //     sink2.ready
		.sink2_valid         (cmd_demux_004_src1_valid),                      //          .valid
		.sink2_channel       (cmd_demux_004_src1_channel),                    //          .channel
		.sink2_data          (cmd_demux_004_src1_data),                       //          .data
		.sink2_startofpacket (cmd_demux_004_src1_startofpacket),              //          .startofpacket
		.sink2_endofpacket   (cmd_demux_004_src1_endofpacket),                //          .endofpacket
		.sink3_ready         (cmd_demux_005_src2_ready),                      //     sink3.ready
		.sink3_valid         (cmd_demux_005_src2_valid),                      //          .valid
		.sink3_channel       (cmd_demux_005_src2_channel),                    //          .channel
		.sink3_data          (cmd_demux_005_src2_data),                       //          .data
		.sink3_startofpacket (cmd_demux_005_src2_startofpacket),              //          .startofpacket
		.sink3_endofpacket   (cmd_demux_005_src2_endofpacket)                 //          .endofpacket
	);

	system_mm_interconnect_0_cmd_mux_013 cmd_mux_014 (
		.clk                 (altpll_0_c0_clk),                               //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_014_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_014_src_valid),                         //          .valid
		.src_data            (cmd_mux_014_src_data),                          //          .data
		.src_channel         (cmd_mux_014_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_014_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_014_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_002_src2_ready),                      //     sink0.ready
		.sink0_valid         (cmd_demux_002_src2_valid),                      //          .valid
		.sink0_channel       (cmd_demux_002_src2_channel),                    //          .channel
		.sink0_data          (cmd_demux_002_src2_data),                       //          .data
		.sink0_startofpacket (cmd_demux_002_src2_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src2_endofpacket),                //          .endofpacket
		.sink1_ready         (cmd_demux_003_src2_ready),                      //     sink1.ready
		.sink1_valid         (cmd_demux_003_src2_valid),                      //          .valid
		.sink1_channel       (cmd_demux_003_src2_channel),                    //          .channel
		.sink1_data          (cmd_demux_003_src2_data),                       //          .data
		.sink1_startofpacket (cmd_demux_003_src2_startofpacket),              //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src2_endofpacket),                //          .endofpacket
		.sink2_ready         (cmd_demux_004_src2_ready),                      //     sink2.ready
		.sink2_valid         (cmd_demux_004_src2_valid),                      //          .valid
		.sink2_channel       (cmd_demux_004_src2_channel),                    //          .channel
		.sink2_data          (cmd_demux_004_src2_data),                       //          .data
		.sink2_startofpacket (cmd_demux_004_src2_startofpacket),              //          .startofpacket
		.sink2_endofpacket   (cmd_demux_004_src2_endofpacket),                //          .endofpacket
		.sink3_ready         (cmd_demux_005_src3_ready),                      //     sink3.ready
		.sink3_valid         (cmd_demux_005_src3_valid),                      //          .valid
		.sink3_channel       (cmd_demux_005_src3_channel),                    //          .channel
		.sink3_data          (cmd_demux_005_src3_data),                       //          .data
		.sink3_startofpacket (cmd_demux_005_src3_startofpacket),              //          .startofpacket
		.sink3_endofpacket   (cmd_demux_005_src3_endofpacket)                 //          .endofpacket
	);

	system_mm_interconnect_0_cmd_mux_013 cmd_mux_015 (
		.clk                 (altpll_0_c0_clk),                           //       clk.clk
		.reset               (manager_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_015_src_ready),                     //       src.ready
		.src_valid           (cmd_mux_015_src_valid),                     //          .valid
		.src_data            (cmd_mux_015_src_data),                      //          .data
		.src_channel         (cmd_mux_015_src_channel),                   //          .channel
		.src_startofpacket   (cmd_mux_015_src_startofpacket),             //          .startofpacket
		.src_endofpacket     (cmd_mux_015_src_endofpacket),               //          .endofpacket
		.sink0_ready         (cmd_demux_002_src3_ready),                  //     sink0.ready
		.sink0_valid         (cmd_demux_002_src3_valid),                  //          .valid
		.sink0_channel       (cmd_demux_002_src3_channel),                //          .channel
		.sink0_data          (cmd_demux_002_src3_data),                   //          .data
		.sink0_startofpacket (cmd_demux_002_src3_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src3_endofpacket),            //          .endofpacket
		.sink1_ready         (cmd_demux_003_src3_ready),                  //     sink1.ready
		.sink1_valid         (cmd_demux_003_src3_valid),                  //          .valid
		.sink1_channel       (cmd_demux_003_src3_channel),                //          .channel
		.sink1_data          (cmd_demux_003_src3_data),                   //          .data
		.sink1_startofpacket (cmd_demux_003_src3_startofpacket),          //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src3_endofpacket),            //          .endofpacket
		.sink2_ready         (cmd_demux_004_src3_ready),                  //     sink2.ready
		.sink2_valid         (cmd_demux_004_src3_valid),                  //          .valid
		.sink2_channel       (cmd_demux_004_src3_channel),                //          .channel
		.sink2_data          (cmd_demux_004_src3_data),                   //          .data
		.sink2_startofpacket (cmd_demux_004_src3_startofpacket),          //          .startofpacket
		.sink2_endofpacket   (cmd_demux_004_src3_endofpacket),            //          .endofpacket
		.sink3_ready         (cmd_demux_005_src4_ready),                  //     sink3.ready
		.sink3_valid         (cmd_demux_005_src4_valid),                  //          .valid
		.sink3_channel       (cmd_demux_005_src4_channel),                //          .channel
		.sink3_data          (cmd_demux_005_src4_data),                   //          .data
		.sink3_startofpacket (cmd_demux_005_src4_startofpacket),          //          .startofpacket
		.sink3_endofpacket   (cmd_demux_005_src4_endofpacket)             //          .endofpacket
	);

	system_mm_interconnect_0_cmd_mux_001 cmd_mux_016 (
		.clk                 (altpll_0_c0_clk),                               //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_016_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_016_src_valid),                         //          .valid
		.src_data            (cmd_mux_016_src_data),                          //          .data
		.src_channel         (cmd_mux_016_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_016_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_016_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_004_src4_ready),                      //     sink0.ready
		.sink0_valid         (cmd_demux_004_src4_valid),                      //          .valid
		.sink0_channel       (cmd_demux_004_src4_channel),                    //          .channel
		.sink0_data          (cmd_demux_004_src4_data),                       //          .data
		.sink0_startofpacket (cmd_demux_004_src4_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (cmd_demux_004_src4_endofpacket)                 //          .endofpacket
	);

	system_mm_interconnect_0_cmd_mux_001 cmd_mux_017 (
		.clk                 (altpll_0_c0_clk),                               //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_017_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_017_src_valid),                         //          .valid
		.src_data            (cmd_mux_017_src_data),                          //          .data
		.src_channel         (cmd_mux_017_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_017_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_017_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_003_src4_ready),                      //     sink0.ready
		.sink0_valid         (cmd_demux_003_src4_valid),                      //          .valid
		.sink0_channel       (cmd_demux_003_src4_channel),                    //          .channel
		.sink0_data          (cmd_demux_003_src4_data),                       //          .data
		.sink0_startofpacket (cmd_demux_003_src4_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (cmd_demux_003_src4_endofpacket)                 //          .endofpacket
	);

	system_mm_interconnect_0_cmd_mux_001 cmd_mux_018 (
		.clk                 (altpll_0_c0_clk),                               //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_018_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_018_src_valid),                         //          .valid
		.src_data            (cmd_mux_018_src_data),                          //          .data
		.src_channel         (cmd_mux_018_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_018_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_018_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_002_src4_ready),                      //     sink0.ready
		.sink0_valid         (cmd_demux_002_src4_valid),                      //          .valid
		.sink0_channel       (cmd_demux_002_src4_channel),                    //          .channel
		.sink0_data          (cmd_demux_002_src4_data),                       //          .data
		.sink0_startofpacket (cmd_demux_002_src4_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src4_endofpacket)                 //          .endofpacket
	);

	system_mm_interconnect_0_rsp_demux rsp_demux (
		.clk                (altpll_0_c0_clk),                               //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                          //      sink.ready
		.sink_channel       (router_006_src_channel),                        //          .channel
		.sink_data          (router_006_src_data),                           //          .data
		.sink_startofpacket (router_006_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_006_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_src0_ready),                          //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                          //          .valid
		.src0_data          (rsp_demux_src0_data),                           //          .data
		.src0_channel       (rsp_demux_src0_channel),                        //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                  //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),                    //          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                          //      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                          //          .valid
		.src1_data          (rsp_demux_src1_data),                           //          .data
		.src1_channel       (rsp_demux_src1_channel),                        //          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),                  //          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket)                     //          .endofpacket
	);

	system_mm_interconnect_0_rsp_demux_001 rsp_demux_001 (
		.clk                (altpll_0_c0_clk),                               //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_007_src_ready),                          //      sink.ready
		.sink_channel       (router_007_src_channel),                        //          .channel
		.sink_data          (router_007_src_data),                           //          .data
		.sink_startofpacket (router_007_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_007_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_001_src0_data),                       //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)                 //          .endofpacket
	);

	system_mm_interconnect_0_rsp_demux_001 rsp_demux_002 (
		.clk                (altpll_0_c0_clk),                               //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_008_src_ready),                          //      sink.ready
		.sink_channel       (router_008_src_channel),                        //          .channel
		.sink_data          (router_008_src_data),                           //          .data
		.sink_startofpacket (router_008_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_008_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_008_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_002_src0_data),                       //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket)                 //          .endofpacket
	);

	system_mm_interconnect_0_rsp_demux_001 rsp_demux_003 (
		.clk                (altpll_0_c0_clk),                               //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_009_src_ready),                          //      sink.ready
		.sink_channel       (router_009_src_channel),                        //          .channel
		.sink_data          (router_009_src_data),                           //          .data
		.sink_startofpacket (router_009_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_009_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_009_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_003_src0_data),                       //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket)                 //          .endofpacket
	);

	system_mm_interconnect_0_rsp_demux_001 rsp_demux_004 (
		.clk                (altpll_0_c0_clk),                               //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_010_src_ready),                          //      sink.ready
		.sink_channel       (router_010_src_channel),                        //          .channel
		.sink_data          (router_010_src_data),                           //          .data
		.sink_startofpacket (router_010_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_010_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_010_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_004_src0_data),                       //          .data
		.src0_channel       (rsp_demux_004_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket)                 //          .endofpacket
	);

	system_mm_interconnect_0_rsp_demux_001 rsp_demux_005 (
		.clk                (altpll_0_c0_clk),                               //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_011_src_ready),                          //      sink.ready
		.sink_channel       (router_011_src_channel),                        //          .channel
		.sink_data          (router_011_src_data),                           //          .data
		.sink_startofpacket (router_011_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_011_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_011_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_005_src0_data),                       //          .data
		.src0_channel       (rsp_demux_005_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket)                 //          .endofpacket
	);

	system_mm_interconnect_0_rsp_demux rsp_demux_006 (
		.clk                (altpll_0_c0_clk),                           //       clk.clk
		.reset              (manager_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_012_src_ready),                      //      sink.ready
		.sink_channel       (router_012_src_channel),                    //          .channel
		.sink_data          (router_012_src_data),                       //          .data
		.sink_startofpacket (router_012_src_startofpacket),              //          .startofpacket
		.sink_endofpacket   (router_012_src_endofpacket),                //          .endofpacket
		.sink_valid         (router_012_src_valid),                      //          .valid
		.src0_ready         (rsp_demux_006_src0_ready),                  //      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),                  //          .valid
		.src0_data          (rsp_demux_006_src0_data),                   //          .data
		.src0_channel       (rsp_demux_006_src0_channel),                //          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),          //          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket),            //          .endofpacket
		.src1_ready         (rsp_demux_006_src1_ready),                  //      src1.ready
		.src1_valid         (rsp_demux_006_src1_valid),                  //          .valid
		.src1_data          (rsp_demux_006_src1_data),                   //          .data
		.src1_channel       (rsp_demux_006_src1_channel),                //          .channel
		.src1_startofpacket (rsp_demux_006_src1_startofpacket),          //          .startofpacket
		.src1_endofpacket   (rsp_demux_006_src1_endofpacket)             //          .endofpacket
	);

	system_mm_interconnect_0_rsp_demux_001 rsp_demux_007 (
		.clk                (altpll_0_c0_clk),                               //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_013_src_ready),                          //      sink.ready
		.sink_channel       (router_013_src_channel),                        //          .channel
		.sink_data          (router_013_src_data),                           //          .data
		.sink_startofpacket (router_013_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_013_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_013_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_007_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_007_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_007_src0_data),                       //          .data
		.src0_channel       (rsp_demux_007_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_007_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_007_src0_endofpacket)                 //          .endofpacket
	);

	system_mm_interconnect_0_rsp_demux_001 rsp_demux_008 (
		.clk                (altpll_0_c0_clk),                               //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_014_src_ready),                          //      sink.ready
		.sink_channel       (router_014_src_channel),                        //          .channel
		.sink_data          (router_014_src_data),                           //          .data
		.sink_startofpacket (router_014_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_014_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_014_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_008_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_008_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_008_src0_data),                       //          .data
		.src0_channel       (rsp_demux_008_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_008_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_008_src0_endofpacket)                 //          .endofpacket
	);

	system_mm_interconnect_0_rsp_demux_001 rsp_demux_009 (
		.clk                (clk_0_clk_clk),                                              //       clk.clk
		.reset              (altpll_0_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_015_src_ready),                                       //      sink.ready
		.sink_channel       (router_015_src_channel),                                     //          .channel
		.sink_data          (router_015_src_data),                                        //          .data
		.sink_startofpacket (router_015_src_startofpacket),                               //          .startofpacket
		.sink_endofpacket   (router_015_src_endofpacket),                                 //          .endofpacket
		.sink_valid         (router_015_src_valid),                                       //          .valid
		.src0_ready         (rsp_demux_009_src0_ready),                                   //      src0.ready
		.src0_valid         (rsp_demux_009_src0_valid),                                   //          .valid
		.src0_data          (rsp_demux_009_src0_data),                                    //          .data
		.src0_channel       (rsp_demux_009_src0_channel),                                 //          .channel
		.src0_startofpacket (rsp_demux_009_src0_startofpacket),                           //          .startofpacket
		.src0_endofpacket   (rsp_demux_009_src0_endofpacket)                              //          .endofpacket
	);

	system_mm_interconnect_0_rsp_demux_001 rsp_demux_010 (
		.clk                (altpll_0_c0_clk),                           //       clk.clk
		.reset              (manager_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_016_src_ready),                      //      sink.ready
		.sink_channel       (router_016_src_channel),                    //          .channel
		.sink_data          (router_016_src_data),                       //          .data
		.sink_startofpacket (router_016_src_startofpacket),              //          .startofpacket
		.sink_endofpacket   (router_016_src_endofpacket),                //          .endofpacket
		.sink_valid         (router_016_src_valid),                      //          .valid
		.src0_ready         (rsp_demux_010_src0_ready),                  //      src0.ready
		.src0_valid         (rsp_demux_010_src0_valid),                  //          .valid
		.src0_data          (rsp_demux_010_src0_data),                   //          .data
		.src0_channel       (rsp_demux_010_src0_channel),                //          .channel
		.src0_startofpacket (rsp_demux_010_src0_startofpacket),          //          .startofpacket
		.src0_endofpacket   (rsp_demux_010_src0_endofpacket)             //          .endofpacket
	);

	system_mm_interconnect_0_rsp_demux_011 rsp_demux_011 (
		.clk                (altpll_0_c0_clk),                           //       clk.clk
		.reset              (manager_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_017_src_ready),                      //      sink.ready
		.sink_channel       (router_017_src_channel),                    //          .channel
		.sink_data          (router_017_src_data),                       //          .data
		.sink_startofpacket (router_017_src_startofpacket),              //          .startofpacket
		.sink_endofpacket   (router_017_src_endofpacket),                //          .endofpacket
		.sink_valid         (router_017_src_valid),                      //          .valid
		.src0_ready         (rsp_demux_011_src0_ready),                  //      src0.ready
		.src0_valid         (rsp_demux_011_src0_valid),                  //          .valid
		.src0_data          (rsp_demux_011_src0_data),                   //          .data
		.src0_channel       (rsp_demux_011_src0_channel),                //          .channel
		.src0_startofpacket (rsp_demux_011_src0_startofpacket),          //          .startofpacket
		.src0_endofpacket   (rsp_demux_011_src0_endofpacket),            //          .endofpacket
		.src1_ready         (rsp_demux_011_src1_ready),                  //      src1.ready
		.src1_valid         (rsp_demux_011_src1_valid),                  //          .valid
		.src1_data          (rsp_demux_011_src1_data),                   //          .data
		.src1_channel       (rsp_demux_011_src1_channel),                //          .channel
		.src1_startofpacket (rsp_demux_011_src1_startofpacket),          //          .startofpacket
		.src1_endofpacket   (rsp_demux_011_src1_endofpacket),            //          .endofpacket
		.src2_ready         (rsp_demux_011_src2_ready),                  //      src2.ready
		.src2_valid         (rsp_demux_011_src2_valid),                  //          .valid
		.src2_data          (rsp_demux_011_src2_data),                   //          .data
		.src2_channel       (rsp_demux_011_src2_channel),                //          .channel
		.src2_startofpacket (rsp_demux_011_src2_startofpacket),          //          .startofpacket
		.src2_endofpacket   (rsp_demux_011_src2_endofpacket),            //          .endofpacket
		.src3_ready         (rsp_demux_011_src3_ready),                  //      src3.ready
		.src3_valid         (rsp_demux_011_src3_valid),                  //          .valid
		.src3_data          (rsp_demux_011_src3_data),                   //          .data
		.src3_channel       (rsp_demux_011_src3_channel),                //          .channel
		.src3_startofpacket (rsp_demux_011_src3_startofpacket),          //          .startofpacket
		.src3_endofpacket   (rsp_demux_011_src3_endofpacket),            //          .endofpacket
		.src4_ready         (rsp_demux_011_src4_ready),                  //      src4.ready
		.src4_valid         (rsp_demux_011_src4_valid),                  //          .valid
		.src4_data          (rsp_demux_011_src4_data),                   //          .data
		.src4_channel       (rsp_demux_011_src4_channel),                //          .channel
		.src4_startofpacket (rsp_demux_011_src4_startofpacket),          //          .startofpacket
		.src4_endofpacket   (rsp_demux_011_src4_endofpacket),            //          .endofpacket
		.src5_ready         (rsp_demux_011_src5_ready),                  //      src5.ready
		.src5_valid         (rsp_demux_011_src5_valid),                  //          .valid
		.src5_data          (rsp_demux_011_src5_data),                   //          .data
		.src5_channel       (rsp_demux_011_src5_channel),                //          .channel
		.src5_startofpacket (rsp_demux_011_src5_startofpacket),          //          .startofpacket
		.src5_endofpacket   (rsp_demux_011_src5_endofpacket)             //          .endofpacket
	);

	system_mm_interconnect_0_rsp_demux_001 rsp_demux_012 (
		.clk                (altpll_0_c0_clk),                               //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_018_src_ready),                          //      sink.ready
		.sink_channel       (router_018_src_channel),                        //          .channel
		.sink_data          (router_018_src_data),                           //          .data
		.sink_startofpacket (router_018_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_018_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_018_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_012_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_012_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_012_src0_data),                       //          .data
		.src0_channel       (rsp_demux_012_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_012_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_012_src0_endofpacket)                 //          .endofpacket
	);

	system_mm_interconnect_0_rsp_demux_013 rsp_demux_013 (
		.clk                (altpll_0_c0_clk),                               //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_019_src_ready),                          //      sink.ready
		.sink_channel       (router_019_src_channel),                        //          .channel
		.sink_data          (router_019_src_data),                           //          .data
		.sink_startofpacket (router_019_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_019_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_019_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_013_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_013_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_013_src0_data),                       //          .data
		.src0_channel       (rsp_demux_013_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_013_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_013_src0_endofpacket),                //          .endofpacket
		.src1_ready         (rsp_demux_013_src1_ready),                      //      src1.ready
		.src1_valid         (rsp_demux_013_src1_valid),                      //          .valid
		.src1_data          (rsp_demux_013_src1_data),                       //          .data
		.src1_channel       (rsp_demux_013_src1_channel),                    //          .channel
		.src1_startofpacket (rsp_demux_013_src1_startofpacket),              //          .startofpacket
		.src1_endofpacket   (rsp_demux_013_src1_endofpacket),                //          .endofpacket
		.src2_ready         (rsp_demux_013_src2_ready),                      //      src2.ready
		.src2_valid         (rsp_demux_013_src2_valid),                      //          .valid
		.src2_data          (rsp_demux_013_src2_data),                       //          .data
		.src2_channel       (rsp_demux_013_src2_channel),                    //          .channel
		.src2_startofpacket (rsp_demux_013_src2_startofpacket),              //          .startofpacket
		.src2_endofpacket   (rsp_demux_013_src2_endofpacket),                //          .endofpacket
		.src3_ready         (rsp_demux_013_src3_ready),                      //      src3.ready
		.src3_valid         (rsp_demux_013_src3_valid),                      //          .valid
		.src3_data          (rsp_demux_013_src3_data),                       //          .data
		.src3_channel       (rsp_demux_013_src3_channel),                    //          .channel
		.src3_startofpacket (rsp_demux_013_src3_startofpacket),              //          .startofpacket
		.src3_endofpacket   (rsp_demux_013_src3_endofpacket)                 //          .endofpacket
	);

	system_mm_interconnect_0_rsp_demux_013 rsp_demux_014 (
		.clk                (altpll_0_c0_clk),                               //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_020_src_ready),                          //      sink.ready
		.sink_channel       (router_020_src_channel),                        //          .channel
		.sink_data          (router_020_src_data),                           //          .data
		.sink_startofpacket (router_020_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_020_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_020_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_014_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_014_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_014_src0_data),                       //          .data
		.src0_channel       (rsp_demux_014_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_014_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_014_src0_endofpacket),                //          .endofpacket
		.src1_ready         (rsp_demux_014_src1_ready),                      //      src1.ready
		.src1_valid         (rsp_demux_014_src1_valid),                      //          .valid
		.src1_data          (rsp_demux_014_src1_data),                       //          .data
		.src1_channel       (rsp_demux_014_src1_channel),                    //          .channel
		.src1_startofpacket (rsp_demux_014_src1_startofpacket),              //          .startofpacket
		.src1_endofpacket   (rsp_demux_014_src1_endofpacket),                //          .endofpacket
		.src2_ready         (rsp_demux_014_src2_ready),                      //      src2.ready
		.src2_valid         (rsp_demux_014_src2_valid),                      //          .valid
		.src2_data          (rsp_demux_014_src2_data),                       //          .data
		.src2_channel       (rsp_demux_014_src2_channel),                    //          .channel
		.src2_startofpacket (rsp_demux_014_src2_startofpacket),              //          .startofpacket
		.src2_endofpacket   (rsp_demux_014_src2_endofpacket),                //          .endofpacket
		.src3_ready         (rsp_demux_014_src3_ready),                      //      src3.ready
		.src3_valid         (rsp_demux_014_src3_valid),                      //          .valid
		.src3_data          (rsp_demux_014_src3_data),                       //          .data
		.src3_channel       (rsp_demux_014_src3_channel),                    //          .channel
		.src3_startofpacket (rsp_demux_014_src3_startofpacket),              //          .startofpacket
		.src3_endofpacket   (rsp_demux_014_src3_endofpacket)                 //          .endofpacket
	);

	system_mm_interconnect_0_rsp_demux_013 rsp_demux_015 (
		.clk                (altpll_0_c0_clk),                           //       clk.clk
		.reset              (manager_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_021_src_ready),                      //      sink.ready
		.sink_channel       (router_021_src_channel),                    //          .channel
		.sink_data          (router_021_src_data),                       //          .data
		.sink_startofpacket (router_021_src_startofpacket),              //          .startofpacket
		.sink_endofpacket   (router_021_src_endofpacket),                //          .endofpacket
		.sink_valid         (router_021_src_valid),                      //          .valid
		.src0_ready         (rsp_demux_015_src0_ready),                  //      src0.ready
		.src0_valid         (rsp_demux_015_src0_valid),                  //          .valid
		.src0_data          (rsp_demux_015_src0_data),                   //          .data
		.src0_channel       (rsp_demux_015_src0_channel),                //          .channel
		.src0_startofpacket (rsp_demux_015_src0_startofpacket),          //          .startofpacket
		.src0_endofpacket   (rsp_demux_015_src0_endofpacket),            //          .endofpacket
		.src1_ready         (rsp_demux_015_src1_ready),                  //      src1.ready
		.src1_valid         (rsp_demux_015_src1_valid),                  //          .valid
		.src1_data          (rsp_demux_015_src1_data),                   //          .data
		.src1_channel       (rsp_demux_015_src1_channel),                //          .channel
		.src1_startofpacket (rsp_demux_015_src1_startofpacket),          //          .startofpacket
		.src1_endofpacket   (rsp_demux_015_src1_endofpacket),            //          .endofpacket
		.src2_ready         (rsp_demux_015_src2_ready),                  //      src2.ready
		.src2_valid         (rsp_demux_015_src2_valid),                  //          .valid
		.src2_data          (rsp_demux_015_src2_data),                   //          .data
		.src2_channel       (rsp_demux_015_src2_channel),                //          .channel
		.src2_startofpacket (rsp_demux_015_src2_startofpacket),          //          .startofpacket
		.src2_endofpacket   (rsp_demux_015_src2_endofpacket),            //          .endofpacket
		.src3_ready         (rsp_demux_015_src3_ready),                  //      src3.ready
		.src3_valid         (rsp_demux_015_src3_valid),                  //          .valid
		.src3_data          (rsp_demux_015_src3_data),                   //          .data
		.src3_channel       (rsp_demux_015_src3_channel),                //          .channel
		.src3_startofpacket (rsp_demux_015_src3_startofpacket),          //          .startofpacket
		.src3_endofpacket   (rsp_demux_015_src3_endofpacket)             //          .endofpacket
	);

	system_mm_interconnect_0_rsp_demux_001 rsp_demux_016 (
		.clk                (altpll_0_c0_clk),                               //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_022_src_ready),                          //      sink.ready
		.sink_channel       (router_022_src_channel),                        //          .channel
		.sink_data          (router_022_src_data),                           //          .data
		.sink_startofpacket (router_022_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_022_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_022_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_016_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_016_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_016_src0_data),                       //          .data
		.src0_channel       (rsp_demux_016_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_016_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_016_src0_endofpacket)                 //          .endofpacket
	);

	system_mm_interconnect_0_rsp_demux_001 rsp_demux_017 (
		.clk                (altpll_0_c0_clk),                               //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_023_src_ready),                          //      sink.ready
		.sink_channel       (router_023_src_channel),                        //          .channel
		.sink_data          (router_023_src_data),                           //          .data
		.sink_startofpacket (router_023_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_023_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_023_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_017_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_017_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_017_src0_data),                       //          .data
		.src0_channel       (rsp_demux_017_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_017_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_017_src0_endofpacket)                 //          .endofpacket
	);

	system_mm_interconnect_0_rsp_demux_001 rsp_demux_018 (
		.clk                (altpll_0_c0_clk),                               //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_024_src_ready),                          //      sink.ready
		.sink_channel       (router_024_src_channel),                        //          .channel
		.sink_data          (router_024_src_data),                           //          .data
		.sink_startofpacket (router_024_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_024_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_024_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_018_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_018_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_018_src0_data),                       //          .data
		.src0_channel       (rsp_demux_018_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_018_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_018_src0_endofpacket)                 //          .endofpacket
	);

	system_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                  (altpll_0_c0_clk),                           //       clk.clk
		.reset                (manager_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready            (rsp_mux_src_ready),                         //       src.ready
		.src_valid            (rsp_mux_src_valid),                         //          .valid
		.src_data             (rsp_mux_src_data),                          //          .data
		.src_channel          (rsp_mux_src_channel),                       //          .channel
		.src_startofpacket    (rsp_mux_src_startofpacket),                 //          .startofpacket
		.src_endofpacket      (rsp_mux_src_endofpacket),                   //          .endofpacket
		.sink0_ready          (rsp_demux_src0_ready),                      //     sink0.ready
		.sink0_valid          (rsp_demux_src0_valid),                      //          .valid
		.sink0_channel        (rsp_demux_src0_channel),                    //          .channel
		.sink0_data           (rsp_demux_src0_data),                       //          .data
		.sink0_startofpacket  (rsp_demux_src0_startofpacket),              //          .startofpacket
		.sink0_endofpacket    (rsp_demux_src0_endofpacket),                //          .endofpacket
		.sink1_ready          (rsp_demux_001_src0_ready),                  //     sink1.ready
		.sink1_valid          (rsp_demux_001_src0_valid),                  //          .valid
		.sink1_channel        (rsp_demux_001_src0_channel),                //          .channel
		.sink1_data           (rsp_demux_001_src0_data),                   //          .data
		.sink1_startofpacket  (rsp_demux_001_src0_startofpacket),          //          .startofpacket
		.sink1_endofpacket    (rsp_demux_001_src0_endofpacket),            //          .endofpacket
		.sink2_ready          (rsp_demux_002_src0_ready),                  //     sink2.ready
		.sink2_valid          (rsp_demux_002_src0_valid),                  //          .valid
		.sink2_channel        (rsp_demux_002_src0_channel),                //          .channel
		.sink2_data           (rsp_demux_002_src0_data),                   //          .data
		.sink2_startofpacket  (rsp_demux_002_src0_startofpacket),          //          .startofpacket
		.sink2_endofpacket    (rsp_demux_002_src0_endofpacket),            //          .endofpacket
		.sink3_ready          (rsp_demux_003_src0_ready),                  //     sink3.ready
		.sink3_valid          (rsp_demux_003_src0_valid),                  //          .valid
		.sink3_channel        (rsp_demux_003_src0_channel),                //          .channel
		.sink3_data           (rsp_demux_003_src0_data),                   //          .data
		.sink3_startofpacket  (rsp_demux_003_src0_startofpacket),          //          .startofpacket
		.sink3_endofpacket    (rsp_demux_003_src0_endofpacket),            //          .endofpacket
		.sink4_ready          (rsp_demux_004_src0_ready),                  //     sink4.ready
		.sink4_valid          (rsp_demux_004_src0_valid),                  //          .valid
		.sink4_channel        (rsp_demux_004_src0_channel),                //          .channel
		.sink4_data           (rsp_demux_004_src0_data),                   //          .data
		.sink4_startofpacket  (rsp_demux_004_src0_startofpacket),          //          .startofpacket
		.sink4_endofpacket    (rsp_demux_004_src0_endofpacket),            //          .endofpacket
		.sink5_ready          (rsp_demux_005_src0_ready),                  //     sink5.ready
		.sink5_valid          (rsp_demux_005_src0_valid),                  //          .valid
		.sink5_channel        (rsp_demux_005_src0_channel),                //          .channel
		.sink5_data           (rsp_demux_005_src0_data),                   //          .data
		.sink5_startofpacket  (rsp_demux_005_src0_startofpacket),          //          .startofpacket
		.sink5_endofpacket    (rsp_demux_005_src0_endofpacket),            //          .endofpacket
		.sink6_ready          (rsp_demux_006_src0_ready),                  //     sink6.ready
		.sink6_valid          (rsp_demux_006_src0_valid),                  //          .valid
		.sink6_channel        (rsp_demux_006_src0_channel),                //          .channel
		.sink6_data           (rsp_demux_006_src0_data),                   //          .data
		.sink6_startofpacket  (rsp_demux_006_src0_startofpacket),          //          .startofpacket
		.sink6_endofpacket    (rsp_demux_006_src0_endofpacket),            //          .endofpacket
		.sink7_ready          (rsp_demux_007_src0_ready),                  //     sink7.ready
		.sink7_valid          (rsp_demux_007_src0_valid),                  //          .valid
		.sink7_channel        (rsp_demux_007_src0_channel),                //          .channel
		.sink7_data           (rsp_demux_007_src0_data),                   //          .data
		.sink7_startofpacket  (rsp_demux_007_src0_startofpacket),          //          .startofpacket
		.sink7_endofpacket    (rsp_demux_007_src0_endofpacket),            //          .endofpacket
		.sink8_ready          (rsp_demux_008_src0_ready),                  //     sink8.ready
		.sink8_valid          (rsp_demux_008_src0_valid),                  //          .valid
		.sink8_channel        (rsp_demux_008_src0_channel),                //          .channel
		.sink8_data           (rsp_demux_008_src0_data),                   //          .data
		.sink8_startofpacket  (rsp_demux_008_src0_startofpacket),          //          .startofpacket
		.sink8_endofpacket    (rsp_demux_008_src0_endofpacket),            //          .endofpacket
		.sink9_ready          (crosser_001_out_ready),                     //     sink9.ready
		.sink9_valid          (crosser_001_out_valid),                     //          .valid
		.sink9_channel        (crosser_001_out_channel),                   //          .channel
		.sink9_data           (crosser_001_out_data),                      //          .data
		.sink9_startofpacket  (crosser_001_out_startofpacket),             //          .startofpacket
		.sink9_endofpacket    (crosser_001_out_endofpacket),               //          .endofpacket
		.sink10_ready         (rsp_demux_010_src0_ready),                  //    sink10.ready
		.sink10_valid         (rsp_demux_010_src0_valid),                  //          .valid
		.sink10_channel       (rsp_demux_010_src0_channel),                //          .channel
		.sink10_data          (rsp_demux_010_src0_data),                   //          .data
		.sink10_startofpacket (rsp_demux_010_src0_startofpacket),          //          .startofpacket
		.sink10_endofpacket   (rsp_demux_010_src0_endofpacket),            //          .endofpacket
		.sink11_ready         (rsp_demux_011_src0_ready),                  //    sink11.ready
		.sink11_valid         (rsp_demux_011_src0_valid),                  //          .valid
		.sink11_channel       (rsp_demux_011_src0_channel),                //          .channel
		.sink11_data          (rsp_demux_011_src0_data),                   //          .data
		.sink11_startofpacket (rsp_demux_011_src0_startofpacket),          //          .startofpacket
		.sink11_endofpacket   (rsp_demux_011_src0_endofpacket)             //          .endofpacket
	);

	system_mm_interconnect_0_rsp_mux_001 rsp_mux_001 (
		.clk                 (altpll_0_c0_clk),                           //       clk.clk
		.reset               (manager_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                     //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                     //          .valid
		.src_data            (rsp_mux_001_src_data),                      //          .data
		.src_channel         (rsp_mux_001_src_channel),                   //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),             //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),               //          .endofpacket
		.sink0_ready         (rsp_demux_src1_ready),                      //     sink0.ready
		.sink0_valid         (rsp_demux_src1_valid),                      //          .valid
		.sink0_channel       (rsp_demux_src1_channel),                    //          .channel
		.sink0_data          (rsp_demux_src1_data),                       //          .data
		.sink0_startofpacket (rsp_demux_src1_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src1_endofpacket),                //          .endofpacket
		.sink1_ready         (rsp_demux_006_src1_ready),                  //     sink1.ready
		.sink1_valid         (rsp_demux_006_src1_valid),                  //          .valid
		.sink1_channel       (rsp_demux_006_src1_channel),                //          .channel
		.sink1_data          (rsp_demux_006_src1_data),                   //          .data
		.sink1_startofpacket (rsp_demux_006_src1_startofpacket),          //          .startofpacket
		.sink1_endofpacket   (rsp_demux_006_src1_endofpacket),            //          .endofpacket
		.sink2_ready         (rsp_demux_011_src1_ready),                  //     sink2.ready
		.sink2_valid         (rsp_demux_011_src1_valid),                  //          .valid
		.sink2_channel       (rsp_demux_011_src1_channel),                //          .channel
		.sink2_data          (rsp_demux_011_src1_data),                   //          .data
		.sink2_startofpacket (rsp_demux_011_src1_startofpacket),          //          .startofpacket
		.sink2_endofpacket   (rsp_demux_011_src1_endofpacket)             //          .endofpacket
	);

	system_mm_interconnect_0_rsp_mux_002 rsp_mux_002 (
		.clk                 (altpll_0_c0_clk),                               //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_002_src_ready),                         //       src.ready
		.src_valid           (rsp_mux_002_src_valid),                         //          .valid
		.src_data            (rsp_mux_002_src_data),                          //          .data
		.src_channel         (rsp_mux_002_src_channel),                       //          .channel
		.src_startofpacket   (rsp_mux_002_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (rsp_mux_002_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (rsp_demux_011_src2_ready),                      //     sink0.ready
		.sink0_valid         (rsp_demux_011_src2_valid),                      //          .valid
		.sink0_channel       (rsp_demux_011_src2_channel),                    //          .channel
		.sink0_data          (rsp_demux_011_src2_data),                       //          .data
		.sink0_startofpacket (rsp_demux_011_src2_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (rsp_demux_011_src2_endofpacket),                //          .endofpacket
		.sink1_ready         (rsp_demux_013_src0_ready),                      //     sink1.ready
		.sink1_valid         (rsp_demux_013_src0_valid),                      //          .valid
		.sink1_channel       (rsp_demux_013_src0_channel),                    //          .channel
		.sink1_data          (rsp_demux_013_src0_data),                       //          .data
		.sink1_startofpacket (rsp_demux_013_src0_startofpacket),              //          .startofpacket
		.sink1_endofpacket   (rsp_demux_013_src0_endofpacket),                //          .endofpacket
		.sink2_ready         (rsp_demux_014_src0_ready),                      //     sink2.ready
		.sink2_valid         (rsp_demux_014_src0_valid),                      //          .valid
		.sink2_channel       (rsp_demux_014_src0_channel),                    //          .channel
		.sink2_data          (rsp_demux_014_src0_data),                       //          .data
		.sink2_startofpacket (rsp_demux_014_src0_startofpacket),              //          .startofpacket
		.sink2_endofpacket   (rsp_demux_014_src0_endofpacket),                //          .endofpacket
		.sink3_ready         (rsp_demux_015_src0_ready),                      //     sink3.ready
		.sink3_valid         (rsp_demux_015_src0_valid),                      //          .valid
		.sink3_channel       (rsp_demux_015_src0_channel),                    //          .channel
		.sink3_data          (rsp_demux_015_src0_data),                       //          .data
		.sink3_startofpacket (rsp_demux_015_src0_startofpacket),              //          .startofpacket
		.sink3_endofpacket   (rsp_demux_015_src0_endofpacket),                //          .endofpacket
		.sink4_ready         (rsp_demux_018_src0_ready),                      //     sink4.ready
		.sink4_valid         (rsp_demux_018_src0_valid),                      //          .valid
		.sink4_channel       (rsp_demux_018_src0_channel),                    //          .channel
		.sink4_data          (rsp_demux_018_src0_data),                       //          .data
		.sink4_startofpacket (rsp_demux_018_src0_startofpacket),              //          .startofpacket
		.sink4_endofpacket   (rsp_demux_018_src0_endofpacket)                 //          .endofpacket
	);

	system_mm_interconnect_0_rsp_mux_002 rsp_mux_003 (
		.clk                 (altpll_0_c0_clk),                               //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_003_src_ready),                         //       src.ready
		.src_valid           (rsp_mux_003_src_valid),                         //          .valid
		.src_data            (rsp_mux_003_src_data),                          //          .data
		.src_channel         (rsp_mux_003_src_channel),                       //          .channel
		.src_startofpacket   (rsp_mux_003_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (rsp_mux_003_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (rsp_demux_011_src3_ready),                      //     sink0.ready
		.sink0_valid         (rsp_demux_011_src3_valid),                      //          .valid
		.sink0_channel       (rsp_demux_011_src3_channel),                    //          .channel
		.sink0_data          (rsp_demux_011_src3_data),                       //          .data
		.sink0_startofpacket (rsp_demux_011_src3_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (rsp_demux_011_src3_endofpacket),                //          .endofpacket
		.sink1_ready         (rsp_demux_013_src1_ready),                      //     sink1.ready
		.sink1_valid         (rsp_demux_013_src1_valid),                      //          .valid
		.sink1_channel       (rsp_demux_013_src1_channel),                    //          .channel
		.sink1_data          (rsp_demux_013_src1_data),                       //          .data
		.sink1_startofpacket (rsp_demux_013_src1_startofpacket),              //          .startofpacket
		.sink1_endofpacket   (rsp_demux_013_src1_endofpacket),                //          .endofpacket
		.sink2_ready         (rsp_demux_014_src1_ready),                      //     sink2.ready
		.sink2_valid         (rsp_demux_014_src1_valid),                      //          .valid
		.sink2_channel       (rsp_demux_014_src1_channel),                    //          .channel
		.sink2_data          (rsp_demux_014_src1_data),                       //          .data
		.sink2_startofpacket (rsp_demux_014_src1_startofpacket),              //          .startofpacket
		.sink2_endofpacket   (rsp_demux_014_src1_endofpacket),                //          .endofpacket
		.sink3_ready         (rsp_demux_015_src1_ready),                      //     sink3.ready
		.sink3_valid         (rsp_demux_015_src1_valid),                      //          .valid
		.sink3_channel       (rsp_demux_015_src1_channel),                    //          .channel
		.sink3_data          (rsp_demux_015_src1_data),                       //          .data
		.sink3_startofpacket (rsp_demux_015_src1_startofpacket),              //          .startofpacket
		.sink3_endofpacket   (rsp_demux_015_src1_endofpacket),                //          .endofpacket
		.sink4_ready         (rsp_demux_017_src0_ready),                      //     sink4.ready
		.sink4_valid         (rsp_demux_017_src0_valid),                      //          .valid
		.sink4_channel       (rsp_demux_017_src0_channel),                    //          .channel
		.sink4_data          (rsp_demux_017_src0_data),                       //          .data
		.sink4_startofpacket (rsp_demux_017_src0_startofpacket),              //          .startofpacket
		.sink4_endofpacket   (rsp_demux_017_src0_endofpacket)                 //          .endofpacket
	);

	system_mm_interconnect_0_rsp_mux_002 rsp_mux_004 (
		.clk                 (altpll_0_c0_clk),                               //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_004_src_ready),                         //       src.ready
		.src_valid           (rsp_mux_004_src_valid),                         //          .valid
		.src_data            (rsp_mux_004_src_data),                          //          .data
		.src_channel         (rsp_mux_004_src_channel),                       //          .channel
		.src_startofpacket   (rsp_mux_004_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (rsp_mux_004_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (rsp_demux_011_src4_ready),                      //     sink0.ready
		.sink0_valid         (rsp_demux_011_src4_valid),                      //          .valid
		.sink0_channel       (rsp_demux_011_src4_channel),                    //          .channel
		.sink0_data          (rsp_demux_011_src4_data),                       //          .data
		.sink0_startofpacket (rsp_demux_011_src4_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (rsp_demux_011_src4_endofpacket),                //          .endofpacket
		.sink1_ready         (rsp_demux_013_src2_ready),                      //     sink1.ready
		.sink1_valid         (rsp_demux_013_src2_valid),                      //          .valid
		.sink1_channel       (rsp_demux_013_src2_channel),                    //          .channel
		.sink1_data          (rsp_demux_013_src2_data),                       //          .data
		.sink1_startofpacket (rsp_demux_013_src2_startofpacket),              //          .startofpacket
		.sink1_endofpacket   (rsp_demux_013_src2_endofpacket),                //          .endofpacket
		.sink2_ready         (rsp_demux_014_src2_ready),                      //     sink2.ready
		.sink2_valid         (rsp_demux_014_src2_valid),                      //          .valid
		.sink2_channel       (rsp_demux_014_src2_channel),                    //          .channel
		.sink2_data          (rsp_demux_014_src2_data),                       //          .data
		.sink2_startofpacket (rsp_demux_014_src2_startofpacket),              //          .startofpacket
		.sink2_endofpacket   (rsp_demux_014_src2_endofpacket),                //          .endofpacket
		.sink3_ready         (rsp_demux_015_src2_ready),                      //     sink3.ready
		.sink3_valid         (rsp_demux_015_src2_valid),                      //          .valid
		.sink3_channel       (rsp_demux_015_src2_channel),                    //          .channel
		.sink3_data          (rsp_demux_015_src2_data),                       //          .data
		.sink3_startofpacket (rsp_demux_015_src2_startofpacket),              //          .startofpacket
		.sink3_endofpacket   (rsp_demux_015_src2_endofpacket),                //          .endofpacket
		.sink4_ready         (rsp_demux_016_src0_ready),                      //     sink4.ready
		.sink4_valid         (rsp_demux_016_src0_valid),                      //          .valid
		.sink4_channel       (rsp_demux_016_src0_channel),                    //          .channel
		.sink4_data          (rsp_demux_016_src0_data),                       //          .data
		.sink4_startofpacket (rsp_demux_016_src0_startofpacket),              //          .startofpacket
		.sink4_endofpacket   (rsp_demux_016_src0_endofpacket)                 //          .endofpacket
	);

	system_mm_interconnect_0_rsp_mux_002 rsp_mux_005 (
		.clk                 (altpll_0_c0_clk),                               //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_005_src_ready),                         //       src.ready
		.src_valid           (rsp_mux_005_src_valid),                         //          .valid
		.src_data            (rsp_mux_005_src_data),                          //          .data
		.src_channel         (rsp_mux_005_src_channel),                       //          .channel
		.src_startofpacket   (rsp_mux_005_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (rsp_mux_005_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (rsp_demux_011_src5_ready),                      //     sink0.ready
		.sink0_valid         (rsp_demux_011_src5_valid),                      //          .valid
		.sink0_channel       (rsp_demux_011_src5_channel),                    //          .channel
		.sink0_data          (rsp_demux_011_src5_data),                       //          .data
		.sink0_startofpacket (rsp_demux_011_src5_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (rsp_demux_011_src5_endofpacket),                //          .endofpacket
		.sink1_ready         (rsp_demux_012_src0_ready),                      //     sink1.ready
		.sink1_valid         (rsp_demux_012_src0_valid),                      //          .valid
		.sink1_channel       (rsp_demux_012_src0_channel),                    //          .channel
		.sink1_data          (rsp_demux_012_src0_data),                       //          .data
		.sink1_startofpacket (rsp_demux_012_src0_startofpacket),              //          .startofpacket
		.sink1_endofpacket   (rsp_demux_012_src0_endofpacket),                //          .endofpacket
		.sink2_ready         (rsp_demux_013_src3_ready),                      //     sink2.ready
		.sink2_valid         (rsp_demux_013_src3_valid),                      //          .valid
		.sink2_channel       (rsp_demux_013_src3_channel),                    //          .channel
		.sink2_data          (rsp_demux_013_src3_data),                       //          .data
		.sink2_startofpacket (rsp_demux_013_src3_startofpacket),              //          .startofpacket
		.sink2_endofpacket   (rsp_demux_013_src3_endofpacket),                //          .endofpacket
		.sink3_ready         (rsp_demux_014_src3_ready),                      //     sink3.ready
		.sink3_valid         (rsp_demux_014_src3_valid),                      //          .valid
		.sink3_channel       (rsp_demux_014_src3_channel),                    //          .channel
		.sink3_data          (rsp_demux_014_src3_data),                       //          .data
		.sink3_startofpacket (rsp_demux_014_src3_startofpacket),              //          .startofpacket
		.sink3_endofpacket   (rsp_demux_014_src3_endofpacket),                //          .endofpacket
		.sink4_ready         (rsp_demux_015_src3_ready),                      //     sink4.ready
		.sink4_valid         (rsp_demux_015_src3_valid),                      //          .valid
		.sink4_channel       (rsp_demux_015_src3_channel),                    //          .channel
		.sink4_data          (rsp_demux_015_src3_data),                       //          .data
		.sink4_startofpacket (rsp_demux_015_src3_startofpacket),              //          .startofpacket
		.sink4_endofpacket   (rsp_demux_015_src3_endofpacket)                 //          .endofpacket
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (108),
		.BITS_PER_SYMBOL     (108),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (19),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser (
		.in_clk            (altpll_0_c0_clk),                                            //        in_clk.clk
		.in_reset          (manager_reset_reset_bridge_in_reset_reset),                  //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                              //       out_clk.clk
		.out_reset         (altpll_0_inclk_interface_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_src9_ready),                                       //            in.ready
		.in_valid          (cmd_demux_src9_valid),                                       //              .valid
		.in_startofpacket  (cmd_demux_src9_startofpacket),                               //              .startofpacket
		.in_endofpacket    (cmd_demux_src9_endofpacket),                                 //              .endofpacket
		.in_channel        (cmd_demux_src9_channel),                                     //              .channel
		.in_data           (cmd_demux_src9_data),                                        //              .data
		.out_ready         (crosser_out_ready),                                          //           out.ready
		.out_valid         (crosser_out_valid),                                          //              .valid
		.out_startofpacket (crosser_out_startofpacket),                                  //              .startofpacket
		.out_endofpacket   (crosser_out_endofpacket),                                    //              .endofpacket
		.out_channel       (crosser_out_channel),                                        //              .channel
		.out_data          (crosser_out_data),                                           //              .data
		.in_empty          (1'b0),                                                       //   (terminated)
		.in_error          (1'b0),                                                       //   (terminated)
		.out_empty         (),                                                           //   (terminated)
		.out_error         ()                                                            //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (108),
		.BITS_PER_SYMBOL     (108),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (19),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_001 (
		.in_clk            (clk_0_clk_clk),                                              //        in_clk.clk
		.in_reset          (altpll_0_inclk_interface_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (altpll_0_c0_clk),                                            //       out_clk.clk
		.out_reset         (manager_reset_reset_bridge_in_reset_reset),                  // out_clk_reset.reset
		.in_ready          (rsp_demux_009_src0_ready),                                   //            in.ready
		.in_valid          (rsp_demux_009_src0_valid),                                   //              .valid
		.in_startofpacket  (rsp_demux_009_src0_startofpacket),                           //              .startofpacket
		.in_endofpacket    (rsp_demux_009_src0_endofpacket),                             //              .endofpacket
		.in_channel        (rsp_demux_009_src0_channel),                                 //              .channel
		.in_data           (rsp_demux_009_src0_data),                                    //              .data
		.out_ready         (crosser_001_out_ready),                                      //           out.ready
		.out_valid         (crosser_001_out_valid),                                      //              .valid
		.out_startofpacket (crosser_001_out_startofpacket),                              //              .startofpacket
		.out_endofpacket   (crosser_001_out_endofpacket),                                //              .endofpacket
		.out_channel       (crosser_001_out_channel),                                    //              .channel
		.out_data          (crosser_001_out_data),                                       //              .data
		.in_empty          (1'b0),                                                       //   (terminated)
		.in_error          (1'b0),                                                       //   (terminated)
		.out_empty         (),                                                           //   (terminated)
		.out_error         ()                                                            //   (terminated)
	);

	system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (altpll_0_c0_clk),                                          // in_clk_0.clk
		.in_rst_0_reset (jtag_uart_0_reset_reset_bridge_in_reset_reset),            // in_rst_0.reset
		.in_0_data      (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                             //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                            //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                            //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                             //         .error
	);

	system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (altpll_0_c0_clk),                                      // in_clk_0.clk
		.in_rst_0_reset (jtag_uart_0_reset_reset_bridge_in_reset_reset),        // in_rst_0.reset
		.in_0_data      (mbox_m_w0_avmm_msg_sender_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (mbox_m_w0_avmm_msg_sender_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (mbox_m_w0_avmm_msg_sender_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),                     //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),                    //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),                    //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)                     //         .error
	);

	system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (altpll_0_c0_clk),                                      // in_clk_0.clk
		.in_rst_0_reset (jtag_uart_0_reset_reset_bridge_in_reset_reset),        // in_rst_0.reset
		.in_0_data      (mbox_m_w1_avmm_msg_sender_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (mbox_m_w1_avmm_msg_sender_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (mbox_m_w1_avmm_msg_sender_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),                     //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),                    //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),                    //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)                     //         .error
	);

	system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (altpll_0_c0_clk),                                      // in_clk_0.clk
		.in_rst_0_reset (jtag_uart_0_reset_reset_bridge_in_reset_reset),        // in_rst_0.reset
		.in_0_data      (mbox_m_w2_avmm_msg_sender_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (mbox_m_w2_avmm_msg_sender_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (mbox_m_w2_avmm_msg_sender_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),                     //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),                    //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),                    //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)                     //         .error
	);

	system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_004 (
		.in_clk_0_clk   (altpll_0_c0_clk),                                      // in_clk_0.clk
		.in_rst_0_reset (jtag_uart_0_reset_reset_bridge_in_reset_reset),        // in_rst_0.reset
		.in_0_data      (mbox_m_w3_avmm_msg_sender_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (mbox_m_w3_avmm_msg_sender_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (mbox_m_w3_avmm_msg_sender_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_004_out_0_data),                     //    out_0.data
		.out_0_valid    (avalon_st_adapter_004_out_0_valid),                    //         .valid
		.out_0_ready    (avalon_st_adapter_004_out_0_ready),                    //         .ready
		.out_0_error    (avalon_st_adapter_004_out_0_error)                     //         .error
	);

	system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_005 (
		.in_clk_0_clk   (altpll_0_c0_clk),                                                // in_clk_0.clk
		.in_rst_0_reset (jtag_uart_0_reset_reset_bridge_in_reset_reset),                  // in_rst_0.reset
		.in_0_data      (performance_counter_0_control_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (performance_counter_0_control_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (performance_counter_0_control_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_005_out_0_data),                               //    out_0.data
		.out_0_valid    (avalon_st_adapter_005_out_0_valid),                              //         .valid
		.out_0_ready    (avalon_st_adapter_005_out_0_ready),                              //         .ready
		.out_0_error    (avalon_st_adapter_005_out_0_error)                               //         .error
	);

	system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_006 (
		.in_clk_0_clk   (altpll_0_c0_clk),                                    // in_clk_0.clk
		.in_rst_0_reset (manager_reset_reset_bridge_in_reset_reset),          // in_rst_0.reset
		.in_0_data      (manager_debug_mem_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (manager_debug_mem_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (manager_debug_mem_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_006_out_0_data),                   //    out_0.data
		.out_0_valid    (avalon_st_adapter_006_out_0_valid),                  //         .valid
		.out_0_ready    (avalon_st_adapter_006_out_0_ready),                  //         .ready
		.out_0_error    (avalon_st_adapter_006_out_0_error)                   //         .error
	);

	system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_007 (
		.in_clk_0_clk   (altpll_0_c0_clk),                               // in_clk_0.clk
		.in_rst_0_reset (jtag_uart_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (req_fifo_out_agent_rdata_fifo_src_data),        //     in_0.data
		.in_0_valid     (req_fifo_out_agent_rdata_fifo_src_valid),       //         .valid
		.in_0_ready     (req_fifo_out_agent_rdata_fifo_src_ready),       //         .ready
		.out_0_data     (avalon_st_adapter_007_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_007_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_007_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_007_out_0_error)              //         .error
	);

	system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_008 (
		.in_clk_0_clk   (altpll_0_c0_clk),                               // in_clk_0.clk
		.in_rst_0_reset (jtag_uart_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (req_fifo_out_csr_agent_rdata_fifo_src_data),    //     in_0.data
		.in_0_valid     (req_fifo_out_csr_agent_rdata_fifo_src_valid),   //         .valid
		.in_0_ready     (req_fifo_out_csr_agent_rdata_fifo_src_ready),   //         .ready
		.out_0_data     (avalon_st_adapter_008_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_008_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_008_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_008_out_0_error)              //         .error
	);

	system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_009 (
		.in_clk_0_clk   (clk_0_clk_clk),                                              // in_clk_0.clk
		.in_rst_0_reset (altpll_0_inclk_interface_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (altpll_0_pll_slave_agent_rdata_fifo_out_data),               //     in_0.data
		.in_0_valid     (altpll_0_pll_slave_agent_rdata_fifo_out_valid),              //         .valid
		.in_0_ready     (altpll_0_pll_slave_agent_rdata_fifo_out_ready),              //         .ready
		.out_0_data     (avalon_st_adapter_009_out_0_data),                           //    out_0.data
		.out_0_valid    (avalon_st_adapter_009_out_0_valid),                          //         .valid
		.out_0_ready    (avalon_st_adapter_009_out_0_ready),                          //         .ready
		.out_0_error    (avalon_st_adapter_009_out_0_error)                           //         .error
	);

	system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_010 (
		.in_clk_0_clk   (altpll_0_c0_clk),                           // in_clk_0.clk
		.in_rst_0_reset (manager_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (shared_ocm_s1_agent_rdata_fifo_src_data),   //     in_0.data
		.in_0_valid     (shared_ocm_s1_agent_rdata_fifo_src_valid),  //         .valid
		.in_0_ready     (shared_ocm_s1_agent_rdata_fifo_src_ready),  //         .ready
		.out_0_data     (avalon_st_adapter_010_out_0_data),          //    out_0.data
		.out_0_valid    (avalon_st_adapter_010_out_0_valid),         //         .valid
		.out_0_ready    (avalon_st_adapter_010_out_0_ready),         //         .ready
		.out_0_error    (avalon_st_adapter_010_out_0_error)          //         .error
	);

	system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_011 (
		.in_clk_0_clk   (altpll_0_c0_clk),                           // in_clk_0.clk
		.in_rst_0_reset (manager_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sdram_0_sdout_agent_rdata_fifo_src_data),   //     in_0.data
		.in_0_valid     (sdram_0_sdout_agent_rdata_fifo_src_valid),  //         .valid
		.in_0_ready     (sdram_0_sdout_agent_rdata_fifo_src_ready),  //         .ready
		.out_0_data     (avalon_st_adapter_011_out_0_data),          //    out_0.data
		.out_0_valid    (avalon_st_adapter_011_out_0_valid),         //         .valid
		.out_0_ready    (avalon_st_adapter_011_out_0_ready),         //         .ready
		.out_0_error    (avalon_st_adapter_011_out_0_error)          //         .error
	);

	system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_012 (
		.in_clk_0_clk   (altpll_0_c0_clk),                                        // in_clk_0.clk
		.in_rst_0_reset (jtag_uart_0_reset_reset_bridge_in_reset_reset),          // in_rst_0.reset
		.in_0_data      (mbox_m_w3_avmm_msg_receiver_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (mbox_m_w3_avmm_msg_receiver_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (mbox_m_w3_avmm_msg_receiver_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_012_out_0_data),                       //    out_0.data
		.out_0_valid    (avalon_st_adapter_012_out_0_valid),                      //         .valid
		.out_0_ready    (avalon_st_adapter_012_out_0_ready),                      //         .ready
		.out_0_error    (avalon_st_adapter_012_out_0_error)                       //         .error
	);

	system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_013 (
		.in_clk_0_clk   (altpll_0_c0_clk),                               // in_clk_0.clk
		.in_rst_0_reset (jtag_uart_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (req_fifo_in_agent_rdata_fifo_src_data),         //     in_0.data
		.in_0_valid     (req_fifo_in_agent_rdata_fifo_src_valid),        //         .valid
		.in_0_ready     (req_fifo_in_agent_rdata_fifo_src_ready),        //         .ready
		.out_0_data     (avalon_st_adapter_013_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_013_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_013_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_013_out_0_error)              //         .error
	);

	system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_014 (
		.in_clk_0_clk   (altpll_0_c0_clk),                               // in_clk_0.clk
		.in_rst_0_reset (jtag_uart_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (req_fifo_in_csr_agent_rdata_fifo_src_data),     //     in_0.data
		.in_0_valid     (req_fifo_in_csr_agent_rdata_fifo_src_valid),    //         .valid
		.in_0_ready     (req_fifo_in_csr_agent_rdata_fifo_src_ready),    //         .ready
		.out_0_data     (avalon_st_adapter_014_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_014_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_014_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_014_out_0_error)              //         .error
	);

	system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_015 (
		.in_clk_0_clk   (altpll_0_c0_clk),                           // in_clk_0.clk
		.in_rst_0_reset (manager_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (shared_ocm_s2_agent_rdata_fifo_src_data),   //     in_0.data
		.in_0_valid     (shared_ocm_s2_agent_rdata_fifo_src_valid),  //         .valid
		.in_0_ready     (shared_ocm_s2_agent_rdata_fifo_src_ready),  //         .ready
		.out_0_data     (avalon_st_adapter_015_out_0_data),          //    out_0.data
		.out_0_valid    (avalon_st_adapter_015_out_0_valid),         //         .valid
		.out_0_ready    (avalon_st_adapter_015_out_0_ready),         //         .ready
		.out_0_error    (avalon_st_adapter_015_out_0_error)          //         .error
	);

	system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_016 (
		.in_clk_0_clk   (altpll_0_c0_clk),                                        // in_clk_0.clk
		.in_rst_0_reset (jtag_uart_0_reset_reset_bridge_in_reset_reset),          // in_rst_0.reset
		.in_0_data      (mbox_m_w2_avmm_msg_receiver_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (mbox_m_w2_avmm_msg_receiver_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (mbox_m_w2_avmm_msg_receiver_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_016_out_0_data),                       //    out_0.data
		.out_0_valid    (avalon_st_adapter_016_out_0_valid),                      //         .valid
		.out_0_ready    (avalon_st_adapter_016_out_0_ready),                      //         .ready
		.out_0_error    (avalon_st_adapter_016_out_0_error)                       //         .error
	);

	system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_017 (
		.in_clk_0_clk   (altpll_0_c0_clk),                                        // in_clk_0.clk
		.in_rst_0_reset (jtag_uart_0_reset_reset_bridge_in_reset_reset),          // in_rst_0.reset
		.in_0_data      (mbox_m_w1_avmm_msg_receiver_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (mbox_m_w1_avmm_msg_receiver_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (mbox_m_w1_avmm_msg_receiver_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_017_out_0_data),                       //    out_0.data
		.out_0_valid    (avalon_st_adapter_017_out_0_valid),                      //         .valid
		.out_0_ready    (avalon_st_adapter_017_out_0_ready),                      //         .ready
		.out_0_error    (avalon_st_adapter_017_out_0_error)                       //         .error
	);

	system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_018 (
		.in_clk_0_clk   (altpll_0_c0_clk),                                        // in_clk_0.clk
		.in_rst_0_reset (jtag_uart_0_reset_reset_bridge_in_reset_reset),          // in_rst_0.reset
		.in_0_data      (mbox_m_w0_avmm_msg_receiver_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (mbox_m_w0_avmm_msg_receiver_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (mbox_m_w0_avmm_msg_receiver_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_018_out_0_data),                       //    out_0.data
		.out_0_valid    (avalon_st_adapter_018_out_0_valid),                      //         .valid
		.out_0_ready    (avalon_st_adapter_018_out_0_ready),                      //         .ready
		.out_0_error    (avalon_st_adapter_018_out_0_error)                       //         .error
	);

endmodule
