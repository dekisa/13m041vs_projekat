
worker_0.elf:     file format elf32-littlenios2
worker_0.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x12100020

Program Header:
    LOAD off    0x00001000 vaddr 0x12100000 paddr 0x12100000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x12100020 paddr 0x12100020 align 2**12
         filesz 0x0000084c memsz 0x0000084c flags r-x
    LOAD off    0x0000186c vaddr 0x1210086c paddr 0x121008b0 align 2**12
         filesz 0x00000044 memsz 0x00000044 flags rw-
    LOAD off    0x000018f4 vaddr 0x121008f4 paddr 0x121008f4 align 2**12
         filesz 0x00000000 memsz 0x00000014 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  12100000  12100000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  12100020  12100020  000018b0  2**0
                  CONTENTS
  2 .text         00000834  12100020  12100020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000018  12100854  12100854  00001854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000044  1210086c  121008b0  0000186c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000014  121008f4  121008f4  000018f4  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  12100908  12100908  000018b0  2**0
                  CONTENTS
  7 .shared_ocm   00000000  14001000  14001000  000018b0  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  000018b0  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000260  00000000  00000000  000018d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00001f4d  00000000  00000000  00001b38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000f57  00000000  00000000  00003a85  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00000ff2  00000000  00000000  000049dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000330  00000000  00000000  000059d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00000bd9  00000000  00000000  00005d00  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00000aff  00000000  00000000  000068d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000060  00000000  00000000  000073d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000190  00000000  00000000  00007438  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  000087f2  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  000087f5  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00008801  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00008802  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   00000014  00000000  00000000  00008803  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    00000014  00000000  00000000  00008817  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   00000014  00000000  00000000  0000882b  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 00000006  00000000  00000000  0000883f  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 0000002b  00000000  00000000  00008845  2**0
                  CONTENTS, READONLY
 27 .jdi          0001a980  00000000  00000000  00008870  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     00117389  00000000  00000000  000231f0  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
12100000 l    d  .entry	00000000 .entry
12100020 l    d  .exceptions	00000000 .exceptions
12100020 l    d  .text	00000000 .text
12100854 l    d  .rodata	00000000 .rodata
1210086c l    d  .rwdata	00000000 .rwdata
121008f4 l    d  .bss	00000000 .bss
12100908 l    d  .sdram	00000000 .sdram
14001000 l    d  .shared_ocm	00000000 .shared_ocm
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../worker_0_bsp//obj/HAL/src/crt0.o
12100068 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
1210086c l     O .rwdata	00000010 shared_ocm_mutex
00000000 l    df *ABS*	00000000 altera_avalon_mutex.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
12100344 g     F .text	0000002c alt_main
121008b0 g       *ABS*	00000000 __flash_rwdata_start
12100890 g     O .rwdata	00000004 c_y
12100418 g     F .text	00000028 altera_avalon_mutex_trylock
12100614 g     F .text	00000008 altera_nios2_gen2_irq_init
12100000 g     F .entry	0000001c __reset
12100460 g     F .text	00000028 altera_avalon_mutex_is_mine
12100020 g       *ABS*	00000000 __flash_exceptions_start
12100904 g     O .bss	00000004 errno
121008fc g     O .bss	00000004 alt_argv
1210887c g       *ABS*	00000000 _gp
12100370 g     F .text	00000004 usleep
12100594 g     F .text	00000074 alt_find_dev
12100798 g     F .text	00000064 .hidden __udivsi3
1210088c g     O .rwdata	00000004 matrix1
1210061c g     F .text	00000038 alt_icache_flush
12100488 g     F .text	00000010 altera_avalon_mutex_first_lock
12100908 g       *ABS*	00000000 __bss_end
121003a4 g     F .text	0000004c altera_avalon_mutex_open
12100510 g     F .text	00000018 alt_dcache_flush_all
121008b0 g       *ABS*	00000000 __ram_rwdata_end
121008a4 g     O .rwdata	00000008 alt_mutex_list
1210086c g       *ABS*	00000000 __ram_rodata_end
121007fc g     F .text	00000058 .hidden __umodsi3
12100908 g       *ABS*	00000000 end
12200000 g       *ABS*	00000000 __alt_stack_pointer
12100020 g     F .text	0000004c _start
12100394 g     F .text	00000010 alt_sys_init
12100440 g     F .text	00000020 altera_avalon_mutex_unlock
1210086c g       *ABS*	00000000 __ram_rwdata_start
12100854 g       *ABS*	00000000 __ram_rodata_start
12100498 g     F .text	00000078 alt_busy_sleep
12100654 g     F .text	00000030 memcmp
12100908 g       *ABS*	00000000 __alt_stack_base
12100528 g     F .text	0000006c alt_dev_llist_insert
121008f4 g       *ABS*	00000000 __bss_start
12100094 g     F .text	000001d0 main
121008f8 g     O .bss	00000004 alt_envp
14001000 g       *ABS*	00000000 __alt_mem_shared_ocm
121003f4 g     F .text	00000024 altera_avalon_mutex_lock
121008ac g     O .rwdata	00000004 alt_errno
12100880 g     O .rwdata	00000004 heat_srcs
121006a0 g     F .text	00000084 .hidden __divsi3
12100854 g       *ABS*	00000000 __flash_rodata_start
12100884 g     O .rwdata	00000004 nr_heat_src
12100374 g     F .text	00000020 alt_irq_init
1210087c g     O .rwdata	00000004 descriptors
12100900 g     O .bss	00000004 alt_argc
12100894 g     O .rwdata	00000004 c_x
12100020 g       *ABS*	00000000 __ram_exceptions_start
121008b0 g       *ABS*	00000000 _edata
12100908 g       *ABS*	00000000 _end
12100020 g       *ABS*	00000000 __ram_exceptions_end
1210006c g     F .text	00000028 _fp_mult
12100724 g     F .text	00000074 .hidden __modsi3
12200000 g       *ABS*	00000000 __alt_data_end
12000000 g       *ABS*	00000000 __alt_mem_sdram
1210001c g       .entry	00000000 _exit
12100684 g     F .text	0000001c strlen
12100888 g     O .rwdata	00000004 matrix2
12100608 g     F .text	0000000c alt_icache_flush_all
121003f0 g     F .text	00000004 altera_avalon_mutex_close
121008f4 g     O .bss	00000004 mux
121008a0 g     O .rwdata	00000004 worker_0_jtag_uart_0
12100898 g     O .rwdata	00000004 height
1210089c g     O .rwdata	00000004 width
12100264 g     F .text	000000e0 alt_load



Disassembly of section .entry:

12100000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
12100000:	00820014 	movui	r2,2048
#endif

0:
    initi r2
12100004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
12100008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
1210000c:	00bffd16 	blt	zero,r2,12100004 <__alt_mem_shared_ocm+0xfe0ff004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
12100010:	00448434 	movhi	at,4624
    ori r1, r1, %lo(_start)
12100014:	08400814 	ori	at,at,32
    jmp r1
12100018:	0800683a 	jmp	at

1210001c <_exit>:
1210001c:	00000000 	call	10000000 <__alt_mem_sdram-0x2000000>

Disassembly of section .text:

12100020 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
12100020:	00810014 	movui	r2,1024
#endif

0:
    initd 0(r2)
12100024:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
12100028:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
1210002c:	00bffd16 	blt	zero,r2,12100024 <__alt_mem_shared_ocm+0xfe0ff024>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
12100030:	06c48834 	movhi	sp,4640
    ori sp, sp, %lo(__alt_stack_pointer)
12100034:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
12100038:	06848434 	movhi	gp,4624
    ori gp, gp, %lo(_gp)
1210003c:	d6a21f14 	ori	gp,gp,34940
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
12100040:	00848434 	movhi	r2,4624
    ori r2, r2, %lo(__bss_start)
12100044:	10823d14 	ori	r2,r2,2292

    movhi r3, %hi(__bss_end)
12100048:	00c48434 	movhi	r3,4624
    ori r3, r3, %lo(__bss_end)
1210004c:	18c24214 	ori	r3,r3,2312

    beq r2, r3, 1f
12100050:	10c00326 	beq	r2,r3,12100060 <_start+0x40>

0:
    stw zero, (r2)
12100054:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
12100058:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
1210005c:	10fffd36 	bltu	r2,r3,12100054 <__alt_mem_shared_ocm+0xfe0ff054>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
12100060:	21002640 	call	12100264 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
12100064:	21003440 	call	12100344 <alt_main>

12100068 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
12100068:	003fff06 	br	12100068 <__alt_mem_shared_ocm+0xfe0ff068>

1210006c <_fp_mult>:
int16_t _fp_mult(int16_t a, int16_t b)
{
    int16_t res;
    int32_t tmp;

    tmp = (int32_t)a * (int32_t)b; // result type is operand's type
1210006c:	213fffcc 	andi	r4,r4,65535
12100070:	297fffcc 	andi	r5,r5,65535
12100074:	2120001c 	xori	r4,r4,32768
12100078:	2960001c 	xori	r5,r5,32768
1210007c:	21200004 	addi	r4,r4,-32768
12100080:	29600004 	addi	r5,r5,-32768
12100084:	2145383a 	mul	r2,r4,r5
    // Rounding; mid values are rounded up
    tmp += K;
    // Correct by dividing by base
    res = tmp >> FP_FRAC;

    return res;
12100088:	10880004 	addi	r2,r2,8192
}
1210008c:	1004d3ba 	srli	r2,r2,14
12100090:	f800283a 	ret

12100094 <main>:
	uint32_t iter = 0;

	int16_t * curr;
	int16_t * next;

	mux = altera_avalon_mutex_open(SHARED_OCM_MUTEX_NAME);
12100094:	01048434 	movhi	r4,4624

    return res;
}

int main()
{
12100098:	defffb04 	addi	sp,sp,-20
	uint32_t iter = 0;

	int16_t * curr;
	int16_t * next;

	mux = altera_avalon_mutex_open(SHARED_OCM_MUTEX_NAME);
1210009c:	21021504 	addi	r4,r4,2132

    return res;
}

int main()
{
121000a0:	dc400115 	stw	r17,4(sp)
121000a4:	dc000015 	stw	r16,0(sp)
121000a8:	dfc00415 	stw	ra,16(sp)
121000ac:	dcc00315 	stw	r19,12(sp)
121000b0:	dc800215 	stw	r18,8(sp)
	uint32_t iter = 0;

	int16_t * curr;
	int16_t * next;

	mux = altera_avalon_mutex_open(SHARED_OCM_MUTEX_NAME);
121000b4:	21003a40 	call	121003a4 <altera_avalon_mutex_open>
	region = &descriptors[CPU_ID];
121000b8:	d4600017 	ldw	r17,-32768(gp)
	uint32_t iter = 0;

	int16_t * curr;
	int16_t * next;

	mux = altera_avalon_mutex_open(SHARED_OCM_MUTEX_NAME);
121000bc:	d0a01e15 	stw	r2,-32648(gp)
	region = &descriptors[CPU_ID];

	while (1)
	{

		while (region->status != DESC_READY)
121000c0:	040002c4 	movi	r16,11
121000c4:	88800517 	ldw	r2,20(r17)
121000c8:	14000326 	beq	r2,r16,121000d8 <main+0x44>
		{
			usleep(1000);
121000cc:	0100fa04 	movi	r4,1000
121000d0:	21003700 	call	12100370 <usleep>
121000d4:	003ffb06 	br	121000c4 <__alt_mem_shared_ocm+0xfe0ff0c4>
		}
		for (int y = region->col_start; y < region->col_start + region->region_height-2; y++)
121000d8:	89400217 	ldw	r5,8(r17)
121000dc:	8a000417 	ldw	r8,16(r17)
		{
			for (int x = region->row_start; x < region->row_start + region->region_width-2; x++)
			{
				// don't update heat for sources
				uint8_t is_source = 0;
				for (int src = 0; src < *nr_heat_src; src++)
121000e0:	d2e00217 	ldw	r11,-32760(gp)
				{
					if ((heat_srcs[src].xpos == x) && (heat_srcs[src].ypos == y))
121000e4:	d2a00117 	ldw	r10,-32764(gp)
					{
						is_source = 1;
					}
				}
				uint32_t id = y * *width + x;
121000e8:	d3200817 	ldw	r12,-32736(gp)
					region->next[id] = region->curr[id];
				}
				else
				{
					region->next[id] = region->curr[id];
					region->next[id] += _fp_mult(*c_x, (region->curr[id+1] + region->curr[id-1] - (region->curr[id]<<1)));
121000ec:	d3600617 	ldw	r13,-32744(gp)
					region->next[id] += _fp_mult(*c_y, (region->curr[id+*width] + region->curr[id-*width] - (region->curr[id]<<1)));
121000f0:	d3a00517 	ldw	r14,-32748(gp)

		while (region->status != DESC_READY)
		{
			usleep(1000);
		}
		for (int y = region->col_start; y < region->col_start + region->region_height-2; y++)
121000f4:	2a11883a 	add	r8,r5,r8
121000f8:	423fff84 	addi	r8,r8,-2
121000fc:	2a004d2e 	bgeu	r5,r8,12100234 <main+0x1a0>
		{
			for (int x = region->row_start; x < region->row_start + region->region_width-2; x++)
12100100:	89800117 	ldw	r6,4(r17)
12100104:	8a400317 	ldw	r9,12(r17)
12100108:	3253883a 	add	r9,r6,r9
1210010c:	4a7fff84 	addi	r9,r9,-2
12100110:	3240462e 	bgeu	r6,r9,1210022c <main+0x198>
12100114:	5880000b 	ldhu	r2,0(r11)
12100118:	5009883a 	mov	r4,r10
1210011c:	51c00084 	addi	r7,r10,2
12100120:	108001a4 	muli	r2,r2,6
			{
				// don't update heat for sources
				uint8_t is_source = 0;
				for (int src = 0; src < *nr_heat_src; src++)
12100124:	0007883a 	mov	r3,zero
12100128:	5085883a 	add	r2,r10,r2
1210012c:	11000826 	beq	r2,r4,12100150 <main+0xbc>
				{
					if ((heat_srcs[src].xpos == x) && (heat_srcs[src].ypos == y))
12100130:	23c0000b 	ldhu	r15,0(r4)
12100134:	33c0031e 	bne	r6,r15,12100144 <main+0xb0>
12100138:	3bc0000b 	ldhu	r15,0(r7)
1210013c:	2bc0011e 	bne	r5,r15,12100144 <main+0xb0>
					{
						is_source = 1;
12100140:	00c00044 	movi	r3,1
12100144:	21000184 	addi	r4,r4,6
12100148:	39c00184 	addi	r7,r7,6
1210014c:	003ff706 	br	1210012c <__alt_mem_shared_ocm+0xfe0ff12c>
					}
				}
				uint32_t id = y * *width + x;
12100150:	64c00017 	ldw	r19,0(r12)
				if (is_source)
12100154:	19003fcc 	andi	r4,r3,255
12100158:	8c800617 	ldw	r18,24(r17)
					if ((heat_srcs[src].xpos == x) && (heat_srcs[src].ypos == y))
					{
						is_source = 1;
					}
				}
				uint32_t id = y * *width + x;
1210015c:	2cc5383a 	mul	r2,r5,r19
12100160:	89c00717 	ldw	r7,28(r17)
12100164:	1185883a 	add	r2,r2,r6
12100168:	1087883a 	add	r3,r2,r2
				if (is_source)
1210016c:	20000526 	beq	r4,zero,12100184 <main+0xf0>
				{
					region->next[id] = region->curr[id];
12100170:	90c5883a 	add	r2,r18,r3
12100174:	1080000b 	ldhu	r2,0(r2)
12100178:	38c7883a 	add	r3,r7,r3
1210017c:	1880000d 	sth	r2,0(r3)
12100180:	00002806 	br	12100224 <main+0x190>
				}
				else
				{
					region->next[id] = region->curr[id];
12100184:	38cf883a 	add	r7,r7,r3
12100188:	90c7883a 	add	r3,r18,r3
1210018c:	1bc0000b 	ldhu	r15,0(r3)
12100190:	3bc0000d 	sth	r15,0(r7)
int16_t _fp_mult(int16_t a, int16_t b)
{
    int16_t res;
    int32_t tmp;

    tmp = (int32_t)a * (int32_t)b; // result type is operand's type
12100194:	193fff8b 	ldhu	r4,-2(r3)
12100198:	1fc0008b 	ldhu	ra,2(r3)
1210019c:	f93f883a 	add	ra,ra,r4
121001a0:	1900000b 	ldhu	r4,0(r3)
121001a4:	2109883a 	add	r4,r4,r4
121001a8:	f909c83a 	sub	r4,ra,r4
121001ac:	213fffcc 	andi	r4,r4,65535
121001b0:	6fc0000f 	ldh	ra,0(r13)
121001b4:	2120001c 	xori	r4,r4,32768
121001b8:	21200004 	addi	r4,r4,-32768
121001bc:	27c9383a 	mul	r4,r4,ra
					region->next[id] = region->curr[id];
				}
				else
				{
					region->next[id] = region->curr[id];
					region->next[id] += _fp_mult(*c_x, (region->curr[id+1] + region->curr[id-1] - (region->curr[id]<<1)));
121001c0:	21080004 	addi	r4,r4,8192
121001c4:	2009d3ba 	srai	r4,r4,14
121001c8:	23df883a 	add	r15,r4,r15
					region->next[id] += _fp_mult(*c_y, (region->curr[id+*width] + region->curr[id-*width] - (region->curr[id]<<1)));
121001cc:	9889883a 	add	r4,r19,r2
121001d0:	14c5c83a 	sub	r2,r2,r19
121001d4:	2109883a 	add	r4,r4,r4
121001d8:	1085883a 	add	r2,r2,r2
					region->next[id] = region->curr[id];
				}
				else
				{
					region->next[id] = region->curr[id];
					region->next[id] += _fp_mult(*c_x, (region->curr[id+1] + region->curr[id-1] - (region->curr[id]<<1)));
121001dc:	3bc0000d 	sth	r15,0(r7)
					region->next[id] += _fp_mult(*c_y, (region->curr[id+*width] + region->curr[id-*width] - (region->curr[id]<<1)));
121001e0:	9109883a 	add	r4,r18,r4
121001e4:	9085883a 	add	r2,r18,r2
int16_t _fp_mult(int16_t a, int16_t b)
{
    int16_t res;
    int32_t tmp;

    tmp = (int32_t)a * (int32_t)b; // result type is operand's type
121001e8:	1080000b 	ldhu	r2,0(r2)
121001ec:	2100000b 	ldhu	r4,0(r4)
121001f0:	2089883a 	add	r4,r4,r2
121001f4:	1880000b 	ldhu	r2,0(r3)
121001f8:	1085883a 	add	r2,r2,r2
121001fc:	2085c83a 	sub	r2,r4,r2
12100200:	10bfffcc 	andi	r2,r2,65535
12100204:	7100000f 	ldh	r4,0(r14)
12100208:	10a0001c 	xori	r2,r2,32768
1210020c:	10a00004 	addi	r2,r2,-32768
12100210:	1105383a 	mul	r2,r2,r4
				}
				else
				{
					region->next[id] = region->curr[id];
					region->next[id] += _fp_mult(*c_x, (region->curr[id+1] + region->curr[id-1] - (region->curr[id]<<1)));
					region->next[id] += _fp_mult(*c_y, (region->curr[id+*width] + region->curr[id-*width] - (region->curr[id]<<1)));
12100214:	10880004 	addi	r2,r2,8192
12100218:	1005d3ba 	srai	r2,r2,14
1210021c:	7885883a 	add	r2,r15,r2
12100220:	3880000d 	sth	r2,0(r7)
		{
			usleep(1000);
		}
		for (int y = region->col_start; y < region->col_start + region->region_height-2; y++)
		{
			for (int x = region->row_start; x < region->row_start + region->region_width-2; x++)
12100224:	31800044 	addi	r6,r6,1
12100228:	003fb906 	br	12100110 <__alt_mem_shared_ocm+0xfe0ff110>

		while (region->status != DESC_READY)
		{
			usleep(1000);
		}
		for (int y = region->col_start; y < region->col_start + region->region_height-2; y++)
1210022c:	29400044 	addi	r5,r5,1
12100230:	003fb206 	br	121000fc <__alt_mem_shared_ocm+0xfe0ff0fc>
					region->next[id] += _fp_mult(*c_y, (region->curr[id+*width] + region->curr[id-*width] - (region->curr[id]<<1)));
				}
			}

		}
		while (altera_avalon_mutex_trylock(mux,1))
12100234:	d1201e17 	ldw	r4,-32648(gp)
12100238:	01400044 	movi	r5,1
1210023c:	21004180 	call	12100418 <altera_avalon_mutex_trylock>
12100240:	10000326 	beq	r2,zero,12100250 <main+0x1bc>
		{
			usleep(10);
12100244:	01000284 	movi	r4,10
12100248:	21003700 	call	12100370 <usleep>
1210024c:	003ff906 	br	12100234 <__alt_mem_shared_ocm+0xfe0ff234>
		}
		region->status = DESC_DONE;
		altera_avalon_mutex_unlock(mux);
12100250:	d1201e17 	ldw	r4,-32648(gp)
		}
		while (altera_avalon_mutex_trylock(mux,1))
		{
			usleep(10);
		}
		region->status = DESC_DONE;
12100254:	00800584 	movi	r2,22
12100258:	88800515 	stw	r2,20(r17)
		altera_avalon_mutex_unlock(mux);
1210025c:	21004400 	call	12100440 <altera_avalon_mutex_unlock>
	}
12100260:	003f9806 	br	121000c4 <__alt_mem_shared_ocm+0xfe0ff0c4>

12100264 <alt_load>:
12100264:	deffff04 	addi	sp,sp,-4
12100268:	01048434 	movhi	r4,4624
1210026c:	01448434 	movhi	r5,4624
12100270:	dfc00015 	stw	ra,0(sp)
12100274:	21021b04 	addi	r4,r4,2156
12100278:	29422c04 	addi	r5,r5,2224
1210027c:	2140061e 	bne	r4,r5,12100298 <alt_load+0x34>
12100280:	01048434 	movhi	r4,4624
12100284:	01448434 	movhi	r5,4624
12100288:	21000804 	addi	r4,r4,32
1210028c:	29400804 	addi	r5,r5,32
12100290:	2140121e 	bne	r4,r5,121002dc <alt_load+0x78>
12100294:	00000b06 	br	121002c4 <alt_load+0x60>
12100298:	00c48434 	movhi	r3,4624
1210029c:	18c22c04 	addi	r3,r3,2224
121002a0:	1907c83a 	sub	r3,r3,r4
121002a4:	0005883a 	mov	r2,zero
121002a8:	10fff526 	beq	r2,r3,12100280 <__alt_mem_shared_ocm+0xfe0ff280>
121002ac:	114f883a 	add	r7,r2,r5
121002b0:	39c00017 	ldw	r7,0(r7)
121002b4:	110d883a 	add	r6,r2,r4
121002b8:	10800104 	addi	r2,r2,4
121002bc:	31c00015 	stw	r7,0(r6)
121002c0:	003ff906 	br	121002a8 <__alt_mem_shared_ocm+0xfe0ff2a8>
121002c4:	01048434 	movhi	r4,4624
121002c8:	01448434 	movhi	r5,4624
121002cc:	21021504 	addi	r4,r4,2132
121002d0:	29421504 	addi	r5,r5,2132
121002d4:	2140101e 	bne	r4,r5,12100318 <alt_load+0xb4>
121002d8:	00000b06 	br	12100308 <alt_load+0xa4>
121002dc:	00c48434 	movhi	r3,4624
121002e0:	18c00804 	addi	r3,r3,32
121002e4:	1907c83a 	sub	r3,r3,r4
121002e8:	0005883a 	mov	r2,zero
121002ec:	10fff526 	beq	r2,r3,121002c4 <__alt_mem_shared_ocm+0xfe0ff2c4>
121002f0:	114f883a 	add	r7,r2,r5
121002f4:	39c00017 	ldw	r7,0(r7)
121002f8:	110d883a 	add	r6,r2,r4
121002fc:	10800104 	addi	r2,r2,4
12100300:	31c00015 	stw	r7,0(r6)
12100304:	003ff906 	br	121002ec <__alt_mem_shared_ocm+0xfe0ff2ec>
12100308:	21005100 	call	12100510 <alt_dcache_flush_all>
1210030c:	dfc00017 	ldw	ra,0(sp)
12100310:	dec00104 	addi	sp,sp,4
12100314:	21006081 	jmpi	12100608 <alt_icache_flush_all>
12100318:	00c48434 	movhi	r3,4624
1210031c:	18c21b04 	addi	r3,r3,2156
12100320:	1907c83a 	sub	r3,r3,r4
12100324:	0005883a 	mov	r2,zero
12100328:	18bff726 	beq	r3,r2,12100308 <__alt_mem_shared_ocm+0xfe0ff308>
1210032c:	114f883a 	add	r7,r2,r5
12100330:	39c00017 	ldw	r7,0(r7)
12100334:	110d883a 	add	r6,r2,r4
12100338:	10800104 	addi	r2,r2,4
1210033c:	31c00015 	stw	r7,0(r6)
12100340:	003ff906 	br	12100328 <__alt_mem_shared_ocm+0xfe0ff328>

12100344 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
12100344:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
12100348:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
1210034c:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
12100350:	21003740 	call	12100374 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
12100354:	21003940 	call	12100394 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
12100358:	d1a01f17 	ldw	r6,-32644(gp)
1210035c:	d1602017 	ldw	r5,-32640(gp)
12100360:	d1202117 	ldw	r4,-32636(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
12100364:	dfc00017 	ldw	ra,0(sp)
12100368:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
1210036c:	21000941 	jmpi	12100094 <main>

12100370 <usleep>:
12100370:	21004981 	jmpi	12100498 <alt_busy_sleep>

12100374 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
12100374:	deffff04 	addi	sp,sp,-4
12100378:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( WORKER_0_CPU, worker_0_cpu);
1210037c:	21006140 	call	12100614 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
12100380:	00800044 	movi	r2,1
12100384:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
12100388:	dfc00017 	ldw	ra,0(sp)
1210038c:	dec00104 	addi	sp,sp,4
12100390:	f800283a 	ret

12100394 <alt_sys_init>:
  int ret_code;
  extern alt_llist alt_mutex_list;
  ret_code = ALT_SEM_CREATE (&dev->lock, 1);
  if (!ret_code)
  {
    ret_code = alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mutex_list);
12100394:	01048434 	movhi	r4,4624
12100398:	d1600a04 	addi	r5,gp,-32728
1210039c:	21021b04 	addi	r4,r4,2156
121003a0:	21005281 	jmpi	12100528 <alt_dev_llist_insert>

121003a4 <altera_avalon_mutex_open>:
 * Search the list of registered mutexes for one with the supplied name.
 *
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
alt_mutex_dev* altera_avalon_mutex_open (const char* name)
{
121003a4:	defffe04 	addi	sp,sp,-8
  alt_mutex_dev* dev;

  dev = (alt_mutex_dev*) alt_find_dev (name, &alt_mutex_list);
121003a8:	d1600a04 	addi	r5,gp,-32728
 * Search the list of registered mutexes for one with the supplied name.
 *
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
alt_mutex_dev* altera_avalon_mutex_open (const char* name)
{
121003ac:	dc000015 	stw	r16,0(sp)
121003b0:	dfc00115 	stw	ra,4(sp)
  alt_mutex_dev* dev;

  dev = (alt_mutex_dev*) alt_find_dev (name, &alt_mutex_list);
121003b4:	21005940 	call	12100594 <alt_find_dev>
121003b8:	1021883a 	mov	r16,r2

  if (NULL == dev)
121003bc:	1000071e 	bne	r2,zero,121003dc <altera_avalon_mutex_open+0x38>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
121003c0:	d0a00c17 	ldw	r2,-32720(gp)
121003c4:	10000226 	beq	r2,zero,121003d0 <altera_avalon_mutex_open+0x2c>
121003c8:	103ee83a 	callr	r2
121003cc:	00000106 	br	121003d4 <altera_avalon_mutex_open+0x30>
121003d0:	d0a02204 	addi	r2,gp,-32632
  {
    ALT_ERRNO = ENODEV;
121003d4:	00c004c4 	movi	r3,19
121003d8:	10c00015 	stw	r3,0(r2)
  }

  return dev;
}
121003dc:	8005883a 	mov	r2,r16
121003e0:	dfc00117 	ldw	ra,4(sp)
121003e4:	dc000017 	ldw	r16,0(sp)
121003e8:	dec00204 	addi	sp,sp,8
121003ec:	f800283a 	ret

121003f0 <altera_avalon_mutex_close>:
 * altera_avalon_mutex_close - Does nothing at the moment, but included for 
 * completeness
 *
 */
void altera_avalon_mutex_close (alt_mutex_dev* dev)
{
121003f0:	f800283a 	ret

121003f4 <altera_avalon_mutex_lock>:
static int alt_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
  alt_u32 id, data, check;
  int ret_code = -1;

  NIOS2_READ_CPUID(id);
121003f4:	0005317a 	rdctl	r2,cpuid

  /* the data we want the mutex to hold */
  data = (id << ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST) | value;
121003f8:	1004943a 	slli	r2,r2,16

  /* attempt to write to the mutex */
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, data);
121003fc:	20c00317 	ldw	r3,12(r4)
  int ret_code = -1;

  NIOS2_READ_CPUID(id);

  /* the data we want the mutex to hold */
  data = (id << ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST) | value;
12100400:	1144b03a 	or	r2,r2,r5

  /* attempt to write to the mutex */
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, data);
12100404:	18800035 	stwio	r2,0(r3)
  
  check = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
12100408:	20c00317 	ldw	r3,12(r4)
1210040c:	18c00037 	ldwio	r3,0(r3)

  if ( check == data)
12100410:	10fff81e 	bne	r2,r3,121003f4 <__alt_mem_shared_ocm+0xfe0ff3f4>
   */

  ALT_SEM_PEND (dev->lock, 0);

  while ( alt_mutex_trylock( dev, value ) != 0);
}
12100414:	f800283a 	ret

12100418 <altera_avalon_mutex_trylock>:
static int alt_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
  alt_u32 id, data, check;
  int ret_code = -1;

  NIOS2_READ_CPUID(id);
12100418:	0005317a 	rdctl	r2,cpuid

  /* the data we want the mutex to hold */
  data = (id << ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST) | value;
1210041c:	1004943a 	slli	r2,r2,16
12100420:	114ab03a 	or	r5,r2,r5

  /* attempt to write to the mutex */
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, data);
12100424:	20800317 	ldw	r2,12(r4)
12100428:	11400035 	stwio	r5,0(r2)
  
  check = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
1210042c:	20800317 	ldw	r2,12(r4)
12100430:	10800037 	ldwio	r2,0(r2)
  if (ret_code)
  {
    ALT_SEM_POST (dev->lock);
  }

  return ret_code;
12100434:	1144c03a 	cmpne	r2,r2,r5
}
12100438:	0085c83a 	sub	r2,zero,r2
1210043c:	f800283a 	ret

12100440 <altera_avalon_mutex_unlock>:
 *
 */
void altera_avalon_mutex_unlock( alt_mutex_dev* dev )
{
  alt_u32 id;
  NIOS2_READ_CPUID(id);
12100440:	0005317a 	rdctl	r2,cpuid

  /*
  * This Mutex has been claimed and released since Reset so clear the Reset bit
  * This MUST happen before we release the MUTEX
  */
  IOWR_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base, 
12100444:	20c00317 	ldw	r3,12(r4)
12100448:	01400044 	movi	r5,1
1210044c:	19400135 	stwio	r5,4(r3)
                                  ALTERA_AVALON_MUTEX_RESET_RESET_MSK);
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, 
12100450:	1004943a 	slli	r2,r2,16
12100454:	20c00317 	ldw	r3,12(r4)
12100458:	18800035 	stwio	r2,0(r3)
1210045c:	f800283a 	ret

12100460 <altera_avalon_mutex_is_mine>:
int altera_avalon_mutex_is_mine( alt_mutex_dev* dev )
{
  alt_u32 id, data, owner, value;
  int ret_code = 0;

  NIOS2_READ_CPUID(id);
12100460:	000b317a 	rdctl	r5,cpuid

  /* retrieve the contents of the mutex */
  data = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
12100464:	20800317 	ldw	r2,12(r4)
12100468:	10800037 	ldwio	r2,0(r2)
  owner = (data & ALTERA_AVALON_MUTEX_MUTEX_OWNER_MSK) >> 
              ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST;

  if (owner == id) 
1210046c:	1006d43a 	srli	r3,r2,16
12100470:	28c0031e 	bne	r5,r3,12100480 <altera_avalon_mutex_is_mine+0x20>
 *  returns non zero if the mutex is owned by this CPU
 */
int altera_avalon_mutex_is_mine( alt_mutex_dev* dev )
{
  alt_u32 id, data, owner, value;
  int ret_code = 0;
12100474:	10bfffcc 	andi	r2,r2,65535
12100478:	1004c03a 	cmpne	r2,r2,zero
1210047c:	f800283a 	ret
12100480:	0005883a 	mov	r2,zero
      ret_code = 1;
    }
  }

  return ret_code;
}
12100484:	f800283a 	ret

12100488 <altera_avalon_mutex_first_lock>:
int altera_avalon_mutex_first_lock( alt_mutex_dev* dev )
{
  alt_u32 data;
  int ret_code = 0;

  data = IORD_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base);
12100488:	20800317 	ldw	r2,12(r4)
1210048c:	10800137 	ldwio	r2,4(r2)
  {
    ret_code = 1;
  }

  return ret_code;
}
12100490:	1080004c 	andi	r2,r2,1
12100494:	f800283a 	ret

12100498 <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
12100498:	0140f874 	movhi	r5,993
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
1210049c:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
121004a0:	297e0f84 	addi	r5,r5,-1986
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
121004a4:	dc000015 	stw	r16,0(sp)
121004a8:	dfc00115 	stw	ra,4(sp)
121004ac:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
121004b0:	21007980 	call	12100798 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
121004b4:	10000e26 	beq	r2,zero,121004f0 <alt_busy_sleep+0x58>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
121004b8:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
121004bc:	013f07f4 	movhi	r4,64543
121004c0:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
121004c4:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
121004c8:	2101f084 	addi	r4,r4,1986
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
121004cc:	297fffc4 	addi	r5,r5,-1
121004d0:	283ffe1e 	bne	r5,zero,121004cc <__alt_mem_shared_ocm+0xfe0ff4cc>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
121004d4:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
121004d8:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
121004dc:	18bffb16 	blt	r3,r2,121004cc <__alt_mem_shared_ocm+0xfe0ff4cc>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
121004e0:	84000864 	muli	r16,r16,33
121004e4:	843fffc4 	addi	r16,r16,-1
121004e8:	803ffe1e 	bne	r16,zero,121004e4 <__alt_mem_shared_ocm+0xfe0ff4e4>
121004ec:	00000306 	br	121004fc <alt_busy_sleep+0x64>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
121004f0:	84000864 	muli	r16,r16,33
121004f4:	843fffc4 	addi	r16,r16,-1
121004f8:	043ffe16 	blt	zero,r16,121004f4 <__alt_mem_shared_ocm+0xfe0ff4f4>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
121004fc:	0005883a 	mov	r2,zero
12100500:	dfc00117 	ldw	ra,4(sp)
12100504:	dc000017 	ldw	r16,0(sp)
12100508:	dec00204 	addi	sp,sp,8
1210050c:	f800283a 	ret

12100510 <alt_dcache_flush_all>:
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
12100510:	0005883a 	mov	r2,zero
12100514:	00c10004 	movi	r3,1024
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
12100518:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
1210051c:	10800804 	addi	r2,r2,32
12100520:	10fffd1e 	bne	r2,r3,12100518 <__alt_mem_shared_ocm+0xfe0ff518>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
12100524:	f800283a 	ret

12100528 <alt_dev_llist_insert>:
12100528:	20000226 	beq	r4,zero,12100534 <alt_dev_llist_insert+0xc>
1210052c:	20800217 	ldw	r2,8(r4)
12100530:	1000101e 	bne	r2,zero,12100574 <alt_dev_llist_insert+0x4c>
12100534:	d0a00c17 	ldw	r2,-32720(gp)
12100538:	10000926 	beq	r2,zero,12100560 <alt_dev_llist_insert+0x38>
1210053c:	deffff04 	addi	sp,sp,-4
12100540:	dfc00015 	stw	ra,0(sp)
12100544:	103ee83a 	callr	r2
12100548:	00c00584 	movi	r3,22
1210054c:	10c00015 	stw	r3,0(r2)
12100550:	00bffa84 	movi	r2,-22
12100554:	dfc00017 	ldw	ra,0(sp)
12100558:	dec00104 	addi	sp,sp,4
1210055c:	f800283a 	ret
12100560:	d0a02204 	addi	r2,gp,-32632
12100564:	00c00584 	movi	r3,22
12100568:	10c00015 	stw	r3,0(r2)
1210056c:	00bffa84 	movi	r2,-22
12100570:	f800283a 	ret
12100574:	28800017 	ldw	r2,0(r5)
12100578:	21400115 	stw	r5,4(r4)
1210057c:	20800015 	stw	r2,0(r4)
12100580:	28800017 	ldw	r2,0(r5)
12100584:	11000115 	stw	r4,4(r2)
12100588:	29000015 	stw	r4,0(r5)
1210058c:	0005883a 	mov	r2,zero
12100590:	f800283a 	ret

12100594 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
12100594:	defffb04 	addi	sp,sp,-20
12100598:	dcc00315 	stw	r19,12(sp)
1210059c:	dc800215 	stw	r18,8(sp)
121005a0:	dc400115 	stw	r17,4(sp)
121005a4:	dc000015 	stw	r16,0(sp)
121005a8:	dfc00415 	stw	ra,16(sp)
121005ac:	2027883a 	mov	r19,r4
121005b0:	2823883a 	mov	r17,r5
  alt_dev* next = (alt_dev*) llist->next;
121005b4:	2c000017 	ldw	r16,0(r5)
  alt_32 len;

  len  = strlen(name) + 1;
121005b8:	21006840 	call	12100684 <strlen>
121005bc:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
121005c0:	84400726 	beq	r16,r17,121005e0 <alt_find_dev+0x4c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
121005c4:	81000217 	ldw	r4,8(r16)
121005c8:	900d883a 	mov	r6,r18
121005cc:	980b883a 	mov	r5,r19
121005d0:	21006540 	call	12100654 <memcmp>
121005d4:	10000426 	beq	r2,zero,121005e8 <alt_find_dev+0x54>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
121005d8:	84000017 	ldw	r16,0(r16)
121005dc:	003ff806 	br	121005c0 <__alt_mem_shared_ocm+0xfe0ff5c0>
  }
  
  /* No match found */
  
  return NULL;
121005e0:	0005883a 	mov	r2,zero
121005e4:	00000106 	br	121005ec <alt_find_dev+0x58>
121005e8:	8005883a 	mov	r2,r16
}
121005ec:	dfc00417 	ldw	ra,16(sp)
121005f0:	dcc00317 	ldw	r19,12(sp)
121005f4:	dc800217 	ldw	r18,8(sp)
121005f8:	dc400117 	ldw	r17,4(sp)
121005fc:	dc000017 	ldw	r16,0(sp)
12100600:	dec00504 	addi	sp,sp,20
12100604:	f800283a 	ret

12100608 <alt_icache_flush_all>:
 */

void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
12100608:	01420004 	movi	r5,2048
1210060c:	0009883a 	mov	r4,zero
12100610:	210061c1 	jmpi	1210061c <alt_icache_flush>

12100614 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
12100614:	000170fa 	wrctl	ienable,zero
12100618:	f800283a 	ret

1210061c <alt_icache_flush>:
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
1210061c:	00820004 	movi	r2,2048
12100620:	1140012e 	bgeu	r2,r5,12100628 <alt_icache_flush+0xc>
12100624:	100b883a 	mov	r5,r2
12100628:	214b883a 	add	r5,r4,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
1210062c:	2005883a 	mov	r2,r4
12100630:	1140032e 	bgeu	r2,r5,12100640 <alt_icache_flush+0x24>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
12100634:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
12100638:	10800804 	addi	r2,r2,32
1210063c:	003ffc06 	br	12100630 <__alt_mem_shared_ocm+0xfe0ff630>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
12100640:	210007cc 	andi	r4,r4,31
12100644:	20000126 	beq	r4,zero,1210064c <alt_icache_flush+0x30>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
12100648:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
1210064c:	0000203a 	flushp
12100650:	f800283a 	ret

12100654 <memcmp>:
12100654:	218d883a 	add	r6,r4,r6
12100658:	21800826 	beq	r4,r6,1210067c <memcmp+0x28>
1210065c:	20800003 	ldbu	r2,0(r4)
12100660:	28c00003 	ldbu	r3,0(r5)
12100664:	10c00226 	beq	r2,r3,12100670 <memcmp+0x1c>
12100668:	10c5c83a 	sub	r2,r2,r3
1210066c:	f800283a 	ret
12100670:	21000044 	addi	r4,r4,1
12100674:	29400044 	addi	r5,r5,1
12100678:	003ff706 	br	12100658 <__alt_mem_shared_ocm+0xfe0ff658>
1210067c:	0005883a 	mov	r2,zero
12100680:	f800283a 	ret

12100684 <strlen>:
12100684:	2005883a 	mov	r2,r4
12100688:	10c00007 	ldb	r3,0(r2)
1210068c:	18000226 	beq	r3,zero,12100698 <strlen+0x14>
12100690:	10800044 	addi	r2,r2,1
12100694:	003ffc06 	br	12100688 <__alt_mem_shared_ocm+0xfe0ff688>
12100698:	1105c83a 	sub	r2,r2,r4
1210069c:	f800283a 	ret

121006a0 <__divsi3>:
121006a0:	20001b16 	blt	r4,zero,12100710 <__divsi3+0x70>
121006a4:	000f883a 	mov	r7,zero
121006a8:	28001616 	blt	r5,zero,12100704 <__divsi3+0x64>
121006ac:	200d883a 	mov	r6,r4
121006b0:	29001a2e 	bgeu	r5,r4,1210071c <__divsi3+0x7c>
121006b4:	00800804 	movi	r2,32
121006b8:	00c00044 	movi	r3,1
121006bc:	00000106 	br	121006c4 <__divsi3+0x24>
121006c0:	10000d26 	beq	r2,zero,121006f8 <__divsi3+0x58>
121006c4:	294b883a 	add	r5,r5,r5
121006c8:	10bfffc4 	addi	r2,r2,-1
121006cc:	18c7883a 	add	r3,r3,r3
121006d0:	293ffb36 	bltu	r5,r4,121006c0 <__alt_mem_shared_ocm+0xfe0ff6c0>
121006d4:	0005883a 	mov	r2,zero
121006d8:	18000726 	beq	r3,zero,121006f8 <__divsi3+0x58>
121006dc:	0005883a 	mov	r2,zero
121006e0:	31400236 	bltu	r6,r5,121006ec <__divsi3+0x4c>
121006e4:	314dc83a 	sub	r6,r6,r5
121006e8:	10c4b03a 	or	r2,r2,r3
121006ec:	1806d07a 	srli	r3,r3,1
121006f0:	280ad07a 	srli	r5,r5,1
121006f4:	183ffa1e 	bne	r3,zero,121006e0 <__alt_mem_shared_ocm+0xfe0ff6e0>
121006f8:	38000126 	beq	r7,zero,12100700 <__divsi3+0x60>
121006fc:	0085c83a 	sub	r2,zero,r2
12100700:	f800283a 	ret
12100704:	014bc83a 	sub	r5,zero,r5
12100708:	39c0005c 	xori	r7,r7,1
1210070c:	003fe706 	br	121006ac <__alt_mem_shared_ocm+0xfe0ff6ac>
12100710:	0109c83a 	sub	r4,zero,r4
12100714:	01c00044 	movi	r7,1
12100718:	003fe306 	br	121006a8 <__alt_mem_shared_ocm+0xfe0ff6a8>
1210071c:	00c00044 	movi	r3,1
12100720:	003fee06 	br	121006dc <__alt_mem_shared_ocm+0xfe0ff6dc>

12100724 <__modsi3>:
12100724:	20001716 	blt	r4,zero,12100784 <__modsi3+0x60>
12100728:	000f883a 	mov	r7,zero
1210072c:	2005883a 	mov	r2,r4
12100730:	28001216 	blt	r5,zero,1210077c <__modsi3+0x58>
12100734:	2900162e 	bgeu	r5,r4,12100790 <__modsi3+0x6c>
12100738:	01800804 	movi	r6,32
1210073c:	00c00044 	movi	r3,1
12100740:	00000106 	br	12100748 <__modsi3+0x24>
12100744:	30000a26 	beq	r6,zero,12100770 <__modsi3+0x4c>
12100748:	294b883a 	add	r5,r5,r5
1210074c:	31bfffc4 	addi	r6,r6,-1
12100750:	18c7883a 	add	r3,r3,r3
12100754:	293ffb36 	bltu	r5,r4,12100744 <__alt_mem_shared_ocm+0xfe0ff744>
12100758:	18000526 	beq	r3,zero,12100770 <__modsi3+0x4c>
1210075c:	1806d07a 	srli	r3,r3,1
12100760:	11400136 	bltu	r2,r5,12100768 <__modsi3+0x44>
12100764:	1145c83a 	sub	r2,r2,r5
12100768:	280ad07a 	srli	r5,r5,1
1210076c:	183ffb1e 	bne	r3,zero,1210075c <__alt_mem_shared_ocm+0xfe0ff75c>
12100770:	38000126 	beq	r7,zero,12100778 <__modsi3+0x54>
12100774:	0085c83a 	sub	r2,zero,r2
12100778:	f800283a 	ret
1210077c:	014bc83a 	sub	r5,zero,r5
12100780:	003fec06 	br	12100734 <__alt_mem_shared_ocm+0xfe0ff734>
12100784:	0109c83a 	sub	r4,zero,r4
12100788:	01c00044 	movi	r7,1
1210078c:	003fe706 	br	1210072c <__alt_mem_shared_ocm+0xfe0ff72c>
12100790:	00c00044 	movi	r3,1
12100794:	003ff106 	br	1210075c <__alt_mem_shared_ocm+0xfe0ff75c>

12100798 <__udivsi3>:
12100798:	200d883a 	mov	r6,r4
1210079c:	2900152e 	bgeu	r5,r4,121007f4 <__udivsi3+0x5c>
121007a0:	28001416 	blt	r5,zero,121007f4 <__udivsi3+0x5c>
121007a4:	00800804 	movi	r2,32
121007a8:	00c00044 	movi	r3,1
121007ac:	00000206 	br	121007b8 <__udivsi3+0x20>
121007b0:	10000e26 	beq	r2,zero,121007ec <__udivsi3+0x54>
121007b4:	28000516 	blt	r5,zero,121007cc <__udivsi3+0x34>
121007b8:	294b883a 	add	r5,r5,r5
121007bc:	10bfffc4 	addi	r2,r2,-1
121007c0:	18c7883a 	add	r3,r3,r3
121007c4:	293ffa36 	bltu	r5,r4,121007b0 <__alt_mem_shared_ocm+0xfe0ff7b0>
121007c8:	18000826 	beq	r3,zero,121007ec <__udivsi3+0x54>
121007cc:	0005883a 	mov	r2,zero
121007d0:	31400236 	bltu	r6,r5,121007dc <__udivsi3+0x44>
121007d4:	314dc83a 	sub	r6,r6,r5
121007d8:	10c4b03a 	or	r2,r2,r3
121007dc:	1806d07a 	srli	r3,r3,1
121007e0:	280ad07a 	srli	r5,r5,1
121007e4:	183ffa1e 	bne	r3,zero,121007d0 <__alt_mem_shared_ocm+0xfe0ff7d0>
121007e8:	f800283a 	ret
121007ec:	0005883a 	mov	r2,zero
121007f0:	f800283a 	ret
121007f4:	00c00044 	movi	r3,1
121007f8:	003ff406 	br	121007cc <__alt_mem_shared_ocm+0xfe0ff7cc>

121007fc <__umodsi3>:
121007fc:	2005883a 	mov	r2,r4
12100800:	2900122e 	bgeu	r5,r4,1210084c <__umodsi3+0x50>
12100804:	28001116 	blt	r5,zero,1210084c <__umodsi3+0x50>
12100808:	01800804 	movi	r6,32
1210080c:	00c00044 	movi	r3,1
12100810:	00000206 	br	1210081c <__umodsi3+0x20>
12100814:	30000c26 	beq	r6,zero,12100848 <__umodsi3+0x4c>
12100818:	28000516 	blt	r5,zero,12100830 <__umodsi3+0x34>
1210081c:	294b883a 	add	r5,r5,r5
12100820:	31bfffc4 	addi	r6,r6,-1
12100824:	18c7883a 	add	r3,r3,r3
12100828:	293ffa36 	bltu	r5,r4,12100814 <__alt_mem_shared_ocm+0xfe0ff814>
1210082c:	18000626 	beq	r3,zero,12100848 <__umodsi3+0x4c>
12100830:	1806d07a 	srli	r3,r3,1
12100834:	11400136 	bltu	r2,r5,1210083c <__umodsi3+0x40>
12100838:	1145c83a 	sub	r2,r2,r5
1210083c:	280ad07a 	srli	r5,r5,1
12100840:	183ffb1e 	bne	r3,zero,12100830 <__alt_mem_shared_ocm+0xfe0ff830>
12100844:	f800283a 	ret
12100848:	f800283a 	ret
1210084c:	00c00044 	movi	r3,1
12100850:	003ff706 	br	12100830 <__alt_mem_shared_ocm+0xfe0ff830>
