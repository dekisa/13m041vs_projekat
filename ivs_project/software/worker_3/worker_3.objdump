
worker_3.elf:     file format elf32-littlenios2
worker_3.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x12400020

Program Header:
    LOAD off    0x00001000 vaddr 0x12400000 paddr 0x12400000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x12400020 paddr 0x12400020 align 2**12
         filesz 0x00000840 memsz 0x00000840 flags r-x
    LOAD off    0x00001860 vaddr 0x12400860 paddr 0x124008a4 align 2**12
         filesz 0x00000044 memsz 0x00000044 flags rw-
    LOAD off    0x000018e8 vaddr 0x124008e8 paddr 0x124008e8 align 2**12
         filesz 0x00000000 memsz 0x00000014 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  12400000  12400000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  12400020  12400020  000018a4  2**0
                  CONTENTS
  2 .text         00000828  12400020  12400020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000018  12400848  12400848  00001848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000044  12400860  124008a4  00001860  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000014  124008e8  124008e8  000018e8  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  124008fc  124008fc  000018a4  2**0
                  CONTENTS
  7 .shared_ocm   00000000  14001000  14001000  000018a4  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  000018a4  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000260  00000000  00000000  000018c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00001f6e  00000000  00000000  00001b28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000f71  00000000  00000000  00003a96  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00000ff7  00000000  00000000  00004a07  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000330  00000000  00000000  00005a00  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00000bbe  00000000  00000000  00005d30  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00000aff  00000000  00000000  000068ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000060  00000000  00000000  000073f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000190  00000000  00000000  00007450  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0000880a  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  0000880d  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00008819  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0000881a  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   00000014  00000000  00000000  0000881b  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    00000014  00000000  00000000  0000882f  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   00000014  00000000  00000000  00008843  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 00000006  00000000  00000000  00008857  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 0000002c  00000000  00000000  0000885d  2**0
                  CONTENTS, READONLY
 27 .jdi          0001a980  00000000  00000000  00008889  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     0010e01c  00000000  00000000  00023209  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
12400000 l    d  .entry	00000000 .entry
12400020 l    d  .exceptions	00000000 .exceptions
12400020 l    d  .text	00000000 .text
12400848 l    d  .rodata	00000000 .rodata
12400860 l    d  .rwdata	00000000 .rwdata
124008e8 l    d  .bss	00000000 .bss
124008fc l    d  .sdram	00000000 .sdram
14001000 l    d  .shared_ocm	00000000 .shared_ocm
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../worker_3_bsp//obj/HAL/src/crt0.o
12400068 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
12400860 l     O .rwdata	00000010 shared_ocm_mutex
00000000 l    df *ABS*	00000000 altera_avalon_mutex.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
12400338 g     F .text	0000002c alt_main
124008a4 g       *ABS*	00000000 __flash_rwdata_start
12400884 g     O .rwdata	00000004 c_y
1240040c g     F .text	00000028 altera_avalon_mutex_trylock
12400608 g     F .text	00000008 altera_nios2_gen2_irq_init
12400000 g     F .entry	0000001c __reset
12400454 g     F .text	00000028 altera_avalon_mutex_is_mine
12400020 g       *ABS*	00000000 __flash_exceptions_start
124008f8 g     O .bss	00000004 errno
124008f0 g     O .bss	00000004 alt_argv
12408870 g       *ABS*	00000000 _gp
12400364 g     F .text	00000004 usleep
12400588 g     F .text	00000074 alt_find_dev
1240078c g     F .text	00000064 .hidden __udivsi3
12400880 g     O .rwdata	00000004 matrix1
12400610 g     F .text	00000038 alt_icache_flush
1240047c g     F .text	00000010 altera_avalon_mutex_first_lock
124008fc g       *ABS*	00000000 __bss_end
12400398 g     F .text	0000004c altera_avalon_mutex_open
12400504 g     F .text	00000018 alt_dcache_flush_all
124008a4 g       *ABS*	00000000 __ram_rwdata_end
12400894 g     O .rwdata	00000004 worker_3_jtag_uart_0
12400898 g     O .rwdata	00000008 alt_mutex_list
12400860 g       *ABS*	00000000 __ram_rodata_end
124007f0 g     F .text	00000058 .hidden __umodsi3
124008fc g       *ABS*	00000000 end
12500000 g       *ABS*	00000000 __alt_stack_pointer
12400020 g     F .text	0000004c _start
12400388 g     F .text	00000010 alt_sys_init
12400434 g     F .text	00000020 altera_avalon_mutex_unlock
12400860 g       *ABS*	00000000 __ram_rwdata_start
12400848 g       *ABS*	00000000 __ram_rodata_start
1240048c g     F .text	00000078 alt_busy_sleep
12400648 g     F .text	00000030 memcmp
124008fc g       *ABS*	00000000 __alt_stack_base
1240051c g     F .text	0000006c alt_dev_llist_insert
124008e8 g       *ABS*	00000000 __bss_start
12400094 g     F .text	000001c4 main
124008ec g     O .bss	00000004 alt_envp
14001000 g       *ABS*	00000000 __alt_mem_shared_ocm
124003e8 g     F .text	00000024 altera_avalon_mutex_lock
124008a0 g     O .rwdata	00000004 alt_errno
12400874 g     O .rwdata	00000004 heat_srcs
12400694 g     F .text	00000084 .hidden __divsi3
12400848 g       *ABS*	00000000 __flash_rodata_start
12400878 g     O .rwdata	00000004 nr_heat_src
12400368 g     F .text	00000020 alt_irq_init
12400870 g     O .rwdata	00000004 descriptors
124008f4 g     O .bss	00000004 alt_argc
12400888 g     O .rwdata	00000004 c_x
12400020 g       *ABS*	00000000 __ram_exceptions_start
124008a4 g       *ABS*	00000000 _edata
124008fc g       *ABS*	00000000 _end
12400020 g       *ABS*	00000000 __ram_exceptions_end
1240006c g     F .text	00000028 _fp_mult
12400718 g     F .text	00000074 .hidden __modsi3
12500000 g       *ABS*	00000000 __alt_data_end
12000000 g       *ABS*	00000000 __alt_mem_sdram
1240001c g       .entry	00000000 _exit
12400678 g     F .text	0000001c strlen
1240087c g     O .rwdata	00000004 matrix2
124005fc g     F .text	0000000c alt_icache_flush_all
124003e4 g     F .text	00000004 altera_avalon_mutex_close
124008e8 g     O .bss	00000004 mux
1240088c g     O .rwdata	00000004 height
12400890 g     O .rwdata	00000004 width
12400258 g     F .text	000000e0 alt_load



Disassembly of section .entry:

12400000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
12400000:	00820014 	movui	r2,2048
#endif

0:
    initi r2
12400004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
12400008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
1240000c:	00bffd16 	blt	zero,r2,12400004 <__alt_mem_shared_ocm+0xfe3ff004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
12400010:	00449034 	movhi	at,4672
    ori r1, r1, %lo(_start)
12400014:	08400814 	ori	at,at,32
    jmp r1
12400018:	0800683a 	jmp	at

1240001c <_exit>:
1240001c:	00000000 	call	10000000 <__alt_mem_sdram-0x2000000>

Disassembly of section .text:

12400020 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
12400020:	00810014 	movui	r2,1024
#endif

0:
    initd 0(r2)
12400024:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
12400028:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
1240002c:	00bffd16 	blt	zero,r2,12400024 <__alt_mem_shared_ocm+0xfe3ff024>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
12400030:	06c49434 	movhi	sp,4688
    ori sp, sp, %lo(__alt_stack_pointer)
12400034:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
12400038:	06849034 	movhi	gp,4672
    ori gp, gp, %lo(_gp)
1240003c:	d6a21c14 	ori	gp,gp,34928
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
12400040:	00849034 	movhi	r2,4672
    ori r2, r2, %lo(__bss_start)
12400044:	10823a14 	ori	r2,r2,2280

    movhi r3, %hi(__bss_end)
12400048:	00c49034 	movhi	r3,4672
    ori r3, r3, %lo(__bss_end)
1240004c:	18c23f14 	ori	r3,r3,2300

    beq r2, r3, 1f
12400050:	10c00326 	beq	r2,r3,12400060 <_start+0x40>

0:
    stw zero, (r2)
12400054:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
12400058:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
1240005c:	10fffd36 	bltu	r2,r3,12400054 <__alt_mem_shared_ocm+0xfe3ff054>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
12400060:	24002580 	call	12400258 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
12400064:	24003380 	call	12400338 <alt_main>

12400068 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
12400068:	003fff06 	br	12400068 <__alt_mem_shared_ocm+0xfe3ff068>

1240006c <_fp_mult>:
int16_t _fp_mult(int16_t a, int16_t b)
{
    int16_t res;
    int32_t tmp;

    tmp = (int32_t)a * (int32_t)b; // result type is operand's type
1240006c:	213fffcc 	andi	r4,r4,65535
12400070:	297fffcc 	andi	r5,r5,65535
12400074:	2120001c 	xori	r4,r4,32768
12400078:	2960001c 	xori	r5,r5,32768
1240007c:	21200004 	addi	r4,r4,-32768
12400080:	29600004 	addi	r5,r5,-32768
12400084:	2145383a 	mul	r2,r4,r5
    // Rounding; mid values are rounded up
    tmp += K;
    // Correct by dividing by base
    res = tmp >> FP_FRAC;

    return res;
12400088:	10880004 	addi	r2,r2,8192
}
1240008c:	1004d3ba 	srli	r2,r2,14
12400090:	f800283a 	ret

12400094 <main>:
	uint32_t iter = 0;

	int16_t * curr;
	int16_t * next;

	mux = altera_avalon_mutex_open(SHARED_OCM_MUTEX_NAME);
12400094:	01049034 	movhi	r4,4672

    return res;
}

int main()
{
12400098:	defffb04 	addi	sp,sp,-20
	uint32_t iter = 0;

	int16_t * curr;
	int16_t * next;

	mux = altera_avalon_mutex_open(SHARED_OCM_MUTEX_NAME);
1240009c:	21021204 	addi	r4,r4,2120

    return res;
}

int main()
{
124000a0:	dc400115 	stw	r17,4(sp)
124000a4:	dc000015 	stw	r16,0(sp)
124000a8:	dfc00415 	stw	ra,16(sp)
124000ac:	dcc00315 	stw	r19,12(sp)
124000b0:	dc800215 	stw	r18,8(sp)
	uint32_t iter = 0;

	int16_t * curr;
	int16_t * next;

	mux = altera_avalon_mutex_open(SHARED_OCM_MUTEX_NAME);
124000b4:	24003980 	call	12400398 <altera_avalon_mutex_open>
	region = &descriptors[CPU_ID];
124000b8:	d4600017 	ldw	r17,-32768(gp)
	uint32_t iter = 0;

	int16_t * curr;
	int16_t * next;

	mux = altera_avalon_mutex_open(SHARED_OCM_MUTEX_NAME);
124000bc:	d0a01e15 	stw	r2,-32648(gp)
					region->next[id] += _fp_mult(*c_x, (region->curr[id+1] + region->curr[id-1] - (region->curr[id]<<1)));
					region->next[id] += _fp_mult(*c_y, (region->curr[id+*width] + region->curr[id-*width] - (region->curr[id]<<1)));
				}
			}
		}
		while (altera_avalon_mutex_trylock(mux,1))
124000c0:	04000044 	movi	r16,1
	mux = altera_avalon_mutex_open(SHARED_OCM_MUTEX_NAME);
	region = &descriptors[CPU_ID];

	while (1)
	{
		while (region->status != DESC_READY)
124000c4:	88801d17 	ldw	r2,116(r17)
124000c8:	10000326 	beq	r2,zero,124000d8 <main+0x44>
		{
			usleep(100);
124000cc:	01001904 	movi	r4,100
124000d0:	24003640 	call	12400364 <usleep>
124000d4:	003ffb06 	br	124000c4 <__alt_mem_shared_ocm+0xfe3ff0c4>
		}
		for (int y = region->col_start; y < region->col_start + region->region_height; y++)
124000d8:	89401a17 	ldw	r5,104(r17)
124000dc:	8a001c17 	ldw	r8,112(r17)
		{
			for (int x = region->row_start; x < region->row_start + region->region_width; x++)
			{
				// don't update heat for sources
				uint8_t is_source = 0;
				for (int src = 0; src < *nr_heat_src; src++)
124000e0:	d2e00217 	ldw	r11,-32760(gp)
				{
					if ((heat_srcs[src].xpos == x) && (heat_srcs[src].ypos == y))
124000e4:	d2600117 	ldw	r9,-32764(gp)
					{
						is_source = 1;
					}
				}
				uint32_t id = y * *width + x;
124000e8:	d3200817 	ldw	r12,-32736(gp)
					region->next[id] = region->curr[id];
				}
				else
				{
					region->next[id] = region->curr[id];
					region->next[id] += _fp_mult(*c_x, (region->curr[id+1] + region->curr[id-1] - (region->curr[id]<<1)));
124000ec:	d3600617 	ldw	r13,-32744(gp)
					region->next[id] += _fp_mult(*c_y, (region->curr[id+*width] + region->curr[id-*width] - (region->curr[id]<<1)));
124000f0:	d3a00517 	ldw	r14,-32748(gp)
	{
		while (region->status != DESC_READY)
		{
			usleep(100);
		}
		for (int y = region->col_start; y < region->col_start + region->region_height; y++)
124000f4:	2a11883a 	add	r8,r5,r8
124000f8:	2a004c2e 	bgeu	r5,r8,1240022c <main+0x198>
		{
			for (int x = region->row_start; x < region->row_start + region->region_width; x++)
124000fc:	89801917 	ldw	r6,100(r17)
12400100:	8a801b17 	ldw	r10,108(r17)
12400104:	3295883a 	add	r10,r6,r10
12400108:	3280462e 	bgeu	r6,r10,12400224 <main+0x190>
1240010c:	5880000b 	ldhu	r2,0(r11)
12400110:	4809883a 	mov	r4,r9
12400114:	49c00084 	addi	r7,r9,2
12400118:	108001a4 	muli	r2,r2,6
			{
				// don't update heat for sources
				uint8_t is_source = 0;
				for (int src = 0; src < *nr_heat_src; src++)
1240011c:	0007883a 	mov	r3,zero
12400120:	4885883a 	add	r2,r9,r2
12400124:	20800826 	beq	r4,r2,12400148 <main+0xb4>
				{
					if ((heat_srcs[src].xpos == x) && (heat_srcs[src].ypos == y))
12400128:	23c0000b 	ldhu	r15,0(r4)
1240012c:	33c0031e 	bne	r6,r15,1240013c <main+0xa8>
12400130:	3bc0000b 	ldhu	r15,0(r7)
12400134:	2bc0011e 	bne	r5,r15,1240013c <main+0xa8>
					{
						is_source = 1;
12400138:	00c00044 	movi	r3,1
1240013c:	21000184 	addi	r4,r4,6
12400140:	39c00184 	addi	r7,r7,6
12400144:	003ff706 	br	12400124 <__alt_mem_shared_ocm+0xfe3ff124>
					}
				}
				uint32_t id = y * *width + x;
12400148:	64c00017 	ldw	r19,0(r12)
				if (is_source)
1240014c:	19003fcc 	andi	r4,r3,255
12400150:	8c801e17 	ldw	r18,120(r17)
					if ((heat_srcs[src].xpos == x) && (heat_srcs[src].ypos == y))
					{
						is_source = 1;
					}
				}
				uint32_t id = y * *width + x;
12400154:	2cc5383a 	mul	r2,r5,r19
12400158:	89c01f17 	ldw	r7,124(r17)
1240015c:	1185883a 	add	r2,r2,r6
12400160:	1087883a 	add	r3,r2,r2
				if (is_source)
12400164:	20000526 	beq	r4,zero,1240017c <main+0xe8>
				{
					region->next[id] = region->curr[id];
12400168:	90c5883a 	add	r2,r18,r3
1240016c:	1080000b 	ldhu	r2,0(r2)
12400170:	38c7883a 	add	r3,r7,r3
12400174:	1880000d 	sth	r2,0(r3)
12400178:	00002806 	br	1240021c <main+0x188>
				}
				else
				{
					region->next[id] = region->curr[id];
1240017c:	38cf883a 	add	r7,r7,r3
12400180:	90c7883a 	add	r3,r18,r3
12400184:	1bc0000b 	ldhu	r15,0(r3)
12400188:	3bc0000d 	sth	r15,0(r7)
int16_t _fp_mult(int16_t a, int16_t b)
{
    int16_t res;
    int32_t tmp;

    tmp = (int32_t)a * (int32_t)b; // result type is operand's type
1240018c:	193fff8b 	ldhu	r4,-2(r3)
12400190:	1fc0008b 	ldhu	ra,2(r3)
12400194:	f93f883a 	add	ra,ra,r4
12400198:	1900000b 	ldhu	r4,0(r3)
1240019c:	2109883a 	add	r4,r4,r4
124001a0:	f909c83a 	sub	r4,ra,r4
124001a4:	213fffcc 	andi	r4,r4,65535
124001a8:	6fc0000f 	ldh	ra,0(r13)
124001ac:	2120001c 	xori	r4,r4,32768
124001b0:	21200004 	addi	r4,r4,-32768
124001b4:	27c9383a 	mul	r4,r4,ra
					region->next[id] = region->curr[id];
				}
				else
				{
					region->next[id] = region->curr[id];
					region->next[id] += _fp_mult(*c_x, (region->curr[id+1] + region->curr[id-1] - (region->curr[id]<<1)));
124001b8:	21080004 	addi	r4,r4,8192
124001bc:	2009d3ba 	srai	r4,r4,14
124001c0:	23df883a 	add	r15,r4,r15
					region->next[id] += _fp_mult(*c_y, (region->curr[id+*width] + region->curr[id-*width] - (region->curr[id]<<1)));
124001c4:	9889883a 	add	r4,r19,r2
124001c8:	14c5c83a 	sub	r2,r2,r19
124001cc:	2109883a 	add	r4,r4,r4
124001d0:	1085883a 	add	r2,r2,r2
					region->next[id] = region->curr[id];
				}
				else
				{
					region->next[id] = region->curr[id];
					region->next[id] += _fp_mult(*c_x, (region->curr[id+1] + region->curr[id-1] - (region->curr[id]<<1)));
124001d4:	3bc0000d 	sth	r15,0(r7)
					region->next[id] += _fp_mult(*c_y, (region->curr[id+*width] + region->curr[id-*width] - (region->curr[id]<<1)));
124001d8:	9109883a 	add	r4,r18,r4
124001dc:	9085883a 	add	r2,r18,r2
int16_t _fp_mult(int16_t a, int16_t b)
{
    int16_t res;
    int32_t tmp;

    tmp = (int32_t)a * (int32_t)b; // result type is operand's type
124001e0:	1080000b 	ldhu	r2,0(r2)
124001e4:	2100000b 	ldhu	r4,0(r4)
124001e8:	2089883a 	add	r4,r4,r2
124001ec:	1880000b 	ldhu	r2,0(r3)
124001f0:	1085883a 	add	r2,r2,r2
124001f4:	2085c83a 	sub	r2,r4,r2
124001f8:	10bfffcc 	andi	r2,r2,65535
124001fc:	7100000f 	ldh	r4,0(r14)
12400200:	10a0001c 	xori	r2,r2,32768
12400204:	10a00004 	addi	r2,r2,-32768
12400208:	1105383a 	mul	r2,r2,r4
				}
				else
				{
					region->next[id] = region->curr[id];
					region->next[id] += _fp_mult(*c_x, (region->curr[id+1] + region->curr[id-1] - (region->curr[id]<<1)));
					region->next[id] += _fp_mult(*c_y, (region->curr[id+*width] + region->curr[id-*width] - (region->curr[id]<<1)));
1240020c:	10880004 	addi	r2,r2,8192
12400210:	1005d3ba 	srai	r2,r2,14
12400214:	7885883a 	add	r2,r15,r2
12400218:	3880000d 	sth	r2,0(r7)
		{
			usleep(100);
		}
		for (int y = region->col_start; y < region->col_start + region->region_height; y++)
		{
			for (int x = region->row_start; x < region->row_start + region->region_width; x++)
1240021c:	31800044 	addi	r6,r6,1
12400220:	003fb906 	br	12400108 <__alt_mem_shared_ocm+0xfe3ff108>
	{
		while (region->status != DESC_READY)
		{
			usleep(100);
		}
		for (int y = region->col_start; y < region->col_start + region->region_height; y++)
12400224:	29400044 	addi	r5,r5,1
12400228:	003fb306 	br	124000f8 <__alt_mem_shared_ocm+0xfe3ff0f8>
					region->next[id] += _fp_mult(*c_x, (region->curr[id+1] + region->curr[id-1] - (region->curr[id]<<1)));
					region->next[id] += _fp_mult(*c_y, (region->curr[id+*width] + region->curr[id-*width] - (region->curr[id]<<1)));
				}
			}
		}
		while (altera_avalon_mutex_trylock(mux,1))
1240022c:	d1201e17 	ldw	r4,-32648(gp)
12400230:	01400044 	movi	r5,1
12400234:	240040c0 	call	1240040c <altera_avalon_mutex_trylock>
12400238:	10000326 	beq	r2,zero,12400248 <main+0x1b4>
		{
			usleep(10);
1240023c:	01000284 	movi	r4,10
12400240:	24003640 	call	12400364 <usleep>
12400244:	003ff906 	br	1240022c <__alt_mem_shared_ocm+0xfe3ff22c>
		}
		region->status = DESC_DONE;
		altera_avalon_mutex_unlock(mux);
12400248:	d1201e17 	ldw	r4,-32648(gp)
		}
		while (altera_avalon_mutex_trylock(mux,1))
		{
			usleep(10);
		}
		region->status = DESC_DONE;
1240024c:	8c001d15 	stw	r16,116(r17)
		altera_avalon_mutex_unlock(mux);
12400250:	24004340 	call	12400434 <altera_avalon_mutex_unlock>
	}
12400254:	003f9b06 	br	124000c4 <__alt_mem_shared_ocm+0xfe3ff0c4>

12400258 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
12400258:	deffff04 	addi	sp,sp,-4
1240025c:	01049034 	movhi	r4,4672
12400260:	01449034 	movhi	r5,4672
12400264:	dfc00015 	stw	ra,0(sp)
12400268:	21021804 	addi	r4,r4,2144
1240026c:	29422904 	addi	r5,r5,2212

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
12400270:	2140061e 	bne	r4,r5,1240028c <alt_load+0x34>
12400274:	01049034 	movhi	r4,4672
12400278:	01449034 	movhi	r5,4672
1240027c:	21000804 	addi	r4,r4,32
12400280:	29400804 	addi	r5,r5,32
12400284:	2140121e 	bne	r4,r5,124002d0 <alt_load+0x78>
12400288:	00000b06 	br	124002b8 <alt_load+0x60>
1240028c:	00c49034 	movhi	r3,4672
12400290:	18c22904 	addi	r3,r3,2212
12400294:	1907c83a 	sub	r3,r3,r4
12400298:	0005883a 	mov	r2,zero
  {
    while( to != end )
1240029c:	10fff526 	beq	r2,r3,12400274 <__alt_mem_shared_ocm+0xfe3ff274>
    {
      *to++ = *from++;
124002a0:	114f883a 	add	r7,r2,r5
124002a4:	39c00017 	ldw	r7,0(r7)
124002a8:	110d883a 	add	r6,r2,r4
124002ac:	10800104 	addi	r2,r2,4
124002b0:	31c00015 	stw	r7,0(r6)
124002b4:	003ff906 	br	1240029c <__alt_mem_shared_ocm+0xfe3ff29c>
124002b8:	01049034 	movhi	r4,4672
124002bc:	01449034 	movhi	r5,4672
124002c0:	21021204 	addi	r4,r4,2120
124002c4:	29421204 	addi	r5,r5,2120

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
124002c8:	2140101e 	bne	r4,r5,1240030c <alt_load+0xb4>
124002cc:	00000b06 	br	124002fc <alt_load+0xa4>
124002d0:	00c49034 	movhi	r3,4672
124002d4:	18c00804 	addi	r3,r3,32
124002d8:	1907c83a 	sub	r3,r3,r4
124002dc:	0005883a 	mov	r2,zero
  {
    while( to != end )
124002e0:	10fff526 	beq	r2,r3,124002b8 <__alt_mem_shared_ocm+0xfe3ff2b8>
    {
      *to++ = *from++;
124002e4:	114f883a 	add	r7,r2,r5
124002e8:	39c00017 	ldw	r7,0(r7)
124002ec:	110d883a 	add	r6,r2,r4
124002f0:	10800104 	addi	r2,r2,4
124002f4:	31c00015 	stw	r7,0(r6)
124002f8:	003ff906 	br	124002e0 <__alt_mem_shared_ocm+0xfe3ff2e0>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
124002fc:	24005040 	call	12400504 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
12400300:	dfc00017 	ldw	ra,0(sp)
12400304:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
12400308:	24005fc1 	jmpi	124005fc <alt_icache_flush_all>
1240030c:	00c49034 	movhi	r3,4672
12400310:	18c21804 	addi	r3,r3,2144
12400314:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
12400318:	0005883a 	mov	r2,zero
  {
    while( to != end )
1240031c:	18bff726 	beq	r3,r2,124002fc <__alt_mem_shared_ocm+0xfe3ff2fc>
    {
      *to++ = *from++;
12400320:	114f883a 	add	r7,r2,r5
12400324:	39c00017 	ldw	r7,0(r7)
12400328:	110d883a 	add	r6,r2,r4
1240032c:	10800104 	addi	r2,r2,4
12400330:	31c00015 	stw	r7,0(r6)
12400334:	003ff906 	br	1240031c <__alt_mem_shared_ocm+0xfe3ff31c>

12400338 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
12400338:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
1240033c:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
12400340:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
12400344:	24003680 	call	12400368 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
12400348:	24003880 	call	12400388 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
1240034c:	d1a01f17 	ldw	r6,-32644(gp)
12400350:	d1602017 	ldw	r5,-32640(gp)
12400354:	d1202117 	ldw	r4,-32636(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
12400358:	dfc00017 	ldw	ra,0(sp)
1240035c:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
12400360:	24000941 	jmpi	12400094 <main>

12400364 <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
12400364:	240048c1 	jmpi	1240048c <alt_busy_sleep>

12400368 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
12400368:	deffff04 	addi	sp,sp,-4
1240036c:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( WORKER_3_CPU, worker_3_cpu);
12400370:	24006080 	call	12400608 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
12400374:	00800044 	movi	r2,1
12400378:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
1240037c:	dfc00017 	ldw	ra,0(sp)
12400380:	dec00104 	addi	sp,sp,4
12400384:	f800283a 	ret

12400388 <alt_sys_init>:
  int ret_code;
  extern alt_llist alt_mutex_list;
  ret_code = ALT_SEM_CREATE (&dev->lock, 1);
  if (!ret_code)
  {
    ret_code = alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mutex_list);
12400388:	01049034 	movhi	r4,4672
1240038c:	d1600a04 	addi	r5,gp,-32728
12400390:	21021804 	addi	r4,r4,2144
12400394:	240051c1 	jmpi	1240051c <alt_dev_llist_insert>

12400398 <altera_avalon_mutex_open>:
 * Search the list of registered mutexes for one with the supplied name.
 *
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
alt_mutex_dev* altera_avalon_mutex_open (const char* name)
{
12400398:	defffe04 	addi	sp,sp,-8
  alt_mutex_dev* dev;

  dev = (alt_mutex_dev*) alt_find_dev (name, &alt_mutex_list);
1240039c:	d1600a04 	addi	r5,gp,-32728
 * Search the list of registered mutexes for one with the supplied name.
 *
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
alt_mutex_dev* altera_avalon_mutex_open (const char* name)
{
124003a0:	dc000015 	stw	r16,0(sp)
124003a4:	dfc00115 	stw	ra,4(sp)
  alt_mutex_dev* dev;

  dev = (alt_mutex_dev*) alt_find_dev (name, &alt_mutex_list);
124003a8:	24005880 	call	12400588 <alt_find_dev>
124003ac:	1021883a 	mov	r16,r2

  if (NULL == dev)
124003b0:	1000071e 	bne	r2,zero,124003d0 <altera_avalon_mutex_open+0x38>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
124003b4:	d0a00c17 	ldw	r2,-32720(gp)
124003b8:	10000226 	beq	r2,zero,124003c4 <altera_avalon_mutex_open+0x2c>
124003bc:	103ee83a 	callr	r2
124003c0:	00000106 	br	124003c8 <altera_avalon_mutex_open+0x30>
124003c4:	d0a02204 	addi	r2,gp,-32632
  {
    ALT_ERRNO = ENODEV;
124003c8:	00c004c4 	movi	r3,19
124003cc:	10c00015 	stw	r3,0(r2)
  }

  return dev;
}
124003d0:	8005883a 	mov	r2,r16
124003d4:	dfc00117 	ldw	ra,4(sp)
124003d8:	dc000017 	ldw	r16,0(sp)
124003dc:	dec00204 	addi	sp,sp,8
124003e0:	f800283a 	ret

124003e4 <altera_avalon_mutex_close>:
 * altera_avalon_mutex_close - Does nothing at the moment, but included for 
 * completeness
 *
 */
void altera_avalon_mutex_close (alt_mutex_dev* dev)
{
124003e4:	f800283a 	ret

124003e8 <altera_avalon_mutex_lock>:
static int alt_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
  alt_u32 id, data, check;
  int ret_code = -1;

  NIOS2_READ_CPUID(id);
124003e8:	0005317a 	rdctl	r2,cpuid

  /* the data we want the mutex to hold */
  data = (id << ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST) | value;
124003ec:	1004943a 	slli	r2,r2,16

  /* attempt to write to the mutex */
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, data);
124003f0:	20c00317 	ldw	r3,12(r4)
  int ret_code = -1;

  NIOS2_READ_CPUID(id);

  /* the data we want the mutex to hold */
  data = (id << ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST) | value;
124003f4:	1144b03a 	or	r2,r2,r5

  /* attempt to write to the mutex */
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, data);
124003f8:	18800035 	stwio	r2,0(r3)
  
  check = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
124003fc:	20c00317 	ldw	r3,12(r4)
12400400:	18c00037 	ldwio	r3,0(r3)

  if ( check == data)
12400404:	10fff81e 	bne	r2,r3,124003e8 <__alt_mem_shared_ocm+0xfe3ff3e8>
   */

  ALT_SEM_PEND (dev->lock, 0);

  while ( alt_mutex_trylock( dev, value ) != 0);
}
12400408:	f800283a 	ret

1240040c <altera_avalon_mutex_trylock>:
static int alt_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
  alt_u32 id, data, check;
  int ret_code = -1;

  NIOS2_READ_CPUID(id);
1240040c:	0005317a 	rdctl	r2,cpuid

  /* the data we want the mutex to hold */
  data = (id << ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST) | value;
12400410:	1004943a 	slli	r2,r2,16
12400414:	114ab03a 	or	r5,r2,r5

  /* attempt to write to the mutex */
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, data);
12400418:	20800317 	ldw	r2,12(r4)
1240041c:	11400035 	stwio	r5,0(r2)
  
  check = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
12400420:	20800317 	ldw	r2,12(r4)
12400424:	10800037 	ldwio	r2,0(r2)
  if (ret_code)
  {
    ALT_SEM_POST (dev->lock);
  }

  return ret_code;
12400428:	1144c03a 	cmpne	r2,r2,r5
}
1240042c:	0085c83a 	sub	r2,zero,r2
12400430:	f800283a 	ret

12400434 <altera_avalon_mutex_unlock>:
 *
 */
void altera_avalon_mutex_unlock( alt_mutex_dev* dev )
{
  alt_u32 id;
  NIOS2_READ_CPUID(id);
12400434:	0005317a 	rdctl	r2,cpuid

  /*
  * This Mutex has been claimed and released since Reset so clear the Reset bit
  * This MUST happen before we release the MUTEX
  */
  IOWR_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base, 
12400438:	20c00317 	ldw	r3,12(r4)
1240043c:	01400044 	movi	r5,1
12400440:	19400135 	stwio	r5,4(r3)
                                  ALTERA_AVALON_MUTEX_RESET_RESET_MSK);
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, 
12400444:	1004943a 	slli	r2,r2,16
12400448:	20c00317 	ldw	r3,12(r4)
1240044c:	18800035 	stwio	r2,0(r3)
12400450:	f800283a 	ret

12400454 <altera_avalon_mutex_is_mine>:
int altera_avalon_mutex_is_mine( alt_mutex_dev* dev )
{
  alt_u32 id, data, owner, value;
  int ret_code = 0;

  NIOS2_READ_CPUID(id);
12400454:	000b317a 	rdctl	r5,cpuid

  /* retrieve the contents of the mutex */
  data = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
12400458:	20800317 	ldw	r2,12(r4)
1240045c:	10800037 	ldwio	r2,0(r2)
  owner = (data & ALTERA_AVALON_MUTEX_MUTEX_OWNER_MSK) >> 
              ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST;

  if (owner == id) 
12400460:	1006d43a 	srli	r3,r2,16
12400464:	28c0031e 	bne	r5,r3,12400474 <altera_avalon_mutex_is_mine+0x20>
 *  returns non zero if the mutex is owned by this CPU
 */
int altera_avalon_mutex_is_mine( alt_mutex_dev* dev )
{
  alt_u32 id, data, owner, value;
  int ret_code = 0;
12400468:	10bfffcc 	andi	r2,r2,65535
1240046c:	1004c03a 	cmpne	r2,r2,zero
12400470:	f800283a 	ret
12400474:	0005883a 	mov	r2,zero
      ret_code = 1;
    }
  }

  return ret_code;
}
12400478:	f800283a 	ret

1240047c <altera_avalon_mutex_first_lock>:
int altera_avalon_mutex_first_lock( alt_mutex_dev* dev )
{
  alt_u32 data;
  int ret_code = 0;

  data = IORD_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base);
1240047c:	20800317 	ldw	r2,12(r4)
12400480:	10800137 	ldwio	r2,4(r2)
  {
    ret_code = 1;
  }

  return ret_code;
}
12400484:	1080004c 	andi	r2,r2,1
12400488:	f800283a 	ret

1240048c <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
1240048c:	0140f874 	movhi	r5,993
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
12400490:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
12400494:	297e0f84 	addi	r5,r5,-1986
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
12400498:	dc000015 	stw	r16,0(sp)
1240049c:	dfc00115 	stw	ra,4(sp)
124004a0:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
124004a4:	240078c0 	call	1240078c <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
124004a8:	10000e26 	beq	r2,zero,124004e4 <alt_busy_sleep+0x58>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
124004ac:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
124004b0:	013f07f4 	movhi	r4,64543
124004b4:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
124004b8:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
124004bc:	2101f084 	addi	r4,r4,1986
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
124004c0:	297fffc4 	addi	r5,r5,-1
124004c4:	283ffe1e 	bne	r5,zero,124004c0 <__alt_mem_shared_ocm+0xfe3ff4c0>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
124004c8:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
124004cc:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
124004d0:	18bffb16 	blt	r3,r2,124004c0 <__alt_mem_shared_ocm+0xfe3ff4c0>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
124004d4:	84000864 	muli	r16,r16,33
124004d8:	843fffc4 	addi	r16,r16,-1
124004dc:	803ffe1e 	bne	r16,zero,124004d8 <__alt_mem_shared_ocm+0xfe3ff4d8>
124004e0:	00000306 	br	124004f0 <alt_busy_sleep+0x64>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
124004e4:	84000864 	muli	r16,r16,33
124004e8:	843fffc4 	addi	r16,r16,-1
124004ec:	043ffe16 	blt	zero,r16,124004e8 <__alt_mem_shared_ocm+0xfe3ff4e8>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
124004f0:	0005883a 	mov	r2,zero
124004f4:	dfc00117 	ldw	ra,4(sp)
124004f8:	dc000017 	ldw	r16,0(sp)
124004fc:	dec00204 	addi	sp,sp,8
12400500:	f800283a 	ret

12400504 <alt_dcache_flush_all>:
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
12400504:	0005883a 	mov	r2,zero
12400508:	00c10004 	movi	r3,1024
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
1240050c:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
12400510:	10800804 	addi	r2,r2,32
12400514:	10fffd1e 	bne	r2,r3,1240050c <__alt_mem_shared_ocm+0xfe3ff50c>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
12400518:	f800283a 	ret

1240051c <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
1240051c:	20000226 	beq	r4,zero,12400528 <alt_dev_llist_insert+0xc>
12400520:	20800217 	ldw	r2,8(r4)
12400524:	1000101e 	bne	r2,zero,12400568 <alt_dev_llist_insert+0x4c>
12400528:	d0a00c17 	ldw	r2,-32720(gp)
1240052c:	10000926 	beq	r2,zero,12400554 <alt_dev_llist_insert+0x38>
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
12400530:	deffff04 	addi	sp,sp,-4
12400534:	dfc00015 	stw	ra,0(sp)
12400538:	103ee83a 	callr	r2
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
1240053c:	00c00584 	movi	r3,22
12400540:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
12400544:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
12400548:	dfc00017 	ldw	ra,0(sp)
1240054c:	dec00104 	addi	sp,sp,4
12400550:	f800283a 	ret
12400554:	d0a02204 	addi	r2,gp,-32632
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
12400558:	00c00584 	movi	r3,22
1240055c:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
12400560:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
12400564:	f800283a 	ret

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
12400568:	28800017 	ldw	r2,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
1240056c:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
12400570:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
12400574:	28800017 	ldw	r2,0(r5)
12400578:	11000115 	stw	r4,4(r2)
  list->next           = entry;
1240057c:	29000015 	stw	r4,0(r5)
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
12400580:	0005883a 	mov	r2,zero
12400584:	f800283a 	ret

12400588 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
12400588:	defffb04 	addi	sp,sp,-20
1240058c:	dcc00315 	stw	r19,12(sp)
12400590:	dc800215 	stw	r18,8(sp)
12400594:	dc400115 	stw	r17,4(sp)
12400598:	dc000015 	stw	r16,0(sp)
1240059c:	dfc00415 	stw	ra,16(sp)
124005a0:	2027883a 	mov	r19,r4
124005a4:	2823883a 	mov	r17,r5
  alt_dev* next = (alt_dev*) llist->next;
124005a8:	2c000017 	ldw	r16,0(r5)
  alt_32 len;

  len  = strlen(name) + 1;
124005ac:	24006780 	call	12400678 <strlen>
124005b0:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
124005b4:	84400726 	beq	r16,r17,124005d4 <alt_find_dev+0x4c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
124005b8:	81000217 	ldw	r4,8(r16)
124005bc:	900d883a 	mov	r6,r18
124005c0:	980b883a 	mov	r5,r19
124005c4:	24006480 	call	12400648 <memcmp>
124005c8:	10000426 	beq	r2,zero,124005dc <alt_find_dev+0x54>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
124005cc:	84000017 	ldw	r16,0(r16)
124005d0:	003ff806 	br	124005b4 <__alt_mem_shared_ocm+0xfe3ff5b4>
  }
  
  /* No match found */
  
  return NULL;
124005d4:	0005883a 	mov	r2,zero
124005d8:	00000106 	br	124005e0 <alt_find_dev+0x58>
124005dc:	8005883a 	mov	r2,r16
}
124005e0:	dfc00417 	ldw	ra,16(sp)
124005e4:	dcc00317 	ldw	r19,12(sp)
124005e8:	dc800217 	ldw	r18,8(sp)
124005ec:	dc400117 	ldw	r17,4(sp)
124005f0:	dc000017 	ldw	r16,0(sp)
124005f4:	dec00504 	addi	sp,sp,20
124005f8:	f800283a 	ret

124005fc <alt_icache_flush_all>:
 */

void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
124005fc:	01420004 	movi	r5,2048
12400600:	0009883a 	mov	r4,zero
12400604:	24006101 	jmpi	12400610 <alt_icache_flush>

12400608 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
12400608:	000170fa 	wrctl	ienable,zero
1240060c:	f800283a 	ret

12400610 <alt_icache_flush>:
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
12400610:	00820004 	movi	r2,2048
12400614:	1140012e 	bgeu	r2,r5,1240061c <alt_icache_flush+0xc>
12400618:	100b883a 	mov	r5,r2
1240061c:	214b883a 	add	r5,r4,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
12400620:	2005883a 	mov	r2,r4
12400624:	1140032e 	bgeu	r2,r5,12400634 <alt_icache_flush+0x24>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
12400628:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
1240062c:	10800804 	addi	r2,r2,32
12400630:	003ffc06 	br	12400624 <__alt_mem_shared_ocm+0xfe3ff624>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
12400634:	210007cc 	andi	r4,r4,31
12400638:	20000126 	beq	r4,zero,12400640 <alt_icache_flush+0x30>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
1240063c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
12400640:	0000203a 	flushp
12400644:	f800283a 	ret

12400648 <memcmp>:
12400648:	218d883a 	add	r6,r4,r6
1240064c:	21800826 	beq	r4,r6,12400670 <memcmp+0x28>
12400650:	20800003 	ldbu	r2,0(r4)
12400654:	28c00003 	ldbu	r3,0(r5)
12400658:	10c00226 	beq	r2,r3,12400664 <memcmp+0x1c>
1240065c:	10c5c83a 	sub	r2,r2,r3
12400660:	f800283a 	ret
12400664:	21000044 	addi	r4,r4,1
12400668:	29400044 	addi	r5,r5,1
1240066c:	003ff706 	br	1240064c <__alt_mem_shared_ocm+0xfe3ff64c>
12400670:	0005883a 	mov	r2,zero
12400674:	f800283a 	ret

12400678 <strlen>:
12400678:	2005883a 	mov	r2,r4
1240067c:	10c00007 	ldb	r3,0(r2)
12400680:	18000226 	beq	r3,zero,1240068c <strlen+0x14>
12400684:	10800044 	addi	r2,r2,1
12400688:	003ffc06 	br	1240067c <__alt_mem_shared_ocm+0xfe3ff67c>
1240068c:	1105c83a 	sub	r2,r2,r4
12400690:	f800283a 	ret

12400694 <__divsi3>:
12400694:	20001b16 	blt	r4,zero,12400704 <__divsi3+0x70>
12400698:	000f883a 	mov	r7,zero
1240069c:	28001616 	blt	r5,zero,124006f8 <__divsi3+0x64>
124006a0:	200d883a 	mov	r6,r4
124006a4:	29001a2e 	bgeu	r5,r4,12400710 <__divsi3+0x7c>
124006a8:	00800804 	movi	r2,32
124006ac:	00c00044 	movi	r3,1
124006b0:	00000106 	br	124006b8 <__divsi3+0x24>
124006b4:	10000d26 	beq	r2,zero,124006ec <__divsi3+0x58>
124006b8:	294b883a 	add	r5,r5,r5
124006bc:	10bfffc4 	addi	r2,r2,-1
124006c0:	18c7883a 	add	r3,r3,r3
124006c4:	293ffb36 	bltu	r5,r4,124006b4 <__alt_mem_shared_ocm+0xfe3ff6b4>
124006c8:	0005883a 	mov	r2,zero
124006cc:	18000726 	beq	r3,zero,124006ec <__divsi3+0x58>
124006d0:	0005883a 	mov	r2,zero
124006d4:	31400236 	bltu	r6,r5,124006e0 <__divsi3+0x4c>
124006d8:	314dc83a 	sub	r6,r6,r5
124006dc:	10c4b03a 	or	r2,r2,r3
124006e0:	1806d07a 	srli	r3,r3,1
124006e4:	280ad07a 	srli	r5,r5,1
124006e8:	183ffa1e 	bne	r3,zero,124006d4 <__alt_mem_shared_ocm+0xfe3ff6d4>
124006ec:	38000126 	beq	r7,zero,124006f4 <__divsi3+0x60>
124006f0:	0085c83a 	sub	r2,zero,r2
124006f4:	f800283a 	ret
124006f8:	014bc83a 	sub	r5,zero,r5
124006fc:	39c0005c 	xori	r7,r7,1
12400700:	003fe706 	br	124006a0 <__alt_mem_shared_ocm+0xfe3ff6a0>
12400704:	0109c83a 	sub	r4,zero,r4
12400708:	01c00044 	movi	r7,1
1240070c:	003fe306 	br	1240069c <__alt_mem_shared_ocm+0xfe3ff69c>
12400710:	00c00044 	movi	r3,1
12400714:	003fee06 	br	124006d0 <__alt_mem_shared_ocm+0xfe3ff6d0>

12400718 <__modsi3>:
12400718:	20001716 	blt	r4,zero,12400778 <__modsi3+0x60>
1240071c:	000f883a 	mov	r7,zero
12400720:	2005883a 	mov	r2,r4
12400724:	28001216 	blt	r5,zero,12400770 <__modsi3+0x58>
12400728:	2900162e 	bgeu	r5,r4,12400784 <__modsi3+0x6c>
1240072c:	01800804 	movi	r6,32
12400730:	00c00044 	movi	r3,1
12400734:	00000106 	br	1240073c <__modsi3+0x24>
12400738:	30000a26 	beq	r6,zero,12400764 <__modsi3+0x4c>
1240073c:	294b883a 	add	r5,r5,r5
12400740:	31bfffc4 	addi	r6,r6,-1
12400744:	18c7883a 	add	r3,r3,r3
12400748:	293ffb36 	bltu	r5,r4,12400738 <__alt_mem_shared_ocm+0xfe3ff738>
1240074c:	18000526 	beq	r3,zero,12400764 <__modsi3+0x4c>
12400750:	1806d07a 	srli	r3,r3,1
12400754:	11400136 	bltu	r2,r5,1240075c <__modsi3+0x44>
12400758:	1145c83a 	sub	r2,r2,r5
1240075c:	280ad07a 	srli	r5,r5,1
12400760:	183ffb1e 	bne	r3,zero,12400750 <__alt_mem_shared_ocm+0xfe3ff750>
12400764:	38000126 	beq	r7,zero,1240076c <__modsi3+0x54>
12400768:	0085c83a 	sub	r2,zero,r2
1240076c:	f800283a 	ret
12400770:	014bc83a 	sub	r5,zero,r5
12400774:	003fec06 	br	12400728 <__alt_mem_shared_ocm+0xfe3ff728>
12400778:	0109c83a 	sub	r4,zero,r4
1240077c:	01c00044 	movi	r7,1
12400780:	003fe706 	br	12400720 <__alt_mem_shared_ocm+0xfe3ff720>
12400784:	00c00044 	movi	r3,1
12400788:	003ff106 	br	12400750 <__alt_mem_shared_ocm+0xfe3ff750>

1240078c <__udivsi3>:
1240078c:	200d883a 	mov	r6,r4
12400790:	2900152e 	bgeu	r5,r4,124007e8 <__udivsi3+0x5c>
12400794:	28001416 	blt	r5,zero,124007e8 <__udivsi3+0x5c>
12400798:	00800804 	movi	r2,32
1240079c:	00c00044 	movi	r3,1
124007a0:	00000206 	br	124007ac <__udivsi3+0x20>
124007a4:	10000e26 	beq	r2,zero,124007e0 <__udivsi3+0x54>
124007a8:	28000516 	blt	r5,zero,124007c0 <__udivsi3+0x34>
124007ac:	294b883a 	add	r5,r5,r5
124007b0:	10bfffc4 	addi	r2,r2,-1
124007b4:	18c7883a 	add	r3,r3,r3
124007b8:	293ffa36 	bltu	r5,r4,124007a4 <__alt_mem_shared_ocm+0xfe3ff7a4>
124007bc:	18000826 	beq	r3,zero,124007e0 <__udivsi3+0x54>
124007c0:	0005883a 	mov	r2,zero
124007c4:	31400236 	bltu	r6,r5,124007d0 <__udivsi3+0x44>
124007c8:	314dc83a 	sub	r6,r6,r5
124007cc:	10c4b03a 	or	r2,r2,r3
124007d0:	1806d07a 	srli	r3,r3,1
124007d4:	280ad07a 	srli	r5,r5,1
124007d8:	183ffa1e 	bne	r3,zero,124007c4 <__alt_mem_shared_ocm+0xfe3ff7c4>
124007dc:	f800283a 	ret
124007e0:	0005883a 	mov	r2,zero
124007e4:	f800283a 	ret
124007e8:	00c00044 	movi	r3,1
124007ec:	003ff406 	br	124007c0 <__alt_mem_shared_ocm+0xfe3ff7c0>

124007f0 <__umodsi3>:
124007f0:	2005883a 	mov	r2,r4
124007f4:	2900122e 	bgeu	r5,r4,12400840 <__umodsi3+0x50>
124007f8:	28001116 	blt	r5,zero,12400840 <__umodsi3+0x50>
124007fc:	01800804 	movi	r6,32
12400800:	00c00044 	movi	r3,1
12400804:	00000206 	br	12400810 <__umodsi3+0x20>
12400808:	30000c26 	beq	r6,zero,1240083c <__umodsi3+0x4c>
1240080c:	28000516 	blt	r5,zero,12400824 <__umodsi3+0x34>
12400810:	294b883a 	add	r5,r5,r5
12400814:	31bfffc4 	addi	r6,r6,-1
12400818:	18c7883a 	add	r3,r3,r3
1240081c:	293ffa36 	bltu	r5,r4,12400808 <__alt_mem_shared_ocm+0xfe3ff808>
12400820:	18000626 	beq	r3,zero,1240083c <__umodsi3+0x4c>
12400824:	1806d07a 	srli	r3,r3,1
12400828:	11400136 	bltu	r2,r5,12400830 <__umodsi3+0x40>
1240082c:	1145c83a 	sub	r2,r2,r5
12400830:	280ad07a 	srli	r5,r5,1
12400834:	183ffb1e 	bne	r3,zero,12400824 <__alt_mem_shared_ocm+0xfe3ff824>
12400838:	f800283a 	ret
1240083c:	f800283a 	ret
12400840:	00c00044 	movi	r3,1
12400844:	003ff706 	br	12400824 <__alt_mem_shared_ocm+0xfe3ff824>
