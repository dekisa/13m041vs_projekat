// system_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 18.1 625

`timescale 1 ps / 1 ps
module system_mm_interconnect_0 (
		input  wire        altpll_0_c0_clk,                                         //                                       altpll_0_c0.clk
		input  wire        clk_0_clk_clk,                                           //                                         clk_0_clk.clk
		input  wire        manager_reset_reset_bridge_in_reset_reset,               //               manager_reset_reset_bridge_in_reset.reset
		input  wire        performance_counter_0_reset_reset_bridge_in_reset_reset, // performance_counter_0_reset_reset_bridge_in_reset.reset
		input  wire        shared_ocm_mutex_reset_reset_bridge_in_reset_reset,      //      shared_ocm_mutex_reset_reset_bridge_in_reset.reset
		input  wire        worker_0_reset_reset_bridge_in_reset_reset,              //              worker_0_reset_reset_bridge_in_reset.reset
		input  wire [26:0] manager_data_master_address,                             //                               manager_data_master.address
		output wire        manager_data_master_waitrequest,                         //                                                  .waitrequest
		input  wire [3:0]  manager_data_master_byteenable,                          //                                                  .byteenable
		input  wire        manager_data_master_read,                                //                                                  .read
		output wire [31:0] manager_data_master_readdata,                            //                                                  .readdata
		output wire        manager_data_master_readdatavalid,                       //                                                  .readdatavalid
		input  wire        manager_data_master_write,                               //                                                  .write
		input  wire [31:0] manager_data_master_writedata,                           //                                                  .writedata
		input  wire        manager_data_master_debugaccess,                         //                                                  .debugaccess
		input  wire [26:0] manager_instruction_master_address,                      //                        manager_instruction_master.address
		output wire        manager_instruction_master_waitrequest,                  //                                                  .waitrequest
		input  wire        manager_instruction_master_read,                         //                                                  .read
		output wire [31:0] manager_instruction_master_readdata,                     //                                                  .readdata
		output wire        manager_instruction_master_readdatavalid,                //                                                  .readdatavalid
		input  wire [27:0] worker_0_worker_out_address,                             //                               worker_0_worker_out.address
		output wire        worker_0_worker_out_waitrequest,                         //                                                  .waitrequest
		input  wire [0:0]  worker_0_worker_out_burstcount,                          //                                                  .burstcount
		input  wire [3:0]  worker_0_worker_out_byteenable,                          //                                                  .byteenable
		input  wire        worker_0_worker_out_read,                                //                                                  .read
		output wire [31:0] worker_0_worker_out_readdata,                            //                                                  .readdata
		output wire        worker_0_worker_out_readdatavalid,                       //                                                  .readdatavalid
		input  wire        worker_0_worker_out_write,                               //                                                  .write
		input  wire [31:0] worker_0_worker_out_writedata,                           //                                                  .writedata
		input  wire        worker_0_worker_out_debugaccess,                         //                                                  .debugaccess
		input  wire [27:0] worker_1_worker_out_address,                             //                               worker_1_worker_out.address
		output wire        worker_1_worker_out_waitrequest,                         //                                                  .waitrequest
		input  wire [0:0]  worker_1_worker_out_burstcount,                          //                                                  .burstcount
		input  wire [3:0]  worker_1_worker_out_byteenable,                          //                                                  .byteenable
		input  wire        worker_1_worker_out_read,                                //                                                  .read
		output wire [31:0] worker_1_worker_out_readdata,                            //                                                  .readdata
		output wire        worker_1_worker_out_readdatavalid,                       //                                                  .readdatavalid
		input  wire        worker_1_worker_out_write,                               //                                                  .write
		input  wire [31:0] worker_1_worker_out_writedata,                           //                                                  .writedata
		input  wire        worker_1_worker_out_debugaccess,                         //                                                  .debugaccess
		input  wire [27:0] worker_2_worker_out_address,                             //                               worker_2_worker_out.address
		output wire        worker_2_worker_out_waitrequest,                         //                                                  .waitrequest
		input  wire [0:0]  worker_2_worker_out_burstcount,                          //                                                  .burstcount
		input  wire [3:0]  worker_2_worker_out_byteenable,                          //                                                  .byteenable
		input  wire        worker_2_worker_out_read,                                //                                                  .read
		output wire [31:0] worker_2_worker_out_readdata,                            //                                                  .readdata
		output wire        worker_2_worker_out_readdatavalid,                       //                                                  .readdatavalid
		input  wire        worker_2_worker_out_write,                               //                                                  .write
		input  wire [31:0] worker_2_worker_out_writedata,                           //                                                  .writedata
		input  wire        worker_2_worker_out_debugaccess,                         //                                                  .debugaccess
		input  wire [27:0] worker_3_worker_out_address,                             //                               worker_3_worker_out.address
		output wire        worker_3_worker_out_waitrequest,                         //                                                  .waitrequest
		input  wire [0:0]  worker_3_worker_out_burstcount,                          //                                                  .burstcount
		input  wire [3:0]  worker_3_worker_out_byteenable,                          //                                                  .byteenable
		input  wire        worker_3_worker_out_read,                                //                                                  .read
		output wire [31:0] worker_3_worker_out_readdata,                            //                                                  .readdata
		output wire        worker_3_worker_out_readdatavalid,                       //                                                  .readdatavalid
		input  wire        worker_3_worker_out_write,                               //                                                  .write
		input  wire [31:0] worker_3_worker_out_writedata,                           //                                                  .writedata
		input  wire        worker_3_worker_out_debugaccess,                         //                                                  .debugaccess
		output wire [8:0]  manager_debug_mem_slave_address,                         //                           manager_debug_mem_slave.address
		output wire        manager_debug_mem_slave_write,                           //                                                  .write
		output wire        manager_debug_mem_slave_read,                            //                                                  .read
		input  wire [31:0] manager_debug_mem_slave_readdata,                        //                                                  .readdata
		output wire [31:0] manager_debug_mem_slave_writedata,                       //                                                  .writedata
		output wire [3:0]  manager_debug_mem_slave_byteenable,                      //                                                  .byteenable
		input  wire        manager_debug_mem_slave_waitrequest,                     //                                                  .waitrequest
		output wire        manager_debug_mem_slave_debugaccess,                     //                                                  .debugaccess
		output wire [0:0]  manager_jtag_uart_avalon_jtag_slave_address,             //               manager_jtag_uart_avalon_jtag_slave.address
		output wire        manager_jtag_uart_avalon_jtag_slave_write,               //                                                  .write
		output wire        manager_jtag_uart_avalon_jtag_slave_read,                //                                                  .read
		input  wire [31:0] manager_jtag_uart_avalon_jtag_slave_readdata,            //                                                  .readdata
		output wire [31:0] manager_jtag_uart_avalon_jtag_slave_writedata,           //                                                  .writedata
		input  wire        manager_jtag_uart_avalon_jtag_slave_waitrequest,         //                                                  .waitrequest
		output wire        manager_jtag_uart_avalon_jtag_slave_chipselect,          //                                                  .chipselect
		output wire [4:0]  performance_counter_0_control_slave_address,             //               performance_counter_0_control_slave.address
		output wire        performance_counter_0_control_slave_write,               //                                                  .write
		input  wire [31:0] performance_counter_0_control_slave_readdata,            //                                                  .readdata
		output wire [31:0] performance_counter_0_control_slave_writedata,           //                                                  .writedata
		output wire        performance_counter_0_control_slave_begintransfer,       //                                                  .begintransfer
		output wire [23:0] sdram_s1_address,                                        //                                          sdram_s1.address
		output wire        sdram_s1_write,                                          //                                                  .write
		output wire        sdram_s1_read,                                           //                                                  .read
		input  wire [15:0] sdram_s1_readdata,                                       //                                                  .readdata
		output wire [15:0] sdram_s1_writedata,                                      //                                                  .writedata
		output wire [1:0]  sdram_s1_byteenable,                                     //                                                  .byteenable
		input  wire        sdram_s1_readdatavalid,                                  //                                                  .readdatavalid
		input  wire        sdram_s1_waitrequest,                                    //                                                  .waitrequest
		output wire        sdram_s1_chipselect,                                     //                                                  .chipselect
		output wire [6:0]  shared_ocm_s1_address,                                   //                                     shared_ocm_s1.address
		output wire        shared_ocm_s1_write,                                     //                                                  .write
		input  wire [31:0] shared_ocm_s1_readdata,                                  //                                                  .readdata
		output wire [31:0] shared_ocm_s1_writedata,                                 //                                                  .writedata
		output wire [3:0]  shared_ocm_s1_byteenable,                                //                                                  .byteenable
		output wire        shared_ocm_s1_chipselect,                                //                                                  .chipselect
		output wire        shared_ocm_s1_clken,                                     //                                                  .clken
		output wire [6:0]  shared_ocm_s2_address,                                   //                                     shared_ocm_s2.address
		output wire        shared_ocm_s2_write,                                     //                                                  .write
		input  wire [31:0] shared_ocm_s2_readdata,                                  //                                                  .readdata
		output wire [31:0] shared_ocm_s2_writedata,                                 //                                                  .writedata
		output wire [3:0]  shared_ocm_s2_byteenable,                                //                                                  .byteenable
		output wire        shared_ocm_s2_chipselect,                                //                                                  .chipselect
		output wire        shared_ocm_s2_clken,                                     //                                                  .clken
		output wire [0:0]  shared_ocm_mutex_s1_address,                             //                               shared_ocm_mutex_s1.address
		output wire        shared_ocm_mutex_s1_write,                               //                                                  .write
		output wire        shared_ocm_mutex_s1_read,                                //                                                  .read
		input  wire [31:0] shared_ocm_mutex_s1_readdata,                            //                                                  .readdata
		output wire [31:0] shared_ocm_mutex_s1_writedata,                           //                                                  .writedata
		output wire        shared_ocm_mutex_s1_chipselect                           //                                                  .chipselect
	);

	wire          manager_data_master_translator_avalon_universal_master_0_waitrequest;          // manager_data_master_agent:av_waitrequest -> manager_data_master_translator:uav_waitrequest
	wire   [31:0] manager_data_master_translator_avalon_universal_master_0_readdata;             // manager_data_master_agent:av_readdata -> manager_data_master_translator:uav_readdata
	wire          manager_data_master_translator_avalon_universal_master_0_debugaccess;          // manager_data_master_translator:uav_debugaccess -> manager_data_master_agent:av_debugaccess
	wire   [27:0] manager_data_master_translator_avalon_universal_master_0_address;              // manager_data_master_translator:uav_address -> manager_data_master_agent:av_address
	wire          manager_data_master_translator_avalon_universal_master_0_read;                 // manager_data_master_translator:uav_read -> manager_data_master_agent:av_read
	wire    [3:0] manager_data_master_translator_avalon_universal_master_0_byteenable;           // manager_data_master_translator:uav_byteenable -> manager_data_master_agent:av_byteenable
	wire          manager_data_master_translator_avalon_universal_master_0_readdatavalid;        // manager_data_master_agent:av_readdatavalid -> manager_data_master_translator:uav_readdatavalid
	wire          manager_data_master_translator_avalon_universal_master_0_lock;                 // manager_data_master_translator:uav_lock -> manager_data_master_agent:av_lock
	wire          manager_data_master_translator_avalon_universal_master_0_write;                // manager_data_master_translator:uav_write -> manager_data_master_agent:av_write
	wire   [31:0] manager_data_master_translator_avalon_universal_master_0_writedata;            // manager_data_master_translator:uav_writedata -> manager_data_master_agent:av_writedata
	wire    [2:0] manager_data_master_translator_avalon_universal_master_0_burstcount;           // manager_data_master_translator:uav_burstcount -> manager_data_master_agent:av_burstcount
	wire          manager_instruction_master_translator_avalon_universal_master_0_waitrequest;   // manager_instruction_master_agent:av_waitrequest -> manager_instruction_master_translator:uav_waitrequest
	wire   [31:0] manager_instruction_master_translator_avalon_universal_master_0_readdata;      // manager_instruction_master_agent:av_readdata -> manager_instruction_master_translator:uav_readdata
	wire          manager_instruction_master_translator_avalon_universal_master_0_debugaccess;   // manager_instruction_master_translator:uav_debugaccess -> manager_instruction_master_agent:av_debugaccess
	wire   [27:0] manager_instruction_master_translator_avalon_universal_master_0_address;       // manager_instruction_master_translator:uav_address -> manager_instruction_master_agent:av_address
	wire          manager_instruction_master_translator_avalon_universal_master_0_read;          // manager_instruction_master_translator:uav_read -> manager_instruction_master_agent:av_read
	wire    [3:0] manager_instruction_master_translator_avalon_universal_master_0_byteenable;    // manager_instruction_master_translator:uav_byteenable -> manager_instruction_master_agent:av_byteenable
	wire          manager_instruction_master_translator_avalon_universal_master_0_readdatavalid; // manager_instruction_master_agent:av_readdatavalid -> manager_instruction_master_translator:uav_readdatavalid
	wire          manager_instruction_master_translator_avalon_universal_master_0_lock;          // manager_instruction_master_translator:uav_lock -> manager_instruction_master_agent:av_lock
	wire          manager_instruction_master_translator_avalon_universal_master_0_write;         // manager_instruction_master_translator:uav_write -> manager_instruction_master_agent:av_write
	wire   [31:0] manager_instruction_master_translator_avalon_universal_master_0_writedata;     // manager_instruction_master_translator:uav_writedata -> manager_instruction_master_agent:av_writedata
	wire    [2:0] manager_instruction_master_translator_avalon_universal_master_0_burstcount;    // manager_instruction_master_translator:uav_burstcount -> manager_instruction_master_agent:av_burstcount
	wire          worker_0_worker_out_translator_avalon_universal_master_0_waitrequest;          // worker_0_worker_out_agent:av_waitrequest -> worker_0_worker_out_translator:uav_waitrequest
	wire   [31:0] worker_0_worker_out_translator_avalon_universal_master_0_readdata;             // worker_0_worker_out_agent:av_readdata -> worker_0_worker_out_translator:uav_readdata
	wire          worker_0_worker_out_translator_avalon_universal_master_0_debugaccess;          // worker_0_worker_out_translator:uav_debugaccess -> worker_0_worker_out_agent:av_debugaccess
	wire   [27:0] worker_0_worker_out_translator_avalon_universal_master_0_address;              // worker_0_worker_out_translator:uav_address -> worker_0_worker_out_agent:av_address
	wire          worker_0_worker_out_translator_avalon_universal_master_0_read;                 // worker_0_worker_out_translator:uav_read -> worker_0_worker_out_agent:av_read
	wire    [3:0] worker_0_worker_out_translator_avalon_universal_master_0_byteenable;           // worker_0_worker_out_translator:uav_byteenable -> worker_0_worker_out_agent:av_byteenable
	wire          worker_0_worker_out_translator_avalon_universal_master_0_readdatavalid;        // worker_0_worker_out_agent:av_readdatavalid -> worker_0_worker_out_translator:uav_readdatavalid
	wire          worker_0_worker_out_translator_avalon_universal_master_0_lock;                 // worker_0_worker_out_translator:uav_lock -> worker_0_worker_out_agent:av_lock
	wire          worker_0_worker_out_translator_avalon_universal_master_0_write;                // worker_0_worker_out_translator:uav_write -> worker_0_worker_out_agent:av_write
	wire   [31:0] worker_0_worker_out_translator_avalon_universal_master_0_writedata;            // worker_0_worker_out_translator:uav_writedata -> worker_0_worker_out_agent:av_writedata
	wire    [2:0] worker_0_worker_out_translator_avalon_universal_master_0_burstcount;           // worker_0_worker_out_translator:uav_burstcount -> worker_0_worker_out_agent:av_burstcount
	wire          worker_1_worker_out_translator_avalon_universal_master_0_waitrequest;          // worker_1_worker_out_agent:av_waitrequest -> worker_1_worker_out_translator:uav_waitrequest
	wire   [31:0] worker_1_worker_out_translator_avalon_universal_master_0_readdata;             // worker_1_worker_out_agent:av_readdata -> worker_1_worker_out_translator:uav_readdata
	wire          worker_1_worker_out_translator_avalon_universal_master_0_debugaccess;          // worker_1_worker_out_translator:uav_debugaccess -> worker_1_worker_out_agent:av_debugaccess
	wire   [27:0] worker_1_worker_out_translator_avalon_universal_master_0_address;              // worker_1_worker_out_translator:uav_address -> worker_1_worker_out_agent:av_address
	wire          worker_1_worker_out_translator_avalon_universal_master_0_read;                 // worker_1_worker_out_translator:uav_read -> worker_1_worker_out_agent:av_read
	wire    [3:0] worker_1_worker_out_translator_avalon_universal_master_0_byteenable;           // worker_1_worker_out_translator:uav_byteenable -> worker_1_worker_out_agent:av_byteenable
	wire          worker_1_worker_out_translator_avalon_universal_master_0_readdatavalid;        // worker_1_worker_out_agent:av_readdatavalid -> worker_1_worker_out_translator:uav_readdatavalid
	wire          worker_1_worker_out_translator_avalon_universal_master_0_lock;                 // worker_1_worker_out_translator:uav_lock -> worker_1_worker_out_agent:av_lock
	wire          worker_1_worker_out_translator_avalon_universal_master_0_write;                // worker_1_worker_out_translator:uav_write -> worker_1_worker_out_agent:av_write
	wire   [31:0] worker_1_worker_out_translator_avalon_universal_master_0_writedata;            // worker_1_worker_out_translator:uav_writedata -> worker_1_worker_out_agent:av_writedata
	wire    [2:0] worker_1_worker_out_translator_avalon_universal_master_0_burstcount;           // worker_1_worker_out_translator:uav_burstcount -> worker_1_worker_out_agent:av_burstcount
	wire          worker_2_worker_out_translator_avalon_universal_master_0_waitrequest;          // worker_2_worker_out_agent:av_waitrequest -> worker_2_worker_out_translator:uav_waitrequest
	wire   [31:0] worker_2_worker_out_translator_avalon_universal_master_0_readdata;             // worker_2_worker_out_agent:av_readdata -> worker_2_worker_out_translator:uav_readdata
	wire          worker_2_worker_out_translator_avalon_universal_master_0_debugaccess;          // worker_2_worker_out_translator:uav_debugaccess -> worker_2_worker_out_agent:av_debugaccess
	wire   [27:0] worker_2_worker_out_translator_avalon_universal_master_0_address;              // worker_2_worker_out_translator:uav_address -> worker_2_worker_out_agent:av_address
	wire          worker_2_worker_out_translator_avalon_universal_master_0_read;                 // worker_2_worker_out_translator:uav_read -> worker_2_worker_out_agent:av_read
	wire    [3:0] worker_2_worker_out_translator_avalon_universal_master_0_byteenable;           // worker_2_worker_out_translator:uav_byteenable -> worker_2_worker_out_agent:av_byteenable
	wire          worker_2_worker_out_translator_avalon_universal_master_0_readdatavalid;        // worker_2_worker_out_agent:av_readdatavalid -> worker_2_worker_out_translator:uav_readdatavalid
	wire          worker_2_worker_out_translator_avalon_universal_master_0_lock;                 // worker_2_worker_out_translator:uav_lock -> worker_2_worker_out_agent:av_lock
	wire          worker_2_worker_out_translator_avalon_universal_master_0_write;                // worker_2_worker_out_translator:uav_write -> worker_2_worker_out_agent:av_write
	wire   [31:0] worker_2_worker_out_translator_avalon_universal_master_0_writedata;            // worker_2_worker_out_translator:uav_writedata -> worker_2_worker_out_agent:av_writedata
	wire    [2:0] worker_2_worker_out_translator_avalon_universal_master_0_burstcount;           // worker_2_worker_out_translator:uav_burstcount -> worker_2_worker_out_agent:av_burstcount
	wire          worker_3_worker_out_translator_avalon_universal_master_0_waitrequest;          // worker_3_worker_out_agent:av_waitrequest -> worker_3_worker_out_translator:uav_waitrequest
	wire   [31:0] worker_3_worker_out_translator_avalon_universal_master_0_readdata;             // worker_3_worker_out_agent:av_readdata -> worker_3_worker_out_translator:uav_readdata
	wire          worker_3_worker_out_translator_avalon_universal_master_0_debugaccess;          // worker_3_worker_out_translator:uav_debugaccess -> worker_3_worker_out_agent:av_debugaccess
	wire   [27:0] worker_3_worker_out_translator_avalon_universal_master_0_address;              // worker_3_worker_out_translator:uav_address -> worker_3_worker_out_agent:av_address
	wire          worker_3_worker_out_translator_avalon_universal_master_0_read;                 // worker_3_worker_out_translator:uav_read -> worker_3_worker_out_agent:av_read
	wire    [3:0] worker_3_worker_out_translator_avalon_universal_master_0_byteenable;           // worker_3_worker_out_translator:uav_byteenable -> worker_3_worker_out_agent:av_byteenable
	wire          worker_3_worker_out_translator_avalon_universal_master_0_readdatavalid;        // worker_3_worker_out_agent:av_readdatavalid -> worker_3_worker_out_translator:uav_readdatavalid
	wire          worker_3_worker_out_translator_avalon_universal_master_0_lock;                 // worker_3_worker_out_translator:uav_lock -> worker_3_worker_out_agent:av_lock
	wire          worker_3_worker_out_translator_avalon_universal_master_0_write;                // worker_3_worker_out_translator:uav_write -> worker_3_worker_out_agent:av_write
	wire   [31:0] worker_3_worker_out_translator_avalon_universal_master_0_writedata;            // worker_3_worker_out_translator:uav_writedata -> worker_3_worker_out_agent:av_writedata
	wire    [2:0] worker_3_worker_out_translator_avalon_universal_master_0_burstcount;           // worker_3_worker_out_translator:uav_burstcount -> worker_3_worker_out_agent:av_burstcount
	wire   [31:0] manager_jtag_uart_avalon_jtag_slave_agent_m0_readdata;                         // manager_jtag_uart_avalon_jtag_slave_translator:uav_readdata -> manager_jtag_uart_avalon_jtag_slave_agent:m0_readdata
	wire          manager_jtag_uart_avalon_jtag_slave_agent_m0_waitrequest;                      // manager_jtag_uart_avalon_jtag_slave_translator:uav_waitrequest -> manager_jtag_uart_avalon_jtag_slave_agent:m0_waitrequest
	wire          manager_jtag_uart_avalon_jtag_slave_agent_m0_debugaccess;                      // manager_jtag_uart_avalon_jtag_slave_agent:m0_debugaccess -> manager_jtag_uart_avalon_jtag_slave_translator:uav_debugaccess
	wire   [27:0] manager_jtag_uart_avalon_jtag_slave_agent_m0_address;                          // manager_jtag_uart_avalon_jtag_slave_agent:m0_address -> manager_jtag_uart_avalon_jtag_slave_translator:uav_address
	wire    [3:0] manager_jtag_uart_avalon_jtag_slave_agent_m0_byteenable;                       // manager_jtag_uart_avalon_jtag_slave_agent:m0_byteenable -> manager_jtag_uart_avalon_jtag_slave_translator:uav_byteenable
	wire          manager_jtag_uart_avalon_jtag_slave_agent_m0_read;                             // manager_jtag_uart_avalon_jtag_slave_agent:m0_read -> manager_jtag_uart_avalon_jtag_slave_translator:uav_read
	wire          manager_jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid;                    // manager_jtag_uart_avalon_jtag_slave_translator:uav_readdatavalid -> manager_jtag_uart_avalon_jtag_slave_agent:m0_readdatavalid
	wire          manager_jtag_uart_avalon_jtag_slave_agent_m0_lock;                             // manager_jtag_uart_avalon_jtag_slave_agent:m0_lock -> manager_jtag_uart_avalon_jtag_slave_translator:uav_lock
	wire   [31:0] manager_jtag_uart_avalon_jtag_slave_agent_m0_writedata;                        // manager_jtag_uart_avalon_jtag_slave_agent:m0_writedata -> manager_jtag_uart_avalon_jtag_slave_translator:uav_writedata
	wire          manager_jtag_uart_avalon_jtag_slave_agent_m0_write;                            // manager_jtag_uart_avalon_jtag_slave_agent:m0_write -> manager_jtag_uart_avalon_jtag_slave_translator:uav_write
	wire    [2:0] manager_jtag_uart_avalon_jtag_slave_agent_m0_burstcount;                       // manager_jtag_uart_avalon_jtag_slave_agent:m0_burstcount -> manager_jtag_uart_avalon_jtag_slave_translator:uav_burstcount
	wire          manager_jtag_uart_avalon_jtag_slave_agent_rf_source_valid;                     // manager_jtag_uart_avalon_jtag_slave_agent:rf_source_valid -> manager_jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_valid
	wire  [104:0] manager_jtag_uart_avalon_jtag_slave_agent_rf_source_data;                      // manager_jtag_uart_avalon_jtag_slave_agent:rf_source_data -> manager_jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_data
	wire          manager_jtag_uart_avalon_jtag_slave_agent_rf_source_ready;                     // manager_jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_ready -> manager_jtag_uart_avalon_jtag_slave_agent:rf_source_ready
	wire          manager_jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket;             // manager_jtag_uart_avalon_jtag_slave_agent:rf_source_startofpacket -> manager_jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_startofpacket
	wire          manager_jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket;               // manager_jtag_uart_avalon_jtag_slave_agent:rf_source_endofpacket -> manager_jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_endofpacket
	wire          manager_jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid;                  // manager_jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_valid -> manager_jtag_uart_avalon_jtag_slave_agent:rf_sink_valid
	wire  [104:0] manager_jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data;                   // manager_jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_data -> manager_jtag_uart_avalon_jtag_slave_agent:rf_sink_data
	wire          manager_jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready;                  // manager_jtag_uart_avalon_jtag_slave_agent:rf_sink_ready -> manager_jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_ready
	wire          manager_jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket;          // manager_jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_startofpacket -> manager_jtag_uart_avalon_jtag_slave_agent:rf_sink_startofpacket
	wire          manager_jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket;            // manager_jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_endofpacket -> manager_jtag_uart_avalon_jtag_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_src_valid;                                                             // cmd_mux:src_valid -> manager_jtag_uart_avalon_jtag_slave_agent:cp_valid
	wire  [103:0] cmd_mux_src_data;                                                              // cmd_mux:src_data -> manager_jtag_uart_avalon_jtag_slave_agent:cp_data
	wire          cmd_mux_src_ready;                                                             // manager_jtag_uart_avalon_jtag_slave_agent:cp_ready -> cmd_mux:src_ready
	wire    [6:0] cmd_mux_src_channel;                                                           // cmd_mux:src_channel -> manager_jtag_uart_avalon_jtag_slave_agent:cp_channel
	wire          cmd_mux_src_startofpacket;                                                     // cmd_mux:src_startofpacket -> manager_jtag_uart_avalon_jtag_slave_agent:cp_startofpacket
	wire          cmd_mux_src_endofpacket;                                                       // cmd_mux:src_endofpacket -> manager_jtag_uart_avalon_jtag_slave_agent:cp_endofpacket
	wire   [31:0] performance_counter_0_control_slave_agent_m0_readdata;                         // performance_counter_0_control_slave_translator:uav_readdata -> performance_counter_0_control_slave_agent:m0_readdata
	wire          performance_counter_0_control_slave_agent_m0_waitrequest;                      // performance_counter_0_control_slave_translator:uav_waitrequest -> performance_counter_0_control_slave_agent:m0_waitrequest
	wire          performance_counter_0_control_slave_agent_m0_debugaccess;                      // performance_counter_0_control_slave_agent:m0_debugaccess -> performance_counter_0_control_slave_translator:uav_debugaccess
	wire   [27:0] performance_counter_0_control_slave_agent_m0_address;                          // performance_counter_0_control_slave_agent:m0_address -> performance_counter_0_control_slave_translator:uav_address
	wire    [3:0] performance_counter_0_control_slave_agent_m0_byteenable;                       // performance_counter_0_control_slave_agent:m0_byteenable -> performance_counter_0_control_slave_translator:uav_byteenable
	wire          performance_counter_0_control_slave_agent_m0_read;                             // performance_counter_0_control_slave_agent:m0_read -> performance_counter_0_control_slave_translator:uav_read
	wire          performance_counter_0_control_slave_agent_m0_readdatavalid;                    // performance_counter_0_control_slave_translator:uav_readdatavalid -> performance_counter_0_control_slave_agent:m0_readdatavalid
	wire          performance_counter_0_control_slave_agent_m0_lock;                             // performance_counter_0_control_slave_agent:m0_lock -> performance_counter_0_control_slave_translator:uav_lock
	wire   [31:0] performance_counter_0_control_slave_agent_m0_writedata;                        // performance_counter_0_control_slave_agent:m0_writedata -> performance_counter_0_control_slave_translator:uav_writedata
	wire          performance_counter_0_control_slave_agent_m0_write;                            // performance_counter_0_control_slave_agent:m0_write -> performance_counter_0_control_slave_translator:uav_write
	wire    [2:0] performance_counter_0_control_slave_agent_m0_burstcount;                       // performance_counter_0_control_slave_agent:m0_burstcount -> performance_counter_0_control_slave_translator:uav_burstcount
	wire          performance_counter_0_control_slave_agent_rf_source_valid;                     // performance_counter_0_control_slave_agent:rf_source_valid -> performance_counter_0_control_slave_agent_rsp_fifo:in_valid
	wire  [104:0] performance_counter_0_control_slave_agent_rf_source_data;                      // performance_counter_0_control_slave_agent:rf_source_data -> performance_counter_0_control_slave_agent_rsp_fifo:in_data
	wire          performance_counter_0_control_slave_agent_rf_source_ready;                     // performance_counter_0_control_slave_agent_rsp_fifo:in_ready -> performance_counter_0_control_slave_agent:rf_source_ready
	wire          performance_counter_0_control_slave_agent_rf_source_startofpacket;             // performance_counter_0_control_slave_agent:rf_source_startofpacket -> performance_counter_0_control_slave_agent_rsp_fifo:in_startofpacket
	wire          performance_counter_0_control_slave_agent_rf_source_endofpacket;               // performance_counter_0_control_slave_agent:rf_source_endofpacket -> performance_counter_0_control_slave_agent_rsp_fifo:in_endofpacket
	wire          performance_counter_0_control_slave_agent_rsp_fifo_out_valid;                  // performance_counter_0_control_slave_agent_rsp_fifo:out_valid -> performance_counter_0_control_slave_agent:rf_sink_valid
	wire  [104:0] performance_counter_0_control_slave_agent_rsp_fifo_out_data;                   // performance_counter_0_control_slave_agent_rsp_fifo:out_data -> performance_counter_0_control_slave_agent:rf_sink_data
	wire          performance_counter_0_control_slave_agent_rsp_fifo_out_ready;                  // performance_counter_0_control_slave_agent:rf_sink_ready -> performance_counter_0_control_slave_agent_rsp_fifo:out_ready
	wire          performance_counter_0_control_slave_agent_rsp_fifo_out_startofpacket;          // performance_counter_0_control_slave_agent_rsp_fifo:out_startofpacket -> performance_counter_0_control_slave_agent:rf_sink_startofpacket
	wire          performance_counter_0_control_slave_agent_rsp_fifo_out_endofpacket;            // performance_counter_0_control_slave_agent_rsp_fifo:out_endofpacket -> performance_counter_0_control_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_001_src_valid;                                                         // cmd_mux_001:src_valid -> performance_counter_0_control_slave_agent:cp_valid
	wire  [103:0] cmd_mux_001_src_data;                                                          // cmd_mux_001:src_data -> performance_counter_0_control_slave_agent:cp_data
	wire          cmd_mux_001_src_ready;                                                         // performance_counter_0_control_slave_agent:cp_ready -> cmd_mux_001:src_ready
	wire    [6:0] cmd_mux_001_src_channel;                                                       // cmd_mux_001:src_channel -> performance_counter_0_control_slave_agent:cp_channel
	wire          cmd_mux_001_src_startofpacket;                                                 // cmd_mux_001:src_startofpacket -> performance_counter_0_control_slave_agent:cp_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                                   // cmd_mux_001:src_endofpacket -> performance_counter_0_control_slave_agent:cp_endofpacket
	wire   [31:0] manager_debug_mem_slave_agent_m0_readdata;                                     // manager_debug_mem_slave_translator:uav_readdata -> manager_debug_mem_slave_agent:m0_readdata
	wire          manager_debug_mem_slave_agent_m0_waitrequest;                                  // manager_debug_mem_slave_translator:uav_waitrequest -> manager_debug_mem_slave_agent:m0_waitrequest
	wire          manager_debug_mem_slave_agent_m0_debugaccess;                                  // manager_debug_mem_slave_agent:m0_debugaccess -> manager_debug_mem_slave_translator:uav_debugaccess
	wire   [27:0] manager_debug_mem_slave_agent_m0_address;                                      // manager_debug_mem_slave_agent:m0_address -> manager_debug_mem_slave_translator:uav_address
	wire    [3:0] manager_debug_mem_slave_agent_m0_byteenable;                                   // manager_debug_mem_slave_agent:m0_byteenable -> manager_debug_mem_slave_translator:uav_byteenable
	wire          manager_debug_mem_slave_agent_m0_read;                                         // manager_debug_mem_slave_agent:m0_read -> manager_debug_mem_slave_translator:uav_read
	wire          manager_debug_mem_slave_agent_m0_readdatavalid;                                // manager_debug_mem_slave_translator:uav_readdatavalid -> manager_debug_mem_slave_agent:m0_readdatavalid
	wire          manager_debug_mem_slave_agent_m0_lock;                                         // manager_debug_mem_slave_agent:m0_lock -> manager_debug_mem_slave_translator:uav_lock
	wire   [31:0] manager_debug_mem_slave_agent_m0_writedata;                                    // manager_debug_mem_slave_agent:m0_writedata -> manager_debug_mem_slave_translator:uav_writedata
	wire          manager_debug_mem_slave_agent_m0_write;                                        // manager_debug_mem_slave_agent:m0_write -> manager_debug_mem_slave_translator:uav_write
	wire    [2:0] manager_debug_mem_slave_agent_m0_burstcount;                                   // manager_debug_mem_slave_agent:m0_burstcount -> manager_debug_mem_slave_translator:uav_burstcount
	wire          manager_debug_mem_slave_agent_rf_source_valid;                                 // manager_debug_mem_slave_agent:rf_source_valid -> manager_debug_mem_slave_agent_rsp_fifo:in_valid
	wire  [104:0] manager_debug_mem_slave_agent_rf_source_data;                                  // manager_debug_mem_slave_agent:rf_source_data -> manager_debug_mem_slave_agent_rsp_fifo:in_data
	wire          manager_debug_mem_slave_agent_rf_source_ready;                                 // manager_debug_mem_slave_agent_rsp_fifo:in_ready -> manager_debug_mem_slave_agent:rf_source_ready
	wire          manager_debug_mem_slave_agent_rf_source_startofpacket;                         // manager_debug_mem_slave_agent:rf_source_startofpacket -> manager_debug_mem_slave_agent_rsp_fifo:in_startofpacket
	wire          manager_debug_mem_slave_agent_rf_source_endofpacket;                           // manager_debug_mem_slave_agent:rf_source_endofpacket -> manager_debug_mem_slave_agent_rsp_fifo:in_endofpacket
	wire          manager_debug_mem_slave_agent_rsp_fifo_out_valid;                              // manager_debug_mem_slave_agent_rsp_fifo:out_valid -> manager_debug_mem_slave_agent:rf_sink_valid
	wire  [104:0] manager_debug_mem_slave_agent_rsp_fifo_out_data;                               // manager_debug_mem_slave_agent_rsp_fifo:out_data -> manager_debug_mem_slave_agent:rf_sink_data
	wire          manager_debug_mem_slave_agent_rsp_fifo_out_ready;                              // manager_debug_mem_slave_agent:rf_sink_ready -> manager_debug_mem_slave_agent_rsp_fifo:out_ready
	wire          manager_debug_mem_slave_agent_rsp_fifo_out_startofpacket;                      // manager_debug_mem_slave_agent_rsp_fifo:out_startofpacket -> manager_debug_mem_slave_agent:rf_sink_startofpacket
	wire          manager_debug_mem_slave_agent_rsp_fifo_out_endofpacket;                        // manager_debug_mem_slave_agent_rsp_fifo:out_endofpacket -> manager_debug_mem_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_002_src_valid;                                                         // cmd_mux_002:src_valid -> manager_debug_mem_slave_agent:cp_valid
	wire  [103:0] cmd_mux_002_src_data;                                                          // cmd_mux_002:src_data -> manager_debug_mem_slave_agent:cp_data
	wire          cmd_mux_002_src_ready;                                                         // manager_debug_mem_slave_agent:cp_ready -> cmd_mux_002:src_ready
	wire    [6:0] cmd_mux_002_src_channel;                                                       // cmd_mux_002:src_channel -> manager_debug_mem_slave_agent:cp_channel
	wire          cmd_mux_002_src_startofpacket;                                                 // cmd_mux_002:src_startofpacket -> manager_debug_mem_slave_agent:cp_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                                   // cmd_mux_002:src_endofpacket -> manager_debug_mem_slave_agent:cp_endofpacket
	wire   [31:0] shared_ocm_s1_agent_m0_readdata;                                               // shared_ocm_s1_translator:uav_readdata -> shared_ocm_s1_agent:m0_readdata
	wire          shared_ocm_s1_agent_m0_waitrequest;                                            // shared_ocm_s1_translator:uav_waitrequest -> shared_ocm_s1_agent:m0_waitrequest
	wire          shared_ocm_s1_agent_m0_debugaccess;                                            // shared_ocm_s1_agent:m0_debugaccess -> shared_ocm_s1_translator:uav_debugaccess
	wire   [27:0] shared_ocm_s1_agent_m0_address;                                                // shared_ocm_s1_agent:m0_address -> shared_ocm_s1_translator:uav_address
	wire    [3:0] shared_ocm_s1_agent_m0_byteenable;                                             // shared_ocm_s1_agent:m0_byteenable -> shared_ocm_s1_translator:uav_byteenable
	wire          shared_ocm_s1_agent_m0_read;                                                   // shared_ocm_s1_agent:m0_read -> shared_ocm_s1_translator:uav_read
	wire          shared_ocm_s1_agent_m0_readdatavalid;                                          // shared_ocm_s1_translator:uav_readdatavalid -> shared_ocm_s1_agent:m0_readdatavalid
	wire          shared_ocm_s1_agent_m0_lock;                                                   // shared_ocm_s1_agent:m0_lock -> shared_ocm_s1_translator:uav_lock
	wire   [31:0] shared_ocm_s1_agent_m0_writedata;                                              // shared_ocm_s1_agent:m0_writedata -> shared_ocm_s1_translator:uav_writedata
	wire          shared_ocm_s1_agent_m0_write;                                                  // shared_ocm_s1_agent:m0_write -> shared_ocm_s1_translator:uav_write
	wire    [2:0] shared_ocm_s1_agent_m0_burstcount;                                             // shared_ocm_s1_agent:m0_burstcount -> shared_ocm_s1_translator:uav_burstcount
	wire          shared_ocm_s1_agent_rf_source_valid;                                           // shared_ocm_s1_agent:rf_source_valid -> shared_ocm_s1_agent_rsp_fifo:in_valid
	wire  [104:0] shared_ocm_s1_agent_rf_source_data;                                            // shared_ocm_s1_agent:rf_source_data -> shared_ocm_s1_agent_rsp_fifo:in_data
	wire          shared_ocm_s1_agent_rf_source_ready;                                           // shared_ocm_s1_agent_rsp_fifo:in_ready -> shared_ocm_s1_agent:rf_source_ready
	wire          shared_ocm_s1_agent_rf_source_startofpacket;                                   // shared_ocm_s1_agent:rf_source_startofpacket -> shared_ocm_s1_agent_rsp_fifo:in_startofpacket
	wire          shared_ocm_s1_agent_rf_source_endofpacket;                                     // shared_ocm_s1_agent:rf_source_endofpacket -> shared_ocm_s1_agent_rsp_fifo:in_endofpacket
	wire          shared_ocm_s1_agent_rsp_fifo_out_valid;                                        // shared_ocm_s1_agent_rsp_fifo:out_valid -> shared_ocm_s1_agent:rf_sink_valid
	wire  [104:0] shared_ocm_s1_agent_rsp_fifo_out_data;                                         // shared_ocm_s1_agent_rsp_fifo:out_data -> shared_ocm_s1_agent:rf_sink_data
	wire          shared_ocm_s1_agent_rsp_fifo_out_ready;                                        // shared_ocm_s1_agent:rf_sink_ready -> shared_ocm_s1_agent_rsp_fifo:out_ready
	wire          shared_ocm_s1_agent_rsp_fifo_out_startofpacket;                                // shared_ocm_s1_agent_rsp_fifo:out_startofpacket -> shared_ocm_s1_agent:rf_sink_startofpacket
	wire          shared_ocm_s1_agent_rsp_fifo_out_endofpacket;                                  // shared_ocm_s1_agent_rsp_fifo:out_endofpacket -> shared_ocm_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_003_src_valid;                                                         // cmd_mux_003:src_valid -> shared_ocm_s1_agent:cp_valid
	wire  [103:0] cmd_mux_003_src_data;                                                          // cmd_mux_003:src_data -> shared_ocm_s1_agent:cp_data
	wire          cmd_mux_003_src_ready;                                                         // shared_ocm_s1_agent:cp_ready -> cmd_mux_003:src_ready
	wire    [6:0] cmd_mux_003_src_channel;                                                       // cmd_mux_003:src_channel -> shared_ocm_s1_agent:cp_channel
	wire          cmd_mux_003_src_startofpacket;                                                 // cmd_mux_003:src_startofpacket -> shared_ocm_s1_agent:cp_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                                   // cmd_mux_003:src_endofpacket -> shared_ocm_s1_agent:cp_endofpacket
	wire   [15:0] sdram_s1_agent_m0_readdata;                                                    // sdram_s1_translator:uav_readdata -> sdram_s1_agent:m0_readdata
	wire          sdram_s1_agent_m0_waitrequest;                                                 // sdram_s1_translator:uav_waitrequest -> sdram_s1_agent:m0_waitrequest
	wire          sdram_s1_agent_m0_debugaccess;                                                 // sdram_s1_agent:m0_debugaccess -> sdram_s1_translator:uav_debugaccess
	wire   [27:0] sdram_s1_agent_m0_address;                                                     // sdram_s1_agent:m0_address -> sdram_s1_translator:uav_address
	wire    [1:0] sdram_s1_agent_m0_byteenable;                                                  // sdram_s1_agent:m0_byteenable -> sdram_s1_translator:uav_byteenable
	wire          sdram_s1_agent_m0_read;                                                        // sdram_s1_agent:m0_read -> sdram_s1_translator:uav_read
	wire          sdram_s1_agent_m0_readdatavalid;                                               // sdram_s1_translator:uav_readdatavalid -> sdram_s1_agent:m0_readdatavalid
	wire          sdram_s1_agent_m0_lock;                                                        // sdram_s1_agent:m0_lock -> sdram_s1_translator:uav_lock
	wire   [15:0] sdram_s1_agent_m0_writedata;                                                   // sdram_s1_agent:m0_writedata -> sdram_s1_translator:uav_writedata
	wire          sdram_s1_agent_m0_write;                                                       // sdram_s1_agent:m0_write -> sdram_s1_translator:uav_write
	wire    [1:0] sdram_s1_agent_m0_burstcount;                                                  // sdram_s1_agent:m0_burstcount -> sdram_s1_translator:uav_burstcount
	wire          sdram_s1_agent_rf_source_valid;                                                // sdram_s1_agent:rf_source_valid -> sdram_s1_agent_rsp_fifo:in_valid
	wire   [86:0] sdram_s1_agent_rf_source_data;                                                 // sdram_s1_agent:rf_source_data -> sdram_s1_agent_rsp_fifo:in_data
	wire          sdram_s1_agent_rf_source_ready;                                                // sdram_s1_agent_rsp_fifo:in_ready -> sdram_s1_agent:rf_source_ready
	wire          sdram_s1_agent_rf_source_startofpacket;                                        // sdram_s1_agent:rf_source_startofpacket -> sdram_s1_agent_rsp_fifo:in_startofpacket
	wire          sdram_s1_agent_rf_source_endofpacket;                                          // sdram_s1_agent:rf_source_endofpacket -> sdram_s1_agent_rsp_fifo:in_endofpacket
	wire          sdram_s1_agent_rsp_fifo_out_valid;                                             // sdram_s1_agent_rsp_fifo:out_valid -> sdram_s1_agent:rf_sink_valid
	wire   [86:0] sdram_s1_agent_rsp_fifo_out_data;                                              // sdram_s1_agent_rsp_fifo:out_data -> sdram_s1_agent:rf_sink_data
	wire          sdram_s1_agent_rsp_fifo_out_ready;                                             // sdram_s1_agent:rf_sink_ready -> sdram_s1_agent_rsp_fifo:out_ready
	wire          sdram_s1_agent_rsp_fifo_out_startofpacket;                                     // sdram_s1_agent_rsp_fifo:out_startofpacket -> sdram_s1_agent:rf_sink_startofpacket
	wire          sdram_s1_agent_rsp_fifo_out_endofpacket;                                       // sdram_s1_agent_rsp_fifo:out_endofpacket -> sdram_s1_agent:rf_sink_endofpacket
	wire          sdram_s1_agent_rdata_fifo_src_valid;                                           // sdram_s1_agent:rdata_fifo_src_valid -> sdram_s1_agent_rdata_fifo:in_valid
	wire   [17:0] sdram_s1_agent_rdata_fifo_src_data;                                            // sdram_s1_agent:rdata_fifo_src_data -> sdram_s1_agent_rdata_fifo:in_data
	wire          sdram_s1_agent_rdata_fifo_src_ready;                                           // sdram_s1_agent_rdata_fifo:in_ready -> sdram_s1_agent:rdata_fifo_src_ready
	wire   [31:0] shared_ocm_mutex_s1_agent_m0_readdata;                                         // shared_ocm_mutex_s1_translator:uav_readdata -> shared_ocm_mutex_s1_agent:m0_readdata
	wire          shared_ocm_mutex_s1_agent_m0_waitrequest;                                      // shared_ocm_mutex_s1_translator:uav_waitrequest -> shared_ocm_mutex_s1_agent:m0_waitrequest
	wire          shared_ocm_mutex_s1_agent_m0_debugaccess;                                      // shared_ocm_mutex_s1_agent:m0_debugaccess -> shared_ocm_mutex_s1_translator:uav_debugaccess
	wire   [27:0] shared_ocm_mutex_s1_agent_m0_address;                                          // shared_ocm_mutex_s1_agent:m0_address -> shared_ocm_mutex_s1_translator:uav_address
	wire    [3:0] shared_ocm_mutex_s1_agent_m0_byteenable;                                       // shared_ocm_mutex_s1_agent:m0_byteenable -> shared_ocm_mutex_s1_translator:uav_byteenable
	wire          shared_ocm_mutex_s1_agent_m0_read;                                             // shared_ocm_mutex_s1_agent:m0_read -> shared_ocm_mutex_s1_translator:uav_read
	wire          shared_ocm_mutex_s1_agent_m0_readdatavalid;                                    // shared_ocm_mutex_s1_translator:uav_readdatavalid -> shared_ocm_mutex_s1_agent:m0_readdatavalid
	wire          shared_ocm_mutex_s1_agent_m0_lock;                                             // shared_ocm_mutex_s1_agent:m0_lock -> shared_ocm_mutex_s1_translator:uav_lock
	wire   [31:0] shared_ocm_mutex_s1_agent_m0_writedata;                                        // shared_ocm_mutex_s1_agent:m0_writedata -> shared_ocm_mutex_s1_translator:uav_writedata
	wire          shared_ocm_mutex_s1_agent_m0_write;                                            // shared_ocm_mutex_s1_agent:m0_write -> shared_ocm_mutex_s1_translator:uav_write
	wire    [2:0] shared_ocm_mutex_s1_agent_m0_burstcount;                                       // shared_ocm_mutex_s1_agent:m0_burstcount -> shared_ocm_mutex_s1_translator:uav_burstcount
	wire          shared_ocm_mutex_s1_agent_rf_source_valid;                                     // shared_ocm_mutex_s1_agent:rf_source_valid -> shared_ocm_mutex_s1_agent_rsp_fifo:in_valid
	wire  [104:0] shared_ocm_mutex_s1_agent_rf_source_data;                                      // shared_ocm_mutex_s1_agent:rf_source_data -> shared_ocm_mutex_s1_agent_rsp_fifo:in_data
	wire          shared_ocm_mutex_s1_agent_rf_source_ready;                                     // shared_ocm_mutex_s1_agent_rsp_fifo:in_ready -> shared_ocm_mutex_s1_agent:rf_source_ready
	wire          shared_ocm_mutex_s1_agent_rf_source_startofpacket;                             // shared_ocm_mutex_s1_agent:rf_source_startofpacket -> shared_ocm_mutex_s1_agent_rsp_fifo:in_startofpacket
	wire          shared_ocm_mutex_s1_agent_rf_source_endofpacket;                               // shared_ocm_mutex_s1_agent:rf_source_endofpacket -> shared_ocm_mutex_s1_agent_rsp_fifo:in_endofpacket
	wire          shared_ocm_mutex_s1_agent_rsp_fifo_out_valid;                                  // shared_ocm_mutex_s1_agent_rsp_fifo:out_valid -> shared_ocm_mutex_s1_agent:rf_sink_valid
	wire  [104:0] shared_ocm_mutex_s1_agent_rsp_fifo_out_data;                                   // shared_ocm_mutex_s1_agent_rsp_fifo:out_data -> shared_ocm_mutex_s1_agent:rf_sink_data
	wire          shared_ocm_mutex_s1_agent_rsp_fifo_out_ready;                                  // shared_ocm_mutex_s1_agent:rf_sink_ready -> shared_ocm_mutex_s1_agent_rsp_fifo:out_ready
	wire          shared_ocm_mutex_s1_agent_rsp_fifo_out_startofpacket;                          // shared_ocm_mutex_s1_agent_rsp_fifo:out_startofpacket -> shared_ocm_mutex_s1_agent:rf_sink_startofpacket
	wire          shared_ocm_mutex_s1_agent_rsp_fifo_out_endofpacket;                            // shared_ocm_mutex_s1_agent_rsp_fifo:out_endofpacket -> shared_ocm_mutex_s1_agent:rf_sink_endofpacket
	wire          shared_ocm_mutex_s1_agent_rdata_fifo_src_valid;                                // shared_ocm_mutex_s1_agent:rdata_fifo_src_valid -> shared_ocm_mutex_s1_agent_rdata_fifo:in_valid
	wire   [33:0] shared_ocm_mutex_s1_agent_rdata_fifo_src_data;                                 // shared_ocm_mutex_s1_agent:rdata_fifo_src_data -> shared_ocm_mutex_s1_agent_rdata_fifo:in_data
	wire          shared_ocm_mutex_s1_agent_rdata_fifo_src_ready;                                // shared_ocm_mutex_s1_agent_rdata_fifo:in_ready -> shared_ocm_mutex_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_005_src_valid;                                                         // cmd_mux_005:src_valid -> shared_ocm_mutex_s1_agent:cp_valid
	wire  [103:0] cmd_mux_005_src_data;                                                          // cmd_mux_005:src_data -> shared_ocm_mutex_s1_agent:cp_data
	wire          cmd_mux_005_src_ready;                                                         // shared_ocm_mutex_s1_agent:cp_ready -> cmd_mux_005:src_ready
	wire    [6:0] cmd_mux_005_src_channel;                                                       // cmd_mux_005:src_channel -> shared_ocm_mutex_s1_agent:cp_channel
	wire          cmd_mux_005_src_startofpacket;                                                 // cmd_mux_005:src_startofpacket -> shared_ocm_mutex_s1_agent:cp_startofpacket
	wire          cmd_mux_005_src_endofpacket;                                                   // cmd_mux_005:src_endofpacket -> shared_ocm_mutex_s1_agent:cp_endofpacket
	wire   [31:0] shared_ocm_s2_agent_m0_readdata;                                               // shared_ocm_s2_translator:uav_readdata -> shared_ocm_s2_agent:m0_readdata
	wire          shared_ocm_s2_agent_m0_waitrequest;                                            // shared_ocm_s2_translator:uav_waitrequest -> shared_ocm_s2_agent:m0_waitrequest
	wire          shared_ocm_s2_agent_m0_debugaccess;                                            // shared_ocm_s2_agent:m0_debugaccess -> shared_ocm_s2_translator:uav_debugaccess
	wire   [27:0] shared_ocm_s2_agent_m0_address;                                                // shared_ocm_s2_agent:m0_address -> shared_ocm_s2_translator:uav_address
	wire    [3:0] shared_ocm_s2_agent_m0_byteenable;                                             // shared_ocm_s2_agent:m0_byteenable -> shared_ocm_s2_translator:uav_byteenable
	wire          shared_ocm_s2_agent_m0_read;                                                   // shared_ocm_s2_agent:m0_read -> shared_ocm_s2_translator:uav_read
	wire          shared_ocm_s2_agent_m0_readdatavalid;                                          // shared_ocm_s2_translator:uav_readdatavalid -> shared_ocm_s2_agent:m0_readdatavalid
	wire          shared_ocm_s2_agent_m0_lock;                                                   // shared_ocm_s2_agent:m0_lock -> shared_ocm_s2_translator:uav_lock
	wire   [31:0] shared_ocm_s2_agent_m0_writedata;                                              // shared_ocm_s2_agent:m0_writedata -> shared_ocm_s2_translator:uav_writedata
	wire          shared_ocm_s2_agent_m0_write;                                                  // shared_ocm_s2_agent:m0_write -> shared_ocm_s2_translator:uav_write
	wire    [2:0] shared_ocm_s2_agent_m0_burstcount;                                             // shared_ocm_s2_agent:m0_burstcount -> shared_ocm_s2_translator:uav_burstcount
	wire          shared_ocm_s2_agent_rf_source_valid;                                           // shared_ocm_s2_agent:rf_source_valid -> shared_ocm_s2_agent_rsp_fifo:in_valid
	wire  [104:0] shared_ocm_s2_agent_rf_source_data;                                            // shared_ocm_s2_agent:rf_source_data -> shared_ocm_s2_agent_rsp_fifo:in_data
	wire          shared_ocm_s2_agent_rf_source_ready;                                           // shared_ocm_s2_agent_rsp_fifo:in_ready -> shared_ocm_s2_agent:rf_source_ready
	wire          shared_ocm_s2_agent_rf_source_startofpacket;                                   // shared_ocm_s2_agent:rf_source_startofpacket -> shared_ocm_s2_agent_rsp_fifo:in_startofpacket
	wire          shared_ocm_s2_agent_rf_source_endofpacket;                                     // shared_ocm_s2_agent:rf_source_endofpacket -> shared_ocm_s2_agent_rsp_fifo:in_endofpacket
	wire          shared_ocm_s2_agent_rsp_fifo_out_valid;                                        // shared_ocm_s2_agent_rsp_fifo:out_valid -> shared_ocm_s2_agent:rf_sink_valid
	wire  [104:0] shared_ocm_s2_agent_rsp_fifo_out_data;                                         // shared_ocm_s2_agent_rsp_fifo:out_data -> shared_ocm_s2_agent:rf_sink_data
	wire          shared_ocm_s2_agent_rsp_fifo_out_ready;                                        // shared_ocm_s2_agent:rf_sink_ready -> shared_ocm_s2_agent_rsp_fifo:out_ready
	wire          shared_ocm_s2_agent_rsp_fifo_out_startofpacket;                                // shared_ocm_s2_agent_rsp_fifo:out_startofpacket -> shared_ocm_s2_agent:rf_sink_startofpacket
	wire          shared_ocm_s2_agent_rsp_fifo_out_endofpacket;                                  // shared_ocm_s2_agent_rsp_fifo:out_endofpacket -> shared_ocm_s2_agent:rf_sink_endofpacket
	wire          cmd_mux_006_src_valid;                                                         // cmd_mux_006:src_valid -> shared_ocm_s2_agent:cp_valid
	wire  [103:0] cmd_mux_006_src_data;                                                          // cmd_mux_006:src_data -> shared_ocm_s2_agent:cp_data
	wire          cmd_mux_006_src_ready;                                                         // shared_ocm_s2_agent:cp_ready -> cmd_mux_006:src_ready
	wire    [6:0] cmd_mux_006_src_channel;                                                       // cmd_mux_006:src_channel -> shared_ocm_s2_agent:cp_channel
	wire          cmd_mux_006_src_startofpacket;                                                 // cmd_mux_006:src_startofpacket -> shared_ocm_s2_agent:cp_startofpacket
	wire          cmd_mux_006_src_endofpacket;                                                   // cmd_mux_006:src_endofpacket -> shared_ocm_s2_agent:cp_endofpacket
	wire          manager_data_master_agent_cp_valid;                                            // manager_data_master_agent:cp_valid -> router:sink_valid
	wire  [103:0] manager_data_master_agent_cp_data;                                             // manager_data_master_agent:cp_data -> router:sink_data
	wire          manager_data_master_agent_cp_ready;                                            // router:sink_ready -> manager_data_master_agent:cp_ready
	wire          manager_data_master_agent_cp_startofpacket;                                    // manager_data_master_agent:cp_startofpacket -> router:sink_startofpacket
	wire          manager_data_master_agent_cp_endofpacket;                                      // manager_data_master_agent:cp_endofpacket -> router:sink_endofpacket
	wire          manager_instruction_master_agent_cp_valid;                                     // manager_instruction_master_agent:cp_valid -> router_001:sink_valid
	wire  [103:0] manager_instruction_master_agent_cp_data;                                      // manager_instruction_master_agent:cp_data -> router_001:sink_data
	wire          manager_instruction_master_agent_cp_ready;                                     // router_001:sink_ready -> manager_instruction_master_agent:cp_ready
	wire          manager_instruction_master_agent_cp_startofpacket;                             // manager_instruction_master_agent:cp_startofpacket -> router_001:sink_startofpacket
	wire          manager_instruction_master_agent_cp_endofpacket;                               // manager_instruction_master_agent:cp_endofpacket -> router_001:sink_endofpacket
	wire          worker_0_worker_out_agent_cp_valid;                                            // worker_0_worker_out_agent:cp_valid -> router_002:sink_valid
	wire  [103:0] worker_0_worker_out_agent_cp_data;                                             // worker_0_worker_out_agent:cp_data -> router_002:sink_data
	wire          worker_0_worker_out_agent_cp_ready;                                            // router_002:sink_ready -> worker_0_worker_out_agent:cp_ready
	wire          worker_0_worker_out_agent_cp_startofpacket;                                    // worker_0_worker_out_agent:cp_startofpacket -> router_002:sink_startofpacket
	wire          worker_0_worker_out_agent_cp_endofpacket;                                      // worker_0_worker_out_agent:cp_endofpacket -> router_002:sink_endofpacket
	wire          worker_1_worker_out_agent_cp_valid;                                            // worker_1_worker_out_agent:cp_valid -> router_003:sink_valid
	wire  [103:0] worker_1_worker_out_agent_cp_data;                                             // worker_1_worker_out_agent:cp_data -> router_003:sink_data
	wire          worker_1_worker_out_agent_cp_ready;                                            // router_003:sink_ready -> worker_1_worker_out_agent:cp_ready
	wire          worker_1_worker_out_agent_cp_startofpacket;                                    // worker_1_worker_out_agent:cp_startofpacket -> router_003:sink_startofpacket
	wire          worker_1_worker_out_agent_cp_endofpacket;                                      // worker_1_worker_out_agent:cp_endofpacket -> router_003:sink_endofpacket
	wire          worker_2_worker_out_agent_cp_valid;                                            // worker_2_worker_out_agent:cp_valid -> router_004:sink_valid
	wire  [103:0] worker_2_worker_out_agent_cp_data;                                             // worker_2_worker_out_agent:cp_data -> router_004:sink_data
	wire          worker_2_worker_out_agent_cp_ready;                                            // router_004:sink_ready -> worker_2_worker_out_agent:cp_ready
	wire          worker_2_worker_out_agent_cp_startofpacket;                                    // worker_2_worker_out_agent:cp_startofpacket -> router_004:sink_startofpacket
	wire          worker_2_worker_out_agent_cp_endofpacket;                                      // worker_2_worker_out_agent:cp_endofpacket -> router_004:sink_endofpacket
	wire          worker_3_worker_out_agent_cp_valid;                                            // worker_3_worker_out_agent:cp_valid -> router_005:sink_valid
	wire  [103:0] worker_3_worker_out_agent_cp_data;                                             // worker_3_worker_out_agent:cp_data -> router_005:sink_data
	wire          worker_3_worker_out_agent_cp_ready;                                            // router_005:sink_ready -> worker_3_worker_out_agent:cp_ready
	wire          worker_3_worker_out_agent_cp_startofpacket;                                    // worker_3_worker_out_agent:cp_startofpacket -> router_005:sink_startofpacket
	wire          worker_3_worker_out_agent_cp_endofpacket;                                      // worker_3_worker_out_agent:cp_endofpacket -> router_005:sink_endofpacket
	wire          manager_jtag_uart_avalon_jtag_slave_agent_rp_valid;                            // manager_jtag_uart_avalon_jtag_slave_agent:rp_valid -> router_006:sink_valid
	wire  [103:0] manager_jtag_uart_avalon_jtag_slave_agent_rp_data;                             // manager_jtag_uart_avalon_jtag_slave_agent:rp_data -> router_006:sink_data
	wire          manager_jtag_uart_avalon_jtag_slave_agent_rp_ready;                            // router_006:sink_ready -> manager_jtag_uart_avalon_jtag_slave_agent:rp_ready
	wire          manager_jtag_uart_avalon_jtag_slave_agent_rp_startofpacket;                    // manager_jtag_uart_avalon_jtag_slave_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire          manager_jtag_uart_avalon_jtag_slave_agent_rp_endofpacket;                      // manager_jtag_uart_avalon_jtag_slave_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire          router_006_src_valid;                                                          // router_006:src_valid -> rsp_demux:sink_valid
	wire  [103:0] router_006_src_data;                                                           // router_006:src_data -> rsp_demux:sink_data
	wire          router_006_src_ready;                                                          // rsp_demux:sink_ready -> router_006:src_ready
	wire    [6:0] router_006_src_channel;                                                        // router_006:src_channel -> rsp_demux:sink_channel
	wire          router_006_src_startofpacket;                                                  // router_006:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_006_src_endofpacket;                                                    // router_006:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          performance_counter_0_control_slave_agent_rp_valid;                            // performance_counter_0_control_slave_agent:rp_valid -> router_007:sink_valid
	wire  [103:0] performance_counter_0_control_slave_agent_rp_data;                             // performance_counter_0_control_slave_agent:rp_data -> router_007:sink_data
	wire          performance_counter_0_control_slave_agent_rp_ready;                            // router_007:sink_ready -> performance_counter_0_control_slave_agent:rp_ready
	wire          performance_counter_0_control_slave_agent_rp_startofpacket;                    // performance_counter_0_control_slave_agent:rp_startofpacket -> router_007:sink_startofpacket
	wire          performance_counter_0_control_slave_agent_rp_endofpacket;                      // performance_counter_0_control_slave_agent:rp_endofpacket -> router_007:sink_endofpacket
	wire          router_007_src_valid;                                                          // router_007:src_valid -> rsp_demux_001:sink_valid
	wire  [103:0] router_007_src_data;                                                           // router_007:src_data -> rsp_demux_001:sink_data
	wire          router_007_src_ready;                                                          // rsp_demux_001:sink_ready -> router_007:src_ready
	wire    [6:0] router_007_src_channel;                                                        // router_007:src_channel -> rsp_demux_001:sink_channel
	wire          router_007_src_startofpacket;                                                  // router_007:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_007_src_endofpacket;                                                    // router_007:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          manager_debug_mem_slave_agent_rp_valid;                                        // manager_debug_mem_slave_agent:rp_valid -> router_008:sink_valid
	wire  [103:0] manager_debug_mem_slave_agent_rp_data;                                         // manager_debug_mem_slave_agent:rp_data -> router_008:sink_data
	wire          manager_debug_mem_slave_agent_rp_ready;                                        // router_008:sink_ready -> manager_debug_mem_slave_agent:rp_ready
	wire          manager_debug_mem_slave_agent_rp_startofpacket;                                // manager_debug_mem_slave_agent:rp_startofpacket -> router_008:sink_startofpacket
	wire          manager_debug_mem_slave_agent_rp_endofpacket;                                  // manager_debug_mem_slave_agent:rp_endofpacket -> router_008:sink_endofpacket
	wire          router_008_src_valid;                                                          // router_008:src_valid -> rsp_demux_002:sink_valid
	wire  [103:0] router_008_src_data;                                                           // router_008:src_data -> rsp_demux_002:sink_data
	wire          router_008_src_ready;                                                          // rsp_demux_002:sink_ready -> router_008:src_ready
	wire    [6:0] router_008_src_channel;                                                        // router_008:src_channel -> rsp_demux_002:sink_channel
	wire          router_008_src_startofpacket;                                                  // router_008:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_008_src_endofpacket;                                                    // router_008:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          shared_ocm_s1_agent_rp_valid;                                                  // shared_ocm_s1_agent:rp_valid -> router_009:sink_valid
	wire  [103:0] shared_ocm_s1_agent_rp_data;                                                   // shared_ocm_s1_agent:rp_data -> router_009:sink_data
	wire          shared_ocm_s1_agent_rp_ready;                                                  // router_009:sink_ready -> shared_ocm_s1_agent:rp_ready
	wire          shared_ocm_s1_agent_rp_startofpacket;                                          // shared_ocm_s1_agent:rp_startofpacket -> router_009:sink_startofpacket
	wire          shared_ocm_s1_agent_rp_endofpacket;                                            // shared_ocm_s1_agent:rp_endofpacket -> router_009:sink_endofpacket
	wire          router_009_src_valid;                                                          // router_009:src_valid -> rsp_demux_003:sink_valid
	wire  [103:0] router_009_src_data;                                                           // router_009:src_data -> rsp_demux_003:sink_data
	wire          router_009_src_ready;                                                          // rsp_demux_003:sink_ready -> router_009:src_ready
	wire    [6:0] router_009_src_channel;                                                        // router_009:src_channel -> rsp_demux_003:sink_channel
	wire          router_009_src_startofpacket;                                                  // router_009:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          router_009_src_endofpacket;                                                    // router_009:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          sdram_s1_agent_rp_valid;                                                       // sdram_s1_agent:rp_valid -> router_010:sink_valid
	wire   [85:0] sdram_s1_agent_rp_data;                                                        // sdram_s1_agent:rp_data -> router_010:sink_data
	wire          sdram_s1_agent_rp_ready;                                                       // router_010:sink_ready -> sdram_s1_agent:rp_ready
	wire          sdram_s1_agent_rp_startofpacket;                                               // sdram_s1_agent:rp_startofpacket -> router_010:sink_startofpacket
	wire          sdram_s1_agent_rp_endofpacket;                                                 // sdram_s1_agent:rp_endofpacket -> router_010:sink_endofpacket
	wire          shared_ocm_mutex_s1_agent_rp_valid;                                            // shared_ocm_mutex_s1_agent:rp_valid -> router_011:sink_valid
	wire  [103:0] shared_ocm_mutex_s1_agent_rp_data;                                             // shared_ocm_mutex_s1_agent:rp_data -> router_011:sink_data
	wire          shared_ocm_mutex_s1_agent_rp_ready;                                            // router_011:sink_ready -> shared_ocm_mutex_s1_agent:rp_ready
	wire          shared_ocm_mutex_s1_agent_rp_startofpacket;                                    // shared_ocm_mutex_s1_agent:rp_startofpacket -> router_011:sink_startofpacket
	wire          shared_ocm_mutex_s1_agent_rp_endofpacket;                                      // shared_ocm_mutex_s1_agent:rp_endofpacket -> router_011:sink_endofpacket
	wire          router_011_src_valid;                                                          // router_011:src_valid -> rsp_demux_005:sink_valid
	wire  [103:0] router_011_src_data;                                                           // router_011:src_data -> rsp_demux_005:sink_data
	wire          router_011_src_ready;                                                          // rsp_demux_005:sink_ready -> router_011:src_ready
	wire    [6:0] router_011_src_channel;                                                        // router_011:src_channel -> rsp_demux_005:sink_channel
	wire          router_011_src_startofpacket;                                                  // router_011:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire          router_011_src_endofpacket;                                                    // router_011:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire          shared_ocm_s2_agent_rp_valid;                                                  // shared_ocm_s2_agent:rp_valid -> router_012:sink_valid
	wire  [103:0] shared_ocm_s2_agent_rp_data;                                                   // shared_ocm_s2_agent:rp_data -> router_012:sink_data
	wire          shared_ocm_s2_agent_rp_ready;                                                  // router_012:sink_ready -> shared_ocm_s2_agent:rp_ready
	wire          shared_ocm_s2_agent_rp_startofpacket;                                          // shared_ocm_s2_agent:rp_startofpacket -> router_012:sink_startofpacket
	wire          shared_ocm_s2_agent_rp_endofpacket;                                            // shared_ocm_s2_agent:rp_endofpacket -> router_012:sink_endofpacket
	wire          router_012_src_valid;                                                          // router_012:src_valid -> rsp_demux_006:sink_valid
	wire  [103:0] router_012_src_data;                                                           // router_012:src_data -> rsp_demux_006:sink_data
	wire          router_012_src_ready;                                                          // rsp_demux_006:sink_ready -> router_012:src_ready
	wire    [6:0] router_012_src_channel;                                                        // router_012:src_channel -> rsp_demux_006:sink_channel
	wire          router_012_src_startofpacket;                                                  // router_012:src_startofpacket -> rsp_demux_006:sink_startofpacket
	wire          router_012_src_endofpacket;                                                    // router_012:src_endofpacket -> rsp_demux_006:sink_endofpacket
	wire          router_src_valid;                                                              // router:src_valid -> manager_data_master_limiter:cmd_sink_valid
	wire  [103:0] router_src_data;                                                               // router:src_data -> manager_data_master_limiter:cmd_sink_data
	wire          router_src_ready;                                                              // manager_data_master_limiter:cmd_sink_ready -> router:src_ready
	wire    [6:0] router_src_channel;                                                            // router:src_channel -> manager_data_master_limiter:cmd_sink_channel
	wire          router_src_startofpacket;                                                      // router:src_startofpacket -> manager_data_master_limiter:cmd_sink_startofpacket
	wire          router_src_endofpacket;                                                        // router:src_endofpacket -> manager_data_master_limiter:cmd_sink_endofpacket
	wire  [103:0] manager_data_master_limiter_cmd_src_data;                                      // manager_data_master_limiter:cmd_src_data -> cmd_demux:sink_data
	wire          manager_data_master_limiter_cmd_src_ready;                                     // cmd_demux:sink_ready -> manager_data_master_limiter:cmd_src_ready
	wire    [6:0] manager_data_master_limiter_cmd_src_channel;                                   // manager_data_master_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire          manager_data_master_limiter_cmd_src_startofpacket;                             // manager_data_master_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire          manager_data_master_limiter_cmd_src_endofpacket;                               // manager_data_master_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire          rsp_mux_src_valid;                                                             // rsp_mux:src_valid -> manager_data_master_limiter:rsp_sink_valid
	wire  [103:0] rsp_mux_src_data;                                                              // rsp_mux:src_data -> manager_data_master_limiter:rsp_sink_data
	wire          rsp_mux_src_ready;                                                             // manager_data_master_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire    [6:0] rsp_mux_src_channel;                                                           // rsp_mux:src_channel -> manager_data_master_limiter:rsp_sink_channel
	wire          rsp_mux_src_startofpacket;                                                     // rsp_mux:src_startofpacket -> manager_data_master_limiter:rsp_sink_startofpacket
	wire          rsp_mux_src_endofpacket;                                                       // rsp_mux:src_endofpacket -> manager_data_master_limiter:rsp_sink_endofpacket
	wire          manager_data_master_limiter_rsp_src_valid;                                     // manager_data_master_limiter:rsp_src_valid -> manager_data_master_agent:rp_valid
	wire  [103:0] manager_data_master_limiter_rsp_src_data;                                      // manager_data_master_limiter:rsp_src_data -> manager_data_master_agent:rp_data
	wire          manager_data_master_limiter_rsp_src_ready;                                     // manager_data_master_agent:rp_ready -> manager_data_master_limiter:rsp_src_ready
	wire    [6:0] manager_data_master_limiter_rsp_src_channel;                                   // manager_data_master_limiter:rsp_src_channel -> manager_data_master_agent:rp_channel
	wire          manager_data_master_limiter_rsp_src_startofpacket;                             // manager_data_master_limiter:rsp_src_startofpacket -> manager_data_master_agent:rp_startofpacket
	wire          manager_data_master_limiter_rsp_src_endofpacket;                               // manager_data_master_limiter:rsp_src_endofpacket -> manager_data_master_agent:rp_endofpacket
	wire          router_001_src_valid;                                                          // router_001:src_valid -> manager_instruction_master_limiter:cmd_sink_valid
	wire  [103:0] router_001_src_data;                                                           // router_001:src_data -> manager_instruction_master_limiter:cmd_sink_data
	wire          router_001_src_ready;                                                          // manager_instruction_master_limiter:cmd_sink_ready -> router_001:src_ready
	wire    [6:0] router_001_src_channel;                                                        // router_001:src_channel -> manager_instruction_master_limiter:cmd_sink_channel
	wire          router_001_src_startofpacket;                                                  // router_001:src_startofpacket -> manager_instruction_master_limiter:cmd_sink_startofpacket
	wire          router_001_src_endofpacket;                                                    // router_001:src_endofpacket -> manager_instruction_master_limiter:cmd_sink_endofpacket
	wire  [103:0] manager_instruction_master_limiter_cmd_src_data;                               // manager_instruction_master_limiter:cmd_src_data -> cmd_demux_001:sink_data
	wire          manager_instruction_master_limiter_cmd_src_ready;                              // cmd_demux_001:sink_ready -> manager_instruction_master_limiter:cmd_src_ready
	wire    [6:0] manager_instruction_master_limiter_cmd_src_channel;                            // manager_instruction_master_limiter:cmd_src_channel -> cmd_demux_001:sink_channel
	wire          manager_instruction_master_limiter_cmd_src_startofpacket;                      // manager_instruction_master_limiter:cmd_src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          manager_instruction_master_limiter_cmd_src_endofpacket;                        // manager_instruction_master_limiter:cmd_src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          rsp_mux_001_src_valid;                                                         // rsp_mux_001:src_valid -> manager_instruction_master_limiter:rsp_sink_valid
	wire  [103:0] rsp_mux_001_src_data;                                                          // rsp_mux_001:src_data -> manager_instruction_master_limiter:rsp_sink_data
	wire          rsp_mux_001_src_ready;                                                         // manager_instruction_master_limiter:rsp_sink_ready -> rsp_mux_001:src_ready
	wire    [6:0] rsp_mux_001_src_channel;                                                       // rsp_mux_001:src_channel -> manager_instruction_master_limiter:rsp_sink_channel
	wire          rsp_mux_001_src_startofpacket;                                                 // rsp_mux_001:src_startofpacket -> manager_instruction_master_limiter:rsp_sink_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                                   // rsp_mux_001:src_endofpacket -> manager_instruction_master_limiter:rsp_sink_endofpacket
	wire          manager_instruction_master_limiter_rsp_src_valid;                              // manager_instruction_master_limiter:rsp_src_valid -> manager_instruction_master_agent:rp_valid
	wire  [103:0] manager_instruction_master_limiter_rsp_src_data;                               // manager_instruction_master_limiter:rsp_src_data -> manager_instruction_master_agent:rp_data
	wire          manager_instruction_master_limiter_rsp_src_ready;                              // manager_instruction_master_agent:rp_ready -> manager_instruction_master_limiter:rsp_src_ready
	wire    [6:0] manager_instruction_master_limiter_rsp_src_channel;                            // manager_instruction_master_limiter:rsp_src_channel -> manager_instruction_master_agent:rp_channel
	wire          manager_instruction_master_limiter_rsp_src_startofpacket;                      // manager_instruction_master_limiter:rsp_src_startofpacket -> manager_instruction_master_agent:rp_startofpacket
	wire          manager_instruction_master_limiter_rsp_src_endofpacket;                        // manager_instruction_master_limiter:rsp_src_endofpacket -> manager_instruction_master_agent:rp_endofpacket
	wire          router_002_src_valid;                                                          // router_002:src_valid -> worker_0_worker_out_limiter:cmd_sink_valid
	wire  [103:0] router_002_src_data;                                                           // router_002:src_data -> worker_0_worker_out_limiter:cmd_sink_data
	wire          router_002_src_ready;                                                          // worker_0_worker_out_limiter:cmd_sink_ready -> router_002:src_ready
	wire    [6:0] router_002_src_channel;                                                        // router_002:src_channel -> worker_0_worker_out_limiter:cmd_sink_channel
	wire          router_002_src_startofpacket;                                                  // router_002:src_startofpacket -> worker_0_worker_out_limiter:cmd_sink_startofpacket
	wire          router_002_src_endofpacket;                                                    // router_002:src_endofpacket -> worker_0_worker_out_limiter:cmd_sink_endofpacket
	wire  [103:0] worker_0_worker_out_limiter_cmd_src_data;                                      // worker_0_worker_out_limiter:cmd_src_data -> cmd_demux_002:sink_data
	wire          worker_0_worker_out_limiter_cmd_src_ready;                                     // cmd_demux_002:sink_ready -> worker_0_worker_out_limiter:cmd_src_ready
	wire    [6:0] worker_0_worker_out_limiter_cmd_src_channel;                                   // worker_0_worker_out_limiter:cmd_src_channel -> cmd_demux_002:sink_channel
	wire          worker_0_worker_out_limiter_cmd_src_startofpacket;                             // worker_0_worker_out_limiter:cmd_src_startofpacket -> cmd_demux_002:sink_startofpacket
	wire          worker_0_worker_out_limiter_cmd_src_endofpacket;                               // worker_0_worker_out_limiter:cmd_src_endofpacket -> cmd_demux_002:sink_endofpacket
	wire          rsp_mux_002_src_valid;                                                         // rsp_mux_002:src_valid -> worker_0_worker_out_limiter:rsp_sink_valid
	wire  [103:0] rsp_mux_002_src_data;                                                          // rsp_mux_002:src_data -> worker_0_worker_out_limiter:rsp_sink_data
	wire          rsp_mux_002_src_ready;                                                         // worker_0_worker_out_limiter:rsp_sink_ready -> rsp_mux_002:src_ready
	wire    [6:0] rsp_mux_002_src_channel;                                                       // rsp_mux_002:src_channel -> worker_0_worker_out_limiter:rsp_sink_channel
	wire          rsp_mux_002_src_startofpacket;                                                 // rsp_mux_002:src_startofpacket -> worker_0_worker_out_limiter:rsp_sink_startofpacket
	wire          rsp_mux_002_src_endofpacket;                                                   // rsp_mux_002:src_endofpacket -> worker_0_worker_out_limiter:rsp_sink_endofpacket
	wire          worker_0_worker_out_limiter_rsp_src_valid;                                     // worker_0_worker_out_limiter:rsp_src_valid -> worker_0_worker_out_agent:rp_valid
	wire  [103:0] worker_0_worker_out_limiter_rsp_src_data;                                      // worker_0_worker_out_limiter:rsp_src_data -> worker_0_worker_out_agent:rp_data
	wire          worker_0_worker_out_limiter_rsp_src_ready;                                     // worker_0_worker_out_agent:rp_ready -> worker_0_worker_out_limiter:rsp_src_ready
	wire    [6:0] worker_0_worker_out_limiter_rsp_src_channel;                                   // worker_0_worker_out_limiter:rsp_src_channel -> worker_0_worker_out_agent:rp_channel
	wire          worker_0_worker_out_limiter_rsp_src_startofpacket;                             // worker_0_worker_out_limiter:rsp_src_startofpacket -> worker_0_worker_out_agent:rp_startofpacket
	wire          worker_0_worker_out_limiter_rsp_src_endofpacket;                               // worker_0_worker_out_limiter:rsp_src_endofpacket -> worker_0_worker_out_agent:rp_endofpacket
	wire          router_003_src_valid;                                                          // router_003:src_valid -> worker_1_worker_out_limiter:cmd_sink_valid
	wire  [103:0] router_003_src_data;                                                           // router_003:src_data -> worker_1_worker_out_limiter:cmd_sink_data
	wire          router_003_src_ready;                                                          // worker_1_worker_out_limiter:cmd_sink_ready -> router_003:src_ready
	wire    [6:0] router_003_src_channel;                                                        // router_003:src_channel -> worker_1_worker_out_limiter:cmd_sink_channel
	wire          router_003_src_startofpacket;                                                  // router_003:src_startofpacket -> worker_1_worker_out_limiter:cmd_sink_startofpacket
	wire          router_003_src_endofpacket;                                                    // router_003:src_endofpacket -> worker_1_worker_out_limiter:cmd_sink_endofpacket
	wire  [103:0] worker_1_worker_out_limiter_cmd_src_data;                                      // worker_1_worker_out_limiter:cmd_src_data -> cmd_demux_003:sink_data
	wire          worker_1_worker_out_limiter_cmd_src_ready;                                     // cmd_demux_003:sink_ready -> worker_1_worker_out_limiter:cmd_src_ready
	wire    [6:0] worker_1_worker_out_limiter_cmd_src_channel;                                   // worker_1_worker_out_limiter:cmd_src_channel -> cmd_demux_003:sink_channel
	wire          worker_1_worker_out_limiter_cmd_src_startofpacket;                             // worker_1_worker_out_limiter:cmd_src_startofpacket -> cmd_demux_003:sink_startofpacket
	wire          worker_1_worker_out_limiter_cmd_src_endofpacket;                               // worker_1_worker_out_limiter:cmd_src_endofpacket -> cmd_demux_003:sink_endofpacket
	wire          rsp_mux_003_src_valid;                                                         // rsp_mux_003:src_valid -> worker_1_worker_out_limiter:rsp_sink_valid
	wire  [103:0] rsp_mux_003_src_data;                                                          // rsp_mux_003:src_data -> worker_1_worker_out_limiter:rsp_sink_data
	wire          rsp_mux_003_src_ready;                                                         // worker_1_worker_out_limiter:rsp_sink_ready -> rsp_mux_003:src_ready
	wire    [6:0] rsp_mux_003_src_channel;                                                       // rsp_mux_003:src_channel -> worker_1_worker_out_limiter:rsp_sink_channel
	wire          rsp_mux_003_src_startofpacket;                                                 // rsp_mux_003:src_startofpacket -> worker_1_worker_out_limiter:rsp_sink_startofpacket
	wire          rsp_mux_003_src_endofpacket;                                                   // rsp_mux_003:src_endofpacket -> worker_1_worker_out_limiter:rsp_sink_endofpacket
	wire          worker_1_worker_out_limiter_rsp_src_valid;                                     // worker_1_worker_out_limiter:rsp_src_valid -> worker_1_worker_out_agent:rp_valid
	wire  [103:0] worker_1_worker_out_limiter_rsp_src_data;                                      // worker_1_worker_out_limiter:rsp_src_data -> worker_1_worker_out_agent:rp_data
	wire          worker_1_worker_out_limiter_rsp_src_ready;                                     // worker_1_worker_out_agent:rp_ready -> worker_1_worker_out_limiter:rsp_src_ready
	wire    [6:0] worker_1_worker_out_limiter_rsp_src_channel;                                   // worker_1_worker_out_limiter:rsp_src_channel -> worker_1_worker_out_agent:rp_channel
	wire          worker_1_worker_out_limiter_rsp_src_startofpacket;                             // worker_1_worker_out_limiter:rsp_src_startofpacket -> worker_1_worker_out_agent:rp_startofpacket
	wire          worker_1_worker_out_limiter_rsp_src_endofpacket;                               // worker_1_worker_out_limiter:rsp_src_endofpacket -> worker_1_worker_out_agent:rp_endofpacket
	wire          router_004_src_valid;                                                          // router_004:src_valid -> worker_2_worker_out_limiter:cmd_sink_valid
	wire  [103:0] router_004_src_data;                                                           // router_004:src_data -> worker_2_worker_out_limiter:cmd_sink_data
	wire          router_004_src_ready;                                                          // worker_2_worker_out_limiter:cmd_sink_ready -> router_004:src_ready
	wire    [6:0] router_004_src_channel;                                                        // router_004:src_channel -> worker_2_worker_out_limiter:cmd_sink_channel
	wire          router_004_src_startofpacket;                                                  // router_004:src_startofpacket -> worker_2_worker_out_limiter:cmd_sink_startofpacket
	wire          router_004_src_endofpacket;                                                    // router_004:src_endofpacket -> worker_2_worker_out_limiter:cmd_sink_endofpacket
	wire  [103:0] worker_2_worker_out_limiter_cmd_src_data;                                      // worker_2_worker_out_limiter:cmd_src_data -> cmd_demux_004:sink_data
	wire          worker_2_worker_out_limiter_cmd_src_ready;                                     // cmd_demux_004:sink_ready -> worker_2_worker_out_limiter:cmd_src_ready
	wire    [6:0] worker_2_worker_out_limiter_cmd_src_channel;                                   // worker_2_worker_out_limiter:cmd_src_channel -> cmd_demux_004:sink_channel
	wire          worker_2_worker_out_limiter_cmd_src_startofpacket;                             // worker_2_worker_out_limiter:cmd_src_startofpacket -> cmd_demux_004:sink_startofpacket
	wire          worker_2_worker_out_limiter_cmd_src_endofpacket;                               // worker_2_worker_out_limiter:cmd_src_endofpacket -> cmd_demux_004:sink_endofpacket
	wire          rsp_mux_004_src_valid;                                                         // rsp_mux_004:src_valid -> worker_2_worker_out_limiter:rsp_sink_valid
	wire  [103:0] rsp_mux_004_src_data;                                                          // rsp_mux_004:src_data -> worker_2_worker_out_limiter:rsp_sink_data
	wire          rsp_mux_004_src_ready;                                                         // worker_2_worker_out_limiter:rsp_sink_ready -> rsp_mux_004:src_ready
	wire    [6:0] rsp_mux_004_src_channel;                                                       // rsp_mux_004:src_channel -> worker_2_worker_out_limiter:rsp_sink_channel
	wire          rsp_mux_004_src_startofpacket;                                                 // rsp_mux_004:src_startofpacket -> worker_2_worker_out_limiter:rsp_sink_startofpacket
	wire          rsp_mux_004_src_endofpacket;                                                   // rsp_mux_004:src_endofpacket -> worker_2_worker_out_limiter:rsp_sink_endofpacket
	wire          worker_2_worker_out_limiter_rsp_src_valid;                                     // worker_2_worker_out_limiter:rsp_src_valid -> worker_2_worker_out_agent:rp_valid
	wire  [103:0] worker_2_worker_out_limiter_rsp_src_data;                                      // worker_2_worker_out_limiter:rsp_src_data -> worker_2_worker_out_agent:rp_data
	wire          worker_2_worker_out_limiter_rsp_src_ready;                                     // worker_2_worker_out_agent:rp_ready -> worker_2_worker_out_limiter:rsp_src_ready
	wire    [6:0] worker_2_worker_out_limiter_rsp_src_channel;                                   // worker_2_worker_out_limiter:rsp_src_channel -> worker_2_worker_out_agent:rp_channel
	wire          worker_2_worker_out_limiter_rsp_src_startofpacket;                             // worker_2_worker_out_limiter:rsp_src_startofpacket -> worker_2_worker_out_agent:rp_startofpacket
	wire          worker_2_worker_out_limiter_rsp_src_endofpacket;                               // worker_2_worker_out_limiter:rsp_src_endofpacket -> worker_2_worker_out_agent:rp_endofpacket
	wire          router_005_src_valid;                                                          // router_005:src_valid -> worker_3_worker_out_limiter:cmd_sink_valid
	wire  [103:0] router_005_src_data;                                                           // router_005:src_data -> worker_3_worker_out_limiter:cmd_sink_data
	wire          router_005_src_ready;                                                          // worker_3_worker_out_limiter:cmd_sink_ready -> router_005:src_ready
	wire    [6:0] router_005_src_channel;                                                        // router_005:src_channel -> worker_3_worker_out_limiter:cmd_sink_channel
	wire          router_005_src_startofpacket;                                                  // router_005:src_startofpacket -> worker_3_worker_out_limiter:cmd_sink_startofpacket
	wire          router_005_src_endofpacket;                                                    // router_005:src_endofpacket -> worker_3_worker_out_limiter:cmd_sink_endofpacket
	wire  [103:0] worker_3_worker_out_limiter_cmd_src_data;                                      // worker_3_worker_out_limiter:cmd_src_data -> cmd_demux_005:sink_data
	wire          worker_3_worker_out_limiter_cmd_src_ready;                                     // cmd_demux_005:sink_ready -> worker_3_worker_out_limiter:cmd_src_ready
	wire    [6:0] worker_3_worker_out_limiter_cmd_src_channel;                                   // worker_3_worker_out_limiter:cmd_src_channel -> cmd_demux_005:sink_channel
	wire          worker_3_worker_out_limiter_cmd_src_startofpacket;                             // worker_3_worker_out_limiter:cmd_src_startofpacket -> cmd_demux_005:sink_startofpacket
	wire          worker_3_worker_out_limiter_cmd_src_endofpacket;                               // worker_3_worker_out_limiter:cmd_src_endofpacket -> cmd_demux_005:sink_endofpacket
	wire          rsp_mux_005_src_valid;                                                         // rsp_mux_005:src_valid -> worker_3_worker_out_limiter:rsp_sink_valid
	wire  [103:0] rsp_mux_005_src_data;                                                          // rsp_mux_005:src_data -> worker_3_worker_out_limiter:rsp_sink_data
	wire          rsp_mux_005_src_ready;                                                         // worker_3_worker_out_limiter:rsp_sink_ready -> rsp_mux_005:src_ready
	wire    [6:0] rsp_mux_005_src_channel;                                                       // rsp_mux_005:src_channel -> worker_3_worker_out_limiter:rsp_sink_channel
	wire          rsp_mux_005_src_startofpacket;                                                 // rsp_mux_005:src_startofpacket -> worker_3_worker_out_limiter:rsp_sink_startofpacket
	wire          rsp_mux_005_src_endofpacket;                                                   // rsp_mux_005:src_endofpacket -> worker_3_worker_out_limiter:rsp_sink_endofpacket
	wire          worker_3_worker_out_limiter_rsp_src_valid;                                     // worker_3_worker_out_limiter:rsp_src_valid -> worker_3_worker_out_agent:rp_valid
	wire  [103:0] worker_3_worker_out_limiter_rsp_src_data;                                      // worker_3_worker_out_limiter:rsp_src_data -> worker_3_worker_out_agent:rp_data
	wire          worker_3_worker_out_limiter_rsp_src_ready;                                     // worker_3_worker_out_agent:rp_ready -> worker_3_worker_out_limiter:rsp_src_ready
	wire    [6:0] worker_3_worker_out_limiter_rsp_src_channel;                                   // worker_3_worker_out_limiter:rsp_src_channel -> worker_3_worker_out_agent:rp_channel
	wire          worker_3_worker_out_limiter_rsp_src_startofpacket;                             // worker_3_worker_out_limiter:rsp_src_startofpacket -> worker_3_worker_out_agent:rp_startofpacket
	wire          worker_3_worker_out_limiter_rsp_src_endofpacket;                               // worker_3_worker_out_limiter:rsp_src_endofpacket -> worker_3_worker_out_agent:rp_endofpacket
	wire          sdram_s1_burst_adapter_source0_valid;                                          // sdram_s1_burst_adapter:source0_valid -> sdram_s1_agent:cp_valid
	wire   [85:0] sdram_s1_burst_adapter_source0_data;                                           // sdram_s1_burst_adapter:source0_data -> sdram_s1_agent:cp_data
	wire          sdram_s1_burst_adapter_source0_ready;                                          // sdram_s1_agent:cp_ready -> sdram_s1_burst_adapter:source0_ready
	wire    [6:0] sdram_s1_burst_adapter_source0_channel;                                        // sdram_s1_burst_adapter:source0_channel -> sdram_s1_agent:cp_channel
	wire          sdram_s1_burst_adapter_source0_startofpacket;                                  // sdram_s1_burst_adapter:source0_startofpacket -> sdram_s1_agent:cp_startofpacket
	wire          sdram_s1_burst_adapter_source0_endofpacket;                                    // sdram_s1_burst_adapter:source0_endofpacket -> sdram_s1_agent:cp_endofpacket
	wire          cmd_demux_src0_valid;                                                          // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [103:0] cmd_demux_src0_data;                                                           // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                                          // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire    [6:0] cmd_demux_src0_channel;                                                        // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                                  // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                    // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                                          // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire  [103:0] cmd_demux_src1_data;                                                           // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire          cmd_demux_src1_ready;                                                          // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire    [6:0] cmd_demux_src1_channel;                                                        // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_src1_startofpacket;                                                  // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          cmd_demux_src1_endofpacket;                                                    // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_src2_valid;                                                          // cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	wire  [103:0] cmd_demux_src2_data;                                                           // cmd_demux:src2_data -> cmd_mux_002:sink0_data
	wire          cmd_demux_src2_ready;                                                          // cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	wire    [6:0] cmd_demux_src2_channel;                                                        // cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	wire          cmd_demux_src2_startofpacket;                                                  // cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          cmd_demux_src2_endofpacket;                                                    // cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_src3_valid;                                                          // cmd_demux:src3_valid -> cmd_mux_003:sink0_valid
	wire  [103:0] cmd_demux_src3_data;                                                           // cmd_demux:src3_data -> cmd_mux_003:sink0_data
	wire          cmd_demux_src3_ready;                                                          // cmd_mux_003:sink0_ready -> cmd_demux:src3_ready
	wire    [6:0] cmd_demux_src3_channel;                                                        // cmd_demux:src3_channel -> cmd_mux_003:sink0_channel
	wire          cmd_demux_src3_startofpacket;                                                  // cmd_demux:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          cmd_demux_src3_endofpacket;                                                    // cmd_demux:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_src4_valid;                                                          // cmd_demux:src4_valid -> cmd_mux_004:sink0_valid
	wire  [103:0] cmd_demux_src4_data;                                                           // cmd_demux:src4_data -> cmd_mux_004:sink0_data
	wire          cmd_demux_src4_ready;                                                          // cmd_mux_004:sink0_ready -> cmd_demux:src4_ready
	wire    [6:0] cmd_demux_src4_channel;                                                        // cmd_demux:src4_channel -> cmd_mux_004:sink0_channel
	wire          cmd_demux_src4_startofpacket;                                                  // cmd_demux:src4_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire          cmd_demux_src4_endofpacket;                                                    // cmd_demux:src4_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                                      // cmd_demux_001:src0_valid -> cmd_mux:sink1_valid
	wire  [103:0] cmd_demux_001_src0_data;                                                       // cmd_demux_001:src0_data -> cmd_mux:sink1_data
	wire          cmd_demux_001_src0_ready;                                                      // cmd_mux:sink1_ready -> cmd_demux_001:src0_ready
	wire    [6:0] cmd_demux_001_src0_channel;                                                    // cmd_demux_001:src0_channel -> cmd_mux:sink1_channel
	wire          cmd_demux_001_src0_startofpacket;                                              // cmd_demux_001:src0_startofpacket -> cmd_mux:sink1_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                                // cmd_demux_001:src0_endofpacket -> cmd_mux:sink1_endofpacket
	wire          cmd_demux_001_src1_valid;                                                      // cmd_demux_001:src1_valid -> cmd_mux_002:sink1_valid
	wire  [103:0] cmd_demux_001_src1_data;                                                       // cmd_demux_001:src1_data -> cmd_mux_002:sink1_data
	wire          cmd_demux_001_src1_ready;                                                      // cmd_mux_002:sink1_ready -> cmd_demux_001:src1_ready
	wire    [6:0] cmd_demux_001_src1_channel;                                                    // cmd_demux_001:src1_channel -> cmd_mux_002:sink1_channel
	wire          cmd_demux_001_src1_startofpacket;                                              // cmd_demux_001:src1_startofpacket -> cmd_mux_002:sink1_startofpacket
	wire          cmd_demux_001_src1_endofpacket;                                                // cmd_demux_001:src1_endofpacket -> cmd_mux_002:sink1_endofpacket
	wire          cmd_demux_001_src2_valid;                                                      // cmd_demux_001:src2_valid -> cmd_mux_004:sink1_valid
	wire  [103:0] cmd_demux_001_src2_data;                                                       // cmd_demux_001:src2_data -> cmd_mux_004:sink1_data
	wire          cmd_demux_001_src2_ready;                                                      // cmd_mux_004:sink1_ready -> cmd_demux_001:src2_ready
	wire    [6:0] cmd_demux_001_src2_channel;                                                    // cmd_demux_001:src2_channel -> cmd_mux_004:sink1_channel
	wire          cmd_demux_001_src2_startofpacket;                                              // cmd_demux_001:src2_startofpacket -> cmd_mux_004:sink1_startofpacket
	wire          cmd_demux_001_src2_endofpacket;                                                // cmd_demux_001:src2_endofpacket -> cmd_mux_004:sink1_endofpacket
	wire          cmd_demux_002_src0_valid;                                                      // cmd_demux_002:src0_valid -> cmd_mux_004:sink2_valid
	wire  [103:0] cmd_demux_002_src0_data;                                                       // cmd_demux_002:src0_data -> cmd_mux_004:sink2_data
	wire          cmd_demux_002_src0_ready;                                                      // cmd_mux_004:sink2_ready -> cmd_demux_002:src0_ready
	wire    [6:0] cmd_demux_002_src0_channel;                                                    // cmd_demux_002:src0_channel -> cmd_mux_004:sink2_channel
	wire          cmd_demux_002_src0_startofpacket;                                              // cmd_demux_002:src0_startofpacket -> cmd_mux_004:sink2_startofpacket
	wire          cmd_demux_002_src0_endofpacket;                                                // cmd_demux_002:src0_endofpacket -> cmd_mux_004:sink2_endofpacket
	wire          cmd_demux_002_src2_valid;                                                      // cmd_demux_002:src2_valid -> cmd_mux_006:sink0_valid
	wire  [103:0] cmd_demux_002_src2_data;                                                       // cmd_demux_002:src2_data -> cmd_mux_006:sink0_data
	wire          cmd_demux_002_src2_ready;                                                      // cmd_mux_006:sink0_ready -> cmd_demux_002:src2_ready
	wire    [6:0] cmd_demux_002_src2_channel;                                                    // cmd_demux_002:src2_channel -> cmd_mux_006:sink0_channel
	wire          cmd_demux_002_src2_startofpacket;                                              // cmd_demux_002:src2_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire          cmd_demux_002_src2_endofpacket;                                                // cmd_demux_002:src2_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire          cmd_demux_003_src0_valid;                                                      // cmd_demux_003:src0_valid -> cmd_mux_004:sink3_valid
	wire  [103:0] cmd_demux_003_src0_data;                                                       // cmd_demux_003:src0_data -> cmd_mux_004:sink3_data
	wire          cmd_demux_003_src0_ready;                                                      // cmd_mux_004:sink3_ready -> cmd_demux_003:src0_ready
	wire    [6:0] cmd_demux_003_src0_channel;                                                    // cmd_demux_003:src0_channel -> cmd_mux_004:sink3_channel
	wire          cmd_demux_003_src0_startofpacket;                                              // cmd_demux_003:src0_startofpacket -> cmd_mux_004:sink3_startofpacket
	wire          cmd_demux_003_src0_endofpacket;                                                // cmd_demux_003:src0_endofpacket -> cmd_mux_004:sink3_endofpacket
	wire          cmd_demux_003_src2_valid;                                                      // cmd_demux_003:src2_valid -> cmd_mux_006:sink1_valid
	wire  [103:0] cmd_demux_003_src2_data;                                                       // cmd_demux_003:src2_data -> cmd_mux_006:sink1_data
	wire          cmd_demux_003_src2_ready;                                                      // cmd_mux_006:sink1_ready -> cmd_demux_003:src2_ready
	wire    [6:0] cmd_demux_003_src2_channel;                                                    // cmd_demux_003:src2_channel -> cmd_mux_006:sink1_channel
	wire          cmd_demux_003_src2_startofpacket;                                              // cmd_demux_003:src2_startofpacket -> cmd_mux_006:sink1_startofpacket
	wire          cmd_demux_003_src2_endofpacket;                                                // cmd_demux_003:src2_endofpacket -> cmd_mux_006:sink1_endofpacket
	wire          cmd_demux_004_src0_valid;                                                      // cmd_demux_004:src0_valid -> cmd_mux_004:sink4_valid
	wire  [103:0] cmd_demux_004_src0_data;                                                       // cmd_demux_004:src0_data -> cmd_mux_004:sink4_data
	wire          cmd_demux_004_src0_ready;                                                      // cmd_mux_004:sink4_ready -> cmd_demux_004:src0_ready
	wire    [6:0] cmd_demux_004_src0_channel;                                                    // cmd_demux_004:src0_channel -> cmd_mux_004:sink4_channel
	wire          cmd_demux_004_src0_startofpacket;                                              // cmd_demux_004:src0_startofpacket -> cmd_mux_004:sink4_startofpacket
	wire          cmd_demux_004_src0_endofpacket;                                                // cmd_demux_004:src0_endofpacket -> cmd_mux_004:sink4_endofpacket
	wire          cmd_demux_004_src2_valid;                                                      // cmd_demux_004:src2_valid -> cmd_mux_006:sink2_valid
	wire  [103:0] cmd_demux_004_src2_data;                                                       // cmd_demux_004:src2_data -> cmd_mux_006:sink2_data
	wire          cmd_demux_004_src2_ready;                                                      // cmd_mux_006:sink2_ready -> cmd_demux_004:src2_ready
	wire    [6:0] cmd_demux_004_src2_channel;                                                    // cmd_demux_004:src2_channel -> cmd_mux_006:sink2_channel
	wire          cmd_demux_004_src2_startofpacket;                                              // cmd_demux_004:src2_startofpacket -> cmd_mux_006:sink2_startofpacket
	wire          cmd_demux_004_src2_endofpacket;                                                // cmd_demux_004:src2_endofpacket -> cmd_mux_006:sink2_endofpacket
	wire          cmd_demux_005_src0_valid;                                                      // cmd_demux_005:src0_valid -> cmd_mux_004:sink5_valid
	wire  [103:0] cmd_demux_005_src0_data;                                                       // cmd_demux_005:src0_data -> cmd_mux_004:sink5_data
	wire          cmd_demux_005_src0_ready;                                                      // cmd_mux_004:sink5_ready -> cmd_demux_005:src0_ready
	wire    [6:0] cmd_demux_005_src0_channel;                                                    // cmd_demux_005:src0_channel -> cmd_mux_004:sink5_channel
	wire          cmd_demux_005_src0_startofpacket;                                              // cmd_demux_005:src0_startofpacket -> cmd_mux_004:sink5_startofpacket
	wire          cmd_demux_005_src0_endofpacket;                                                // cmd_demux_005:src0_endofpacket -> cmd_mux_004:sink5_endofpacket
	wire          cmd_demux_005_src2_valid;                                                      // cmd_demux_005:src2_valid -> cmd_mux_006:sink3_valid
	wire  [103:0] cmd_demux_005_src2_data;                                                       // cmd_demux_005:src2_data -> cmd_mux_006:sink3_data
	wire          cmd_demux_005_src2_ready;                                                      // cmd_mux_006:sink3_ready -> cmd_demux_005:src2_ready
	wire    [6:0] cmd_demux_005_src2_channel;                                                    // cmd_demux_005:src2_channel -> cmd_mux_006:sink3_channel
	wire          cmd_demux_005_src2_startofpacket;                                              // cmd_demux_005:src2_startofpacket -> cmd_mux_006:sink3_startofpacket
	wire          cmd_demux_005_src2_endofpacket;                                                // cmd_demux_005:src2_endofpacket -> cmd_mux_006:sink3_endofpacket
	wire          rsp_demux_src0_valid;                                                          // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [103:0] rsp_demux_src0_data;                                                           // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                                          // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire    [6:0] rsp_demux_src0_channel;                                                        // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                                  // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                    // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_src1_valid;                                                          // rsp_demux:src1_valid -> rsp_mux_001:sink0_valid
	wire  [103:0] rsp_demux_src1_data;                                                           // rsp_demux:src1_data -> rsp_mux_001:sink0_data
	wire          rsp_demux_src1_ready;                                                          // rsp_mux_001:sink0_ready -> rsp_demux:src1_ready
	wire    [6:0] rsp_demux_src1_channel;                                                        // rsp_demux:src1_channel -> rsp_mux_001:sink0_channel
	wire          rsp_demux_src1_startofpacket;                                                  // rsp_demux:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          rsp_demux_src1_endofpacket;                                                    // rsp_demux:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                                      // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire  [103:0] rsp_demux_001_src0_data;                                                       // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire          rsp_demux_001_src0_ready;                                                      // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire    [6:0] rsp_demux_001_src0_channel;                                                    // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire          rsp_demux_001_src0_startofpacket;                                              // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                                // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_002_src0_valid;                                                      // rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	wire  [103:0] rsp_demux_002_src0_data;                                                       // rsp_demux_002:src0_data -> rsp_mux:sink2_data
	wire          rsp_demux_002_src0_ready;                                                      // rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	wire    [6:0] rsp_demux_002_src0_channel;                                                    // rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	wire          rsp_demux_002_src0_startofpacket;                                              // rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                                // rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire          rsp_demux_002_src1_valid;                                                      // rsp_demux_002:src1_valid -> rsp_mux_001:sink1_valid
	wire  [103:0] rsp_demux_002_src1_data;                                                       // rsp_demux_002:src1_data -> rsp_mux_001:sink1_data
	wire          rsp_demux_002_src1_ready;                                                      // rsp_mux_001:sink1_ready -> rsp_demux_002:src1_ready
	wire    [6:0] rsp_demux_002_src1_channel;                                                    // rsp_demux_002:src1_channel -> rsp_mux_001:sink1_channel
	wire          rsp_demux_002_src1_startofpacket;                                              // rsp_demux_002:src1_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire          rsp_demux_002_src1_endofpacket;                                                // rsp_demux_002:src1_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire          rsp_demux_003_src0_valid;                                                      // rsp_demux_003:src0_valid -> rsp_mux:sink3_valid
	wire  [103:0] rsp_demux_003_src0_data;                                                       // rsp_demux_003:src0_data -> rsp_mux:sink3_data
	wire          rsp_demux_003_src0_ready;                                                      // rsp_mux:sink3_ready -> rsp_demux_003:src0_ready
	wire    [6:0] rsp_demux_003_src0_channel;                                                    // rsp_demux_003:src0_channel -> rsp_mux:sink3_channel
	wire          rsp_demux_003_src0_startofpacket;                                              // rsp_demux_003:src0_startofpacket -> rsp_mux:sink3_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                                // rsp_demux_003:src0_endofpacket -> rsp_mux:sink3_endofpacket
	wire          rsp_demux_004_src0_valid;                                                      // rsp_demux_004:src0_valid -> rsp_mux:sink4_valid
	wire  [103:0] rsp_demux_004_src0_data;                                                       // rsp_demux_004:src0_data -> rsp_mux:sink4_data
	wire          rsp_demux_004_src0_ready;                                                      // rsp_mux:sink4_ready -> rsp_demux_004:src0_ready
	wire    [6:0] rsp_demux_004_src0_channel;                                                    // rsp_demux_004:src0_channel -> rsp_mux:sink4_channel
	wire          rsp_demux_004_src0_startofpacket;                                              // rsp_demux_004:src0_startofpacket -> rsp_mux:sink4_startofpacket
	wire          rsp_demux_004_src0_endofpacket;                                                // rsp_demux_004:src0_endofpacket -> rsp_mux:sink4_endofpacket
	wire          rsp_demux_004_src1_valid;                                                      // rsp_demux_004:src1_valid -> rsp_mux_001:sink2_valid
	wire  [103:0] rsp_demux_004_src1_data;                                                       // rsp_demux_004:src1_data -> rsp_mux_001:sink2_data
	wire          rsp_demux_004_src1_ready;                                                      // rsp_mux_001:sink2_ready -> rsp_demux_004:src1_ready
	wire    [6:0] rsp_demux_004_src1_channel;                                                    // rsp_demux_004:src1_channel -> rsp_mux_001:sink2_channel
	wire          rsp_demux_004_src1_startofpacket;                                              // rsp_demux_004:src1_startofpacket -> rsp_mux_001:sink2_startofpacket
	wire          rsp_demux_004_src1_endofpacket;                                                // rsp_demux_004:src1_endofpacket -> rsp_mux_001:sink2_endofpacket
	wire          rsp_demux_004_src2_valid;                                                      // rsp_demux_004:src2_valid -> rsp_mux_002:sink0_valid
	wire  [103:0] rsp_demux_004_src2_data;                                                       // rsp_demux_004:src2_data -> rsp_mux_002:sink0_data
	wire          rsp_demux_004_src2_ready;                                                      // rsp_mux_002:sink0_ready -> rsp_demux_004:src2_ready
	wire    [6:0] rsp_demux_004_src2_channel;                                                    // rsp_demux_004:src2_channel -> rsp_mux_002:sink0_channel
	wire          rsp_demux_004_src2_startofpacket;                                              // rsp_demux_004:src2_startofpacket -> rsp_mux_002:sink0_startofpacket
	wire          rsp_demux_004_src2_endofpacket;                                                // rsp_demux_004:src2_endofpacket -> rsp_mux_002:sink0_endofpacket
	wire          rsp_demux_004_src3_valid;                                                      // rsp_demux_004:src3_valid -> rsp_mux_003:sink0_valid
	wire  [103:0] rsp_demux_004_src3_data;                                                       // rsp_demux_004:src3_data -> rsp_mux_003:sink0_data
	wire          rsp_demux_004_src3_ready;                                                      // rsp_mux_003:sink0_ready -> rsp_demux_004:src3_ready
	wire    [6:0] rsp_demux_004_src3_channel;                                                    // rsp_demux_004:src3_channel -> rsp_mux_003:sink0_channel
	wire          rsp_demux_004_src3_startofpacket;                                              // rsp_demux_004:src3_startofpacket -> rsp_mux_003:sink0_startofpacket
	wire          rsp_demux_004_src3_endofpacket;                                                // rsp_demux_004:src3_endofpacket -> rsp_mux_003:sink0_endofpacket
	wire          rsp_demux_004_src4_valid;                                                      // rsp_demux_004:src4_valid -> rsp_mux_004:sink0_valid
	wire  [103:0] rsp_demux_004_src4_data;                                                       // rsp_demux_004:src4_data -> rsp_mux_004:sink0_data
	wire          rsp_demux_004_src4_ready;                                                      // rsp_mux_004:sink0_ready -> rsp_demux_004:src4_ready
	wire    [6:0] rsp_demux_004_src4_channel;                                                    // rsp_demux_004:src4_channel -> rsp_mux_004:sink0_channel
	wire          rsp_demux_004_src4_startofpacket;                                              // rsp_demux_004:src4_startofpacket -> rsp_mux_004:sink0_startofpacket
	wire          rsp_demux_004_src4_endofpacket;                                                // rsp_demux_004:src4_endofpacket -> rsp_mux_004:sink0_endofpacket
	wire          rsp_demux_004_src5_valid;                                                      // rsp_demux_004:src5_valid -> rsp_mux_005:sink0_valid
	wire  [103:0] rsp_demux_004_src5_data;                                                       // rsp_demux_004:src5_data -> rsp_mux_005:sink0_data
	wire          rsp_demux_004_src5_ready;                                                      // rsp_mux_005:sink0_ready -> rsp_demux_004:src5_ready
	wire    [6:0] rsp_demux_004_src5_channel;                                                    // rsp_demux_004:src5_channel -> rsp_mux_005:sink0_channel
	wire          rsp_demux_004_src5_startofpacket;                                              // rsp_demux_004:src5_startofpacket -> rsp_mux_005:sink0_startofpacket
	wire          rsp_demux_004_src5_endofpacket;                                                // rsp_demux_004:src5_endofpacket -> rsp_mux_005:sink0_endofpacket
	wire          rsp_demux_006_src0_valid;                                                      // rsp_demux_006:src0_valid -> rsp_mux_002:sink2_valid
	wire  [103:0] rsp_demux_006_src0_data;                                                       // rsp_demux_006:src0_data -> rsp_mux_002:sink2_data
	wire          rsp_demux_006_src0_ready;                                                      // rsp_mux_002:sink2_ready -> rsp_demux_006:src0_ready
	wire    [6:0] rsp_demux_006_src0_channel;                                                    // rsp_demux_006:src0_channel -> rsp_mux_002:sink2_channel
	wire          rsp_demux_006_src0_startofpacket;                                              // rsp_demux_006:src0_startofpacket -> rsp_mux_002:sink2_startofpacket
	wire          rsp_demux_006_src0_endofpacket;                                                // rsp_demux_006:src0_endofpacket -> rsp_mux_002:sink2_endofpacket
	wire          rsp_demux_006_src1_valid;                                                      // rsp_demux_006:src1_valid -> rsp_mux_003:sink2_valid
	wire  [103:0] rsp_demux_006_src1_data;                                                       // rsp_demux_006:src1_data -> rsp_mux_003:sink2_data
	wire          rsp_demux_006_src1_ready;                                                      // rsp_mux_003:sink2_ready -> rsp_demux_006:src1_ready
	wire    [6:0] rsp_demux_006_src1_channel;                                                    // rsp_demux_006:src1_channel -> rsp_mux_003:sink2_channel
	wire          rsp_demux_006_src1_startofpacket;                                              // rsp_demux_006:src1_startofpacket -> rsp_mux_003:sink2_startofpacket
	wire          rsp_demux_006_src1_endofpacket;                                                // rsp_demux_006:src1_endofpacket -> rsp_mux_003:sink2_endofpacket
	wire          rsp_demux_006_src2_valid;                                                      // rsp_demux_006:src2_valid -> rsp_mux_004:sink2_valid
	wire  [103:0] rsp_demux_006_src2_data;                                                       // rsp_demux_006:src2_data -> rsp_mux_004:sink2_data
	wire          rsp_demux_006_src2_ready;                                                      // rsp_mux_004:sink2_ready -> rsp_demux_006:src2_ready
	wire    [6:0] rsp_demux_006_src2_channel;                                                    // rsp_demux_006:src2_channel -> rsp_mux_004:sink2_channel
	wire          rsp_demux_006_src2_startofpacket;                                              // rsp_demux_006:src2_startofpacket -> rsp_mux_004:sink2_startofpacket
	wire          rsp_demux_006_src2_endofpacket;                                                // rsp_demux_006:src2_endofpacket -> rsp_mux_004:sink2_endofpacket
	wire          rsp_demux_006_src3_valid;                                                      // rsp_demux_006:src3_valid -> rsp_mux_005:sink2_valid
	wire  [103:0] rsp_demux_006_src3_data;                                                       // rsp_demux_006:src3_data -> rsp_mux_005:sink2_data
	wire          rsp_demux_006_src3_ready;                                                      // rsp_mux_005:sink2_ready -> rsp_demux_006:src3_ready
	wire    [6:0] rsp_demux_006_src3_channel;                                                    // rsp_demux_006:src3_channel -> rsp_mux_005:sink2_channel
	wire          rsp_demux_006_src3_startofpacket;                                              // rsp_demux_006:src3_startofpacket -> rsp_mux_005:sink2_startofpacket
	wire          rsp_demux_006_src3_endofpacket;                                                // rsp_demux_006:src3_endofpacket -> rsp_mux_005:sink2_endofpacket
	wire          router_010_src_valid;                                                          // router_010:src_valid -> sdram_s1_rsp_width_adapter:in_valid
	wire   [85:0] router_010_src_data;                                                           // router_010:src_data -> sdram_s1_rsp_width_adapter:in_data
	wire          router_010_src_ready;                                                          // sdram_s1_rsp_width_adapter:in_ready -> router_010:src_ready
	wire    [6:0] router_010_src_channel;                                                        // router_010:src_channel -> sdram_s1_rsp_width_adapter:in_channel
	wire          router_010_src_startofpacket;                                                  // router_010:src_startofpacket -> sdram_s1_rsp_width_adapter:in_startofpacket
	wire          router_010_src_endofpacket;                                                    // router_010:src_endofpacket -> sdram_s1_rsp_width_adapter:in_endofpacket
	wire          sdram_s1_rsp_width_adapter_src_valid;                                          // sdram_s1_rsp_width_adapter:out_valid -> rsp_demux_004:sink_valid
	wire  [103:0] sdram_s1_rsp_width_adapter_src_data;                                           // sdram_s1_rsp_width_adapter:out_data -> rsp_demux_004:sink_data
	wire          sdram_s1_rsp_width_adapter_src_ready;                                          // rsp_demux_004:sink_ready -> sdram_s1_rsp_width_adapter:out_ready
	wire    [6:0] sdram_s1_rsp_width_adapter_src_channel;                                        // sdram_s1_rsp_width_adapter:out_channel -> rsp_demux_004:sink_channel
	wire          sdram_s1_rsp_width_adapter_src_startofpacket;                                  // sdram_s1_rsp_width_adapter:out_startofpacket -> rsp_demux_004:sink_startofpacket
	wire          sdram_s1_rsp_width_adapter_src_endofpacket;                                    // sdram_s1_rsp_width_adapter:out_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          cmd_mux_004_src_valid;                                                         // cmd_mux_004:src_valid -> sdram_s1_cmd_width_adapter:in_valid
	wire  [103:0] cmd_mux_004_src_data;                                                          // cmd_mux_004:src_data -> sdram_s1_cmd_width_adapter:in_data
	wire          cmd_mux_004_src_ready;                                                         // sdram_s1_cmd_width_adapter:in_ready -> cmd_mux_004:src_ready
	wire    [6:0] cmd_mux_004_src_channel;                                                       // cmd_mux_004:src_channel -> sdram_s1_cmd_width_adapter:in_channel
	wire          cmd_mux_004_src_startofpacket;                                                 // cmd_mux_004:src_startofpacket -> sdram_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_004_src_endofpacket;                                                   // cmd_mux_004:src_endofpacket -> sdram_s1_cmd_width_adapter:in_endofpacket
	wire          sdram_s1_cmd_width_adapter_src_valid;                                          // sdram_s1_cmd_width_adapter:out_valid -> sdram_s1_burst_adapter:sink0_valid
	wire   [85:0] sdram_s1_cmd_width_adapter_src_data;                                           // sdram_s1_cmd_width_adapter:out_data -> sdram_s1_burst_adapter:sink0_data
	wire          sdram_s1_cmd_width_adapter_src_ready;                                          // sdram_s1_burst_adapter:sink0_ready -> sdram_s1_cmd_width_adapter:out_ready
	wire    [6:0] sdram_s1_cmd_width_adapter_src_channel;                                        // sdram_s1_cmd_width_adapter:out_channel -> sdram_s1_burst_adapter:sink0_channel
	wire          sdram_s1_cmd_width_adapter_src_startofpacket;                                  // sdram_s1_cmd_width_adapter:out_startofpacket -> sdram_s1_burst_adapter:sink0_startofpacket
	wire          sdram_s1_cmd_width_adapter_src_endofpacket;                                    // sdram_s1_cmd_width_adapter:out_endofpacket -> sdram_s1_burst_adapter:sink0_endofpacket
	wire          cmd_demux_src5_valid;                                                          // cmd_demux:src5_valid -> crosser:in_valid
	wire  [103:0] cmd_demux_src5_data;                                                           // cmd_demux:src5_data -> crosser:in_data
	wire          cmd_demux_src5_ready;                                                          // crosser:in_ready -> cmd_demux:src5_ready
	wire    [6:0] cmd_demux_src5_channel;                                                        // cmd_demux:src5_channel -> crosser:in_channel
	wire          cmd_demux_src5_startofpacket;                                                  // cmd_demux:src5_startofpacket -> crosser:in_startofpacket
	wire          cmd_demux_src5_endofpacket;                                                    // cmd_demux:src5_endofpacket -> crosser:in_endofpacket
	wire          crosser_out_valid;                                                             // crosser:out_valid -> cmd_mux_005:sink0_valid
	wire  [103:0] crosser_out_data;                                                              // crosser:out_data -> cmd_mux_005:sink0_data
	wire          crosser_out_ready;                                                             // cmd_mux_005:sink0_ready -> crosser:out_ready
	wire    [6:0] crosser_out_channel;                                                           // crosser:out_channel -> cmd_mux_005:sink0_channel
	wire          crosser_out_startofpacket;                                                     // crosser:out_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire          crosser_out_endofpacket;                                                       // crosser:out_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire          cmd_demux_002_src1_valid;                                                      // cmd_demux_002:src1_valid -> crosser_001:in_valid
	wire  [103:0] cmd_demux_002_src1_data;                                                       // cmd_demux_002:src1_data -> crosser_001:in_data
	wire          cmd_demux_002_src1_ready;                                                      // crosser_001:in_ready -> cmd_demux_002:src1_ready
	wire    [6:0] cmd_demux_002_src1_channel;                                                    // cmd_demux_002:src1_channel -> crosser_001:in_channel
	wire          cmd_demux_002_src1_startofpacket;                                              // cmd_demux_002:src1_startofpacket -> crosser_001:in_startofpacket
	wire          cmd_demux_002_src1_endofpacket;                                                // cmd_demux_002:src1_endofpacket -> crosser_001:in_endofpacket
	wire          crosser_001_out_valid;                                                         // crosser_001:out_valid -> cmd_mux_005:sink1_valid
	wire  [103:0] crosser_001_out_data;                                                          // crosser_001:out_data -> cmd_mux_005:sink1_data
	wire          crosser_001_out_ready;                                                         // cmd_mux_005:sink1_ready -> crosser_001:out_ready
	wire    [6:0] crosser_001_out_channel;                                                       // crosser_001:out_channel -> cmd_mux_005:sink1_channel
	wire          crosser_001_out_startofpacket;                                                 // crosser_001:out_startofpacket -> cmd_mux_005:sink1_startofpacket
	wire          crosser_001_out_endofpacket;                                                   // crosser_001:out_endofpacket -> cmd_mux_005:sink1_endofpacket
	wire          cmd_demux_003_src1_valid;                                                      // cmd_demux_003:src1_valid -> crosser_002:in_valid
	wire  [103:0] cmd_demux_003_src1_data;                                                       // cmd_demux_003:src1_data -> crosser_002:in_data
	wire          cmd_demux_003_src1_ready;                                                      // crosser_002:in_ready -> cmd_demux_003:src1_ready
	wire    [6:0] cmd_demux_003_src1_channel;                                                    // cmd_demux_003:src1_channel -> crosser_002:in_channel
	wire          cmd_demux_003_src1_startofpacket;                                              // cmd_demux_003:src1_startofpacket -> crosser_002:in_startofpacket
	wire          cmd_demux_003_src1_endofpacket;                                                // cmd_demux_003:src1_endofpacket -> crosser_002:in_endofpacket
	wire          crosser_002_out_valid;                                                         // crosser_002:out_valid -> cmd_mux_005:sink2_valid
	wire  [103:0] crosser_002_out_data;                                                          // crosser_002:out_data -> cmd_mux_005:sink2_data
	wire          crosser_002_out_ready;                                                         // cmd_mux_005:sink2_ready -> crosser_002:out_ready
	wire    [6:0] crosser_002_out_channel;                                                       // crosser_002:out_channel -> cmd_mux_005:sink2_channel
	wire          crosser_002_out_startofpacket;                                                 // crosser_002:out_startofpacket -> cmd_mux_005:sink2_startofpacket
	wire          crosser_002_out_endofpacket;                                                   // crosser_002:out_endofpacket -> cmd_mux_005:sink2_endofpacket
	wire          cmd_demux_004_src1_valid;                                                      // cmd_demux_004:src1_valid -> crosser_003:in_valid
	wire  [103:0] cmd_demux_004_src1_data;                                                       // cmd_demux_004:src1_data -> crosser_003:in_data
	wire          cmd_demux_004_src1_ready;                                                      // crosser_003:in_ready -> cmd_demux_004:src1_ready
	wire    [6:0] cmd_demux_004_src1_channel;                                                    // cmd_demux_004:src1_channel -> crosser_003:in_channel
	wire          cmd_demux_004_src1_startofpacket;                                              // cmd_demux_004:src1_startofpacket -> crosser_003:in_startofpacket
	wire          cmd_demux_004_src1_endofpacket;                                                // cmd_demux_004:src1_endofpacket -> crosser_003:in_endofpacket
	wire          crosser_003_out_valid;                                                         // crosser_003:out_valid -> cmd_mux_005:sink3_valid
	wire  [103:0] crosser_003_out_data;                                                          // crosser_003:out_data -> cmd_mux_005:sink3_data
	wire          crosser_003_out_ready;                                                         // cmd_mux_005:sink3_ready -> crosser_003:out_ready
	wire    [6:0] crosser_003_out_channel;                                                       // crosser_003:out_channel -> cmd_mux_005:sink3_channel
	wire          crosser_003_out_startofpacket;                                                 // crosser_003:out_startofpacket -> cmd_mux_005:sink3_startofpacket
	wire          crosser_003_out_endofpacket;                                                   // crosser_003:out_endofpacket -> cmd_mux_005:sink3_endofpacket
	wire          cmd_demux_005_src1_valid;                                                      // cmd_demux_005:src1_valid -> crosser_004:in_valid
	wire  [103:0] cmd_demux_005_src1_data;                                                       // cmd_demux_005:src1_data -> crosser_004:in_data
	wire          cmd_demux_005_src1_ready;                                                      // crosser_004:in_ready -> cmd_demux_005:src1_ready
	wire    [6:0] cmd_demux_005_src1_channel;                                                    // cmd_demux_005:src1_channel -> crosser_004:in_channel
	wire          cmd_demux_005_src1_startofpacket;                                              // cmd_demux_005:src1_startofpacket -> crosser_004:in_startofpacket
	wire          cmd_demux_005_src1_endofpacket;                                                // cmd_demux_005:src1_endofpacket -> crosser_004:in_endofpacket
	wire          crosser_004_out_valid;                                                         // crosser_004:out_valid -> cmd_mux_005:sink4_valid
	wire  [103:0] crosser_004_out_data;                                                          // crosser_004:out_data -> cmd_mux_005:sink4_data
	wire          crosser_004_out_ready;                                                         // cmd_mux_005:sink4_ready -> crosser_004:out_ready
	wire    [6:0] crosser_004_out_channel;                                                       // crosser_004:out_channel -> cmd_mux_005:sink4_channel
	wire          crosser_004_out_startofpacket;                                                 // crosser_004:out_startofpacket -> cmd_mux_005:sink4_startofpacket
	wire          crosser_004_out_endofpacket;                                                   // crosser_004:out_endofpacket -> cmd_mux_005:sink4_endofpacket
	wire          rsp_demux_005_src0_valid;                                                      // rsp_demux_005:src0_valid -> crosser_005:in_valid
	wire  [103:0] rsp_demux_005_src0_data;                                                       // rsp_demux_005:src0_data -> crosser_005:in_data
	wire          rsp_demux_005_src0_ready;                                                      // crosser_005:in_ready -> rsp_demux_005:src0_ready
	wire    [6:0] rsp_demux_005_src0_channel;                                                    // rsp_demux_005:src0_channel -> crosser_005:in_channel
	wire          rsp_demux_005_src0_startofpacket;                                              // rsp_demux_005:src0_startofpacket -> crosser_005:in_startofpacket
	wire          rsp_demux_005_src0_endofpacket;                                                // rsp_demux_005:src0_endofpacket -> crosser_005:in_endofpacket
	wire          crosser_005_out_valid;                                                         // crosser_005:out_valid -> rsp_mux:sink5_valid
	wire  [103:0] crosser_005_out_data;                                                          // crosser_005:out_data -> rsp_mux:sink5_data
	wire          crosser_005_out_ready;                                                         // rsp_mux:sink5_ready -> crosser_005:out_ready
	wire    [6:0] crosser_005_out_channel;                                                       // crosser_005:out_channel -> rsp_mux:sink5_channel
	wire          crosser_005_out_startofpacket;                                                 // crosser_005:out_startofpacket -> rsp_mux:sink5_startofpacket
	wire          crosser_005_out_endofpacket;                                                   // crosser_005:out_endofpacket -> rsp_mux:sink5_endofpacket
	wire          rsp_demux_005_src1_valid;                                                      // rsp_demux_005:src1_valid -> crosser_006:in_valid
	wire  [103:0] rsp_demux_005_src1_data;                                                       // rsp_demux_005:src1_data -> crosser_006:in_data
	wire          rsp_demux_005_src1_ready;                                                      // crosser_006:in_ready -> rsp_demux_005:src1_ready
	wire    [6:0] rsp_demux_005_src1_channel;                                                    // rsp_demux_005:src1_channel -> crosser_006:in_channel
	wire          rsp_demux_005_src1_startofpacket;                                              // rsp_demux_005:src1_startofpacket -> crosser_006:in_startofpacket
	wire          rsp_demux_005_src1_endofpacket;                                                // rsp_demux_005:src1_endofpacket -> crosser_006:in_endofpacket
	wire          crosser_006_out_valid;                                                         // crosser_006:out_valid -> rsp_mux_002:sink1_valid
	wire  [103:0] crosser_006_out_data;                                                          // crosser_006:out_data -> rsp_mux_002:sink1_data
	wire          crosser_006_out_ready;                                                         // rsp_mux_002:sink1_ready -> crosser_006:out_ready
	wire    [6:0] crosser_006_out_channel;                                                       // crosser_006:out_channel -> rsp_mux_002:sink1_channel
	wire          crosser_006_out_startofpacket;                                                 // crosser_006:out_startofpacket -> rsp_mux_002:sink1_startofpacket
	wire          crosser_006_out_endofpacket;                                                   // crosser_006:out_endofpacket -> rsp_mux_002:sink1_endofpacket
	wire          rsp_demux_005_src2_valid;                                                      // rsp_demux_005:src2_valid -> crosser_007:in_valid
	wire  [103:0] rsp_demux_005_src2_data;                                                       // rsp_demux_005:src2_data -> crosser_007:in_data
	wire          rsp_demux_005_src2_ready;                                                      // crosser_007:in_ready -> rsp_demux_005:src2_ready
	wire    [6:0] rsp_demux_005_src2_channel;                                                    // rsp_demux_005:src2_channel -> crosser_007:in_channel
	wire          rsp_demux_005_src2_startofpacket;                                              // rsp_demux_005:src2_startofpacket -> crosser_007:in_startofpacket
	wire          rsp_demux_005_src2_endofpacket;                                                // rsp_demux_005:src2_endofpacket -> crosser_007:in_endofpacket
	wire          crosser_007_out_valid;                                                         // crosser_007:out_valid -> rsp_mux_003:sink1_valid
	wire  [103:0] crosser_007_out_data;                                                          // crosser_007:out_data -> rsp_mux_003:sink1_data
	wire          crosser_007_out_ready;                                                         // rsp_mux_003:sink1_ready -> crosser_007:out_ready
	wire    [6:0] crosser_007_out_channel;                                                       // crosser_007:out_channel -> rsp_mux_003:sink1_channel
	wire          crosser_007_out_startofpacket;                                                 // crosser_007:out_startofpacket -> rsp_mux_003:sink1_startofpacket
	wire          crosser_007_out_endofpacket;                                                   // crosser_007:out_endofpacket -> rsp_mux_003:sink1_endofpacket
	wire          rsp_demux_005_src3_valid;                                                      // rsp_demux_005:src3_valid -> crosser_008:in_valid
	wire  [103:0] rsp_demux_005_src3_data;                                                       // rsp_demux_005:src3_data -> crosser_008:in_data
	wire          rsp_demux_005_src3_ready;                                                      // crosser_008:in_ready -> rsp_demux_005:src3_ready
	wire    [6:0] rsp_demux_005_src3_channel;                                                    // rsp_demux_005:src3_channel -> crosser_008:in_channel
	wire          rsp_demux_005_src3_startofpacket;                                              // rsp_demux_005:src3_startofpacket -> crosser_008:in_startofpacket
	wire          rsp_demux_005_src3_endofpacket;                                                // rsp_demux_005:src3_endofpacket -> crosser_008:in_endofpacket
	wire          crosser_008_out_valid;                                                         // crosser_008:out_valid -> rsp_mux_004:sink1_valid
	wire  [103:0] crosser_008_out_data;                                                          // crosser_008:out_data -> rsp_mux_004:sink1_data
	wire          crosser_008_out_ready;                                                         // rsp_mux_004:sink1_ready -> crosser_008:out_ready
	wire    [6:0] crosser_008_out_channel;                                                       // crosser_008:out_channel -> rsp_mux_004:sink1_channel
	wire          crosser_008_out_startofpacket;                                                 // crosser_008:out_startofpacket -> rsp_mux_004:sink1_startofpacket
	wire          crosser_008_out_endofpacket;                                                   // crosser_008:out_endofpacket -> rsp_mux_004:sink1_endofpacket
	wire          rsp_demux_005_src4_valid;                                                      // rsp_demux_005:src4_valid -> crosser_009:in_valid
	wire  [103:0] rsp_demux_005_src4_data;                                                       // rsp_demux_005:src4_data -> crosser_009:in_data
	wire          rsp_demux_005_src4_ready;                                                      // crosser_009:in_ready -> rsp_demux_005:src4_ready
	wire    [6:0] rsp_demux_005_src4_channel;                                                    // rsp_demux_005:src4_channel -> crosser_009:in_channel
	wire          rsp_demux_005_src4_startofpacket;                                              // rsp_demux_005:src4_startofpacket -> crosser_009:in_startofpacket
	wire          rsp_demux_005_src4_endofpacket;                                                // rsp_demux_005:src4_endofpacket -> crosser_009:in_endofpacket
	wire          crosser_009_out_valid;                                                         // crosser_009:out_valid -> rsp_mux_005:sink1_valid
	wire  [103:0] crosser_009_out_data;                                                          // crosser_009:out_data -> rsp_mux_005:sink1_data
	wire          crosser_009_out_ready;                                                         // rsp_mux_005:sink1_ready -> crosser_009:out_ready
	wire    [6:0] crosser_009_out_channel;                                                       // crosser_009:out_channel -> rsp_mux_005:sink1_channel
	wire          crosser_009_out_startofpacket;                                                 // crosser_009:out_startofpacket -> rsp_mux_005:sink1_startofpacket
	wire          crosser_009_out_endofpacket;                                                   // crosser_009:out_endofpacket -> rsp_mux_005:sink1_endofpacket
	wire    [6:0] manager_data_master_limiter_cmd_valid_data;                                    // manager_data_master_limiter:cmd_src_valid -> cmd_demux:sink_valid
	wire    [6:0] manager_instruction_master_limiter_cmd_valid_data;                             // manager_instruction_master_limiter:cmd_src_valid -> cmd_demux_001:sink_valid
	wire    [6:0] worker_0_worker_out_limiter_cmd_valid_data;                                    // worker_0_worker_out_limiter:cmd_src_valid -> cmd_demux_002:sink_valid
	wire    [6:0] worker_1_worker_out_limiter_cmd_valid_data;                                    // worker_1_worker_out_limiter:cmd_src_valid -> cmd_demux_003:sink_valid
	wire    [6:0] worker_2_worker_out_limiter_cmd_valid_data;                                    // worker_2_worker_out_limiter:cmd_src_valid -> cmd_demux_004:sink_valid
	wire    [6:0] worker_3_worker_out_limiter_cmd_valid_data;                                    // worker_3_worker_out_limiter:cmd_src_valid -> cmd_demux_005:sink_valid
	wire          manager_jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid;                // manager_jtag_uart_avalon_jtag_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter:in_0_valid
	wire   [33:0] manager_jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data;                 // manager_jtag_uart_avalon_jtag_slave_agent:rdata_fifo_src_data -> avalon_st_adapter:in_0_data
	wire          manager_jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready;                // avalon_st_adapter:in_0_ready -> manager_jtag_uart_avalon_jtag_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_out_0_valid;                                                 // avalon_st_adapter:out_0_valid -> manager_jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_out_0_data;                                                  // avalon_st_adapter:out_0_data -> manager_jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                                 // manager_jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                                 // avalon_st_adapter:out_0_error -> manager_jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_error
	wire          performance_counter_0_control_slave_agent_rdata_fifo_src_valid;                // performance_counter_0_control_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_001:in_0_valid
	wire   [33:0] performance_counter_0_control_slave_agent_rdata_fifo_src_data;                 // performance_counter_0_control_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_001:in_0_data
	wire          performance_counter_0_control_slave_agent_rdata_fifo_src_ready;                // avalon_st_adapter_001:in_0_ready -> performance_counter_0_control_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_001_out_0_valid;                                             // avalon_st_adapter_001:out_0_valid -> performance_counter_0_control_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_001_out_0_data;                                              // avalon_st_adapter_001:out_0_data -> performance_counter_0_control_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                                             // performance_counter_0_control_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                                             // avalon_st_adapter_001:out_0_error -> performance_counter_0_control_slave_agent:rdata_fifo_sink_error
	wire          manager_debug_mem_slave_agent_rdata_fifo_src_valid;                            // manager_debug_mem_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_002:in_0_valid
	wire   [33:0] manager_debug_mem_slave_agent_rdata_fifo_src_data;                             // manager_debug_mem_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_002:in_0_data
	wire          manager_debug_mem_slave_agent_rdata_fifo_src_ready;                            // avalon_st_adapter_002:in_0_ready -> manager_debug_mem_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_002_out_0_valid;                                             // avalon_st_adapter_002:out_0_valid -> manager_debug_mem_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_002_out_0_data;                                              // avalon_st_adapter_002:out_0_data -> manager_debug_mem_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_002_out_0_ready;                                             // manager_debug_mem_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire    [0:0] avalon_st_adapter_002_out_0_error;                                             // avalon_st_adapter_002:out_0_error -> manager_debug_mem_slave_agent:rdata_fifo_sink_error
	wire          shared_ocm_s1_agent_rdata_fifo_src_valid;                                      // shared_ocm_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_003:in_0_valid
	wire   [33:0] shared_ocm_s1_agent_rdata_fifo_src_data;                                       // shared_ocm_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_003:in_0_data
	wire          shared_ocm_s1_agent_rdata_fifo_src_ready;                                      // avalon_st_adapter_003:in_0_ready -> shared_ocm_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_003_out_0_valid;                                             // avalon_st_adapter_003:out_0_valid -> shared_ocm_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_003_out_0_data;                                              // avalon_st_adapter_003:out_0_data -> shared_ocm_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_003_out_0_ready;                                             // shared_ocm_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire    [0:0] avalon_st_adapter_003_out_0_error;                                             // avalon_st_adapter_003:out_0_error -> shared_ocm_s1_agent:rdata_fifo_sink_error
	wire          sdram_s1_agent_rdata_fifo_out_valid;                                           // sdram_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_004:in_0_valid
	wire   [17:0] sdram_s1_agent_rdata_fifo_out_data;                                            // sdram_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_004:in_0_data
	wire          sdram_s1_agent_rdata_fifo_out_ready;                                           // avalon_st_adapter_004:in_0_ready -> sdram_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_004_out_0_valid;                                             // avalon_st_adapter_004:out_0_valid -> sdram_s1_agent:rdata_fifo_sink_valid
	wire   [17:0] avalon_st_adapter_004_out_0_data;                                              // avalon_st_adapter_004:out_0_data -> sdram_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_004_out_0_ready;                                             // sdram_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_004:out_0_ready
	wire    [0:0] avalon_st_adapter_004_out_0_error;                                             // avalon_st_adapter_004:out_0_error -> sdram_s1_agent:rdata_fifo_sink_error
	wire          shared_ocm_mutex_s1_agent_rdata_fifo_out_valid;                                // shared_ocm_mutex_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_005:in_0_valid
	wire   [33:0] shared_ocm_mutex_s1_agent_rdata_fifo_out_data;                                 // shared_ocm_mutex_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_005:in_0_data
	wire          shared_ocm_mutex_s1_agent_rdata_fifo_out_ready;                                // avalon_st_adapter_005:in_0_ready -> shared_ocm_mutex_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_005_out_0_valid;                                             // avalon_st_adapter_005:out_0_valid -> shared_ocm_mutex_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_005_out_0_data;                                              // avalon_st_adapter_005:out_0_data -> shared_ocm_mutex_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_005_out_0_ready;                                             // shared_ocm_mutex_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_005:out_0_ready
	wire    [0:0] avalon_st_adapter_005_out_0_error;                                             // avalon_st_adapter_005:out_0_error -> shared_ocm_mutex_s1_agent:rdata_fifo_sink_error
	wire          shared_ocm_s2_agent_rdata_fifo_src_valid;                                      // shared_ocm_s2_agent:rdata_fifo_src_valid -> avalon_st_adapter_006:in_0_valid
	wire   [33:0] shared_ocm_s2_agent_rdata_fifo_src_data;                                       // shared_ocm_s2_agent:rdata_fifo_src_data -> avalon_st_adapter_006:in_0_data
	wire          shared_ocm_s2_agent_rdata_fifo_src_ready;                                      // avalon_st_adapter_006:in_0_ready -> shared_ocm_s2_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_006_out_0_valid;                                             // avalon_st_adapter_006:out_0_valid -> shared_ocm_s2_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_006_out_0_data;                                              // avalon_st_adapter_006:out_0_data -> shared_ocm_s2_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_006_out_0_ready;                                             // shared_ocm_s2_agent:rdata_fifo_sink_ready -> avalon_st_adapter_006:out_0_ready
	wire    [0:0] avalon_st_adapter_006_out_0_error;                                             // avalon_st_adapter_006:out_0_error -> shared_ocm_s2_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (27),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (28),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) manager_data_master_translator (
		.clk                    (altpll_0_c0_clk),                                                        //                       clk.clk
		.reset                  (manager_reset_reset_bridge_in_reset_reset),                              //                     reset.reset
		.uav_address            (manager_data_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (manager_data_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (manager_data_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (manager_data_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (manager_data_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (manager_data_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (manager_data_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (manager_data_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (manager_data_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (manager_data_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (manager_data_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (manager_data_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (manager_data_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (manager_data_master_byteenable),                                         //                          .byteenable
		.av_read                (manager_data_master_read),                                               //                          .read
		.av_readdata            (manager_data_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (manager_data_master_readdatavalid),                                      //                          .readdatavalid
		.av_write               (manager_data_master_write),                                              //                          .write
		.av_writedata           (manager_data_master_writedata),                                          //                          .writedata
		.av_debugaccess         (manager_data_master_debugaccess),                                        //                          .debugaccess
		.av_burstcount          (1'b1),                                                                   //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                   //               (terminated)
		.av_begintransfer       (1'b0),                                                                   //               (terminated)
		.av_chipselect          (1'b0),                                                                   //               (terminated)
		.av_lock                (1'b0),                                                                   //               (terminated)
		.uav_clken              (),                                                                       //               (terminated)
		.av_clken               (1'b1),                                                                   //               (terminated)
		.uav_response           (2'b00),                                                                  //               (terminated)
		.av_response            (),                                                                       //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                   //               (terminated)
		.av_writeresponsevalid  ()                                                                        //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (27),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (28),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (1),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) manager_instruction_master_translator (
		.clk                    (altpll_0_c0_clk),                                                               //                       clk.clk
		.reset                  (manager_reset_reset_bridge_in_reset_reset),                                     //                     reset.reset
		.uav_address            (manager_instruction_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (manager_instruction_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (manager_instruction_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (manager_instruction_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (manager_instruction_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (manager_instruction_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (manager_instruction_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (manager_instruction_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (manager_instruction_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (manager_instruction_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (manager_instruction_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (manager_instruction_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (manager_instruction_master_waitrequest),                                        //                          .waitrequest
		.av_read                (manager_instruction_master_read),                                               //                          .read
		.av_readdata            (manager_instruction_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (manager_instruction_master_readdatavalid),                                      //                          .readdatavalid
		.av_burstcount          (1'b1),                                                                          //               (terminated)
		.av_byteenable          (4'b1111),                                                                       //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                          //               (terminated)
		.av_begintransfer       (1'b0),                                                                          //               (terminated)
		.av_chipselect          (1'b0),                                                                          //               (terminated)
		.av_write               (1'b0),                                                                          //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                                          //               (terminated)
		.av_lock                (1'b0),                                                                          //               (terminated)
		.av_debugaccess         (1'b0),                                                                          //               (terminated)
		.uav_clken              (),                                                                              //               (terminated)
		.av_clken               (1'b1),                                                                          //               (terminated)
		.uav_response           (2'b00),                                                                         //               (terminated)
		.av_response            (),                                                                              //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                          //               (terminated)
		.av_writeresponsevalid  ()                                                                               //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (28),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (28),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) worker_0_worker_out_translator (
		.clk                    (altpll_0_c0_clk),                                                        //                       clk.clk
		.reset                  (performance_counter_0_reset_reset_bridge_in_reset_reset),                //                     reset.reset
		.uav_address            (worker_0_worker_out_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (worker_0_worker_out_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (worker_0_worker_out_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (worker_0_worker_out_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (worker_0_worker_out_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (worker_0_worker_out_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (worker_0_worker_out_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (worker_0_worker_out_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (worker_0_worker_out_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (worker_0_worker_out_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (worker_0_worker_out_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (worker_0_worker_out_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (worker_0_worker_out_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (worker_0_worker_out_burstcount),                                         //                          .burstcount
		.av_byteenable          (worker_0_worker_out_byteenable),                                         //                          .byteenable
		.av_read                (worker_0_worker_out_read),                                               //                          .read
		.av_readdata            (worker_0_worker_out_readdata),                                           //                          .readdata
		.av_readdatavalid       (worker_0_worker_out_readdatavalid),                                      //                          .readdatavalid
		.av_write               (worker_0_worker_out_write),                                              //                          .write
		.av_writedata           (worker_0_worker_out_writedata),                                          //                          .writedata
		.av_debugaccess         (worker_0_worker_out_debugaccess),                                        //                          .debugaccess
		.av_beginbursttransfer  (1'b0),                                                                   //               (terminated)
		.av_begintransfer       (1'b0),                                                                   //               (terminated)
		.av_chipselect          (1'b0),                                                                   //               (terminated)
		.av_lock                (1'b0),                                                                   //               (terminated)
		.uav_clken              (),                                                                       //               (terminated)
		.av_clken               (1'b1),                                                                   //               (terminated)
		.uav_response           (2'b00),                                                                  //               (terminated)
		.av_response            (),                                                                       //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                   //               (terminated)
		.av_writeresponsevalid  ()                                                                        //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (28),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (28),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) worker_1_worker_out_translator (
		.clk                    (altpll_0_c0_clk),                                                        //                       clk.clk
		.reset                  (performance_counter_0_reset_reset_bridge_in_reset_reset),                //                     reset.reset
		.uav_address            (worker_1_worker_out_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (worker_1_worker_out_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (worker_1_worker_out_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (worker_1_worker_out_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (worker_1_worker_out_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (worker_1_worker_out_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (worker_1_worker_out_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (worker_1_worker_out_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (worker_1_worker_out_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (worker_1_worker_out_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (worker_1_worker_out_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (worker_1_worker_out_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (worker_1_worker_out_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (worker_1_worker_out_burstcount),                                         //                          .burstcount
		.av_byteenable          (worker_1_worker_out_byteenable),                                         //                          .byteenable
		.av_read                (worker_1_worker_out_read),                                               //                          .read
		.av_readdata            (worker_1_worker_out_readdata),                                           //                          .readdata
		.av_readdatavalid       (worker_1_worker_out_readdatavalid),                                      //                          .readdatavalid
		.av_write               (worker_1_worker_out_write),                                              //                          .write
		.av_writedata           (worker_1_worker_out_writedata),                                          //                          .writedata
		.av_debugaccess         (worker_1_worker_out_debugaccess),                                        //                          .debugaccess
		.av_beginbursttransfer  (1'b0),                                                                   //               (terminated)
		.av_begintransfer       (1'b0),                                                                   //               (terminated)
		.av_chipselect          (1'b0),                                                                   //               (terminated)
		.av_lock                (1'b0),                                                                   //               (terminated)
		.uav_clken              (),                                                                       //               (terminated)
		.av_clken               (1'b1),                                                                   //               (terminated)
		.uav_response           (2'b00),                                                                  //               (terminated)
		.av_response            (),                                                                       //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                   //               (terminated)
		.av_writeresponsevalid  ()                                                                        //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (28),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (28),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) worker_2_worker_out_translator (
		.clk                    (altpll_0_c0_clk),                                                        //                       clk.clk
		.reset                  (performance_counter_0_reset_reset_bridge_in_reset_reset),                //                     reset.reset
		.uav_address            (worker_2_worker_out_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (worker_2_worker_out_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (worker_2_worker_out_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (worker_2_worker_out_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (worker_2_worker_out_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (worker_2_worker_out_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (worker_2_worker_out_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (worker_2_worker_out_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (worker_2_worker_out_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (worker_2_worker_out_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (worker_2_worker_out_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (worker_2_worker_out_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (worker_2_worker_out_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (worker_2_worker_out_burstcount),                                         //                          .burstcount
		.av_byteenable          (worker_2_worker_out_byteenable),                                         //                          .byteenable
		.av_read                (worker_2_worker_out_read),                                               //                          .read
		.av_readdata            (worker_2_worker_out_readdata),                                           //                          .readdata
		.av_readdatavalid       (worker_2_worker_out_readdatavalid),                                      //                          .readdatavalid
		.av_write               (worker_2_worker_out_write),                                              //                          .write
		.av_writedata           (worker_2_worker_out_writedata),                                          //                          .writedata
		.av_debugaccess         (worker_2_worker_out_debugaccess),                                        //                          .debugaccess
		.av_beginbursttransfer  (1'b0),                                                                   //               (terminated)
		.av_begintransfer       (1'b0),                                                                   //               (terminated)
		.av_chipselect          (1'b0),                                                                   //               (terminated)
		.av_lock                (1'b0),                                                                   //               (terminated)
		.uav_clken              (),                                                                       //               (terminated)
		.av_clken               (1'b1),                                                                   //               (terminated)
		.uav_response           (2'b00),                                                                  //               (terminated)
		.av_response            (),                                                                       //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                   //               (terminated)
		.av_writeresponsevalid  ()                                                                        //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (28),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (28),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) worker_3_worker_out_translator (
		.clk                    (altpll_0_c0_clk),                                                        //                       clk.clk
		.reset                  (performance_counter_0_reset_reset_bridge_in_reset_reset),                //                     reset.reset
		.uav_address            (worker_3_worker_out_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (worker_3_worker_out_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (worker_3_worker_out_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (worker_3_worker_out_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (worker_3_worker_out_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (worker_3_worker_out_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (worker_3_worker_out_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (worker_3_worker_out_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (worker_3_worker_out_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (worker_3_worker_out_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (worker_3_worker_out_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (worker_3_worker_out_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (worker_3_worker_out_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (worker_3_worker_out_burstcount),                                         //                          .burstcount
		.av_byteenable          (worker_3_worker_out_byteenable),                                         //                          .byteenable
		.av_read                (worker_3_worker_out_read),                                               //                          .read
		.av_readdata            (worker_3_worker_out_readdata),                                           //                          .readdata
		.av_readdatavalid       (worker_3_worker_out_readdatavalid),                                      //                          .readdatavalid
		.av_write               (worker_3_worker_out_write),                                              //                          .write
		.av_writedata           (worker_3_worker_out_writedata),                                          //                          .writedata
		.av_debugaccess         (worker_3_worker_out_debugaccess),                                        //                          .debugaccess
		.av_beginbursttransfer  (1'b0),                                                                   //               (terminated)
		.av_begintransfer       (1'b0),                                                                   //               (terminated)
		.av_chipselect          (1'b0),                                                                   //               (terminated)
		.av_lock                (1'b0),                                                                   //               (terminated)
		.uav_clken              (),                                                                       //               (terminated)
		.av_clken               (1'b1),                                                                   //               (terminated)
		.uav_response           (2'b00),                                                                  //               (terminated)
		.av_response            (),                                                                       //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                   //               (terminated)
		.av_writeresponsevalid  ()                                                                        //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) manager_jtag_uart_avalon_jtag_slave_translator (
		.clk                    (altpll_0_c0_clk),                                            //                      clk.clk
		.reset                  (manager_reset_reset_bridge_in_reset_reset),                  //                    reset.reset
		.uav_address            (manager_jtag_uart_avalon_jtag_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (manager_jtag_uart_avalon_jtag_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (manager_jtag_uart_avalon_jtag_slave_agent_m0_read),          //                         .read
		.uav_write              (manager_jtag_uart_avalon_jtag_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (manager_jtag_uart_avalon_jtag_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (manager_jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (manager_jtag_uart_avalon_jtag_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (manager_jtag_uart_avalon_jtag_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (manager_jtag_uart_avalon_jtag_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (manager_jtag_uart_avalon_jtag_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (manager_jtag_uart_avalon_jtag_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (manager_jtag_uart_avalon_jtag_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (manager_jtag_uart_avalon_jtag_slave_write),                  //                         .write
		.av_read                (manager_jtag_uart_avalon_jtag_slave_read),                   //                         .read
		.av_readdata            (manager_jtag_uart_avalon_jtag_slave_readdata),               //                         .readdata
		.av_writedata           (manager_jtag_uart_avalon_jtag_slave_writedata),              //                         .writedata
		.av_waitrequest         (manager_jtag_uart_avalon_jtag_slave_waitrequest),            //                         .waitrequest
		.av_chipselect          (manager_jtag_uart_avalon_jtag_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                           //              (terminated)
		.av_beginbursttransfer  (),                                                           //              (terminated)
		.av_burstcount          (),                                                           //              (terminated)
		.av_byteenable          (),                                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                                       //              (terminated)
		.av_writebyteenable     (),                                                           //              (terminated)
		.av_lock                (),                                                           //              (terminated)
		.av_clken               (),                                                           //              (terminated)
		.uav_clken              (1'b0),                                                       //              (terminated)
		.av_debugaccess         (),                                                           //              (terminated)
		.av_outputenable        (),                                                           //              (terminated)
		.uav_response           (),                                                           //              (terminated)
		.av_response            (2'b00),                                                      //              (terminated)
		.uav_writeresponsevalid (),                                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (5),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) performance_counter_0_control_slave_translator (
		.clk                    (altpll_0_c0_clk),                                            //                      clk.clk
		.reset                  (performance_counter_0_reset_reset_bridge_in_reset_reset),    //                    reset.reset
		.uav_address            (performance_counter_0_control_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (performance_counter_0_control_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (performance_counter_0_control_slave_agent_m0_read),          //                         .read
		.uav_write              (performance_counter_0_control_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (performance_counter_0_control_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (performance_counter_0_control_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (performance_counter_0_control_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (performance_counter_0_control_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (performance_counter_0_control_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (performance_counter_0_control_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (performance_counter_0_control_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (performance_counter_0_control_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (performance_counter_0_control_slave_write),                  //                         .write
		.av_readdata            (performance_counter_0_control_slave_readdata),               //                         .readdata
		.av_writedata           (performance_counter_0_control_slave_writedata),              //                         .writedata
		.av_begintransfer       (performance_counter_0_control_slave_begintransfer),          //                         .begintransfer
		.av_read                (),                                                           //              (terminated)
		.av_beginbursttransfer  (),                                                           //              (terminated)
		.av_burstcount          (),                                                           //              (terminated)
		.av_byteenable          (),                                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                                       //              (terminated)
		.av_waitrequest         (1'b0),                                                       //              (terminated)
		.av_writebyteenable     (),                                                           //              (terminated)
		.av_lock                (),                                                           //              (terminated)
		.av_chipselect          (),                                                           //              (terminated)
		.av_clken               (),                                                           //              (terminated)
		.uav_clken              (1'b0),                                                       //              (terminated)
		.av_debugaccess         (),                                                           //              (terminated)
		.av_outputenable        (),                                                           //              (terminated)
		.uav_response           (),                                                           //              (terminated)
		.av_response            (2'b00),                                                      //              (terminated)
		.uav_writeresponsevalid (),                                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) manager_debug_mem_slave_translator (
		.clk                    (altpll_0_c0_clk),                                //                      clk.clk
		.reset                  (manager_reset_reset_bridge_in_reset_reset),      //                    reset.reset
		.uav_address            (manager_debug_mem_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (manager_debug_mem_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (manager_debug_mem_slave_agent_m0_read),          //                         .read
		.uav_write              (manager_debug_mem_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (manager_debug_mem_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (manager_debug_mem_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (manager_debug_mem_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (manager_debug_mem_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (manager_debug_mem_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (manager_debug_mem_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (manager_debug_mem_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (manager_debug_mem_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (manager_debug_mem_slave_write),                  //                         .write
		.av_read                (manager_debug_mem_slave_read),                   //                         .read
		.av_readdata            (manager_debug_mem_slave_readdata),               //                         .readdata
		.av_writedata           (manager_debug_mem_slave_writedata),              //                         .writedata
		.av_byteenable          (manager_debug_mem_slave_byteenable),             //                         .byteenable
		.av_waitrequest         (manager_debug_mem_slave_waitrequest),            //                         .waitrequest
		.av_debugaccess         (manager_debug_mem_slave_debugaccess),            //                         .debugaccess
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_chipselect          (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (7),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) shared_ocm_s1_translator (
		.clk                    (altpll_0_c0_clk),                           //                      clk.clk
		.reset                  (manager_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (shared_ocm_s1_agent_m0_address),            // avalon_universal_slave_0.address
		.uav_burstcount         (shared_ocm_s1_agent_m0_burstcount),         //                         .burstcount
		.uav_read               (shared_ocm_s1_agent_m0_read),               //                         .read
		.uav_write              (shared_ocm_s1_agent_m0_write),              //                         .write
		.uav_waitrequest        (shared_ocm_s1_agent_m0_waitrequest),        //                         .waitrequest
		.uav_readdatavalid      (shared_ocm_s1_agent_m0_readdatavalid),      //                         .readdatavalid
		.uav_byteenable         (shared_ocm_s1_agent_m0_byteenable),         //                         .byteenable
		.uav_readdata           (shared_ocm_s1_agent_m0_readdata),           //                         .readdata
		.uav_writedata          (shared_ocm_s1_agent_m0_writedata),          //                         .writedata
		.uav_lock               (shared_ocm_s1_agent_m0_lock),               //                         .lock
		.uav_debugaccess        (shared_ocm_s1_agent_m0_debugaccess),        //                         .debugaccess
		.av_address             (shared_ocm_s1_address),                     //      avalon_anti_slave_0.address
		.av_write               (shared_ocm_s1_write),                       //                         .write
		.av_readdata            (shared_ocm_s1_readdata),                    //                         .readdata
		.av_writedata           (shared_ocm_s1_writedata),                   //                         .writedata
		.av_byteenable          (shared_ocm_s1_byteenable),                  //                         .byteenable
		.av_chipselect          (shared_ocm_s1_chipselect),                  //                         .chipselect
		.av_clken               (shared_ocm_s1_clken),                       //                         .clken
		.av_read                (),                                          //              (terminated)
		.av_begintransfer       (),                                          //              (terminated)
		.av_beginbursttransfer  (),                                          //              (terminated)
		.av_burstcount          (),                                          //              (terminated)
		.av_readdatavalid       (1'b0),                                      //              (terminated)
		.av_waitrequest         (1'b0),                                      //              (terminated)
		.av_writebyteenable     (),                                          //              (terminated)
		.av_lock                (),                                          //              (terminated)
		.uav_clken              (1'b0),                                      //              (terminated)
		.av_debugaccess         (),                                          //              (terminated)
		.av_outputenable        (),                                          //              (terminated)
		.uav_response           (),                                          //              (terminated)
		.av_response            (2'b00),                                     //              (terminated)
		.uav_writeresponsevalid (),                                          //              (terminated)
		.av_writeresponsevalid  (1'b0)                                       //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (24),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (16),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (2),
		.UAV_BYTEENABLE_W               (2),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (2),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (2),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sdram_s1_translator (
		.clk                    (altpll_0_c0_clk),                           //                      clk.clk
		.reset                  (manager_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sdram_s1_agent_m0_address),                 // avalon_universal_slave_0.address
		.uav_burstcount         (sdram_s1_agent_m0_burstcount),              //                         .burstcount
		.uav_read               (sdram_s1_agent_m0_read),                    //                         .read
		.uav_write              (sdram_s1_agent_m0_write),                   //                         .write
		.uav_waitrequest        (sdram_s1_agent_m0_waitrequest),             //                         .waitrequest
		.uav_readdatavalid      (sdram_s1_agent_m0_readdatavalid),           //                         .readdatavalid
		.uav_byteenable         (sdram_s1_agent_m0_byteenable),              //                         .byteenable
		.uav_readdata           (sdram_s1_agent_m0_readdata),                //                         .readdata
		.uav_writedata          (sdram_s1_agent_m0_writedata),               //                         .writedata
		.uav_lock               (sdram_s1_agent_m0_lock),                    //                         .lock
		.uav_debugaccess        (sdram_s1_agent_m0_debugaccess),             //                         .debugaccess
		.av_address             (sdram_s1_address),                          //      avalon_anti_slave_0.address
		.av_write               (sdram_s1_write),                            //                         .write
		.av_read                (sdram_s1_read),                             //                         .read
		.av_readdata            (sdram_s1_readdata),                         //                         .readdata
		.av_writedata           (sdram_s1_writedata),                        //                         .writedata
		.av_byteenable          (sdram_s1_byteenable),                       //                         .byteenable
		.av_readdatavalid       (sdram_s1_readdatavalid),                    //                         .readdatavalid
		.av_waitrequest         (sdram_s1_waitrequest),                      //                         .waitrequest
		.av_chipselect          (sdram_s1_chipselect),                       //                         .chipselect
		.av_begintransfer       (),                                          //              (terminated)
		.av_beginbursttransfer  (),                                          //              (terminated)
		.av_burstcount          (),                                          //              (terminated)
		.av_writebyteenable     (),                                          //              (terminated)
		.av_lock                (),                                          //              (terminated)
		.av_clken               (),                                          //              (terminated)
		.uav_clken              (1'b0),                                      //              (terminated)
		.av_debugaccess         (),                                          //              (terminated)
		.av_outputenable        (),                                          //              (terminated)
		.uav_response           (),                                          //              (terminated)
		.av_response            (2'b00),                                     //              (terminated)
		.uav_writeresponsevalid (),                                          //              (terminated)
		.av_writeresponsevalid  (1'b0)                                       //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) shared_ocm_mutex_s1_translator (
		.clk                    (clk_0_clk_clk),                                      //                      clk.clk
		.reset                  (shared_ocm_mutex_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (shared_ocm_mutex_s1_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount         (shared_ocm_mutex_s1_agent_m0_burstcount),            //                         .burstcount
		.uav_read               (shared_ocm_mutex_s1_agent_m0_read),                  //                         .read
		.uav_write              (shared_ocm_mutex_s1_agent_m0_write),                 //                         .write
		.uav_waitrequest        (shared_ocm_mutex_s1_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid      (shared_ocm_mutex_s1_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable         (shared_ocm_mutex_s1_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata           (shared_ocm_mutex_s1_agent_m0_readdata),              //                         .readdata
		.uav_writedata          (shared_ocm_mutex_s1_agent_m0_writedata),             //                         .writedata
		.uav_lock               (shared_ocm_mutex_s1_agent_m0_lock),                  //                         .lock
		.uav_debugaccess        (shared_ocm_mutex_s1_agent_m0_debugaccess),           //                         .debugaccess
		.av_address             (shared_ocm_mutex_s1_address),                        //      avalon_anti_slave_0.address
		.av_write               (shared_ocm_mutex_s1_write),                          //                         .write
		.av_read                (shared_ocm_mutex_s1_read),                           //                         .read
		.av_readdata            (shared_ocm_mutex_s1_readdata),                       //                         .readdata
		.av_writedata           (shared_ocm_mutex_s1_writedata),                      //                         .writedata
		.av_chipselect          (shared_ocm_mutex_s1_chipselect),                     //                         .chipselect
		.av_begintransfer       (),                                                   //              (terminated)
		.av_beginbursttransfer  (),                                                   //              (terminated)
		.av_burstcount          (),                                                   //              (terminated)
		.av_byteenable          (),                                                   //              (terminated)
		.av_readdatavalid       (1'b0),                                               //              (terminated)
		.av_waitrequest         (1'b0),                                               //              (terminated)
		.av_writebyteenable     (),                                                   //              (terminated)
		.av_lock                (),                                                   //              (terminated)
		.av_clken               (),                                                   //              (terminated)
		.uav_clken              (1'b0),                                               //              (terminated)
		.av_debugaccess         (),                                                   //              (terminated)
		.av_outputenable        (),                                                   //              (terminated)
		.uav_response           (),                                                   //              (terminated)
		.av_response            (2'b00),                                              //              (terminated)
		.uav_writeresponsevalid (),                                                   //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (7),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) shared_ocm_s2_translator (
		.clk                    (altpll_0_c0_clk),                           //                      clk.clk
		.reset                  (manager_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (shared_ocm_s2_agent_m0_address),            // avalon_universal_slave_0.address
		.uav_burstcount         (shared_ocm_s2_agent_m0_burstcount),         //                         .burstcount
		.uav_read               (shared_ocm_s2_agent_m0_read),               //                         .read
		.uav_write              (shared_ocm_s2_agent_m0_write),              //                         .write
		.uav_waitrequest        (shared_ocm_s2_agent_m0_waitrequest),        //                         .waitrequest
		.uav_readdatavalid      (shared_ocm_s2_agent_m0_readdatavalid),      //                         .readdatavalid
		.uav_byteenable         (shared_ocm_s2_agent_m0_byteenable),         //                         .byteenable
		.uav_readdata           (shared_ocm_s2_agent_m0_readdata),           //                         .readdata
		.uav_writedata          (shared_ocm_s2_agent_m0_writedata),          //                         .writedata
		.uav_lock               (shared_ocm_s2_agent_m0_lock),               //                         .lock
		.uav_debugaccess        (shared_ocm_s2_agent_m0_debugaccess),        //                         .debugaccess
		.av_address             (shared_ocm_s2_address),                     //      avalon_anti_slave_0.address
		.av_write               (shared_ocm_s2_write),                       //                         .write
		.av_readdata            (shared_ocm_s2_readdata),                    //                         .readdata
		.av_writedata           (shared_ocm_s2_writedata),                   //                         .writedata
		.av_byteenable          (shared_ocm_s2_byteenable),                  //                         .byteenable
		.av_chipselect          (shared_ocm_s2_chipselect),                  //                         .chipselect
		.av_clken               (shared_ocm_s2_clken),                       //                         .clken
		.av_read                (),                                          //              (terminated)
		.av_begintransfer       (),                                          //              (terminated)
		.av_beginbursttransfer  (),                                          //              (terminated)
		.av_burstcount          (),                                          //              (terminated)
		.av_readdatavalid       (1'b0),                                      //              (terminated)
		.av_waitrequest         (1'b0),                                      //              (terminated)
		.av_writebyteenable     (),                                          //              (terminated)
		.av_lock                (),                                          //              (terminated)
		.uav_clken              (1'b0),                                      //              (terminated)
		.av_debugaccess         (),                                          //              (terminated)
		.av_outputenable        (),                                          //              (terminated)
		.uav_response           (),                                          //              (terminated)
		.av_response            (2'b00),                                     //              (terminated)
		.uav_writeresponsevalid (),                                          //              (terminated)
		.av_writeresponsevalid  (1'b0)                                       //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (103),
		.PKT_ORI_BURST_SIZE_L      (101),
		.PKT_RESPONSE_STATUS_H     (100),
		.PKT_RESPONSE_STATUS_L     (99),
		.PKT_QOS_H                 (84),
		.PKT_QOS_L                 (84),
		.PKT_DATA_SIDEBAND_H       (82),
		.PKT_DATA_SIDEBAND_L       (82),
		.PKT_ADDR_SIDEBAND_H       (81),
		.PKT_ADDR_SIDEBAND_L       (81),
		.PKT_BURST_TYPE_H          (80),
		.PKT_BURST_TYPE_L          (79),
		.PKT_CACHE_H               (98),
		.PKT_CACHE_L               (95),
		.PKT_THREAD_ID_H           (91),
		.PKT_THREAD_ID_L           (91),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_EXCLUSIVE       (69),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (94),
		.PKT_PROTECTION_L          (92),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (90),
		.PKT_DEST_ID_L             (88),
		.ST_DATA_W                 (104),
		.ST_CHANNEL_W              (7),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) manager_data_master_agent (
		.clk                   (altpll_0_c0_clk),                                                        //       clk.clk
		.reset                 (manager_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.av_address            (manager_data_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (manager_data_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (manager_data_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (manager_data_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (manager_data_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (manager_data_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (manager_data_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (manager_data_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (manager_data_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (manager_data_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (manager_data_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (manager_data_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (manager_data_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (manager_data_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (manager_data_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (manager_data_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (manager_data_master_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (manager_data_master_limiter_rsp_src_data),                               //          .data
		.rp_channel            (manager_data_master_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (manager_data_master_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (manager_data_master_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (manager_data_master_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                       // (terminated)
		.av_writeresponsevalid ()                                                                        // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (103),
		.PKT_ORI_BURST_SIZE_L      (101),
		.PKT_RESPONSE_STATUS_H     (100),
		.PKT_RESPONSE_STATUS_L     (99),
		.PKT_QOS_H                 (84),
		.PKT_QOS_L                 (84),
		.PKT_DATA_SIDEBAND_H       (82),
		.PKT_DATA_SIDEBAND_L       (82),
		.PKT_ADDR_SIDEBAND_H       (81),
		.PKT_ADDR_SIDEBAND_L       (81),
		.PKT_BURST_TYPE_H          (80),
		.PKT_BURST_TYPE_L          (79),
		.PKT_CACHE_H               (98),
		.PKT_CACHE_L               (95),
		.PKT_THREAD_ID_H           (91),
		.PKT_THREAD_ID_L           (91),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_EXCLUSIVE       (69),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (94),
		.PKT_PROTECTION_L          (92),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (90),
		.PKT_DEST_ID_L             (88),
		.ST_DATA_W                 (104),
		.ST_CHANNEL_W              (7),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (1),
		.BURSTWRAP_VALUE           (3),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) manager_instruction_master_agent (
		.clk                   (altpll_0_c0_clk),                                                               //       clk.clk
		.reset                 (manager_reset_reset_bridge_in_reset_reset),                                     // clk_reset.reset
		.av_address            (manager_instruction_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (manager_instruction_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (manager_instruction_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (manager_instruction_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (manager_instruction_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (manager_instruction_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (manager_instruction_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (manager_instruction_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (manager_instruction_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (manager_instruction_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (manager_instruction_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (manager_instruction_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (manager_instruction_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (manager_instruction_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (manager_instruction_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (manager_instruction_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (manager_instruction_master_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (manager_instruction_master_limiter_rsp_src_data),                               //          .data
		.rp_channel            (manager_instruction_master_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (manager_instruction_master_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (manager_instruction_master_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (manager_instruction_master_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                              // (terminated)
		.av_writeresponsevalid ()                                                                               // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (103),
		.PKT_ORI_BURST_SIZE_L      (101),
		.PKT_RESPONSE_STATUS_H     (100),
		.PKT_RESPONSE_STATUS_L     (99),
		.PKT_QOS_H                 (84),
		.PKT_QOS_L                 (84),
		.PKT_DATA_SIDEBAND_H       (82),
		.PKT_DATA_SIDEBAND_L       (82),
		.PKT_ADDR_SIDEBAND_H       (81),
		.PKT_ADDR_SIDEBAND_L       (81),
		.PKT_BURST_TYPE_H          (80),
		.PKT_BURST_TYPE_L          (79),
		.PKT_CACHE_H               (98),
		.PKT_CACHE_L               (95),
		.PKT_THREAD_ID_H           (91),
		.PKT_THREAD_ID_L           (91),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_EXCLUSIVE       (69),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (94),
		.PKT_PROTECTION_L          (92),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (90),
		.PKT_DEST_ID_L             (88),
		.ST_DATA_W                 (104),
		.ST_CHANNEL_W              (7),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (2),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) worker_0_worker_out_agent (
		.clk                   (altpll_0_c0_clk),                                                        //       clk.clk
		.reset                 (performance_counter_0_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.av_address            (worker_0_worker_out_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (worker_0_worker_out_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (worker_0_worker_out_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (worker_0_worker_out_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (worker_0_worker_out_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (worker_0_worker_out_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (worker_0_worker_out_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (worker_0_worker_out_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (worker_0_worker_out_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (worker_0_worker_out_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (worker_0_worker_out_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (worker_0_worker_out_agent_cp_valid),                                     //        cp.valid
		.cp_data               (worker_0_worker_out_agent_cp_data),                                      //          .data
		.cp_startofpacket      (worker_0_worker_out_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (worker_0_worker_out_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (worker_0_worker_out_agent_cp_ready),                                     //          .ready
		.rp_valid              (worker_0_worker_out_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (worker_0_worker_out_limiter_rsp_src_data),                               //          .data
		.rp_channel            (worker_0_worker_out_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (worker_0_worker_out_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (worker_0_worker_out_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (worker_0_worker_out_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                       // (terminated)
		.av_writeresponsevalid ()                                                                        // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (103),
		.PKT_ORI_BURST_SIZE_L      (101),
		.PKT_RESPONSE_STATUS_H     (100),
		.PKT_RESPONSE_STATUS_L     (99),
		.PKT_QOS_H                 (84),
		.PKT_QOS_L                 (84),
		.PKT_DATA_SIDEBAND_H       (82),
		.PKT_DATA_SIDEBAND_L       (82),
		.PKT_ADDR_SIDEBAND_H       (81),
		.PKT_ADDR_SIDEBAND_L       (81),
		.PKT_BURST_TYPE_H          (80),
		.PKT_BURST_TYPE_L          (79),
		.PKT_CACHE_H               (98),
		.PKT_CACHE_L               (95),
		.PKT_THREAD_ID_H           (91),
		.PKT_THREAD_ID_L           (91),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_EXCLUSIVE       (69),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (94),
		.PKT_PROTECTION_L          (92),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (90),
		.PKT_DEST_ID_L             (88),
		.ST_DATA_W                 (104),
		.ST_CHANNEL_W              (7),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (3),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) worker_1_worker_out_agent (
		.clk                   (altpll_0_c0_clk),                                                        //       clk.clk
		.reset                 (performance_counter_0_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.av_address            (worker_1_worker_out_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (worker_1_worker_out_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (worker_1_worker_out_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (worker_1_worker_out_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (worker_1_worker_out_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (worker_1_worker_out_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (worker_1_worker_out_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (worker_1_worker_out_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (worker_1_worker_out_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (worker_1_worker_out_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (worker_1_worker_out_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (worker_1_worker_out_agent_cp_valid),                                     //        cp.valid
		.cp_data               (worker_1_worker_out_agent_cp_data),                                      //          .data
		.cp_startofpacket      (worker_1_worker_out_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (worker_1_worker_out_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (worker_1_worker_out_agent_cp_ready),                                     //          .ready
		.rp_valid              (worker_1_worker_out_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (worker_1_worker_out_limiter_rsp_src_data),                               //          .data
		.rp_channel            (worker_1_worker_out_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (worker_1_worker_out_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (worker_1_worker_out_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (worker_1_worker_out_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                       // (terminated)
		.av_writeresponsevalid ()                                                                        // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (103),
		.PKT_ORI_BURST_SIZE_L      (101),
		.PKT_RESPONSE_STATUS_H     (100),
		.PKT_RESPONSE_STATUS_L     (99),
		.PKT_QOS_H                 (84),
		.PKT_QOS_L                 (84),
		.PKT_DATA_SIDEBAND_H       (82),
		.PKT_DATA_SIDEBAND_L       (82),
		.PKT_ADDR_SIDEBAND_H       (81),
		.PKT_ADDR_SIDEBAND_L       (81),
		.PKT_BURST_TYPE_H          (80),
		.PKT_BURST_TYPE_L          (79),
		.PKT_CACHE_H               (98),
		.PKT_CACHE_L               (95),
		.PKT_THREAD_ID_H           (91),
		.PKT_THREAD_ID_L           (91),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_EXCLUSIVE       (69),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (94),
		.PKT_PROTECTION_L          (92),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (90),
		.PKT_DEST_ID_L             (88),
		.ST_DATA_W                 (104),
		.ST_CHANNEL_W              (7),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (4),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) worker_2_worker_out_agent (
		.clk                   (altpll_0_c0_clk),                                                        //       clk.clk
		.reset                 (performance_counter_0_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.av_address            (worker_2_worker_out_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (worker_2_worker_out_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (worker_2_worker_out_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (worker_2_worker_out_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (worker_2_worker_out_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (worker_2_worker_out_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (worker_2_worker_out_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (worker_2_worker_out_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (worker_2_worker_out_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (worker_2_worker_out_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (worker_2_worker_out_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (worker_2_worker_out_agent_cp_valid),                                     //        cp.valid
		.cp_data               (worker_2_worker_out_agent_cp_data),                                      //          .data
		.cp_startofpacket      (worker_2_worker_out_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (worker_2_worker_out_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (worker_2_worker_out_agent_cp_ready),                                     //          .ready
		.rp_valid              (worker_2_worker_out_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (worker_2_worker_out_limiter_rsp_src_data),                               //          .data
		.rp_channel            (worker_2_worker_out_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (worker_2_worker_out_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (worker_2_worker_out_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (worker_2_worker_out_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                       // (terminated)
		.av_writeresponsevalid ()                                                                        // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (103),
		.PKT_ORI_BURST_SIZE_L      (101),
		.PKT_RESPONSE_STATUS_H     (100),
		.PKT_RESPONSE_STATUS_L     (99),
		.PKT_QOS_H                 (84),
		.PKT_QOS_L                 (84),
		.PKT_DATA_SIDEBAND_H       (82),
		.PKT_DATA_SIDEBAND_L       (82),
		.PKT_ADDR_SIDEBAND_H       (81),
		.PKT_ADDR_SIDEBAND_L       (81),
		.PKT_BURST_TYPE_H          (80),
		.PKT_BURST_TYPE_L          (79),
		.PKT_CACHE_H               (98),
		.PKT_CACHE_L               (95),
		.PKT_THREAD_ID_H           (91),
		.PKT_THREAD_ID_L           (91),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_EXCLUSIVE       (69),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (94),
		.PKT_PROTECTION_L          (92),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (90),
		.PKT_DEST_ID_L             (88),
		.ST_DATA_W                 (104),
		.ST_CHANNEL_W              (7),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (5),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) worker_3_worker_out_agent (
		.clk                   (altpll_0_c0_clk),                                                        //       clk.clk
		.reset                 (performance_counter_0_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.av_address            (worker_3_worker_out_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (worker_3_worker_out_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (worker_3_worker_out_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (worker_3_worker_out_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (worker_3_worker_out_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (worker_3_worker_out_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (worker_3_worker_out_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (worker_3_worker_out_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (worker_3_worker_out_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (worker_3_worker_out_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (worker_3_worker_out_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (worker_3_worker_out_agent_cp_valid),                                     //        cp.valid
		.cp_data               (worker_3_worker_out_agent_cp_data),                                      //          .data
		.cp_startofpacket      (worker_3_worker_out_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (worker_3_worker_out_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (worker_3_worker_out_agent_cp_ready),                                     //          .ready
		.rp_valid              (worker_3_worker_out_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (worker_3_worker_out_limiter_rsp_src_data),                               //          .data
		.rp_channel            (worker_3_worker_out_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (worker_3_worker_out_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (worker_3_worker_out_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (worker_3_worker_out_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                       // (terminated)
		.av_writeresponsevalid ()                                                                        // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (103),
		.PKT_ORI_BURST_SIZE_L      (101),
		.PKT_RESPONSE_STATUS_H     (100),
		.PKT_RESPONSE_STATUS_L     (99),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (94),
		.PKT_PROTECTION_L          (92),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (90),
		.PKT_DEST_ID_L             (88),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (7),
		.ST_DATA_W                 (104),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) manager_jtag_uart_avalon_jtag_slave_agent (
		.clk                     (altpll_0_c0_clk),                                                      //             clk.clk
		.reset                   (manager_reset_reset_bridge_in_reset_reset),                            //       clk_reset.reset
		.m0_address              (manager_jtag_uart_avalon_jtag_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (manager_jtag_uart_avalon_jtag_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (manager_jtag_uart_avalon_jtag_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (manager_jtag_uart_avalon_jtag_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (manager_jtag_uart_avalon_jtag_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (manager_jtag_uart_avalon_jtag_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (manager_jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (manager_jtag_uart_avalon_jtag_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (manager_jtag_uart_avalon_jtag_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (manager_jtag_uart_avalon_jtag_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (manager_jtag_uart_avalon_jtag_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (manager_jtag_uart_avalon_jtag_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (manager_jtag_uart_avalon_jtag_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (manager_jtag_uart_avalon_jtag_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (manager_jtag_uart_avalon_jtag_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (manager_jtag_uart_avalon_jtag_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_src_ready),                                                    //              cp.ready
		.cp_valid                (cmd_mux_src_valid),                                                    //                .valid
		.cp_data                 (cmd_mux_src_data),                                                     //                .data
		.cp_startofpacket        (cmd_mux_src_startofpacket),                                            //                .startofpacket
		.cp_endofpacket          (cmd_mux_src_endofpacket),                                              //                .endofpacket
		.cp_channel              (cmd_mux_src_channel),                                                  //                .channel
		.rf_sink_ready           (manager_jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (manager_jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (manager_jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (manager_jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (manager_jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (manager_jtag_uart_avalon_jtag_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (manager_jtag_uart_avalon_jtag_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (manager_jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (manager_jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (manager_jtag_uart_avalon_jtag_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                                        // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                                        //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                                         //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                                        //                .error
		.rdata_fifo_src_ready    (manager_jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (manager_jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (manager_jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (105),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) manager_jtag_uart_avalon_jtag_slave_agent_rsp_fifo (
		.clk               (altpll_0_c0_clk),                                                      //       clk.clk
		.reset             (manager_reset_reset_bridge_in_reset_reset),                            // clk_reset.reset
		.in_data           (manager_jtag_uart_avalon_jtag_slave_agent_rf_source_data),             //        in.data
		.in_valid          (manager_jtag_uart_avalon_jtag_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (manager_jtag_uart_avalon_jtag_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (manager_jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (manager_jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (manager_jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (manager_jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (manager_jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (manager_jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (manager_jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                // (terminated)
		.csr_read          (1'b0),                                                                 // (terminated)
		.csr_write         (1'b0),                                                                 // (terminated)
		.csr_readdata      (),                                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                 // (terminated)
		.almost_full_data  (),                                                                     // (terminated)
		.almost_empty_data (),                                                                     // (terminated)
		.in_empty          (1'b0),                                                                 // (terminated)
		.out_empty         (),                                                                     // (terminated)
		.in_error          (1'b0),                                                                 // (terminated)
		.out_error         (),                                                                     // (terminated)
		.in_channel        (1'b0),                                                                 // (terminated)
		.out_channel       ()                                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (103),
		.PKT_ORI_BURST_SIZE_L      (101),
		.PKT_RESPONSE_STATUS_H     (100),
		.PKT_RESPONSE_STATUS_L     (99),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (94),
		.PKT_PROTECTION_L          (92),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (90),
		.PKT_DEST_ID_L             (88),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (7),
		.ST_DATA_W                 (104),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) performance_counter_0_control_slave_agent (
		.clk                     (altpll_0_c0_clk),                                                      //             clk.clk
		.reset                   (performance_counter_0_reset_reset_bridge_in_reset_reset),              //       clk_reset.reset
		.m0_address              (performance_counter_0_control_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (performance_counter_0_control_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (performance_counter_0_control_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (performance_counter_0_control_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (performance_counter_0_control_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (performance_counter_0_control_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (performance_counter_0_control_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (performance_counter_0_control_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (performance_counter_0_control_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (performance_counter_0_control_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (performance_counter_0_control_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (performance_counter_0_control_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (performance_counter_0_control_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (performance_counter_0_control_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (performance_counter_0_control_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (performance_counter_0_control_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_001_src_ready),                                                //              cp.ready
		.cp_valid                (cmd_mux_001_src_valid),                                                //                .valid
		.cp_data                 (cmd_mux_001_src_data),                                                 //                .data
		.cp_startofpacket        (cmd_mux_001_src_startofpacket),                                        //                .startofpacket
		.cp_endofpacket          (cmd_mux_001_src_endofpacket),                                          //                .endofpacket
		.cp_channel              (cmd_mux_001_src_channel),                                              //                .channel
		.rf_sink_ready           (performance_counter_0_control_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (performance_counter_0_control_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (performance_counter_0_control_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (performance_counter_0_control_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (performance_counter_0_control_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (performance_counter_0_control_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (performance_counter_0_control_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (performance_counter_0_control_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (performance_counter_0_control_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (performance_counter_0_control_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                                    //                .error
		.rdata_fifo_src_ready    (performance_counter_0_control_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (performance_counter_0_control_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (performance_counter_0_control_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (105),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) performance_counter_0_control_slave_agent_rsp_fifo (
		.clk               (altpll_0_c0_clk),                                                      //       clk.clk
		.reset             (performance_counter_0_reset_reset_bridge_in_reset_reset),              // clk_reset.reset
		.in_data           (performance_counter_0_control_slave_agent_rf_source_data),             //        in.data
		.in_valid          (performance_counter_0_control_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (performance_counter_0_control_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (performance_counter_0_control_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (performance_counter_0_control_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (performance_counter_0_control_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (performance_counter_0_control_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (performance_counter_0_control_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (performance_counter_0_control_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (performance_counter_0_control_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                // (terminated)
		.csr_read          (1'b0),                                                                 // (terminated)
		.csr_write         (1'b0),                                                                 // (terminated)
		.csr_readdata      (),                                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                 // (terminated)
		.almost_full_data  (),                                                                     // (terminated)
		.almost_empty_data (),                                                                     // (terminated)
		.in_empty          (1'b0),                                                                 // (terminated)
		.out_empty         (),                                                                     // (terminated)
		.in_error          (1'b0),                                                                 // (terminated)
		.out_error         (),                                                                     // (terminated)
		.in_channel        (1'b0),                                                                 // (terminated)
		.out_channel       ()                                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (103),
		.PKT_ORI_BURST_SIZE_L      (101),
		.PKT_RESPONSE_STATUS_H     (100),
		.PKT_RESPONSE_STATUS_L     (99),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (94),
		.PKT_PROTECTION_L          (92),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (90),
		.PKT_DEST_ID_L             (88),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (7),
		.ST_DATA_W                 (104),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) manager_debug_mem_slave_agent (
		.clk                     (altpll_0_c0_clk),                                          //             clk.clk
		.reset                   (manager_reset_reset_bridge_in_reset_reset),                //       clk_reset.reset
		.m0_address              (manager_debug_mem_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (manager_debug_mem_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (manager_debug_mem_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (manager_debug_mem_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (manager_debug_mem_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (manager_debug_mem_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (manager_debug_mem_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (manager_debug_mem_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (manager_debug_mem_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (manager_debug_mem_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (manager_debug_mem_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (manager_debug_mem_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (manager_debug_mem_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (manager_debug_mem_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (manager_debug_mem_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (manager_debug_mem_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_002_src_ready),                                    //              cp.ready
		.cp_valid                (cmd_mux_002_src_valid),                                    //                .valid
		.cp_data                 (cmd_mux_002_src_data),                                     //                .data
		.cp_startofpacket        (cmd_mux_002_src_startofpacket),                            //                .startofpacket
		.cp_endofpacket          (cmd_mux_002_src_endofpacket),                              //                .endofpacket
		.cp_channel              (cmd_mux_002_src_channel),                                  //                .channel
		.rf_sink_ready           (manager_debug_mem_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (manager_debug_mem_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (manager_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (manager_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (manager_debug_mem_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (manager_debug_mem_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (manager_debug_mem_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (manager_debug_mem_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (manager_debug_mem_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (manager_debug_mem_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                        // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                        //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                         //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                        //                .error
		.rdata_fifo_src_ready    (manager_debug_mem_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (manager_debug_mem_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (manager_debug_mem_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                      //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (105),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) manager_debug_mem_slave_agent_rsp_fifo (
		.clk               (altpll_0_c0_clk),                                          //       clk.clk
		.reset             (manager_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_data           (manager_debug_mem_slave_agent_rf_source_data),             //        in.data
		.in_valid          (manager_debug_mem_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (manager_debug_mem_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (manager_debug_mem_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (manager_debug_mem_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (manager_debug_mem_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (manager_debug_mem_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (manager_debug_mem_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (manager_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (manager_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                    // (terminated)
		.csr_read          (1'b0),                                                     // (terminated)
		.csr_write         (1'b0),                                                     // (terminated)
		.csr_readdata      (),                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                     // (terminated)
		.almost_full_data  (),                                                         // (terminated)
		.almost_empty_data (),                                                         // (terminated)
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.in_error          (1'b0),                                                     // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_channel        (1'b0),                                                     // (terminated)
		.out_channel       ()                                                          // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (103),
		.PKT_ORI_BURST_SIZE_L      (101),
		.PKT_RESPONSE_STATUS_H     (100),
		.PKT_RESPONSE_STATUS_L     (99),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (94),
		.PKT_PROTECTION_L          (92),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (90),
		.PKT_DEST_ID_L             (88),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (7),
		.ST_DATA_W                 (104),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) shared_ocm_s1_agent (
		.clk                     (altpll_0_c0_clk),                                //             clk.clk
		.reset                   (manager_reset_reset_bridge_in_reset_reset),      //       clk_reset.reset
		.m0_address              (shared_ocm_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (shared_ocm_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (shared_ocm_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (shared_ocm_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (shared_ocm_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (shared_ocm_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (shared_ocm_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (shared_ocm_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (shared_ocm_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (shared_ocm_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (shared_ocm_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (shared_ocm_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (shared_ocm_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (shared_ocm_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (shared_ocm_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (shared_ocm_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_003_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_003_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_003_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_003_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_003_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_003_src_channel),                        //                .channel
		.rf_sink_ready           (shared_ocm_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (shared_ocm_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (shared_ocm_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (shared_ocm_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (shared_ocm_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (shared_ocm_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (shared_ocm_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (shared_ocm_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (shared_ocm_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (shared_ocm_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),              //                .error
		.rdata_fifo_src_ready    (shared_ocm_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (shared_ocm_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (shared_ocm_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (105),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) shared_ocm_s1_agent_rsp_fifo (
		.clk               (altpll_0_c0_clk),                                //       clk.clk
		.reset             (manager_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_data           (shared_ocm_s1_agent_rf_source_data),             //        in.data
		.in_valid          (shared_ocm_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (shared_ocm_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (shared_ocm_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (shared_ocm_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (shared_ocm_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (shared_ocm_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (shared_ocm_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (shared_ocm_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (shared_ocm_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (85),
		.PKT_ORI_BURST_SIZE_L      (83),
		.PKT_RESPONSE_STATUS_H     (82),
		.PKT_RESPONSE_STATUS_L     (81),
		.PKT_BURST_SIZE_H          (60),
		.PKT_BURST_SIZE_L          (58),
		.PKT_TRANS_LOCK            (50),
		.PKT_BEGIN_BURST           (65),
		.PKT_PROTECTION_H          (76),
		.PKT_PROTECTION_L          (74),
		.PKT_BURSTWRAP_H           (57),
		.PKT_BURSTWRAP_L           (55),
		.PKT_BYTE_CNT_H            (54),
		.PKT_BYTE_CNT_L            (52),
		.PKT_ADDR_H                (45),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (46),
		.PKT_TRANS_POSTED          (47),
		.PKT_TRANS_WRITE           (48),
		.PKT_TRANS_READ            (49),
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_SRC_ID_H              (69),
		.PKT_SRC_ID_L              (67),
		.PKT_DEST_ID_H             (72),
		.PKT_DEST_ID_L             (70),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (7),
		.ST_DATA_W                 (86),
		.AVS_BURSTCOUNT_W          (2),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sdram_s1_agent (
		.clk                     (altpll_0_c0_clk),                              //             clk.clk
		.reset                   (manager_reset_reset_bridge_in_reset_reset),    //       clk_reset.reset
		.m0_address              (sdram_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (sdram_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (sdram_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (sdram_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (sdram_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (sdram_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (sdram_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (sdram_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (sdram_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (sdram_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (sdram_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (sdram_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (sdram_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (sdram_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (sdram_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (sdram_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (sdram_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (sdram_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (sdram_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (sdram_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (sdram_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (sdram_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (sdram_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (sdram_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (sdram_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (sdram_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (sdram_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (sdram_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (sdram_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (sdram_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (sdram_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (sdram_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_004_out_0_ready),            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_004_out_0_valid),            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_004_out_0_data),             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_004_out_0_error),            //                .error
		.rdata_fifo_src_ready    (sdram_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sdram_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (sdram_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (87),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sdram_s1_agent_rsp_fifo (
		.clk               (altpll_0_c0_clk),                           //       clk.clk
		.reset             (manager_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sdram_s1_agent_rf_source_data),             //        in.data
		.in_valid          (sdram_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (sdram_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sdram_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sdram_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sdram_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sdram_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sdram_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sdram_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sdram_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                     // (terminated)
		.csr_read          (1'b0),                                      // (terminated)
		.csr_write         (1'b0),                                      // (terminated)
		.csr_readdata      (),                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),      // (terminated)
		.almost_full_data  (),                                          // (terminated)
		.almost_empty_data (),                                          // (terminated)
		.in_empty          (1'b0),                                      // (terminated)
		.out_empty         (),                                          // (terminated)
		.in_error          (1'b0),                                      // (terminated)
		.out_error         (),                                          // (terminated)
		.in_channel        (1'b0),                                      // (terminated)
		.out_channel       ()                                           // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (18),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sdram_s1_agent_rdata_fifo (
		.clk               (altpll_0_c0_clk),                           //       clk.clk
		.reset             (manager_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sdram_s1_agent_rdata_fifo_src_data),        //        in.data
		.in_valid          (sdram_s1_agent_rdata_fifo_src_valid),       //          .valid
		.in_ready          (sdram_s1_agent_rdata_fifo_src_ready),       //          .ready
		.out_data          (sdram_s1_agent_rdata_fifo_out_data),        //       out.data
		.out_valid         (sdram_s1_agent_rdata_fifo_out_valid),       //          .valid
		.out_ready         (sdram_s1_agent_rdata_fifo_out_ready),       //          .ready
		.csr_address       (2'b00),                                     // (terminated)
		.csr_read          (1'b0),                                      // (terminated)
		.csr_write         (1'b0),                                      // (terminated)
		.csr_readdata      (),                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),      // (terminated)
		.almost_full_data  (),                                          // (terminated)
		.almost_empty_data (),                                          // (terminated)
		.in_startofpacket  (1'b0),                                      // (terminated)
		.in_endofpacket    (1'b0),                                      // (terminated)
		.out_startofpacket (),                                          // (terminated)
		.out_endofpacket   (),                                          // (terminated)
		.in_empty          (1'b0),                                      // (terminated)
		.out_empty         (),                                          // (terminated)
		.in_error          (1'b0),                                      // (terminated)
		.out_error         (),                                          // (terminated)
		.in_channel        (1'b0),                                      // (terminated)
		.out_channel       ()                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (103),
		.PKT_ORI_BURST_SIZE_L      (101),
		.PKT_RESPONSE_STATUS_H     (100),
		.PKT_RESPONSE_STATUS_L     (99),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (94),
		.PKT_PROTECTION_L          (92),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (90),
		.PKT_DEST_ID_L             (88),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (7),
		.ST_DATA_W                 (104),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) shared_ocm_mutex_s1_agent (
		.clk                     (clk_0_clk_clk),                                        //             clk.clk
		.reset                   (shared_ocm_mutex_reset_reset_bridge_in_reset_reset),   //       clk_reset.reset
		.m0_address              (shared_ocm_mutex_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (shared_ocm_mutex_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (shared_ocm_mutex_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (shared_ocm_mutex_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (shared_ocm_mutex_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (shared_ocm_mutex_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (shared_ocm_mutex_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (shared_ocm_mutex_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (shared_ocm_mutex_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (shared_ocm_mutex_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (shared_ocm_mutex_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (shared_ocm_mutex_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (shared_ocm_mutex_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (shared_ocm_mutex_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (shared_ocm_mutex_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (shared_ocm_mutex_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_005_src_ready),                                //              cp.ready
		.cp_valid                (cmd_mux_005_src_valid),                                //                .valid
		.cp_data                 (cmd_mux_005_src_data),                                 //                .data
		.cp_startofpacket        (cmd_mux_005_src_startofpacket),                        //                .startofpacket
		.cp_endofpacket          (cmd_mux_005_src_endofpacket),                          //                .endofpacket
		.cp_channel              (cmd_mux_005_src_channel),                              //                .channel
		.rf_sink_ready           (shared_ocm_mutex_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (shared_ocm_mutex_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (shared_ocm_mutex_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (shared_ocm_mutex_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (shared_ocm_mutex_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (shared_ocm_mutex_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (shared_ocm_mutex_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (shared_ocm_mutex_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (shared_ocm_mutex_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (shared_ocm_mutex_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_005_out_0_ready),                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_005_out_0_valid),                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_005_out_0_data),                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_005_out_0_error),                    //                .error
		.rdata_fifo_src_ready    (shared_ocm_mutex_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (shared_ocm_mutex_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (shared_ocm_mutex_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (105),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) shared_ocm_mutex_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                        //       clk.clk
		.reset             (shared_ocm_mutex_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (shared_ocm_mutex_s1_agent_rf_source_data),             //        in.data
		.in_valid          (shared_ocm_mutex_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (shared_ocm_mutex_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (shared_ocm_mutex_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (shared_ocm_mutex_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (shared_ocm_mutex_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (shared_ocm_mutex_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (shared_ocm_mutex_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (shared_ocm_mutex_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (shared_ocm_mutex_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) shared_ocm_mutex_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                      //       clk.clk
		.reset             (shared_ocm_mutex_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (shared_ocm_mutex_s1_agent_rdata_fifo_src_data),      //        in.data
		.in_valid          (shared_ocm_mutex_s1_agent_rdata_fifo_src_valid),     //          .valid
		.in_ready          (shared_ocm_mutex_s1_agent_rdata_fifo_src_ready),     //          .ready
		.out_data          (shared_ocm_mutex_s1_agent_rdata_fifo_out_data),      //       out.data
		.out_valid         (shared_ocm_mutex_s1_agent_rdata_fifo_out_valid),     //          .valid
		.out_ready         (shared_ocm_mutex_s1_agent_rdata_fifo_out_ready),     //          .ready
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_startofpacket  (1'b0),                                               // (terminated)
		.in_endofpacket    (1'b0),                                               // (terminated)
		.out_startofpacket (),                                                   // (terminated)
		.out_endofpacket   (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (103),
		.PKT_ORI_BURST_SIZE_L      (101),
		.PKT_RESPONSE_STATUS_H     (100),
		.PKT_RESPONSE_STATUS_L     (99),
		.PKT_BURST_SIZE_H          (78),
		.PKT_BURST_SIZE_L          (76),
		.PKT_TRANS_LOCK            (68),
		.PKT_BEGIN_BURST           (83),
		.PKT_PROTECTION_H          (94),
		.PKT_PROTECTION_L          (92),
		.PKT_BURSTWRAP_H           (75),
		.PKT_BURSTWRAP_L           (73),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (85),
		.PKT_DEST_ID_H             (90),
		.PKT_DEST_ID_L             (88),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (7),
		.ST_DATA_W                 (104),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) shared_ocm_s2_agent (
		.clk                     (altpll_0_c0_clk),                                //             clk.clk
		.reset                   (manager_reset_reset_bridge_in_reset_reset),      //       clk_reset.reset
		.m0_address              (shared_ocm_s2_agent_m0_address),                 //              m0.address
		.m0_burstcount           (shared_ocm_s2_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (shared_ocm_s2_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (shared_ocm_s2_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (shared_ocm_s2_agent_m0_lock),                    //                .lock
		.m0_readdata             (shared_ocm_s2_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (shared_ocm_s2_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (shared_ocm_s2_agent_m0_read),                    //                .read
		.m0_waitrequest          (shared_ocm_s2_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (shared_ocm_s2_agent_m0_writedata),               //                .writedata
		.m0_write                (shared_ocm_s2_agent_m0_write),                   //                .write
		.rp_endofpacket          (shared_ocm_s2_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (shared_ocm_s2_agent_rp_ready),                   //                .ready
		.rp_valid                (shared_ocm_s2_agent_rp_valid),                   //                .valid
		.rp_data                 (shared_ocm_s2_agent_rp_data),                    //                .data
		.rp_startofpacket        (shared_ocm_s2_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_006_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_006_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_006_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_006_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_006_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_006_src_channel),                        //                .channel
		.rf_sink_ready           (shared_ocm_s2_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (shared_ocm_s2_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (shared_ocm_s2_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (shared_ocm_s2_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (shared_ocm_s2_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (shared_ocm_s2_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (shared_ocm_s2_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (shared_ocm_s2_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (shared_ocm_s2_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (shared_ocm_s2_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_006_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_006_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_006_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_006_out_0_error),              //                .error
		.rdata_fifo_src_ready    (shared_ocm_s2_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (shared_ocm_s2_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (shared_ocm_s2_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (105),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) shared_ocm_s2_agent_rsp_fifo (
		.clk               (altpll_0_c0_clk),                                //       clk.clk
		.reset             (manager_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_data           (shared_ocm_s2_agent_rf_source_data),             //        in.data
		.in_valid          (shared_ocm_s2_agent_rf_source_valid),            //          .valid
		.in_ready          (shared_ocm_s2_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (shared_ocm_s2_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (shared_ocm_s2_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (shared_ocm_s2_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (shared_ocm_s2_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (shared_ocm_s2_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (shared_ocm_s2_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (shared_ocm_s2_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	system_mm_interconnect_0_router router (
		.sink_ready         (manager_data_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (manager_data_master_agent_cp_valid),         //          .valid
		.sink_data          (manager_data_master_agent_cp_data),          //          .data
		.sink_startofpacket (manager_data_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (manager_data_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (altpll_0_c0_clk),                            //       clk.clk
		.reset              (manager_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_src_ready),                           //       src.ready
		.src_valid          (router_src_valid),                           //          .valid
		.src_data           (router_src_data),                            //          .data
		.src_channel        (router_src_channel),                         //          .channel
		.src_startofpacket  (router_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                      //          .endofpacket
	);

	system_mm_interconnect_0_router_001 router_001 (
		.sink_ready         (manager_instruction_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (manager_instruction_master_agent_cp_valid),         //          .valid
		.sink_data          (manager_instruction_master_agent_cp_data),          //          .data
		.sink_startofpacket (manager_instruction_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (manager_instruction_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (altpll_0_c0_clk),                                   //       clk.clk
		.reset              (manager_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.src_ready          (router_001_src_ready),                              //       src.ready
		.src_valid          (router_001_src_valid),                              //          .valid
		.src_data           (router_001_src_data),                               //          .data
		.src_channel        (router_001_src_channel),                            //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                         //          .endofpacket
	);

	system_mm_interconnect_0_router_002 router_002 (
		.sink_ready         (worker_0_worker_out_agent_cp_ready),                      //      sink.ready
		.sink_valid         (worker_0_worker_out_agent_cp_valid),                      //          .valid
		.sink_data          (worker_0_worker_out_agent_cp_data),                       //          .data
		.sink_startofpacket (worker_0_worker_out_agent_cp_startofpacket),              //          .startofpacket
		.sink_endofpacket   (worker_0_worker_out_agent_cp_endofpacket),                //          .endofpacket
		.clk                (altpll_0_c0_clk),                                         //       clk.clk
		.reset              (performance_counter_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_002_src_ready),                                    //       src.ready
		.src_valid          (router_002_src_valid),                                    //          .valid
		.src_data           (router_002_src_data),                                     //          .data
		.src_channel        (router_002_src_channel),                                  //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                            //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                               //          .endofpacket
	);

	system_mm_interconnect_0_router_002 router_003 (
		.sink_ready         (worker_1_worker_out_agent_cp_ready),                      //      sink.ready
		.sink_valid         (worker_1_worker_out_agent_cp_valid),                      //          .valid
		.sink_data          (worker_1_worker_out_agent_cp_data),                       //          .data
		.sink_startofpacket (worker_1_worker_out_agent_cp_startofpacket),              //          .startofpacket
		.sink_endofpacket   (worker_1_worker_out_agent_cp_endofpacket),                //          .endofpacket
		.clk                (altpll_0_c0_clk),                                         //       clk.clk
		.reset              (performance_counter_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_003_src_ready),                                    //       src.ready
		.src_valid          (router_003_src_valid),                                    //          .valid
		.src_data           (router_003_src_data),                                     //          .data
		.src_channel        (router_003_src_channel),                                  //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                            //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                               //          .endofpacket
	);

	system_mm_interconnect_0_router_002 router_004 (
		.sink_ready         (worker_2_worker_out_agent_cp_ready),                      //      sink.ready
		.sink_valid         (worker_2_worker_out_agent_cp_valid),                      //          .valid
		.sink_data          (worker_2_worker_out_agent_cp_data),                       //          .data
		.sink_startofpacket (worker_2_worker_out_agent_cp_startofpacket),              //          .startofpacket
		.sink_endofpacket   (worker_2_worker_out_agent_cp_endofpacket),                //          .endofpacket
		.clk                (altpll_0_c0_clk),                                         //       clk.clk
		.reset              (performance_counter_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_004_src_ready),                                    //       src.ready
		.src_valid          (router_004_src_valid),                                    //          .valid
		.src_data           (router_004_src_data),                                     //          .data
		.src_channel        (router_004_src_channel),                                  //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                            //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                               //          .endofpacket
	);

	system_mm_interconnect_0_router_002 router_005 (
		.sink_ready         (worker_3_worker_out_agent_cp_ready),                      //      sink.ready
		.sink_valid         (worker_3_worker_out_agent_cp_valid),                      //          .valid
		.sink_data          (worker_3_worker_out_agent_cp_data),                       //          .data
		.sink_startofpacket (worker_3_worker_out_agent_cp_startofpacket),              //          .startofpacket
		.sink_endofpacket   (worker_3_worker_out_agent_cp_endofpacket),                //          .endofpacket
		.clk                (altpll_0_c0_clk),                                         //       clk.clk
		.reset              (performance_counter_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_005_src_ready),                                    //       src.ready
		.src_valid          (router_005_src_valid),                                    //          .valid
		.src_data           (router_005_src_data),                                     //          .data
		.src_channel        (router_005_src_channel),                                  //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                            //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                               //          .endofpacket
	);

	system_mm_interconnect_0_router_006 router_006 (
		.sink_ready         (manager_jtag_uart_avalon_jtag_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (manager_jtag_uart_avalon_jtag_slave_agent_rp_valid),         //          .valid
		.sink_data          (manager_jtag_uart_avalon_jtag_slave_agent_rp_data),          //          .data
		.sink_startofpacket (manager_jtag_uart_avalon_jtag_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (manager_jtag_uart_avalon_jtag_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (altpll_0_c0_clk),                                            //       clk.clk
		.reset              (manager_reset_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.src_ready          (router_006_src_ready),                                       //       src.ready
		.src_valid          (router_006_src_valid),                                       //          .valid
		.src_data           (router_006_src_data),                                        //          .data
		.src_channel        (router_006_src_channel),                                     //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                               //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                                  //          .endofpacket
	);

	system_mm_interconnect_0_router_007 router_007 (
		.sink_ready         (performance_counter_0_control_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (performance_counter_0_control_slave_agent_rp_valid),         //          .valid
		.sink_data          (performance_counter_0_control_slave_agent_rp_data),          //          .data
		.sink_startofpacket (performance_counter_0_control_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (performance_counter_0_control_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (altpll_0_c0_clk),                                            //       clk.clk
		.reset              (performance_counter_0_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.src_ready          (router_007_src_ready),                                       //       src.ready
		.src_valid          (router_007_src_valid),                                       //          .valid
		.src_data           (router_007_src_data),                                        //          .data
		.src_channel        (router_007_src_channel),                                     //          .channel
		.src_startofpacket  (router_007_src_startofpacket),                               //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                                  //          .endofpacket
	);

	system_mm_interconnect_0_router_006 router_008 (
		.sink_ready         (manager_debug_mem_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (manager_debug_mem_slave_agent_rp_valid),         //          .valid
		.sink_data          (manager_debug_mem_slave_agent_rp_data),          //          .data
		.sink_startofpacket (manager_debug_mem_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (manager_debug_mem_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (altpll_0_c0_clk),                                //       clk.clk
		.reset              (manager_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.src_ready          (router_008_src_ready),                           //       src.ready
		.src_valid          (router_008_src_valid),                           //          .valid
		.src_data           (router_008_src_data),                            //          .data
		.src_channel        (router_008_src_channel),                         //          .channel
		.src_startofpacket  (router_008_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                      //          .endofpacket
	);

	system_mm_interconnect_0_router_007 router_009 (
		.sink_ready         (shared_ocm_s1_agent_rp_ready),              //      sink.ready
		.sink_valid         (shared_ocm_s1_agent_rp_valid),              //          .valid
		.sink_data          (shared_ocm_s1_agent_rp_data),               //          .data
		.sink_startofpacket (shared_ocm_s1_agent_rp_startofpacket),      //          .startofpacket
		.sink_endofpacket   (shared_ocm_s1_agent_rp_endofpacket),        //          .endofpacket
		.clk                (altpll_0_c0_clk),                           //       clk.clk
		.reset              (manager_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_009_src_ready),                      //       src.ready
		.src_valid          (router_009_src_valid),                      //          .valid
		.src_data           (router_009_src_data),                       //          .data
		.src_channel        (router_009_src_channel),                    //          .channel
		.src_startofpacket  (router_009_src_startofpacket),              //          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)                 //          .endofpacket
	);

	system_mm_interconnect_0_router_010 router_010 (
		.sink_ready         (sdram_s1_agent_rp_ready),                   //      sink.ready
		.sink_valid         (sdram_s1_agent_rp_valid),                   //          .valid
		.sink_data          (sdram_s1_agent_rp_data),                    //          .data
		.sink_startofpacket (sdram_s1_agent_rp_startofpacket),           //          .startofpacket
		.sink_endofpacket   (sdram_s1_agent_rp_endofpacket),             //          .endofpacket
		.clk                (altpll_0_c0_clk),                           //       clk.clk
		.reset              (manager_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_010_src_ready),                      //       src.ready
		.src_valid          (router_010_src_valid),                      //          .valid
		.src_data           (router_010_src_data),                       //          .data
		.src_channel        (router_010_src_channel),                    //          .channel
		.src_startofpacket  (router_010_src_startofpacket),              //          .startofpacket
		.src_endofpacket    (router_010_src_endofpacket)                 //          .endofpacket
	);

	system_mm_interconnect_0_router_011 router_011 (
		.sink_ready         (shared_ocm_mutex_s1_agent_rp_ready),                 //      sink.ready
		.sink_valid         (shared_ocm_mutex_s1_agent_rp_valid),                 //          .valid
		.sink_data          (shared_ocm_mutex_s1_agent_rp_data),                  //          .data
		.sink_startofpacket (shared_ocm_mutex_s1_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (shared_ocm_mutex_s1_agent_rp_endofpacket),           //          .endofpacket
		.clk                (clk_0_clk_clk),                                      //       clk.clk
		.reset              (shared_ocm_mutex_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_011_src_ready),                               //       src.ready
		.src_valid          (router_011_src_valid),                               //          .valid
		.src_data           (router_011_src_data),                                //          .data
		.src_channel        (router_011_src_channel),                             //          .channel
		.src_startofpacket  (router_011_src_startofpacket),                       //          .startofpacket
		.src_endofpacket    (router_011_src_endofpacket)                          //          .endofpacket
	);

	system_mm_interconnect_0_router_012 router_012 (
		.sink_ready         (shared_ocm_s2_agent_rp_ready),              //      sink.ready
		.sink_valid         (shared_ocm_s2_agent_rp_valid),              //          .valid
		.sink_data          (shared_ocm_s2_agent_rp_data),               //          .data
		.sink_startofpacket (shared_ocm_s2_agent_rp_startofpacket),      //          .startofpacket
		.sink_endofpacket   (shared_ocm_s2_agent_rp_endofpacket),        //          .endofpacket
		.clk                (altpll_0_c0_clk),                           //       clk.clk
		.reset              (manager_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_012_src_ready),                      //       src.ready
		.src_valid          (router_012_src_valid),                      //          .valid
		.src_data           (router_012_src_data),                       //          .data
		.src_channel        (router_012_src_channel),                    //          .channel
		.src_startofpacket  (router_012_src_startofpacket),              //          .startofpacket
		.src_endofpacket    (router_012_src_endofpacket)                 //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (90),
		.PKT_DEST_ID_L             (88),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (85),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.MAX_OUTSTANDING_RESPONSES (9),
		.PIPELINED                 (0),
		.ST_DATA_W                 (104),
		.ST_CHANNEL_W              (7),
		.VALID_WIDTH               (7),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) manager_data_master_limiter (
		.clk                    (altpll_0_c0_clk),                                   //       clk.clk
		.reset                  (manager_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                  //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                  //          .valid
		.cmd_sink_data          (router_src_data),                                   //          .data
		.cmd_sink_channel       (router_src_channel),                                //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                          //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                            //          .endofpacket
		.cmd_src_ready          (manager_data_master_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (manager_data_master_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (manager_data_master_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (manager_data_master_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (manager_data_master_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                                 //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                                 //          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                               //          .channel
		.rsp_sink_data          (rsp_mux_src_data),                                  //          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                         //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                           //          .endofpacket
		.rsp_src_ready          (manager_data_master_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (manager_data_master_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (manager_data_master_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (manager_data_master_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (manager_data_master_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (manager_data_master_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (manager_data_master_limiter_cmd_valid_data)         // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (90),
		.PKT_DEST_ID_L             (88),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (85),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.MAX_OUTSTANDING_RESPONSES (9),
		.PIPELINED                 (0),
		.ST_DATA_W                 (104),
		.ST_CHANNEL_W              (7),
		.VALID_WIDTH               (7),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) manager_instruction_master_limiter (
		.clk                    (altpll_0_c0_clk),                                          //       clk.clk
		.reset                  (manager_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.cmd_sink_ready         (router_001_src_ready),                                     //  cmd_sink.ready
		.cmd_sink_valid         (router_001_src_valid),                                     //          .valid
		.cmd_sink_data          (router_001_src_data),                                      //          .data
		.cmd_sink_channel       (router_001_src_channel),                                   //          .channel
		.cmd_sink_startofpacket (router_001_src_startofpacket),                             //          .startofpacket
		.cmd_sink_endofpacket   (router_001_src_endofpacket),                               //          .endofpacket
		.cmd_src_ready          (manager_instruction_master_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (manager_instruction_master_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (manager_instruction_master_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (manager_instruction_master_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (manager_instruction_master_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_001_src_ready),                                    //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_001_src_valid),                                    //          .valid
		.rsp_sink_channel       (rsp_mux_001_src_channel),                                  //          .channel
		.rsp_sink_data          (rsp_mux_001_src_data),                                     //          .data
		.rsp_sink_startofpacket (rsp_mux_001_src_startofpacket),                            //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_001_src_endofpacket),                              //          .endofpacket
		.rsp_src_ready          (manager_instruction_master_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (manager_instruction_master_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (manager_instruction_master_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (manager_instruction_master_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (manager_instruction_master_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (manager_instruction_master_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (manager_instruction_master_limiter_cmd_valid_data)         // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (90),
		.PKT_DEST_ID_L             (88),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (85),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.MAX_OUTSTANDING_RESPONSES (9),
		.PIPELINED                 (0),
		.ST_DATA_W                 (104),
		.ST_CHANNEL_W              (7),
		.VALID_WIDTH               (7),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) worker_0_worker_out_limiter (
		.clk                    (altpll_0_c0_clk),                                         //       clk.clk
		.reset                  (performance_counter_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_002_src_ready),                                    //  cmd_sink.ready
		.cmd_sink_valid         (router_002_src_valid),                                    //          .valid
		.cmd_sink_data          (router_002_src_data),                                     //          .data
		.cmd_sink_channel       (router_002_src_channel),                                  //          .channel
		.cmd_sink_startofpacket (router_002_src_startofpacket),                            //          .startofpacket
		.cmd_sink_endofpacket   (router_002_src_endofpacket),                              //          .endofpacket
		.cmd_src_ready          (worker_0_worker_out_limiter_cmd_src_ready),               //   cmd_src.ready
		.cmd_src_data           (worker_0_worker_out_limiter_cmd_src_data),                //          .data
		.cmd_src_channel        (worker_0_worker_out_limiter_cmd_src_channel),             //          .channel
		.cmd_src_startofpacket  (worker_0_worker_out_limiter_cmd_src_startofpacket),       //          .startofpacket
		.cmd_src_endofpacket    (worker_0_worker_out_limiter_cmd_src_endofpacket),         //          .endofpacket
		.rsp_sink_ready         (rsp_mux_002_src_ready),                                   //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_002_src_valid),                                   //          .valid
		.rsp_sink_channel       (rsp_mux_002_src_channel),                                 //          .channel
		.rsp_sink_data          (rsp_mux_002_src_data),                                    //          .data
		.rsp_sink_startofpacket (rsp_mux_002_src_startofpacket),                           //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_002_src_endofpacket),                             //          .endofpacket
		.rsp_src_ready          (worker_0_worker_out_limiter_rsp_src_ready),               //   rsp_src.ready
		.rsp_src_valid          (worker_0_worker_out_limiter_rsp_src_valid),               //          .valid
		.rsp_src_data           (worker_0_worker_out_limiter_rsp_src_data),                //          .data
		.rsp_src_channel        (worker_0_worker_out_limiter_rsp_src_channel),             //          .channel
		.rsp_src_startofpacket  (worker_0_worker_out_limiter_rsp_src_startofpacket),       //          .startofpacket
		.rsp_src_endofpacket    (worker_0_worker_out_limiter_rsp_src_endofpacket),         //          .endofpacket
		.cmd_src_valid          (worker_0_worker_out_limiter_cmd_valid_data)               // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (90),
		.PKT_DEST_ID_L             (88),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (85),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.MAX_OUTSTANDING_RESPONSES (9),
		.PIPELINED                 (0),
		.ST_DATA_W                 (104),
		.ST_CHANNEL_W              (7),
		.VALID_WIDTH               (7),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) worker_1_worker_out_limiter (
		.clk                    (altpll_0_c0_clk),                                         //       clk.clk
		.reset                  (performance_counter_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_003_src_ready),                                    //  cmd_sink.ready
		.cmd_sink_valid         (router_003_src_valid),                                    //          .valid
		.cmd_sink_data          (router_003_src_data),                                     //          .data
		.cmd_sink_channel       (router_003_src_channel),                                  //          .channel
		.cmd_sink_startofpacket (router_003_src_startofpacket),                            //          .startofpacket
		.cmd_sink_endofpacket   (router_003_src_endofpacket),                              //          .endofpacket
		.cmd_src_ready          (worker_1_worker_out_limiter_cmd_src_ready),               //   cmd_src.ready
		.cmd_src_data           (worker_1_worker_out_limiter_cmd_src_data),                //          .data
		.cmd_src_channel        (worker_1_worker_out_limiter_cmd_src_channel),             //          .channel
		.cmd_src_startofpacket  (worker_1_worker_out_limiter_cmd_src_startofpacket),       //          .startofpacket
		.cmd_src_endofpacket    (worker_1_worker_out_limiter_cmd_src_endofpacket),         //          .endofpacket
		.rsp_sink_ready         (rsp_mux_003_src_ready),                                   //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_003_src_valid),                                   //          .valid
		.rsp_sink_channel       (rsp_mux_003_src_channel),                                 //          .channel
		.rsp_sink_data          (rsp_mux_003_src_data),                                    //          .data
		.rsp_sink_startofpacket (rsp_mux_003_src_startofpacket),                           //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_003_src_endofpacket),                             //          .endofpacket
		.rsp_src_ready          (worker_1_worker_out_limiter_rsp_src_ready),               //   rsp_src.ready
		.rsp_src_valid          (worker_1_worker_out_limiter_rsp_src_valid),               //          .valid
		.rsp_src_data           (worker_1_worker_out_limiter_rsp_src_data),                //          .data
		.rsp_src_channel        (worker_1_worker_out_limiter_rsp_src_channel),             //          .channel
		.rsp_src_startofpacket  (worker_1_worker_out_limiter_rsp_src_startofpacket),       //          .startofpacket
		.rsp_src_endofpacket    (worker_1_worker_out_limiter_rsp_src_endofpacket),         //          .endofpacket
		.cmd_src_valid          (worker_1_worker_out_limiter_cmd_valid_data)               // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (90),
		.PKT_DEST_ID_L             (88),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (85),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.MAX_OUTSTANDING_RESPONSES (9),
		.PIPELINED                 (0),
		.ST_DATA_W                 (104),
		.ST_CHANNEL_W              (7),
		.VALID_WIDTH               (7),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) worker_2_worker_out_limiter (
		.clk                    (altpll_0_c0_clk),                                         //       clk.clk
		.reset                  (performance_counter_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_004_src_ready),                                    //  cmd_sink.ready
		.cmd_sink_valid         (router_004_src_valid),                                    //          .valid
		.cmd_sink_data          (router_004_src_data),                                     //          .data
		.cmd_sink_channel       (router_004_src_channel),                                  //          .channel
		.cmd_sink_startofpacket (router_004_src_startofpacket),                            //          .startofpacket
		.cmd_sink_endofpacket   (router_004_src_endofpacket),                              //          .endofpacket
		.cmd_src_ready          (worker_2_worker_out_limiter_cmd_src_ready),               //   cmd_src.ready
		.cmd_src_data           (worker_2_worker_out_limiter_cmd_src_data),                //          .data
		.cmd_src_channel        (worker_2_worker_out_limiter_cmd_src_channel),             //          .channel
		.cmd_src_startofpacket  (worker_2_worker_out_limiter_cmd_src_startofpacket),       //          .startofpacket
		.cmd_src_endofpacket    (worker_2_worker_out_limiter_cmd_src_endofpacket),         //          .endofpacket
		.rsp_sink_ready         (rsp_mux_004_src_ready),                                   //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_004_src_valid),                                   //          .valid
		.rsp_sink_channel       (rsp_mux_004_src_channel),                                 //          .channel
		.rsp_sink_data          (rsp_mux_004_src_data),                                    //          .data
		.rsp_sink_startofpacket (rsp_mux_004_src_startofpacket),                           //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_004_src_endofpacket),                             //          .endofpacket
		.rsp_src_ready          (worker_2_worker_out_limiter_rsp_src_ready),               //   rsp_src.ready
		.rsp_src_valid          (worker_2_worker_out_limiter_rsp_src_valid),               //          .valid
		.rsp_src_data           (worker_2_worker_out_limiter_rsp_src_data),                //          .data
		.rsp_src_channel        (worker_2_worker_out_limiter_rsp_src_channel),             //          .channel
		.rsp_src_startofpacket  (worker_2_worker_out_limiter_rsp_src_startofpacket),       //          .startofpacket
		.rsp_src_endofpacket    (worker_2_worker_out_limiter_rsp_src_endofpacket),         //          .endofpacket
		.cmd_src_valid          (worker_2_worker_out_limiter_cmd_valid_data)               // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (90),
		.PKT_DEST_ID_L             (88),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (85),
		.PKT_BYTE_CNT_H            (72),
		.PKT_BYTE_CNT_L            (70),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.MAX_OUTSTANDING_RESPONSES (9),
		.PIPELINED                 (0),
		.ST_DATA_W                 (104),
		.ST_CHANNEL_W              (7),
		.VALID_WIDTH               (7),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) worker_3_worker_out_limiter (
		.clk                    (altpll_0_c0_clk),                                         //       clk.clk
		.reset                  (performance_counter_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_005_src_ready),                                    //  cmd_sink.ready
		.cmd_sink_valid         (router_005_src_valid),                                    //          .valid
		.cmd_sink_data          (router_005_src_data),                                     //          .data
		.cmd_sink_channel       (router_005_src_channel),                                  //          .channel
		.cmd_sink_startofpacket (router_005_src_startofpacket),                            //          .startofpacket
		.cmd_sink_endofpacket   (router_005_src_endofpacket),                              //          .endofpacket
		.cmd_src_ready          (worker_3_worker_out_limiter_cmd_src_ready),               //   cmd_src.ready
		.cmd_src_data           (worker_3_worker_out_limiter_cmd_src_data),                //          .data
		.cmd_src_channel        (worker_3_worker_out_limiter_cmd_src_channel),             //          .channel
		.cmd_src_startofpacket  (worker_3_worker_out_limiter_cmd_src_startofpacket),       //          .startofpacket
		.cmd_src_endofpacket    (worker_3_worker_out_limiter_cmd_src_endofpacket),         //          .endofpacket
		.rsp_sink_ready         (rsp_mux_005_src_ready),                                   //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_005_src_valid),                                   //          .valid
		.rsp_sink_channel       (rsp_mux_005_src_channel),                                 //          .channel
		.rsp_sink_data          (rsp_mux_005_src_data),                                    //          .data
		.rsp_sink_startofpacket (rsp_mux_005_src_startofpacket),                           //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_005_src_endofpacket),                             //          .endofpacket
		.rsp_src_ready          (worker_3_worker_out_limiter_rsp_src_ready),               //   rsp_src.ready
		.rsp_src_valid          (worker_3_worker_out_limiter_rsp_src_valid),               //          .valid
		.rsp_src_data           (worker_3_worker_out_limiter_rsp_src_data),                //          .data
		.rsp_src_channel        (worker_3_worker_out_limiter_rsp_src_channel),             //          .channel
		.rsp_src_startofpacket  (worker_3_worker_out_limiter_rsp_src_startofpacket),       //          .startofpacket
		.rsp_src_endofpacket    (worker_3_worker_out_limiter_rsp_src_endofpacket),         //          .endofpacket
		.cmd_src_valid          (worker_3_worker_out_limiter_cmd_valid_data)               // cmd_valid.data
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (45),
		.PKT_ADDR_L                (18),
		.PKT_BEGIN_BURST           (65),
		.PKT_BYTE_CNT_H            (54),
		.PKT_BYTE_CNT_L            (52),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_BURST_SIZE_H          (60),
		.PKT_BURST_SIZE_L          (58),
		.PKT_BURST_TYPE_H          (62),
		.PKT_BURST_TYPE_L          (61),
		.PKT_BURSTWRAP_H           (57),
		.PKT_BURSTWRAP_L           (55),
		.PKT_TRANS_COMPRESSED_READ (46),
		.PKT_TRANS_WRITE           (48),
		.PKT_TRANS_READ            (49),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (86),
		.ST_CHANNEL_W              (7),
		.OUT_BYTE_CNT_H            (53),
		.OUT_BURSTWRAP_H           (57),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (3),
		.BURSTWRAP_CONST_VALUE     (3),
		.ADAPTER_VERSION           ("13.1")
	) sdram_s1_burst_adapter (
		.clk                   (altpll_0_c0_clk),                              //       cr0.clk
		.reset                 (manager_reset_reset_bridge_in_reset_reset),    // cr0_reset.reset
		.sink0_valid           (sdram_s1_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (sdram_s1_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (sdram_s1_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (sdram_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (sdram_s1_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (sdram_s1_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (sdram_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (sdram_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (sdram_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (sdram_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (sdram_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (sdram_s1_burst_adapter_source0_ready)          //          .ready
	);

	system_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                (altpll_0_c0_clk),                                   //        clk.clk
		.reset              (manager_reset_reset_bridge_in_reset_reset),         //  clk_reset.reset
		.sink_ready         (manager_data_master_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel       (manager_data_master_limiter_cmd_src_channel),       //           .channel
		.sink_data          (manager_data_master_limiter_cmd_src_data),          //           .data
		.sink_startofpacket (manager_data_master_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket   (manager_data_master_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid         (manager_data_master_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready         (cmd_demux_src0_ready),                              //       src0.ready
		.src0_valid         (cmd_demux_src0_valid),                              //           .valid
		.src0_data          (cmd_demux_src0_data),                               //           .data
		.src0_channel       (cmd_demux_src0_channel),                            //           .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                      //           .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                        //           .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                              //       src1.ready
		.src1_valid         (cmd_demux_src1_valid),                              //           .valid
		.src1_data          (cmd_demux_src1_data),                               //           .data
		.src1_channel       (cmd_demux_src1_channel),                            //           .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                      //           .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket),                        //           .endofpacket
		.src2_ready         (cmd_demux_src2_ready),                              //       src2.ready
		.src2_valid         (cmd_demux_src2_valid),                              //           .valid
		.src2_data          (cmd_demux_src2_data),                               //           .data
		.src2_channel       (cmd_demux_src2_channel),                            //           .channel
		.src2_startofpacket (cmd_demux_src2_startofpacket),                      //           .startofpacket
		.src2_endofpacket   (cmd_demux_src2_endofpacket),                        //           .endofpacket
		.src3_ready         (cmd_demux_src3_ready),                              //       src3.ready
		.src3_valid         (cmd_demux_src3_valid),                              //           .valid
		.src3_data          (cmd_demux_src3_data),                               //           .data
		.src3_channel       (cmd_demux_src3_channel),                            //           .channel
		.src3_startofpacket (cmd_demux_src3_startofpacket),                      //           .startofpacket
		.src3_endofpacket   (cmd_demux_src3_endofpacket),                        //           .endofpacket
		.src4_ready         (cmd_demux_src4_ready),                              //       src4.ready
		.src4_valid         (cmd_demux_src4_valid),                              //           .valid
		.src4_data          (cmd_demux_src4_data),                               //           .data
		.src4_channel       (cmd_demux_src4_channel),                            //           .channel
		.src4_startofpacket (cmd_demux_src4_startofpacket),                      //           .startofpacket
		.src4_endofpacket   (cmd_demux_src4_endofpacket),                        //           .endofpacket
		.src5_ready         (cmd_demux_src5_ready),                              //       src5.ready
		.src5_valid         (cmd_demux_src5_valid),                              //           .valid
		.src5_data          (cmd_demux_src5_data),                               //           .data
		.src5_channel       (cmd_demux_src5_channel),                            //           .channel
		.src5_startofpacket (cmd_demux_src5_startofpacket),                      //           .startofpacket
		.src5_endofpacket   (cmd_demux_src5_endofpacket)                         //           .endofpacket
	);

	system_mm_interconnect_0_cmd_demux_001 cmd_demux_001 (
		.clk                (altpll_0_c0_clk),                                          //        clk.clk
		.reset              (manager_reset_reset_bridge_in_reset_reset),                //  clk_reset.reset
		.sink_ready         (manager_instruction_master_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel       (manager_instruction_master_limiter_cmd_src_channel),       //           .channel
		.sink_data          (manager_instruction_master_limiter_cmd_src_data),          //           .data
		.sink_startofpacket (manager_instruction_master_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket   (manager_instruction_master_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid         (manager_instruction_master_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready         (cmd_demux_001_src0_ready),                                 //       src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                                 //           .valid
		.src0_data          (cmd_demux_001_src0_data),                                  //           .data
		.src0_channel       (cmd_demux_001_src0_channel),                               //           .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                         //           .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket),                           //           .endofpacket
		.src1_ready         (cmd_demux_001_src1_ready),                                 //       src1.ready
		.src1_valid         (cmd_demux_001_src1_valid),                                 //           .valid
		.src1_data          (cmd_demux_001_src1_data),                                  //           .data
		.src1_channel       (cmd_demux_001_src1_channel),                               //           .channel
		.src1_startofpacket (cmd_demux_001_src1_startofpacket),                         //           .startofpacket
		.src1_endofpacket   (cmd_demux_001_src1_endofpacket),                           //           .endofpacket
		.src2_ready         (cmd_demux_001_src2_ready),                                 //       src2.ready
		.src2_valid         (cmd_demux_001_src2_valid),                                 //           .valid
		.src2_data          (cmd_demux_001_src2_data),                                  //           .data
		.src2_channel       (cmd_demux_001_src2_channel),                               //           .channel
		.src2_startofpacket (cmd_demux_001_src2_startofpacket),                         //           .startofpacket
		.src2_endofpacket   (cmd_demux_001_src2_endofpacket)                            //           .endofpacket
	);

	system_mm_interconnect_0_cmd_demux_001 cmd_demux_002 (
		.clk                (altpll_0_c0_clk),                                         //        clk.clk
		.reset              (performance_counter_0_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready         (worker_0_worker_out_limiter_cmd_src_ready),               //       sink.ready
		.sink_channel       (worker_0_worker_out_limiter_cmd_src_channel),             //           .channel
		.sink_data          (worker_0_worker_out_limiter_cmd_src_data),                //           .data
		.sink_startofpacket (worker_0_worker_out_limiter_cmd_src_startofpacket),       //           .startofpacket
		.sink_endofpacket   (worker_0_worker_out_limiter_cmd_src_endofpacket),         //           .endofpacket
		.sink_valid         (worker_0_worker_out_limiter_cmd_valid_data),              // sink_valid.data
		.src0_ready         (cmd_demux_002_src0_ready),                                //       src0.ready
		.src0_valid         (cmd_demux_002_src0_valid),                                //           .valid
		.src0_data          (cmd_demux_002_src0_data),                                 //           .data
		.src0_channel       (cmd_demux_002_src0_channel),                              //           .channel
		.src0_startofpacket (cmd_demux_002_src0_startofpacket),                        //           .startofpacket
		.src0_endofpacket   (cmd_demux_002_src0_endofpacket),                          //           .endofpacket
		.src1_ready         (cmd_demux_002_src1_ready),                                //       src1.ready
		.src1_valid         (cmd_demux_002_src1_valid),                                //           .valid
		.src1_data          (cmd_demux_002_src1_data),                                 //           .data
		.src1_channel       (cmd_demux_002_src1_channel),                              //           .channel
		.src1_startofpacket (cmd_demux_002_src1_startofpacket),                        //           .startofpacket
		.src1_endofpacket   (cmd_demux_002_src1_endofpacket),                          //           .endofpacket
		.src2_ready         (cmd_demux_002_src2_ready),                                //       src2.ready
		.src2_valid         (cmd_demux_002_src2_valid),                                //           .valid
		.src2_data          (cmd_demux_002_src2_data),                                 //           .data
		.src2_channel       (cmd_demux_002_src2_channel),                              //           .channel
		.src2_startofpacket (cmd_demux_002_src2_startofpacket),                        //           .startofpacket
		.src2_endofpacket   (cmd_demux_002_src2_endofpacket)                           //           .endofpacket
	);

	system_mm_interconnect_0_cmd_demux_001 cmd_demux_003 (
		.clk                (altpll_0_c0_clk),                                         //        clk.clk
		.reset              (performance_counter_0_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready         (worker_1_worker_out_limiter_cmd_src_ready),               //       sink.ready
		.sink_channel       (worker_1_worker_out_limiter_cmd_src_channel),             //           .channel
		.sink_data          (worker_1_worker_out_limiter_cmd_src_data),                //           .data
		.sink_startofpacket (worker_1_worker_out_limiter_cmd_src_startofpacket),       //           .startofpacket
		.sink_endofpacket   (worker_1_worker_out_limiter_cmd_src_endofpacket),         //           .endofpacket
		.sink_valid         (worker_1_worker_out_limiter_cmd_valid_data),              // sink_valid.data
		.src0_ready         (cmd_demux_003_src0_ready),                                //       src0.ready
		.src0_valid         (cmd_demux_003_src0_valid),                                //           .valid
		.src0_data          (cmd_demux_003_src0_data),                                 //           .data
		.src0_channel       (cmd_demux_003_src0_channel),                              //           .channel
		.src0_startofpacket (cmd_demux_003_src0_startofpacket),                        //           .startofpacket
		.src0_endofpacket   (cmd_demux_003_src0_endofpacket),                          //           .endofpacket
		.src1_ready         (cmd_demux_003_src1_ready),                                //       src1.ready
		.src1_valid         (cmd_demux_003_src1_valid),                                //           .valid
		.src1_data          (cmd_demux_003_src1_data),                                 //           .data
		.src1_channel       (cmd_demux_003_src1_channel),                              //           .channel
		.src1_startofpacket (cmd_demux_003_src1_startofpacket),                        //           .startofpacket
		.src1_endofpacket   (cmd_demux_003_src1_endofpacket),                          //           .endofpacket
		.src2_ready         (cmd_demux_003_src2_ready),                                //       src2.ready
		.src2_valid         (cmd_demux_003_src2_valid),                                //           .valid
		.src2_data          (cmd_demux_003_src2_data),                                 //           .data
		.src2_channel       (cmd_demux_003_src2_channel),                              //           .channel
		.src2_startofpacket (cmd_demux_003_src2_startofpacket),                        //           .startofpacket
		.src2_endofpacket   (cmd_demux_003_src2_endofpacket)                           //           .endofpacket
	);

	system_mm_interconnect_0_cmd_demux_001 cmd_demux_004 (
		.clk                (altpll_0_c0_clk),                                         //        clk.clk
		.reset              (performance_counter_0_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready         (worker_2_worker_out_limiter_cmd_src_ready),               //       sink.ready
		.sink_channel       (worker_2_worker_out_limiter_cmd_src_channel),             //           .channel
		.sink_data          (worker_2_worker_out_limiter_cmd_src_data),                //           .data
		.sink_startofpacket (worker_2_worker_out_limiter_cmd_src_startofpacket),       //           .startofpacket
		.sink_endofpacket   (worker_2_worker_out_limiter_cmd_src_endofpacket),         //           .endofpacket
		.sink_valid         (worker_2_worker_out_limiter_cmd_valid_data),              // sink_valid.data
		.src0_ready         (cmd_demux_004_src0_ready),                                //       src0.ready
		.src0_valid         (cmd_demux_004_src0_valid),                                //           .valid
		.src0_data          (cmd_demux_004_src0_data),                                 //           .data
		.src0_channel       (cmd_demux_004_src0_channel),                              //           .channel
		.src0_startofpacket (cmd_demux_004_src0_startofpacket),                        //           .startofpacket
		.src0_endofpacket   (cmd_demux_004_src0_endofpacket),                          //           .endofpacket
		.src1_ready         (cmd_demux_004_src1_ready),                                //       src1.ready
		.src1_valid         (cmd_demux_004_src1_valid),                                //           .valid
		.src1_data          (cmd_demux_004_src1_data),                                 //           .data
		.src1_channel       (cmd_demux_004_src1_channel),                              //           .channel
		.src1_startofpacket (cmd_demux_004_src1_startofpacket),                        //           .startofpacket
		.src1_endofpacket   (cmd_demux_004_src1_endofpacket),                          //           .endofpacket
		.src2_ready         (cmd_demux_004_src2_ready),                                //       src2.ready
		.src2_valid         (cmd_demux_004_src2_valid),                                //           .valid
		.src2_data          (cmd_demux_004_src2_data),                                 //           .data
		.src2_channel       (cmd_demux_004_src2_channel),                              //           .channel
		.src2_startofpacket (cmd_demux_004_src2_startofpacket),                        //           .startofpacket
		.src2_endofpacket   (cmd_demux_004_src2_endofpacket)                           //           .endofpacket
	);

	system_mm_interconnect_0_cmd_demux_001 cmd_demux_005 (
		.clk                (altpll_0_c0_clk),                                         //        clk.clk
		.reset              (performance_counter_0_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready         (worker_3_worker_out_limiter_cmd_src_ready),               //       sink.ready
		.sink_channel       (worker_3_worker_out_limiter_cmd_src_channel),             //           .channel
		.sink_data          (worker_3_worker_out_limiter_cmd_src_data),                //           .data
		.sink_startofpacket (worker_3_worker_out_limiter_cmd_src_startofpacket),       //           .startofpacket
		.sink_endofpacket   (worker_3_worker_out_limiter_cmd_src_endofpacket),         //           .endofpacket
		.sink_valid         (worker_3_worker_out_limiter_cmd_valid_data),              // sink_valid.data
		.src0_ready         (cmd_demux_005_src0_ready),                                //       src0.ready
		.src0_valid         (cmd_demux_005_src0_valid),                                //           .valid
		.src0_data          (cmd_demux_005_src0_data),                                 //           .data
		.src0_channel       (cmd_demux_005_src0_channel),                              //           .channel
		.src0_startofpacket (cmd_demux_005_src0_startofpacket),                        //           .startofpacket
		.src0_endofpacket   (cmd_demux_005_src0_endofpacket),                          //           .endofpacket
		.src1_ready         (cmd_demux_005_src1_ready),                                //       src1.ready
		.src1_valid         (cmd_demux_005_src1_valid),                                //           .valid
		.src1_data          (cmd_demux_005_src1_data),                                 //           .data
		.src1_channel       (cmd_demux_005_src1_channel),                              //           .channel
		.src1_startofpacket (cmd_demux_005_src1_startofpacket),                        //           .startofpacket
		.src1_endofpacket   (cmd_demux_005_src1_endofpacket),                          //           .endofpacket
		.src2_ready         (cmd_demux_005_src2_ready),                                //       src2.ready
		.src2_valid         (cmd_demux_005_src2_valid),                                //           .valid
		.src2_data          (cmd_demux_005_src2_data),                                 //           .data
		.src2_channel       (cmd_demux_005_src2_channel),                              //           .channel
		.src2_startofpacket (cmd_demux_005_src2_startofpacket),                        //           .startofpacket
		.src2_endofpacket   (cmd_demux_005_src2_endofpacket)                           //           .endofpacket
	);

	system_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (altpll_0_c0_clk),                           //       clk.clk
		.reset               (manager_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_src_valid),                         //          .valid
		.src_data            (cmd_mux_src_data),                          //          .data
		.src_channel         (cmd_mux_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                      //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                      //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                    //          .channel
		.sink0_data          (cmd_demux_src0_data),                       //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket),                //          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),                  //     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),                  //          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),                //          .channel
		.sink1_data          (cmd_demux_001_src0_data),                   //          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),          //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket)             //          .endofpacket
	);

	system_mm_interconnect_0_cmd_mux_001 cmd_mux_001 (
		.clk                 (altpll_0_c0_clk),                                         //       clk.clk
		.reset               (performance_counter_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                                   //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                                   //          .valid
		.src_data            (cmd_mux_001_src_data),                                    //          .data
		.src_channel         (cmd_mux_001_src_channel),                                 //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                           //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                             //          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                                    //     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                                    //          .valid
		.sink0_channel       (cmd_demux_src1_channel),                                  //          .channel
		.sink0_data          (cmd_demux_src1_data),                                     //          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),                            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket)                               //          .endofpacket
	);

	system_mm_interconnect_0_cmd_mux cmd_mux_002 (
		.clk                 (altpll_0_c0_clk),                           //       clk.clk
		.reset               (manager_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                     //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                     //          .valid
		.src_data            (cmd_mux_002_src_data),                      //          .data
		.src_channel         (cmd_mux_002_src_channel),                   //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),             //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),               //          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                      //     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                      //          .valid
		.sink0_channel       (cmd_demux_src2_channel),                    //          .channel
		.sink0_data          (cmd_demux_src2_data),                       //          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket),                //          .endofpacket
		.sink1_ready         (cmd_demux_001_src1_ready),                  //     sink1.ready
		.sink1_valid         (cmd_demux_001_src1_valid),                  //          .valid
		.sink1_channel       (cmd_demux_001_src1_channel),                //          .channel
		.sink1_data          (cmd_demux_001_src1_data),                   //          .data
		.sink1_startofpacket (cmd_demux_001_src1_startofpacket),          //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src1_endofpacket)             //          .endofpacket
	);

	system_mm_interconnect_0_cmd_mux_001 cmd_mux_003 (
		.clk                 (altpll_0_c0_clk),                           //       clk.clk
		.reset               (manager_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                     //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                     //          .valid
		.src_data            (cmd_mux_003_src_data),                      //          .data
		.src_channel         (cmd_mux_003_src_channel),                   //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),             //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),               //          .endofpacket
		.sink0_ready         (cmd_demux_src3_ready),                      //     sink0.ready
		.sink0_valid         (cmd_demux_src3_valid),                      //          .valid
		.sink0_channel       (cmd_demux_src3_channel),                    //          .channel
		.sink0_data          (cmd_demux_src3_data),                       //          .data
		.sink0_startofpacket (cmd_demux_src3_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src3_endofpacket)                 //          .endofpacket
	);

	system_mm_interconnect_0_cmd_mux_004 cmd_mux_004 (
		.clk                 (altpll_0_c0_clk),                           //       clk.clk
		.reset               (manager_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                     //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                     //          .valid
		.src_data            (cmd_mux_004_src_data),                      //          .data
		.src_channel         (cmd_mux_004_src_channel),                   //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),             //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),               //          .endofpacket
		.sink0_ready         (cmd_demux_src4_ready),                      //     sink0.ready
		.sink0_valid         (cmd_demux_src4_valid),                      //          .valid
		.sink0_channel       (cmd_demux_src4_channel),                    //          .channel
		.sink0_data          (cmd_demux_src4_data),                       //          .data
		.sink0_startofpacket (cmd_demux_src4_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src4_endofpacket),                //          .endofpacket
		.sink1_ready         (cmd_demux_001_src2_ready),                  //     sink1.ready
		.sink1_valid         (cmd_demux_001_src2_valid),                  //          .valid
		.sink1_channel       (cmd_demux_001_src2_channel),                //          .channel
		.sink1_data          (cmd_demux_001_src2_data),                   //          .data
		.sink1_startofpacket (cmd_demux_001_src2_startofpacket),          //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src2_endofpacket),            //          .endofpacket
		.sink2_ready         (cmd_demux_002_src0_ready),                  //     sink2.ready
		.sink2_valid         (cmd_demux_002_src0_valid),                  //          .valid
		.sink2_channel       (cmd_demux_002_src0_channel),                //          .channel
		.sink2_data          (cmd_demux_002_src0_data),                   //          .data
		.sink2_startofpacket (cmd_demux_002_src0_startofpacket),          //          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src0_endofpacket),            //          .endofpacket
		.sink3_ready         (cmd_demux_003_src0_ready),                  //     sink3.ready
		.sink3_valid         (cmd_demux_003_src0_valid),                  //          .valid
		.sink3_channel       (cmd_demux_003_src0_channel),                //          .channel
		.sink3_data          (cmd_demux_003_src0_data),                   //          .data
		.sink3_startofpacket (cmd_demux_003_src0_startofpacket),          //          .startofpacket
		.sink3_endofpacket   (cmd_demux_003_src0_endofpacket),            //          .endofpacket
		.sink4_ready         (cmd_demux_004_src0_ready),                  //     sink4.ready
		.sink4_valid         (cmd_demux_004_src0_valid),                  //          .valid
		.sink4_channel       (cmd_demux_004_src0_channel),                //          .channel
		.sink4_data          (cmd_demux_004_src0_data),                   //          .data
		.sink4_startofpacket (cmd_demux_004_src0_startofpacket),          //          .startofpacket
		.sink4_endofpacket   (cmd_demux_004_src0_endofpacket),            //          .endofpacket
		.sink5_ready         (cmd_demux_005_src0_ready),                  //     sink5.ready
		.sink5_valid         (cmd_demux_005_src0_valid),                  //          .valid
		.sink5_channel       (cmd_demux_005_src0_channel),                //          .channel
		.sink5_data          (cmd_demux_005_src0_data),                   //          .data
		.sink5_startofpacket (cmd_demux_005_src0_startofpacket),          //          .startofpacket
		.sink5_endofpacket   (cmd_demux_005_src0_endofpacket)             //          .endofpacket
	);

	system_mm_interconnect_0_cmd_mux_005 cmd_mux_005 (
		.clk                 (clk_0_clk_clk),                                      //       clk.clk
		.reset               (shared_ocm_mutex_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                              //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                              //          .valid
		.src_data            (cmd_mux_005_src_data),                               //          .data
		.src_channel         (cmd_mux_005_src_channel),                            //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),                      //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),                        //          .endofpacket
		.sink0_ready         (crosser_out_ready),                                  //     sink0.ready
		.sink0_valid         (crosser_out_valid),                                  //          .valid
		.sink0_channel       (crosser_out_channel),                                //          .channel
		.sink0_data          (crosser_out_data),                                   //          .data
		.sink0_startofpacket (crosser_out_startofpacket),                          //          .startofpacket
		.sink0_endofpacket   (crosser_out_endofpacket),                            //          .endofpacket
		.sink1_ready         (crosser_001_out_ready),                              //     sink1.ready
		.sink1_valid         (crosser_001_out_valid),                              //          .valid
		.sink1_channel       (crosser_001_out_channel),                            //          .channel
		.sink1_data          (crosser_001_out_data),                               //          .data
		.sink1_startofpacket (crosser_001_out_startofpacket),                      //          .startofpacket
		.sink1_endofpacket   (crosser_001_out_endofpacket),                        //          .endofpacket
		.sink2_ready         (crosser_002_out_ready),                              //     sink2.ready
		.sink2_valid         (crosser_002_out_valid),                              //          .valid
		.sink2_channel       (crosser_002_out_channel),                            //          .channel
		.sink2_data          (crosser_002_out_data),                               //          .data
		.sink2_startofpacket (crosser_002_out_startofpacket),                      //          .startofpacket
		.sink2_endofpacket   (crosser_002_out_endofpacket),                        //          .endofpacket
		.sink3_ready         (crosser_003_out_ready),                              //     sink3.ready
		.sink3_valid         (crosser_003_out_valid),                              //          .valid
		.sink3_channel       (crosser_003_out_channel),                            //          .channel
		.sink3_data          (crosser_003_out_data),                               //          .data
		.sink3_startofpacket (crosser_003_out_startofpacket),                      //          .startofpacket
		.sink3_endofpacket   (crosser_003_out_endofpacket),                        //          .endofpacket
		.sink4_ready         (crosser_004_out_ready),                              //     sink4.ready
		.sink4_valid         (crosser_004_out_valid),                              //          .valid
		.sink4_channel       (crosser_004_out_channel),                            //          .channel
		.sink4_data          (crosser_004_out_data),                               //          .data
		.sink4_startofpacket (crosser_004_out_startofpacket),                      //          .startofpacket
		.sink4_endofpacket   (crosser_004_out_endofpacket)                         //          .endofpacket
	);

	system_mm_interconnect_0_cmd_mux_006 cmd_mux_006 (
		.clk                 (altpll_0_c0_clk),                           //       clk.clk
		.reset               (manager_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                     //       src.ready
		.src_valid           (cmd_mux_006_src_valid),                     //          .valid
		.src_data            (cmd_mux_006_src_data),                      //          .data
		.src_channel         (cmd_mux_006_src_channel),                   //          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),             //          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),               //          .endofpacket
		.sink0_ready         (cmd_demux_002_src2_ready),                  //     sink0.ready
		.sink0_valid         (cmd_demux_002_src2_valid),                  //          .valid
		.sink0_channel       (cmd_demux_002_src2_channel),                //          .channel
		.sink0_data          (cmd_demux_002_src2_data),                   //          .data
		.sink0_startofpacket (cmd_demux_002_src2_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src2_endofpacket),            //          .endofpacket
		.sink1_ready         (cmd_demux_003_src2_ready),                  //     sink1.ready
		.sink1_valid         (cmd_demux_003_src2_valid),                  //          .valid
		.sink1_channel       (cmd_demux_003_src2_channel),                //          .channel
		.sink1_data          (cmd_demux_003_src2_data),                   //          .data
		.sink1_startofpacket (cmd_demux_003_src2_startofpacket),          //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src2_endofpacket),            //          .endofpacket
		.sink2_ready         (cmd_demux_004_src2_ready),                  //     sink2.ready
		.sink2_valid         (cmd_demux_004_src2_valid),                  //          .valid
		.sink2_channel       (cmd_demux_004_src2_channel),                //          .channel
		.sink2_data          (cmd_demux_004_src2_data),                   //          .data
		.sink2_startofpacket (cmd_demux_004_src2_startofpacket),          //          .startofpacket
		.sink2_endofpacket   (cmd_demux_004_src2_endofpacket),            //          .endofpacket
		.sink3_ready         (cmd_demux_005_src2_ready),                  //     sink3.ready
		.sink3_valid         (cmd_demux_005_src2_valid),                  //          .valid
		.sink3_channel       (cmd_demux_005_src2_channel),                //          .channel
		.sink3_data          (cmd_demux_005_src2_data),                   //          .data
		.sink3_startofpacket (cmd_demux_005_src2_startofpacket),          //          .startofpacket
		.sink3_endofpacket   (cmd_demux_005_src2_endofpacket)             //          .endofpacket
	);

	system_mm_interconnect_0_rsp_demux rsp_demux (
		.clk                (altpll_0_c0_clk),                           //       clk.clk
		.reset              (manager_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                      //      sink.ready
		.sink_channel       (router_006_src_channel),                    //          .channel
		.sink_data          (router_006_src_data),                       //          .data
		.sink_startofpacket (router_006_src_startofpacket),              //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),                //          .endofpacket
		.sink_valid         (router_006_src_valid),                      //          .valid
		.src0_ready         (rsp_demux_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_src0_data),                       //          .data
		.src0_channel       (rsp_demux_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),                //          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                      //      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                      //          .valid
		.src1_data          (rsp_demux_src1_data),                       //          .data
		.src1_channel       (rsp_demux_src1_channel),                    //          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),              //          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket)                 //          .endofpacket
	);

	system_mm_interconnect_0_rsp_demux_001 rsp_demux_001 (
		.clk                (altpll_0_c0_clk),                                         //       clk.clk
		.reset              (performance_counter_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_007_src_ready),                                    //      sink.ready
		.sink_channel       (router_007_src_channel),                                  //          .channel
		.sink_data          (router_007_src_data),                                     //          .data
		.sink_startofpacket (router_007_src_startofpacket),                            //          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),                              //          .endofpacket
		.sink_valid         (router_007_src_valid),                                    //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                                //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                                //          .valid
		.src0_data          (rsp_demux_001_src0_data),                                 //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                              //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                        //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)                           //          .endofpacket
	);

	system_mm_interconnect_0_rsp_demux rsp_demux_002 (
		.clk                (altpll_0_c0_clk),                           //       clk.clk
		.reset              (manager_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_008_src_ready),                      //      sink.ready
		.sink_channel       (router_008_src_channel),                    //          .channel
		.sink_data          (router_008_src_data),                       //          .data
		.sink_startofpacket (router_008_src_startofpacket),              //          .startofpacket
		.sink_endofpacket   (router_008_src_endofpacket),                //          .endofpacket
		.sink_valid         (router_008_src_valid),                      //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                  //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                  //          .valid
		.src0_data          (rsp_demux_002_src0_data),                   //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),          //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket),            //          .endofpacket
		.src1_ready         (rsp_demux_002_src1_ready),                  //      src1.ready
		.src1_valid         (rsp_demux_002_src1_valid),                  //          .valid
		.src1_data          (rsp_demux_002_src1_data),                   //          .data
		.src1_channel       (rsp_demux_002_src1_channel),                //          .channel
		.src1_startofpacket (rsp_demux_002_src1_startofpacket),          //          .startofpacket
		.src1_endofpacket   (rsp_demux_002_src1_endofpacket)             //          .endofpacket
	);

	system_mm_interconnect_0_rsp_demux_001 rsp_demux_003 (
		.clk                (altpll_0_c0_clk),                           //       clk.clk
		.reset              (manager_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_009_src_ready),                      //      sink.ready
		.sink_channel       (router_009_src_channel),                    //          .channel
		.sink_data          (router_009_src_data),                       //          .data
		.sink_startofpacket (router_009_src_startofpacket),              //          .startofpacket
		.sink_endofpacket   (router_009_src_endofpacket),                //          .endofpacket
		.sink_valid         (router_009_src_valid),                      //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                  //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                  //          .valid
		.src0_data          (rsp_demux_003_src0_data),                   //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),          //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket)             //          .endofpacket
	);

	system_mm_interconnect_0_rsp_demux_004 rsp_demux_004 (
		.clk                (altpll_0_c0_clk),                              //       clk.clk
		.reset              (manager_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.sink_ready         (sdram_s1_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (sdram_s1_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (sdram_s1_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (sdram_s1_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (sdram_s1_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (sdram_s1_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                     //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                     //          .valid
		.src0_data          (rsp_demux_004_src0_data),                      //          .data
		.src0_channel       (rsp_demux_004_src0_channel),                   //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket),               //          .endofpacket
		.src1_ready         (rsp_demux_004_src1_ready),                     //      src1.ready
		.src1_valid         (rsp_demux_004_src1_valid),                     //          .valid
		.src1_data          (rsp_demux_004_src1_data),                      //          .data
		.src1_channel       (rsp_demux_004_src1_channel),                   //          .channel
		.src1_startofpacket (rsp_demux_004_src1_startofpacket),             //          .startofpacket
		.src1_endofpacket   (rsp_demux_004_src1_endofpacket),               //          .endofpacket
		.src2_ready         (rsp_demux_004_src2_ready),                     //      src2.ready
		.src2_valid         (rsp_demux_004_src2_valid),                     //          .valid
		.src2_data          (rsp_demux_004_src2_data),                      //          .data
		.src2_channel       (rsp_demux_004_src2_channel),                   //          .channel
		.src2_startofpacket (rsp_demux_004_src2_startofpacket),             //          .startofpacket
		.src2_endofpacket   (rsp_demux_004_src2_endofpacket),               //          .endofpacket
		.src3_ready         (rsp_demux_004_src3_ready),                     //      src3.ready
		.src3_valid         (rsp_demux_004_src3_valid),                     //          .valid
		.src3_data          (rsp_demux_004_src3_data),                      //          .data
		.src3_channel       (rsp_demux_004_src3_channel),                   //          .channel
		.src3_startofpacket (rsp_demux_004_src3_startofpacket),             //          .startofpacket
		.src3_endofpacket   (rsp_demux_004_src3_endofpacket),               //          .endofpacket
		.src4_ready         (rsp_demux_004_src4_ready),                     //      src4.ready
		.src4_valid         (rsp_demux_004_src4_valid),                     //          .valid
		.src4_data          (rsp_demux_004_src4_data),                      //          .data
		.src4_channel       (rsp_demux_004_src4_channel),                   //          .channel
		.src4_startofpacket (rsp_demux_004_src4_startofpacket),             //          .startofpacket
		.src4_endofpacket   (rsp_demux_004_src4_endofpacket),               //          .endofpacket
		.src5_ready         (rsp_demux_004_src5_ready),                     //      src5.ready
		.src5_valid         (rsp_demux_004_src5_valid),                     //          .valid
		.src5_data          (rsp_demux_004_src5_data),                      //          .data
		.src5_channel       (rsp_demux_004_src5_channel),                   //          .channel
		.src5_startofpacket (rsp_demux_004_src5_startofpacket),             //          .startofpacket
		.src5_endofpacket   (rsp_demux_004_src5_endofpacket)                //          .endofpacket
	);

	system_mm_interconnect_0_rsp_demux_005 rsp_demux_005 (
		.clk                (clk_0_clk_clk),                                      //       clk.clk
		.reset              (shared_ocm_mutex_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_011_src_ready),                               //      sink.ready
		.sink_channel       (router_011_src_channel),                             //          .channel
		.sink_data          (router_011_src_data),                                //          .data
		.sink_startofpacket (router_011_src_startofpacket),                       //          .startofpacket
		.sink_endofpacket   (router_011_src_endofpacket),                         //          .endofpacket
		.sink_valid         (router_011_src_valid),                               //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                           //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                           //          .valid
		.src0_data          (rsp_demux_005_src0_data),                            //          .data
		.src0_channel       (rsp_demux_005_src0_channel),                         //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),                   //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket),                     //          .endofpacket
		.src1_ready         (rsp_demux_005_src1_ready),                           //      src1.ready
		.src1_valid         (rsp_demux_005_src1_valid),                           //          .valid
		.src1_data          (rsp_demux_005_src1_data),                            //          .data
		.src1_channel       (rsp_demux_005_src1_channel),                         //          .channel
		.src1_startofpacket (rsp_demux_005_src1_startofpacket),                   //          .startofpacket
		.src1_endofpacket   (rsp_demux_005_src1_endofpacket),                     //          .endofpacket
		.src2_ready         (rsp_demux_005_src2_ready),                           //      src2.ready
		.src2_valid         (rsp_demux_005_src2_valid),                           //          .valid
		.src2_data          (rsp_demux_005_src2_data),                            //          .data
		.src2_channel       (rsp_demux_005_src2_channel),                         //          .channel
		.src2_startofpacket (rsp_demux_005_src2_startofpacket),                   //          .startofpacket
		.src2_endofpacket   (rsp_demux_005_src2_endofpacket),                     //          .endofpacket
		.src3_ready         (rsp_demux_005_src3_ready),                           //      src3.ready
		.src3_valid         (rsp_demux_005_src3_valid),                           //          .valid
		.src3_data          (rsp_demux_005_src3_data),                            //          .data
		.src3_channel       (rsp_demux_005_src3_channel),                         //          .channel
		.src3_startofpacket (rsp_demux_005_src3_startofpacket),                   //          .startofpacket
		.src3_endofpacket   (rsp_demux_005_src3_endofpacket),                     //          .endofpacket
		.src4_ready         (rsp_demux_005_src4_ready),                           //      src4.ready
		.src4_valid         (rsp_demux_005_src4_valid),                           //          .valid
		.src4_data          (rsp_demux_005_src4_data),                            //          .data
		.src4_channel       (rsp_demux_005_src4_channel),                         //          .channel
		.src4_startofpacket (rsp_demux_005_src4_startofpacket),                   //          .startofpacket
		.src4_endofpacket   (rsp_demux_005_src4_endofpacket)                      //          .endofpacket
	);

	system_mm_interconnect_0_rsp_demux_006 rsp_demux_006 (
		.clk                (altpll_0_c0_clk),                           //       clk.clk
		.reset              (manager_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_012_src_ready),                      //      sink.ready
		.sink_channel       (router_012_src_channel),                    //          .channel
		.sink_data          (router_012_src_data),                       //          .data
		.sink_startofpacket (router_012_src_startofpacket),              //          .startofpacket
		.sink_endofpacket   (router_012_src_endofpacket),                //          .endofpacket
		.sink_valid         (router_012_src_valid),                      //          .valid
		.src0_ready         (rsp_demux_006_src0_ready),                  //      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),                  //          .valid
		.src0_data          (rsp_demux_006_src0_data),                   //          .data
		.src0_channel       (rsp_demux_006_src0_channel),                //          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),          //          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket),            //          .endofpacket
		.src1_ready         (rsp_demux_006_src1_ready),                  //      src1.ready
		.src1_valid         (rsp_demux_006_src1_valid),                  //          .valid
		.src1_data          (rsp_demux_006_src1_data),                   //          .data
		.src1_channel       (rsp_demux_006_src1_channel),                //          .channel
		.src1_startofpacket (rsp_demux_006_src1_startofpacket),          //          .startofpacket
		.src1_endofpacket   (rsp_demux_006_src1_endofpacket),            //          .endofpacket
		.src2_ready         (rsp_demux_006_src2_ready),                  //      src2.ready
		.src2_valid         (rsp_demux_006_src2_valid),                  //          .valid
		.src2_data          (rsp_demux_006_src2_data),                   //          .data
		.src2_channel       (rsp_demux_006_src2_channel),                //          .channel
		.src2_startofpacket (rsp_demux_006_src2_startofpacket),          //          .startofpacket
		.src2_endofpacket   (rsp_demux_006_src2_endofpacket),            //          .endofpacket
		.src3_ready         (rsp_demux_006_src3_ready),                  //      src3.ready
		.src3_valid         (rsp_demux_006_src3_valid),                  //          .valid
		.src3_data          (rsp_demux_006_src3_data),                   //          .data
		.src3_channel       (rsp_demux_006_src3_channel),                //          .channel
		.src3_startofpacket (rsp_demux_006_src3_startofpacket),          //          .startofpacket
		.src3_endofpacket   (rsp_demux_006_src3_endofpacket)             //          .endofpacket
	);

	system_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                 (altpll_0_c0_clk),                           //       clk.clk
		.reset               (manager_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                         //       src.ready
		.src_valid           (rsp_mux_src_valid),                         //          .valid
		.src_data            (rsp_mux_src_data),                          //          .data
		.src_channel         (rsp_mux_src_channel),                       //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                      //     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                      //          .valid
		.sink0_channel       (rsp_demux_src0_channel),                    //          .channel
		.sink0_data          (rsp_demux_src0_data),                       //          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket),                //          .endofpacket
		.sink1_ready         (rsp_demux_001_src0_ready),                  //     sink1.ready
		.sink1_valid         (rsp_demux_001_src0_valid),                  //          .valid
		.sink1_channel       (rsp_demux_001_src0_channel),                //          .channel
		.sink1_data          (rsp_demux_001_src0_data),                   //          .data
		.sink1_startofpacket (rsp_demux_001_src0_startofpacket),          //          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src0_endofpacket),            //          .endofpacket
		.sink2_ready         (rsp_demux_002_src0_ready),                  //     sink2.ready
		.sink2_valid         (rsp_demux_002_src0_valid),                  //          .valid
		.sink2_channel       (rsp_demux_002_src0_channel),                //          .channel
		.sink2_data          (rsp_demux_002_src0_data),                   //          .data
		.sink2_startofpacket (rsp_demux_002_src0_startofpacket),          //          .startofpacket
		.sink2_endofpacket   (rsp_demux_002_src0_endofpacket),            //          .endofpacket
		.sink3_ready         (rsp_demux_003_src0_ready),                  //     sink3.ready
		.sink3_valid         (rsp_demux_003_src0_valid),                  //          .valid
		.sink3_channel       (rsp_demux_003_src0_channel),                //          .channel
		.sink3_data          (rsp_demux_003_src0_data),                   //          .data
		.sink3_startofpacket (rsp_demux_003_src0_startofpacket),          //          .startofpacket
		.sink3_endofpacket   (rsp_demux_003_src0_endofpacket),            //          .endofpacket
		.sink4_ready         (rsp_demux_004_src0_ready),                  //     sink4.ready
		.sink4_valid         (rsp_demux_004_src0_valid),                  //          .valid
		.sink4_channel       (rsp_demux_004_src0_channel),                //          .channel
		.sink4_data          (rsp_demux_004_src0_data),                   //          .data
		.sink4_startofpacket (rsp_demux_004_src0_startofpacket),          //          .startofpacket
		.sink4_endofpacket   (rsp_demux_004_src0_endofpacket),            //          .endofpacket
		.sink5_ready         (crosser_005_out_ready),                     //     sink5.ready
		.sink5_valid         (crosser_005_out_valid),                     //          .valid
		.sink5_channel       (crosser_005_out_channel),                   //          .channel
		.sink5_data          (crosser_005_out_data),                      //          .data
		.sink5_startofpacket (crosser_005_out_startofpacket),             //          .startofpacket
		.sink5_endofpacket   (crosser_005_out_endofpacket)                //          .endofpacket
	);

	system_mm_interconnect_0_rsp_mux_001 rsp_mux_001 (
		.clk                 (altpll_0_c0_clk),                           //       clk.clk
		.reset               (manager_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                     //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                     //          .valid
		.src_data            (rsp_mux_001_src_data),                      //          .data
		.src_channel         (rsp_mux_001_src_channel),                   //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),             //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),               //          .endofpacket
		.sink0_ready         (rsp_demux_src1_ready),                      //     sink0.ready
		.sink0_valid         (rsp_demux_src1_valid),                      //          .valid
		.sink0_channel       (rsp_demux_src1_channel),                    //          .channel
		.sink0_data          (rsp_demux_src1_data),                       //          .data
		.sink0_startofpacket (rsp_demux_src1_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src1_endofpacket),                //          .endofpacket
		.sink1_ready         (rsp_demux_002_src1_ready),                  //     sink1.ready
		.sink1_valid         (rsp_demux_002_src1_valid),                  //          .valid
		.sink1_channel       (rsp_demux_002_src1_channel),                //          .channel
		.sink1_data          (rsp_demux_002_src1_data),                   //          .data
		.sink1_startofpacket (rsp_demux_002_src1_startofpacket),          //          .startofpacket
		.sink1_endofpacket   (rsp_demux_002_src1_endofpacket),            //          .endofpacket
		.sink2_ready         (rsp_demux_004_src1_ready),                  //     sink2.ready
		.sink2_valid         (rsp_demux_004_src1_valid),                  //          .valid
		.sink2_channel       (rsp_demux_004_src1_channel),                //          .channel
		.sink2_data          (rsp_demux_004_src1_data),                   //          .data
		.sink2_startofpacket (rsp_demux_004_src1_startofpacket),          //          .startofpacket
		.sink2_endofpacket   (rsp_demux_004_src1_endofpacket)             //          .endofpacket
	);

	system_mm_interconnect_0_rsp_mux_001 rsp_mux_002 (
		.clk                 (altpll_0_c0_clk),                                         //       clk.clk
		.reset               (performance_counter_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_002_src_ready),                                   //       src.ready
		.src_valid           (rsp_mux_002_src_valid),                                   //          .valid
		.src_data            (rsp_mux_002_src_data),                                    //          .data
		.src_channel         (rsp_mux_002_src_channel),                                 //          .channel
		.src_startofpacket   (rsp_mux_002_src_startofpacket),                           //          .startofpacket
		.src_endofpacket     (rsp_mux_002_src_endofpacket),                             //          .endofpacket
		.sink0_ready         (rsp_demux_004_src2_ready),                                //     sink0.ready
		.sink0_valid         (rsp_demux_004_src2_valid),                                //          .valid
		.sink0_channel       (rsp_demux_004_src2_channel),                              //          .channel
		.sink0_data          (rsp_demux_004_src2_data),                                 //          .data
		.sink0_startofpacket (rsp_demux_004_src2_startofpacket),                        //          .startofpacket
		.sink0_endofpacket   (rsp_demux_004_src2_endofpacket),                          //          .endofpacket
		.sink1_ready         (crosser_006_out_ready),                                   //     sink1.ready
		.sink1_valid         (crosser_006_out_valid),                                   //          .valid
		.sink1_channel       (crosser_006_out_channel),                                 //          .channel
		.sink1_data          (crosser_006_out_data),                                    //          .data
		.sink1_startofpacket (crosser_006_out_startofpacket),                           //          .startofpacket
		.sink1_endofpacket   (crosser_006_out_endofpacket),                             //          .endofpacket
		.sink2_ready         (rsp_demux_006_src0_ready),                                //     sink2.ready
		.sink2_valid         (rsp_demux_006_src0_valid),                                //          .valid
		.sink2_channel       (rsp_demux_006_src0_channel),                              //          .channel
		.sink2_data          (rsp_demux_006_src0_data),                                 //          .data
		.sink2_startofpacket (rsp_demux_006_src0_startofpacket),                        //          .startofpacket
		.sink2_endofpacket   (rsp_demux_006_src0_endofpacket)                           //          .endofpacket
	);

	system_mm_interconnect_0_rsp_mux_001 rsp_mux_003 (
		.clk                 (altpll_0_c0_clk),                                         //       clk.clk
		.reset               (performance_counter_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_003_src_ready),                                   //       src.ready
		.src_valid           (rsp_mux_003_src_valid),                                   //          .valid
		.src_data            (rsp_mux_003_src_data),                                    //          .data
		.src_channel         (rsp_mux_003_src_channel),                                 //          .channel
		.src_startofpacket   (rsp_mux_003_src_startofpacket),                           //          .startofpacket
		.src_endofpacket     (rsp_mux_003_src_endofpacket),                             //          .endofpacket
		.sink0_ready         (rsp_demux_004_src3_ready),                                //     sink0.ready
		.sink0_valid         (rsp_demux_004_src3_valid),                                //          .valid
		.sink0_channel       (rsp_demux_004_src3_channel),                              //          .channel
		.sink0_data          (rsp_demux_004_src3_data),                                 //          .data
		.sink0_startofpacket (rsp_demux_004_src3_startofpacket),                        //          .startofpacket
		.sink0_endofpacket   (rsp_demux_004_src3_endofpacket),                          //          .endofpacket
		.sink1_ready         (crosser_007_out_ready),                                   //     sink1.ready
		.sink1_valid         (crosser_007_out_valid),                                   //          .valid
		.sink1_channel       (crosser_007_out_channel),                                 //          .channel
		.sink1_data          (crosser_007_out_data),                                    //          .data
		.sink1_startofpacket (crosser_007_out_startofpacket),                           //          .startofpacket
		.sink1_endofpacket   (crosser_007_out_endofpacket),                             //          .endofpacket
		.sink2_ready         (rsp_demux_006_src1_ready),                                //     sink2.ready
		.sink2_valid         (rsp_demux_006_src1_valid),                                //          .valid
		.sink2_channel       (rsp_demux_006_src1_channel),                              //          .channel
		.sink2_data          (rsp_demux_006_src1_data),                                 //          .data
		.sink2_startofpacket (rsp_demux_006_src1_startofpacket),                        //          .startofpacket
		.sink2_endofpacket   (rsp_demux_006_src1_endofpacket)                           //          .endofpacket
	);

	system_mm_interconnect_0_rsp_mux_001 rsp_mux_004 (
		.clk                 (altpll_0_c0_clk),                                         //       clk.clk
		.reset               (performance_counter_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_004_src_ready),                                   //       src.ready
		.src_valid           (rsp_mux_004_src_valid),                                   //          .valid
		.src_data            (rsp_mux_004_src_data),                                    //          .data
		.src_channel         (rsp_mux_004_src_channel),                                 //          .channel
		.src_startofpacket   (rsp_mux_004_src_startofpacket),                           //          .startofpacket
		.src_endofpacket     (rsp_mux_004_src_endofpacket),                             //          .endofpacket
		.sink0_ready         (rsp_demux_004_src4_ready),                                //     sink0.ready
		.sink0_valid         (rsp_demux_004_src4_valid),                                //          .valid
		.sink0_channel       (rsp_demux_004_src4_channel),                              //          .channel
		.sink0_data          (rsp_demux_004_src4_data),                                 //          .data
		.sink0_startofpacket (rsp_demux_004_src4_startofpacket),                        //          .startofpacket
		.sink0_endofpacket   (rsp_demux_004_src4_endofpacket),                          //          .endofpacket
		.sink1_ready         (crosser_008_out_ready),                                   //     sink1.ready
		.sink1_valid         (crosser_008_out_valid),                                   //          .valid
		.sink1_channel       (crosser_008_out_channel),                                 //          .channel
		.sink1_data          (crosser_008_out_data),                                    //          .data
		.sink1_startofpacket (crosser_008_out_startofpacket),                           //          .startofpacket
		.sink1_endofpacket   (crosser_008_out_endofpacket),                             //          .endofpacket
		.sink2_ready         (rsp_demux_006_src2_ready),                                //     sink2.ready
		.sink2_valid         (rsp_demux_006_src2_valid),                                //          .valid
		.sink2_channel       (rsp_demux_006_src2_channel),                              //          .channel
		.sink2_data          (rsp_demux_006_src2_data),                                 //          .data
		.sink2_startofpacket (rsp_demux_006_src2_startofpacket),                        //          .startofpacket
		.sink2_endofpacket   (rsp_demux_006_src2_endofpacket)                           //          .endofpacket
	);

	system_mm_interconnect_0_rsp_mux_001 rsp_mux_005 (
		.clk                 (altpll_0_c0_clk),                                         //       clk.clk
		.reset               (performance_counter_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_005_src_ready),                                   //       src.ready
		.src_valid           (rsp_mux_005_src_valid),                                   //          .valid
		.src_data            (rsp_mux_005_src_data),                                    //          .data
		.src_channel         (rsp_mux_005_src_channel),                                 //          .channel
		.src_startofpacket   (rsp_mux_005_src_startofpacket),                           //          .startofpacket
		.src_endofpacket     (rsp_mux_005_src_endofpacket),                             //          .endofpacket
		.sink0_ready         (rsp_demux_004_src5_ready),                                //     sink0.ready
		.sink0_valid         (rsp_demux_004_src5_valid),                                //          .valid
		.sink0_channel       (rsp_demux_004_src5_channel),                              //          .channel
		.sink0_data          (rsp_demux_004_src5_data),                                 //          .data
		.sink0_startofpacket (rsp_demux_004_src5_startofpacket),                        //          .startofpacket
		.sink0_endofpacket   (rsp_demux_004_src5_endofpacket),                          //          .endofpacket
		.sink1_ready         (crosser_009_out_ready),                                   //     sink1.ready
		.sink1_valid         (crosser_009_out_valid),                                   //          .valid
		.sink1_channel       (crosser_009_out_channel),                                 //          .channel
		.sink1_data          (crosser_009_out_data),                                    //          .data
		.sink1_startofpacket (crosser_009_out_startofpacket),                           //          .startofpacket
		.sink1_endofpacket   (crosser_009_out_endofpacket),                             //          .endofpacket
		.sink2_ready         (rsp_demux_006_src3_ready),                                //     sink2.ready
		.sink2_valid         (rsp_demux_006_src3_valid),                                //          .valid
		.sink2_channel       (rsp_demux_006_src3_channel),                              //          .channel
		.sink2_data          (rsp_demux_006_src3_data),                                 //          .data
		.sink2_startofpacket (rsp_demux_006_src3_startofpacket),                        //          .startofpacket
		.sink2_endofpacket   (rsp_demux_006_src3_endofpacket)                           //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (45),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (54),
		.IN_PKT_BYTE_CNT_L             (52),
		.IN_PKT_TRANS_COMPRESSED_READ  (46),
		.IN_PKT_TRANS_WRITE            (48),
		.IN_PKT_BURSTWRAP_H            (57),
		.IN_PKT_BURSTWRAP_L            (55),
		.IN_PKT_BURST_SIZE_H           (60),
		.IN_PKT_BURST_SIZE_L           (58),
		.IN_PKT_RESPONSE_STATUS_H      (82),
		.IN_PKT_RESPONSE_STATUS_L      (81),
		.IN_PKT_TRANS_EXCLUSIVE        (51),
		.IN_PKT_BURST_TYPE_H           (62),
		.IN_PKT_BURST_TYPE_L           (61),
		.IN_PKT_ORI_BURST_SIZE_L       (83),
		.IN_PKT_ORI_BURST_SIZE_H       (85),
		.IN_ST_DATA_W                  (86),
		.OUT_PKT_ADDR_H                (63),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (72),
		.OUT_PKT_BYTE_CNT_L            (70),
		.OUT_PKT_TRANS_COMPRESSED_READ (64),
		.OUT_PKT_BURST_SIZE_H          (78),
		.OUT_PKT_BURST_SIZE_L          (76),
		.OUT_PKT_RESPONSE_STATUS_H     (100),
		.OUT_PKT_RESPONSE_STATUS_L     (99),
		.OUT_PKT_TRANS_EXCLUSIVE       (69),
		.OUT_PKT_BURST_TYPE_H          (80),
		.OUT_PKT_BURST_TYPE_L          (79),
		.OUT_PKT_ORI_BURST_SIZE_L      (101),
		.OUT_PKT_ORI_BURST_SIZE_H      (103),
		.OUT_ST_DATA_W                 (104),
		.ST_CHANNEL_W                  (7),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) sdram_s1_rsp_width_adapter (
		.clk                  (altpll_0_c0_clk),                              //       clk.clk
		.reset                (manager_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_valid             (router_010_src_valid),                         //      sink.valid
		.in_channel           (router_010_src_channel),                       //          .channel
		.in_startofpacket     (router_010_src_startofpacket),                 //          .startofpacket
		.in_endofpacket       (router_010_src_endofpacket),                   //          .endofpacket
		.in_ready             (router_010_src_ready),                         //          .ready
		.in_data              (router_010_src_data),                          //          .data
		.out_endofpacket      (sdram_s1_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sdram_s1_rsp_width_adapter_src_data),          //          .data
		.out_channel          (sdram_s1_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (sdram_s1_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (sdram_s1_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sdram_s1_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                        // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (63),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (72),
		.IN_PKT_BYTE_CNT_L             (70),
		.IN_PKT_TRANS_COMPRESSED_READ  (64),
		.IN_PKT_TRANS_WRITE            (66),
		.IN_PKT_BURSTWRAP_H            (75),
		.IN_PKT_BURSTWRAP_L            (73),
		.IN_PKT_BURST_SIZE_H           (78),
		.IN_PKT_BURST_SIZE_L           (76),
		.IN_PKT_RESPONSE_STATUS_H      (100),
		.IN_PKT_RESPONSE_STATUS_L      (99),
		.IN_PKT_TRANS_EXCLUSIVE        (69),
		.IN_PKT_BURST_TYPE_H           (80),
		.IN_PKT_BURST_TYPE_L           (79),
		.IN_PKT_ORI_BURST_SIZE_L       (101),
		.IN_PKT_ORI_BURST_SIZE_H       (103),
		.IN_ST_DATA_W                  (104),
		.OUT_PKT_ADDR_H                (45),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (54),
		.OUT_PKT_BYTE_CNT_L            (52),
		.OUT_PKT_TRANS_COMPRESSED_READ (46),
		.OUT_PKT_BURST_SIZE_H          (60),
		.OUT_PKT_BURST_SIZE_L          (58),
		.OUT_PKT_RESPONSE_STATUS_H     (82),
		.OUT_PKT_RESPONSE_STATUS_L     (81),
		.OUT_PKT_TRANS_EXCLUSIVE       (51),
		.OUT_PKT_BURST_TYPE_H          (62),
		.OUT_PKT_BURST_TYPE_L          (61),
		.OUT_PKT_ORI_BURST_SIZE_L      (83),
		.OUT_PKT_ORI_BURST_SIZE_H      (85),
		.OUT_ST_DATA_W                 (86),
		.ST_CHANNEL_W                  (7),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) sdram_s1_cmd_width_adapter (
		.clk                  (altpll_0_c0_clk),                              //       clk.clk
		.reset                (manager_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_valid             (cmd_mux_004_src_valid),                        //      sink.valid
		.in_channel           (cmd_mux_004_src_channel),                      //          .channel
		.in_startofpacket     (cmd_mux_004_src_startofpacket),                //          .startofpacket
		.in_endofpacket       (cmd_mux_004_src_endofpacket),                  //          .endofpacket
		.in_ready             (cmd_mux_004_src_ready),                        //          .ready
		.in_data              (cmd_mux_004_src_data),                         //          .data
		.out_endofpacket      (sdram_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sdram_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (sdram_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (sdram_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (sdram_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sdram_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                        // (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (104),
		.BITS_PER_SYMBOL     (104),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (7),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser (
		.in_clk            (altpll_0_c0_clk),                                    //        in_clk.clk
		.in_reset          (manager_reset_reset_bridge_in_reset_reset),          //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                      //       out_clk.clk
		.out_reset         (shared_ocm_mutex_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_src5_ready),                               //            in.ready
		.in_valid          (cmd_demux_src5_valid),                               //              .valid
		.in_startofpacket  (cmd_demux_src5_startofpacket),                       //              .startofpacket
		.in_endofpacket    (cmd_demux_src5_endofpacket),                         //              .endofpacket
		.in_channel        (cmd_demux_src5_channel),                             //              .channel
		.in_data           (cmd_demux_src5_data),                                //              .data
		.out_ready         (crosser_out_ready),                                  //           out.ready
		.out_valid         (crosser_out_valid),                                  //              .valid
		.out_startofpacket (crosser_out_startofpacket),                          //              .startofpacket
		.out_endofpacket   (crosser_out_endofpacket),                            //              .endofpacket
		.out_channel       (crosser_out_channel),                                //              .channel
		.out_data          (crosser_out_data),                                   //              .data
		.in_empty          (1'b0),                                               //   (terminated)
		.in_error          (1'b0),                                               //   (terminated)
		.out_empty         (),                                                   //   (terminated)
		.out_error         ()                                                    //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (104),
		.BITS_PER_SYMBOL     (104),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (7),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_001 (
		.in_clk            (altpll_0_c0_clk),                                         //        in_clk.clk
		.in_reset          (performance_counter_0_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                           //       out_clk.clk
		.out_reset         (shared_ocm_mutex_reset_reset_bridge_in_reset_reset),      // out_clk_reset.reset
		.in_ready          (cmd_demux_002_src1_ready),                                //            in.ready
		.in_valid          (cmd_demux_002_src1_valid),                                //              .valid
		.in_startofpacket  (cmd_demux_002_src1_startofpacket),                        //              .startofpacket
		.in_endofpacket    (cmd_demux_002_src1_endofpacket),                          //              .endofpacket
		.in_channel        (cmd_demux_002_src1_channel),                              //              .channel
		.in_data           (cmd_demux_002_src1_data),                                 //              .data
		.out_ready         (crosser_001_out_ready),                                   //           out.ready
		.out_valid         (crosser_001_out_valid),                                   //              .valid
		.out_startofpacket (crosser_001_out_startofpacket),                           //              .startofpacket
		.out_endofpacket   (crosser_001_out_endofpacket),                             //              .endofpacket
		.out_channel       (crosser_001_out_channel),                                 //              .channel
		.out_data          (crosser_001_out_data),                                    //              .data
		.in_empty          (1'b0),                                                    //   (terminated)
		.in_error          (1'b0),                                                    //   (terminated)
		.out_empty         (),                                                        //   (terminated)
		.out_error         ()                                                         //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (104),
		.BITS_PER_SYMBOL     (104),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (7),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_002 (
		.in_clk            (altpll_0_c0_clk),                                         //        in_clk.clk
		.in_reset          (performance_counter_0_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                           //       out_clk.clk
		.out_reset         (shared_ocm_mutex_reset_reset_bridge_in_reset_reset),      // out_clk_reset.reset
		.in_ready          (cmd_demux_003_src1_ready),                                //            in.ready
		.in_valid          (cmd_demux_003_src1_valid),                                //              .valid
		.in_startofpacket  (cmd_demux_003_src1_startofpacket),                        //              .startofpacket
		.in_endofpacket    (cmd_demux_003_src1_endofpacket),                          //              .endofpacket
		.in_channel        (cmd_demux_003_src1_channel),                              //              .channel
		.in_data           (cmd_demux_003_src1_data),                                 //              .data
		.out_ready         (crosser_002_out_ready),                                   //           out.ready
		.out_valid         (crosser_002_out_valid),                                   //              .valid
		.out_startofpacket (crosser_002_out_startofpacket),                           //              .startofpacket
		.out_endofpacket   (crosser_002_out_endofpacket),                             //              .endofpacket
		.out_channel       (crosser_002_out_channel),                                 //              .channel
		.out_data          (crosser_002_out_data),                                    //              .data
		.in_empty          (1'b0),                                                    //   (terminated)
		.in_error          (1'b0),                                                    //   (terminated)
		.out_empty         (),                                                        //   (terminated)
		.out_error         ()                                                         //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (104),
		.BITS_PER_SYMBOL     (104),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (7),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_003 (
		.in_clk            (altpll_0_c0_clk),                                         //        in_clk.clk
		.in_reset          (performance_counter_0_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                           //       out_clk.clk
		.out_reset         (shared_ocm_mutex_reset_reset_bridge_in_reset_reset),      // out_clk_reset.reset
		.in_ready          (cmd_demux_004_src1_ready),                                //            in.ready
		.in_valid          (cmd_demux_004_src1_valid),                                //              .valid
		.in_startofpacket  (cmd_demux_004_src1_startofpacket),                        //              .startofpacket
		.in_endofpacket    (cmd_demux_004_src1_endofpacket),                          //              .endofpacket
		.in_channel        (cmd_demux_004_src1_channel),                              //              .channel
		.in_data           (cmd_demux_004_src1_data),                                 //              .data
		.out_ready         (crosser_003_out_ready),                                   //           out.ready
		.out_valid         (crosser_003_out_valid),                                   //              .valid
		.out_startofpacket (crosser_003_out_startofpacket),                           //              .startofpacket
		.out_endofpacket   (crosser_003_out_endofpacket),                             //              .endofpacket
		.out_channel       (crosser_003_out_channel),                                 //              .channel
		.out_data          (crosser_003_out_data),                                    //              .data
		.in_empty          (1'b0),                                                    //   (terminated)
		.in_error          (1'b0),                                                    //   (terminated)
		.out_empty         (),                                                        //   (terminated)
		.out_error         ()                                                         //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (104),
		.BITS_PER_SYMBOL     (104),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (7),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_004 (
		.in_clk            (altpll_0_c0_clk),                                         //        in_clk.clk
		.in_reset          (performance_counter_0_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                           //       out_clk.clk
		.out_reset         (shared_ocm_mutex_reset_reset_bridge_in_reset_reset),      // out_clk_reset.reset
		.in_ready          (cmd_demux_005_src1_ready),                                //            in.ready
		.in_valid          (cmd_demux_005_src1_valid),                                //              .valid
		.in_startofpacket  (cmd_demux_005_src1_startofpacket),                        //              .startofpacket
		.in_endofpacket    (cmd_demux_005_src1_endofpacket),                          //              .endofpacket
		.in_channel        (cmd_demux_005_src1_channel),                              //              .channel
		.in_data           (cmd_demux_005_src1_data),                                 //              .data
		.out_ready         (crosser_004_out_ready),                                   //           out.ready
		.out_valid         (crosser_004_out_valid),                                   //              .valid
		.out_startofpacket (crosser_004_out_startofpacket),                           //              .startofpacket
		.out_endofpacket   (crosser_004_out_endofpacket),                             //              .endofpacket
		.out_channel       (crosser_004_out_channel),                                 //              .channel
		.out_data          (crosser_004_out_data),                                    //              .data
		.in_empty          (1'b0),                                                    //   (terminated)
		.in_error          (1'b0),                                                    //   (terminated)
		.out_empty         (),                                                        //   (terminated)
		.out_error         ()                                                         //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (104),
		.BITS_PER_SYMBOL     (104),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (7),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_005 (
		.in_clk            (clk_0_clk_clk),                                      //        in_clk.clk
		.in_reset          (shared_ocm_mutex_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (altpll_0_c0_clk),                                    //       out_clk.clk
		.out_reset         (manager_reset_reset_bridge_in_reset_reset),          // out_clk_reset.reset
		.in_ready          (rsp_demux_005_src0_ready),                           //            in.ready
		.in_valid          (rsp_demux_005_src0_valid),                           //              .valid
		.in_startofpacket  (rsp_demux_005_src0_startofpacket),                   //              .startofpacket
		.in_endofpacket    (rsp_demux_005_src0_endofpacket),                     //              .endofpacket
		.in_channel        (rsp_demux_005_src0_channel),                         //              .channel
		.in_data           (rsp_demux_005_src0_data),                            //              .data
		.out_ready         (crosser_005_out_ready),                              //           out.ready
		.out_valid         (crosser_005_out_valid),                              //              .valid
		.out_startofpacket (crosser_005_out_startofpacket),                      //              .startofpacket
		.out_endofpacket   (crosser_005_out_endofpacket),                        //              .endofpacket
		.out_channel       (crosser_005_out_channel),                            //              .channel
		.out_data          (crosser_005_out_data),                               //              .data
		.in_empty          (1'b0),                                               //   (terminated)
		.in_error          (1'b0),                                               //   (terminated)
		.out_empty         (),                                                   //   (terminated)
		.out_error         ()                                                    //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (104),
		.BITS_PER_SYMBOL     (104),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (7),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_006 (
		.in_clk            (clk_0_clk_clk),                                           //        in_clk.clk
		.in_reset          (shared_ocm_mutex_reset_reset_bridge_in_reset_reset),      //  in_clk_reset.reset
		.out_clk           (altpll_0_c0_clk),                                         //       out_clk.clk
		.out_reset         (performance_counter_0_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_005_src1_ready),                                //            in.ready
		.in_valid          (rsp_demux_005_src1_valid),                                //              .valid
		.in_startofpacket  (rsp_demux_005_src1_startofpacket),                        //              .startofpacket
		.in_endofpacket    (rsp_demux_005_src1_endofpacket),                          //              .endofpacket
		.in_channel        (rsp_demux_005_src1_channel),                              //              .channel
		.in_data           (rsp_demux_005_src1_data),                                 //              .data
		.out_ready         (crosser_006_out_ready),                                   //           out.ready
		.out_valid         (crosser_006_out_valid),                                   //              .valid
		.out_startofpacket (crosser_006_out_startofpacket),                           //              .startofpacket
		.out_endofpacket   (crosser_006_out_endofpacket),                             //              .endofpacket
		.out_channel       (crosser_006_out_channel),                                 //              .channel
		.out_data          (crosser_006_out_data),                                    //              .data
		.in_empty          (1'b0),                                                    //   (terminated)
		.in_error          (1'b0),                                                    //   (terminated)
		.out_empty         (),                                                        //   (terminated)
		.out_error         ()                                                         //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (104),
		.BITS_PER_SYMBOL     (104),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (7),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_007 (
		.in_clk            (clk_0_clk_clk),                                           //        in_clk.clk
		.in_reset          (shared_ocm_mutex_reset_reset_bridge_in_reset_reset),      //  in_clk_reset.reset
		.out_clk           (altpll_0_c0_clk),                                         //       out_clk.clk
		.out_reset         (performance_counter_0_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_005_src2_ready),                                //            in.ready
		.in_valid          (rsp_demux_005_src2_valid),                                //              .valid
		.in_startofpacket  (rsp_demux_005_src2_startofpacket),                        //              .startofpacket
		.in_endofpacket    (rsp_demux_005_src2_endofpacket),                          //              .endofpacket
		.in_channel        (rsp_demux_005_src2_channel),                              //              .channel
		.in_data           (rsp_demux_005_src2_data),                                 //              .data
		.out_ready         (crosser_007_out_ready),                                   //           out.ready
		.out_valid         (crosser_007_out_valid),                                   //              .valid
		.out_startofpacket (crosser_007_out_startofpacket),                           //              .startofpacket
		.out_endofpacket   (crosser_007_out_endofpacket),                             //              .endofpacket
		.out_channel       (crosser_007_out_channel),                                 //              .channel
		.out_data          (crosser_007_out_data),                                    //              .data
		.in_empty          (1'b0),                                                    //   (terminated)
		.in_error          (1'b0),                                                    //   (terminated)
		.out_empty         (),                                                        //   (terminated)
		.out_error         ()                                                         //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (104),
		.BITS_PER_SYMBOL     (104),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (7),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_008 (
		.in_clk            (clk_0_clk_clk),                                           //        in_clk.clk
		.in_reset          (shared_ocm_mutex_reset_reset_bridge_in_reset_reset),      //  in_clk_reset.reset
		.out_clk           (altpll_0_c0_clk),                                         //       out_clk.clk
		.out_reset         (performance_counter_0_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_005_src3_ready),                                //            in.ready
		.in_valid          (rsp_demux_005_src3_valid),                                //              .valid
		.in_startofpacket  (rsp_demux_005_src3_startofpacket),                        //              .startofpacket
		.in_endofpacket    (rsp_demux_005_src3_endofpacket),                          //              .endofpacket
		.in_channel        (rsp_demux_005_src3_channel),                              //              .channel
		.in_data           (rsp_demux_005_src3_data),                                 //              .data
		.out_ready         (crosser_008_out_ready),                                   //           out.ready
		.out_valid         (crosser_008_out_valid),                                   //              .valid
		.out_startofpacket (crosser_008_out_startofpacket),                           //              .startofpacket
		.out_endofpacket   (crosser_008_out_endofpacket),                             //              .endofpacket
		.out_channel       (crosser_008_out_channel),                                 //              .channel
		.out_data          (crosser_008_out_data),                                    //              .data
		.in_empty          (1'b0),                                                    //   (terminated)
		.in_error          (1'b0),                                                    //   (terminated)
		.out_empty         (),                                                        //   (terminated)
		.out_error         ()                                                         //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (104),
		.BITS_PER_SYMBOL     (104),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (7),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_009 (
		.in_clk            (clk_0_clk_clk),                                           //        in_clk.clk
		.in_reset          (shared_ocm_mutex_reset_reset_bridge_in_reset_reset),      //  in_clk_reset.reset
		.out_clk           (altpll_0_c0_clk),                                         //       out_clk.clk
		.out_reset         (performance_counter_0_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_005_src4_ready),                                //            in.ready
		.in_valid          (rsp_demux_005_src4_valid),                                //              .valid
		.in_startofpacket  (rsp_demux_005_src4_startofpacket),                        //              .startofpacket
		.in_endofpacket    (rsp_demux_005_src4_endofpacket),                          //              .endofpacket
		.in_channel        (rsp_demux_005_src4_channel),                              //              .channel
		.in_data           (rsp_demux_005_src4_data),                                 //              .data
		.out_ready         (crosser_009_out_ready),                                   //           out.ready
		.out_valid         (crosser_009_out_valid),                                   //              .valid
		.out_startofpacket (crosser_009_out_startofpacket),                           //              .startofpacket
		.out_endofpacket   (crosser_009_out_endofpacket),                             //              .endofpacket
		.out_channel       (crosser_009_out_channel),                                 //              .channel
		.out_data          (crosser_009_out_data),                                    //              .data
		.in_empty          (1'b0),                                                    //   (terminated)
		.in_error          (1'b0),                                                    //   (terminated)
		.out_empty         (),                                                        //   (terminated)
		.out_error         ()                                                         //   (terminated)
	);

	system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (altpll_0_c0_clk),                                                // in_clk_0.clk
		.in_rst_0_reset (manager_reset_reset_bridge_in_reset_reset),                      // in_rst_0.reset
		.in_0_data      (manager_jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (manager_jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (manager_jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                                   //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                                  //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                                  //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                                   //         .error
	);

	system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (altpll_0_c0_clk),                                                // in_clk_0.clk
		.in_rst_0_reset (performance_counter_0_reset_reset_bridge_in_reset_reset),        // in_rst_0.reset
		.in_0_data      (performance_counter_0_control_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (performance_counter_0_control_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (performance_counter_0_control_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),                               //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),                              //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),                              //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)                               //         .error
	);

	system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (altpll_0_c0_clk),                                    // in_clk_0.clk
		.in_rst_0_reset (manager_reset_reset_bridge_in_reset_reset),          // in_rst_0.reset
		.in_0_data      (manager_debug_mem_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (manager_debug_mem_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (manager_debug_mem_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),                   //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),                  //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),                  //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)                   //         .error
	);

	system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (altpll_0_c0_clk),                           // in_clk_0.clk
		.in_rst_0_reset (manager_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (shared_ocm_s1_agent_rdata_fifo_src_data),   //     in_0.data
		.in_0_valid     (shared_ocm_s1_agent_rdata_fifo_src_valid),  //         .valid
		.in_0_ready     (shared_ocm_s1_agent_rdata_fifo_src_ready),  //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),          //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),         //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),         //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)          //         .error
	);

	system_mm_interconnect_0_avalon_st_adapter_004 #(
		.inBitsPerSymbol (18),
		.inUsePackets    (0),
		.inDataWidth     (18),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (18),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_004 (
		.in_clk_0_clk   (altpll_0_c0_clk),                           // in_clk_0.clk
		.in_rst_0_reset (manager_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sdram_s1_agent_rdata_fifo_out_data),        //     in_0.data
		.in_0_valid     (sdram_s1_agent_rdata_fifo_out_valid),       //         .valid
		.in_0_ready     (sdram_s1_agent_rdata_fifo_out_ready),       //         .ready
		.out_0_data     (avalon_st_adapter_004_out_0_data),          //    out_0.data
		.out_0_valid    (avalon_st_adapter_004_out_0_valid),         //         .valid
		.out_0_ready    (avalon_st_adapter_004_out_0_ready),         //         .ready
		.out_0_error    (avalon_st_adapter_004_out_0_error)          //         .error
	);

	system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_005 (
		.in_clk_0_clk   (clk_0_clk_clk),                                      // in_clk_0.clk
		.in_rst_0_reset (shared_ocm_mutex_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (shared_ocm_mutex_s1_agent_rdata_fifo_out_data),      //     in_0.data
		.in_0_valid     (shared_ocm_mutex_s1_agent_rdata_fifo_out_valid),     //         .valid
		.in_0_ready     (shared_ocm_mutex_s1_agent_rdata_fifo_out_ready),     //         .ready
		.out_0_data     (avalon_st_adapter_005_out_0_data),                   //    out_0.data
		.out_0_valid    (avalon_st_adapter_005_out_0_valid),                  //         .valid
		.out_0_ready    (avalon_st_adapter_005_out_0_ready),                  //         .ready
		.out_0_error    (avalon_st_adapter_005_out_0_error)                   //         .error
	);

	system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_006 (
		.in_clk_0_clk   (altpll_0_c0_clk),                           // in_clk_0.clk
		.in_rst_0_reset (manager_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (shared_ocm_s2_agent_rdata_fifo_src_data),   //     in_0.data
		.in_0_valid     (shared_ocm_s2_agent_rdata_fifo_src_valid),  //         .valid
		.in_0_ready     (shared_ocm_s2_agent_rdata_fifo_src_ready),  //         .ready
		.out_0_data     (avalon_st_adapter_006_out_0_data),          //    out_0.data
		.out_0_valid    (avalon_st_adapter_006_out_0_valid),         //         .valid
		.out_0_ready    (avalon_st_adapter_006_out_0_ready),         //         .ready
		.out_0_error    (avalon_st_adapter_006_out_0_error)          //         .error
	);

endmodule
